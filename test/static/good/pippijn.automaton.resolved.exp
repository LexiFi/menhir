State 0:
## Known stack suffix:
##
## LR(1) items:
parse_decl' -> . parse_decl [ # ]
## Transitions:
-- On push_scope shift to state 1
-- On parse_decl shift to state 948
## Default reduction:
-- After reading the next token, reduce production push_scope ->

State 1:
## Known stack suffix:
## push_scope
## LR(1) items:
parse_decl -> push_scope . declaration pop_scope EOF [ # ]
## Transitions:
-- On WC_TYPE shift to state 2
-- On TK_TYPEDEF_NAME shift to state 3
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On typeof_type_specifier shift to state 278
-- On typeof_type_name shift to state 252
-- On typeof_declaration_specifier shift to state 280
-- On typedef_type_specifier shift to state 284
-- On typedef_declaration_specifier shift to state 286
-- On type_specifier_nosue shift to state 863
-- On type_specifier shift to state 878
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 884
-- On sue_declaration_specifier shift to state 886
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 627
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list(type_qualifier) shift to state 888
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On default_declaring_list shift to state 894
-- On declaring_list shift to state 902
-- On declaration_specifier_nosue shift to state 910
-- On declaration_specifier shift to state 917
-- On declaration_qualifier_list shift to state 923
-- On declaration shift to state 945
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 664
-- On basic_type_name shift to state 618
-- On basic_declaration_specifier shift to state 666
-- On attr_function_declarator_ shift to state 930
-- On attr_function_declarator shift to state 931
-- On attr_function_declaration shift to state 933
## Reductions:

State 2:
## Known stack suffix:
## WC_TYPE
## LR(1) items:
declaration_specifier_nosue -> WC_TYPE . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_specifier_nosue -> WC_TYPE

State 3:
## Known stack suffix:
## TK_TYPEDEF_NAME
## LR(1) items:
typedef_type_specifier -> TK_TYPEDEF_NAME . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_type_specifier -> TK_TYPEDEF_NAME

State 4:
## Known stack suffix:
## KW_WCHAR_T
## LR(1) items:
basic_type_name -> KW_WCHAR_T . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_WCHAR_T

State 5:
## Known stack suffix:
## KW_VOLATILE
## LR(1) items:
type_qualifier -> KW_VOLATILE . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qualifier -> KW_VOLATILE

State 6:
## Known stack suffix:
## KW_VOID
## LR(1) items:
basic_type_name -> KW_VOID . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_VOID

State 7:
## Known stack suffix:
## KW_VA_LIST
## LR(1) items:
basic_type_name -> KW_VA_LIST . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_VA_LIST

State 8:
## Known stack suffix:
## KW_UNSIGNED
## LR(1) items:
basic_type_name -> KW_UNSIGNED . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_UNSIGNED

State 9:
## Known stack suffix:
## KW_UNION
## LR(1) items:
struct_or_union -> KW_UNION . [ TK_TYPEDEF_NAME TK_LBRACE TK_IDENTIFIER KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_or_union -> KW_UNION

State 10:
## Known stack suffix:
## KW_TYPEOF
## LR(1) items:
typeof_type_name -> KW_TYPEOF . TK_LBRACK type_specifier TK_RBRACK [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
typeof_type_name -> KW_TYPEOF . TK_LBRACK expression TK_RBRACK [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACK shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## KW_TYPEOF TK_LBRACK
## LR(1) items:
typeof_type_name -> KW_TYPEOF TK_LBRACK . type_specifier TK_RBRACK [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
typeof_type_name -> KW_TYPEOF TK_LBRACK . expression TK_RBRACK [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TYPEDEF_NAME shift to state 3
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_VA_ARG shift to state 41
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIZEOF shift to state 71
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_IMAG shift to state 79
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTENSION shift to state 80
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On typeof_type_specifier shift to state 250
-- On typeof_type_name shift to state 252
-- On typedef_type_specifier shift to state 253
-- On type_specifier_nosue shift to state 255
-- On type_specifier shift to state 940
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 576
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(type_qualifier) shift to state 942
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 943
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On datatype_specifier shift to state 612
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On basic_type_specifier shift to state 615
-- On basic_type_name shift to state 618
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 12:
## Known stack suffix:
## WC_EXPR
## LR(1) items:
primary_expression -> WC_EXPR . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> WC_EXPR

State 13:
## Known stack suffix:
## TK_WSTRING_LITERAL
## LR(1) items:
simple_string_literal -> TK_WSTRING_LITERAL . [ TK_WSTRING_LITERAL TK_STRING_LITERAL TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_string_literal -> TK_WSTRING_LITERAL

State 14:
## Known stack suffix:
## TK_WCHAR_CONSTANT
## LR(1) items:
numeric_literal -> TK_WCHAR_CONSTANT . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> TK_WCHAR_CONSTANT

State 15:
## Known stack suffix:
## TK_TILDE
## LR(1) items:
unary_operator -> TK_TILDE . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> TK_TILDE

State 16:
## Known stack suffix:
## TK_STRING_LITERAL
## LR(1) items:
simple_string_literal -> TK_STRING_LITERAL . [ TK_WSTRING_LITERAL TK_STRING_LITERAL TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_string_literal -> TK_STRING_LITERAL

State 17:
## Known stack suffix:
## TK_STAR
## LR(1) items:
unary_operator -> TK_STAR . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> TK_STAR

State 18:
## Known stack suffix:
## TK_PLUS
## LR(1) items:
unary_operator -> TK_PLUS . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> TK_PLUS

State 19:
## Known stack suffix:
## TK_OCTAL_CONSTANT
## LR(1) items:
numeric_literal -> TK_OCTAL_CONSTANT . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> TK_OCTAL_CONSTANT

State 20:
## Known stack suffix:
## TK_MINUS
## LR(1) items:
unary_operator -> TK_MINUS . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> TK_MINUS

State 21:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
cast_expression -> TK_LBRACK . type_name TK_RBRACK cast_expression [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> TK_LBRACK . type_name TK_RBRACK bracketed_initialiser_list [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
primary_expression -> TK_LBRACK . expression TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
statement_expression -> TK_LBRACK . compound_statement TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On type_name shift to state 937
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 724
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 726
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 22:
## Known stack suffix:
## TK_LBRACE
## LR(1) items:
compound_statement -> TK_LBRACE . push_scope list(statement_or_declaration) pop_scope TK_RBRACE [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACK TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On push_scope shift to state 23
## Default reduction:
-- After reading the next token, reduce production push_scope ->

State 23:
## Known stack suffix:
## TK_LBRACE push_scope
## LR(1) items:
compound_statement -> TK_LBRACE push_scope . list(statement_or_declaration) pop_scope TK_RBRACE [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACK TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On list_rev(statement_or_declaration) shift to state 24
-- On list(statement_or_declaration) shift to state 934
## Default reduction:
-- After reading the next token, reduce production list_rev(statement_or_declaration) ->

State 24:
## Known stack suffix:
## list_rev(statement_or_declaration)
## LR(1) items:
list(statement_or_declaration) -> list_rev(statement_or_declaration) . [ TK_RBRACE ]
list_rev(statement_or_declaration) -> list_rev(statement_or_declaration) . statement_or_declaration [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 858
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_or_declaration shift to state 859
-- On statement_noexpr shift to state 834
-- On statement_expression shift to state 87
-- On statement shift to state 860
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On selection_statement shift to state 841
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 842
-- On option(KW_EXTENSION) shift to state 861
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression_statement shift to state 847
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 848
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On asm_statement shift to state 849
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On WC_TYPE reduce production option(KW_EXTENSION) ->
-- On TK_TYPEDEF_NAME reduce production option(KW_EXTENSION) ->
-- On TK_SEMICOLON reduce production option(expression) ->
-- On TK_RBRACE reduce production list(statement_or_declaration) -> list_rev(statement_or_declaration)
-- On KW_WCHAR_T reduce production option(KW_EXTENSION) ->
-- On KW_VOLATILE reduce production option(KW_EXTENSION) ->
-- On KW_VOID reduce production option(KW_EXTENSION) ->
-- On KW_VA_LIST reduce production option(KW_EXTENSION) ->
-- On KW_UNSIGNED reduce production option(KW_EXTENSION) ->
-- On KW_UNION reduce production option(KW_EXTENSION) ->
-- On KW_TYPEOF reduce production option(KW_EXTENSION) ->
-- On KW_TYPEDEF reduce production option(KW_EXTENSION) ->
-- On KW_THREAD reduce production option(KW_EXTENSION) ->
-- On KW_STRUCT reduce production option(KW_EXTENSION) ->
-- On KW_STATIC reduce production option(KW_EXTENSION) ->
-- On KW_SIGNED reduce production option(KW_EXTENSION) ->
-- On KW_SHORT reduce production option(KW_EXTENSION) ->
-- On KW_RESTRICT reduce production option(KW_EXTENSION) ->
-- On KW_REGISTER reduce production option(KW_EXTENSION) ->
-- On KW_LONG reduce production option(KW_EXTENSION) ->
-- On KW_INTN reduce production option(KW_EXTENSION) ->
-- On KW_INT reduce production option(KW_EXTENSION) ->
-- On KW_INLINE reduce production option(KW_EXTENSION) ->
-- On KW_FLOATN reduce production option(KW_EXTENSION) ->
-- On KW_FLOAT reduce production option(KW_EXTENSION) ->
-- On KW_FASTCALL reduce production option(KW_EXTENSION) ->
-- On KW_EXTERN reduce production option(KW_EXTENSION) ->
-- On KW_ENUM reduce production option(KW_EXTENSION) ->
-- On KW_DOUBLE reduce production option(KW_EXTENSION) ->
-- On KW_DECLSPEC reduce production option(KW_EXTENSION) ->
-- On KW_DECIMALN reduce production option(KW_EXTENSION) ->
-- On KW_DATATYPE reduce production option(KW_EXTENSION) ->
-- On KW_CONST reduce production option(KW_EXTENSION) ->
-- On KW_COMPLEX reduce production option(KW_EXTENSION) ->
-- On KW_CHAR reduce production option(KW_EXTENSION) ->
-- On KW_BOOL reduce production option(KW_EXTENSION) ->
-- On KW_AUTO reduce production option(KW_EXTENSION) ->
-- On KW_ATTRIBUTE reduce production option(KW_EXTENSION) ->

State 25:
## Known stack suffix:
## TK_INTEGER_CONSTANT
## LR(1) items:
numeric_literal -> TK_INTEGER_CONSTANT . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> TK_INTEGER_CONSTANT

State 26:
## Known stack suffix:
## TK_INC
## LR(1) items:
unary_prefix_operator -> TK_INC . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_prefix_operator -> TK_INC

State 27:
## Known stack suffix:
## TK_IDENTIFIER
## LR(1) items:
identifier -> TK_IDENTIFIER . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_DEC TK_COMMA TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND ]
labelled_statement -> TK_IDENTIFIER . TK_COLON statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_COLON shift to state 28
## Reductions:
-- On TK_STAR_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_STAR reduce production identifier -> TK_IDENTIFIER
-- On TK_SLASH_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_SLASH reduce production identifier -> TK_IDENTIFIER
-- On TK_SEMICOLON reduce production identifier -> TK_IDENTIFIER
-- On TK_QMARK reduce production identifier -> TK_IDENTIFIER
-- On TK_PLUS_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_PLUS reduce production identifier -> TK_IDENTIFIER
-- On TK_PIPE_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_PIPEPIPE reduce production identifier -> TK_IDENTIFIER
-- On TK_PIPE reduce production identifier -> TK_IDENTIFIER
-- On TK_PERIOD reduce production identifier -> TK_IDENTIFIER
-- On TK_PERCENT_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_PERCENT reduce production identifier -> TK_IDENTIFIER
-- On TK_NE reduce production identifier -> TK_IDENTIFIER
-- On TK_MINUS_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_MINUS reduce production identifier -> TK_IDENTIFIER
-- On TK_LTLT_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_LTLT reduce production identifier -> TK_IDENTIFIER
-- On TK_LSQBRACK reduce production identifier -> TK_IDENTIFIER
-- On TK_LESS_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_LESS reduce production identifier -> TK_IDENTIFIER
-- On TK_LBRACK reduce production identifier -> TK_IDENTIFIER
-- On TK_INC reduce production identifier -> TK_IDENTIFIER
-- On TK_GTGT_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_GTGT reduce production identifier -> TK_IDENTIFIER
-- On TK_GREATER_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_GREATER reduce production identifier -> TK_IDENTIFIER
-- On TK_EQUALS reduce production identifier -> TK_IDENTIFIER
-- On TK_EQEQ reduce production identifier -> TK_IDENTIFIER
-- On TK_DEC reduce production identifier -> TK_IDENTIFIER
-- On TK_COMMA reduce production identifier -> TK_IDENTIFIER
-- On TK_CARET_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_CARET reduce production identifier -> TK_IDENTIFIER
-- On TK_ARROW reduce production identifier -> TK_IDENTIFIER
-- On TK_AND_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_ANDAND reduce production identifier -> TK_IDENTIFIER
-- On TK_AND reduce production identifier -> TK_IDENTIFIER

State 28:
## Known stack suffix:
## TK_IDENTIFIER TK_COLON
## LR(1) items:
labelled_statement -> TK_IDENTIFIER TK_COLON . statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 834
-- On statement_expression shift to state 87
-- On statement shift to state 857
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On selection_statement shift to state 841
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 842
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression_statement shift to state 847
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 848
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On asm_statement shift to state 849
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 29:
## Known stack suffix:
## TK_HEX_FLOATING_CONSTANT
## LR(1) items:
numeric_literal -> TK_HEX_FLOATING_CONSTANT . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> TK_HEX_FLOATING_CONSTANT

State 30:
## Known stack suffix:
## TK_HEX_CONSTANT
## LR(1) items:
numeric_literal -> TK_HEX_CONSTANT . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> TK_HEX_CONSTANT

State 31:
## Known stack suffix:
## TK_FLOATING_CONSTANT
## LR(1) items:
numeric_literal -> TK_FLOATING_CONSTANT . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> TK_FLOATING_CONSTANT

State 32:
## Known stack suffix:
## TK_EXMARK
## LR(1) items:
unary_operator -> TK_EXMARK . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> TK_EXMARK

State 33:
## Known stack suffix:
## TK_DEC
## LR(1) items:
unary_prefix_operator -> TK_DEC . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_prefix_operator -> TK_DEC

State 34:
## Known stack suffix:
## TK_CHAR_CONSTANT
## LR(1) items:
numeric_literal -> TK_CHAR_CONSTANT . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> TK_CHAR_CONSTANT

State 35:
## Known stack suffix:
## TK_BIN_CONSTANT
## LR(1) items:
numeric_literal -> TK_BIN_CONSTANT . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> TK_BIN_CONSTANT

State 36:
## Known stack suffix:
## TK_ANDAND
## LR(1) items:
unary_operator -> TK_ANDAND . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> TK_ANDAND

State 37:
## Known stack suffix:
## TK_AND
## LR(1) items:
unary_operator -> TK_AND . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> TK_AND

State 38:
## Known stack suffix:
## KW_WHILE
## LR(1) items:
iteration_statement -> KW_WHILE . TK_LBRACK expression TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_LBRACK shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## KW_WHILE TK_LBRACK
## LR(1) items:
iteration_statement -> KW_WHILE TK_LBRACK . expression TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 742
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 40:
## Known stack suffix:
## TK_IDENTIFIER
## LR(1) items:
identifier -> TK_IDENTIFIER . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> TK_IDENTIFIER

State 41:
## Known stack suffix:
## KW_VA_ARG
## LR(1) items:
postfix_expression -> KW_VA_ARG . TK_LBRACK assignment_expression TK_COMMA type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACK shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## KW_VA_ARG TK_LBRACK
## LR(1) items:
postfix_expression -> KW_VA_ARG TK_LBRACK . assignment_expression TK_COMMA type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 738
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 43:
## Known stack suffix:
## KW_TYPES_COMPATIBLE_P
## LR(1) items:
postfix_expression -> KW_TYPES_COMPATIBLE_P . TK_LBRACK type_name TK_COMMA type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACK shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## KW_TYPES_COMPATIBLE_P TK_LBRACK
## LR(1) items:
postfix_expression -> KW_TYPES_COMPATIBLE_P TK_LBRACK . type_name TK_COMMA type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On type_name shift to state 45
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 45:
## Known stack suffix:
## KW_TYPES_COMPATIBLE_P TK_LBRACK type_name
## LR(1) items:
postfix_expression -> KW_TYPES_COMPATIBLE_P TK_LBRACK type_name . TK_COMMA type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_COMMA shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## KW_TYPES_COMPATIBLE_P TK_LBRACK type_name TK_COMMA
## LR(1) items:
postfix_expression -> KW_TYPES_COMPATIBLE_P TK_LBRACK type_name TK_COMMA . type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On type_name shift to state 47
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 47:
## Known stack suffix:
## KW_TYPES_COMPATIBLE_P TK_LBRACK type_name TK_COMMA type_name
## LR(1) items:
postfix_expression -> KW_TYPES_COMPATIBLE_P TK_LBRACK type_name TK_COMMA type_name . TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## KW_TYPES_COMPATIBLE_P TK_LBRACK type_name TK_COMMA type_name TK_RBRACK
## LR(1) items:
postfix_expression -> KW_TYPES_COMPATIBLE_P TK_LBRACK type_name TK_COMMA type_name TK_RBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> KW_TYPES_COMPATIBLE_P TK_LBRACK type_name TK_COMMA type_name TK_RBRACK

State 49:
## Known stack suffix:
## list_rev(attribute)
## LR(1) items:
list(attribute) -> list_rev(attribute) . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO EOF ]
list_rev(attribute) -> list_rev(attribute) . attribute [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On KW_FASTCALL shift to state 50
-- On KW_DECLSPEC shift to state 51
-- On KW_ATTRIBUTE shift to state 329
-- On attribute shift to state 737
## Reductions:
-- On WC_TYPE reduce production list(attribute) -> list_rev(attribute)
-- On WC_DECL reduce production list(attribute) -> list_rev(attribute)
-- On TK_TYPEDEF_NAME reduce production list(attribute) -> list_rev(attribute)
-- On TK_STAR reduce production list(attribute) -> list_rev(attribute)
-- On TK_SEMICOLON reduce production list(attribute) -> list_rev(attribute)
-- On TK_RBRACK reduce production list(attribute) -> list_rev(attribute)
-- On TK_LSQBRACK reduce production list(attribute) -> list_rev(attribute)
-- On TK_LBRACK reduce production list(attribute) -> list_rev(attribute)
-- On TK_LBRACE reduce production list(attribute) -> list_rev(attribute)
-- On TK_IDENTIFIER reduce production list(attribute) -> list_rev(attribute)
-- On TK_EQUALS reduce production list(attribute) -> list_rev(attribute)
-- On TK_COMMA reduce production list(attribute) -> list_rev(attribute)
-- On TK_COLON reduce production list(attribute) -> list_rev(attribute)
-- On KW_WCHAR_T reduce production list(attribute) -> list_rev(attribute)
-- On KW_VOLATILE reduce production list(attribute) -> list_rev(attribute)
-- On KW_VOID reduce production list(attribute) -> list_rev(attribute)
-- On KW_VA_LIST reduce production list(attribute) -> list_rev(attribute)
-- On KW_UNSIGNED reduce production list(attribute) -> list_rev(attribute)
-- On KW_UNION reduce production list(attribute) -> list_rev(attribute)
-- On KW_TYPEOF reduce production list(attribute) -> list_rev(attribute)
-- On KW_TYPEDEF reduce production list(attribute) -> list_rev(attribute)
-- On KW_THREAD reduce production list(attribute) -> list_rev(attribute)
-- On KW_STRUCT reduce production list(attribute) -> list_rev(attribute)
-- On KW_STATIC reduce production list(attribute) -> list_rev(attribute)
-- On KW_SIGNED reduce production list(attribute) -> list_rev(attribute)
-- On KW_SHORT reduce production list(attribute) -> list_rev(attribute)
-- On KW_RESTRICT reduce production list(attribute) -> list_rev(attribute)
-- On KW_REGISTER reduce production list(attribute) -> list_rev(attribute)
-- On KW_LONG reduce production list(attribute) -> list_rev(attribute)
-- On KW_INTN reduce production list(attribute) -> list_rev(attribute)
-- On KW_INT reduce production list(attribute) -> list_rev(attribute)
-- On KW_INLINE reduce production list(attribute) -> list_rev(attribute)
-- On KW_FLOATN reduce production list(attribute) -> list_rev(attribute)
-- On KW_FLOAT reduce production list(attribute) -> list_rev(attribute)
-- On KW_EXTERN reduce production list(attribute) -> list_rev(attribute)
-- On KW_EXTENSION reduce production list(attribute) -> list_rev(attribute)
-- On KW_ENUM reduce production list(attribute) -> list_rev(attribute)
-- On KW_DOUBLE reduce production list(attribute) -> list_rev(attribute)
-- On KW_DECIMALN reduce production list(attribute) -> list_rev(attribute)
-- On KW_DATATYPE reduce production list(attribute) -> list_rev(attribute)
-- On KW_CONST reduce production list(attribute) -> list_rev(attribute)
-- On KW_COMPLEX reduce production list(attribute) -> list_rev(attribute)
-- On KW_CHAR reduce production list(attribute) -> list_rev(attribute)
-- On KW_BOOL reduce production list(attribute) -> list_rev(attribute)
-- On KW_AUTO reduce production list(attribute) -> list_rev(attribute)
-- On EOF reduce production list(attribute) -> list_rev(attribute)

State 50:
## Known stack suffix:
## KW_FASTCALL
## LR(1) items:
attribute -> KW_FASTCALL . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute -> KW_FASTCALL

State 51:
## Known stack suffix:
## KW_DECLSPEC
## LR(1) items:
attribute -> KW_DECLSPEC . TK_LBRACK sep(TK_COMMA,attrib) TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACK shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## KW_DECLSPEC TK_LBRACK
## LR(1) items:
attribute -> KW_DECLSPEC TK_LBRACK . sep(TK_COMMA,attrib) TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On KW_ATTR_WEAKREF shift to state 53
-- On KW_ATTR_WEAK shift to state 54
-- On KW_ATTR_WARN_UNUSED_RESULT shift to state 55
-- On KW_ATTR_VLIW shift to state 56
-- On KW_ATTR_VISIBILITY shift to state 57
-- On KW_ATTR_VERSION_ID shift to state 68
-- On KW_ATTR_VECTOR_SIZE shift to state 69
-- On KW_ATTR_USED shift to state 332
-- On KW_ATTR_UNUSED shift to state 333
-- On KW_ATTR_TRAP_EXIT shift to state 334
-- On KW_ATTR_TRANSPARENT_UNION shift to state 335
-- On KW_ATTR_TLS_MODEL shift to state 336
-- On KW_ATTR_TINY_DATA shift to state 337
-- On KW_ATTR_TINY shift to state 338
-- On KW_ATTR_THISCALL shift to state 339
-- On KW_ATTR_TARGET shift to state 340
-- On KW_ATTR_SYSV_ABI shift to state 342
-- On KW_ATTR_SYSCALL_LINKAGE shift to state 343
-- On KW_ATTR_STDCALL shift to state 344
-- On KW_ATTR_SSEREGPARM shift to state 345
-- On KW_ATTR_SP_SWITCH shift to state 346
-- On KW_ATTR_SPU_VECTOR shift to state 347
-- On KW_ATTR_SIGNAL shift to state 348
-- On KW_ATTR_SHORT_CALL shift to state 349
-- On KW_ATTR_SHORTCALL shift to state 350
-- On KW_ATTR_SHARED shift to state 351
-- On KW_ATTR_SENTINEL shift to state 352
-- On KW_ATTR_SELECTANY shift to state 353
-- On KW_ATTR_SECTION shift to state 354
-- On KW_ATTR_SAVE_VOLATILES shift to state 356
-- On KW_ATTR_SAVEALL shift to state 357
-- On KW_ATTR_RETURNS_TWICE shift to state 358
-- On KW_ATTR_RESBANK shift to state 359
-- On KW_ATTR_REGPARM shift to state 360
-- On KW_ATTR_PURE shift to state 367
-- On KW_ATTR_PROGMEM shift to state 368
-- On KW_ATTR_PCS shift to state 369
-- On KW_ATTR_PACKED shift to state 370
-- On KW_ATTR_OS_TASK shift to state 371
-- On KW_ATTR_OS_MAIN shift to state 372
-- On KW_ATTR_OPTIMIZE shift to state 373
-- On KW_ATTR_NO_SPLIT_STACK shift to state 379
-- On KW_ATTR_NO_INSTRUMENT_FUNCTION shift to state 380
-- On KW_ATTR_NOTSHARED shift to state 381
-- On KW_ATTR_NOTHROW shift to state 382
-- On KW_ATTR_NORETURN shift to state 383
-- On KW_ATTR_NONNULL shift to state 384
-- On KW_ATTR_NOMIPS16 shift to state 395
-- On KW_ATTR_NOINLINE shift to state 396
-- On KW_ATTR_NOCOMMON shift to state 397
-- On KW_ATTR_NOCLONE shift to state 398
-- On KW_ATTR_NMI_HANDLER shift to state 399
-- On KW_ATTR_NESTING shift to state 400
-- On KW_ATTR_NEAR shift to state 401
-- On KW_ATTR_NAKED shift to state 402
-- On KW_ATTR_MS_STRUCT shift to state 403
-- On KW_ATTR_MS_HOOK_PROLOGUE shift to state 404
-- On KW_ATTR_MS_ABI shift to state 405
-- On KW_ATTR_MODEL shift to state 406
-- On KW_ATTR_MODE shift to state 407
-- On KW_ATTR_MIPS16 shift to state 414
-- On KW_ATTR_MAY_ALIAS shift to state 415
-- On KW_ATTR_MALLOC shift to state 416
-- On KW_ATTR_LONG_CALL shift to state 417
-- On KW_ATTR_LONGCALL shift to state 418
-- On KW_ATTR_LEAF shift to state 419
-- On KW_ATTR_L2 shift to state 420
-- On KW_ATTR_L1_TEXT shift to state 421
-- On KW_ATTR_L1_DATA_B shift to state 422
-- On KW_ATTR_L1_DATA_A shift to state 423
-- On KW_ATTR_L1_DATA shift to state 424
-- On KW_ATTR_KSPISUSP shift to state 425
-- On KW_ATTR_ISR shift to state 426
-- On KW_ATTR_IO shift to state 427
-- On KW_ATTR_INTERRUPT_THREAD shift to state 428
-- On KW_ATTR_INTERRUPT_HANDLER shift to state 429
-- On KW_ATTR_INTERRUPT shift to state 430
-- On KW_ATTR_IFUNC shift to state 432
-- On KW_ATTR_HOT shift to state 433
-- On KW_ATTR_GNU_INLINE shift to state 434
-- On KW_ATTR_GCC_STRUCT shift to state 435
-- On KW_ATTR_FUNCTION_VECTOR shift to state 436
-- On KW_ATTR_FORMAT_ARG shift to state 437
-- On KW_ATTR_FORMAT shift to state 439
-- On KW_ATTR_FORCE_ALIGN_ARG_POINTER shift to state 447
-- On KW_ATTR_FLATTEN shift to state 448
-- On KW_ATTR_FAST_INTERRUPT shift to state 449
-- On KW_ATTR_FASTCALL shift to state 450
-- On KW_ATTR_FAR shift to state 451
-- On KW_ATTR_EXTERNALLY_VISIBLE shift to state 452
-- On KW_ATTR_EXCEPTION_HANDLER shift to state 453
-- On KW_ATTR_EIGHTBIT_DATA shift to state 454
-- On KW_ATTR_DLLIMPORT shift to state 455
-- On KW_ATTR_DLLEXPORT shift to state 456
-- On KW_ATTR_DISINTERRUPT shift to state 457
-- On KW_ATTR_DESTRUCTOR shift to state 458
-- On KW_ATTR_DEPRECATED shift to state 459
-- On KW_ATTR_CONSTRUCTOR shift to state 460
-- On KW_ATTR_CONST shift to state 461
-- On KW_ATTR_COMMON shift to state 462
-- On KW_ATTR_COLD shift to state 463
-- On KW_ATTR_CLEANUP shift to state 464
-- On KW_ATTR_CDECL shift to state 466
-- On KW_ATTR_CB shift to state 467
-- On KW_ATTR_CALLEE_POP_AGGREGATE_RETURN shift to state 468
-- On KW_ATTR_BELOW100 shift to state 470
-- On KW_ATTR_BASED shift to state 471
-- On KW_ATTR_BACK_SWITCH shift to state 472
-- On KW_ATTR_ARTIFICIAL shift to state 473
-- On KW_ATTR_ALWAYS_INLINE shift to state 474
-- On KW_ATTR_ALTIVEC shift to state 475
-- On KW_ATTR_ALLOC_SIZE shift to state 476
-- On KW_ATTR_ALIGNED shift to state 478
-- On KW_ATTR_ALIAS shift to state 481
-- On sep_rev(TK_COMMA,attrib) shift to state 483
-- On sep(TK_COMMA,attrib) shift to state 735
-- On attrib shift to state 490
## Reductions:

State 53:
## Known stack suffix:
## KW_ATTR_WEAKREF
## LR(1) items:
attrib -> KW_ATTR_WEAKREF . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_WEAKREF

State 54:
## Known stack suffix:
## KW_ATTR_WEAK
## LR(1) items:
attrib -> KW_ATTR_WEAK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_WEAK

State 55:
## Known stack suffix:
## KW_ATTR_WARN_UNUSED_RESULT
## LR(1) items:
attrib -> KW_ATTR_WARN_UNUSED_RESULT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_WARN_UNUSED_RESULT

State 56:
## Known stack suffix:
## KW_ATTR_VLIW
## LR(1) items:
attrib -> KW_ATTR_VLIW . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_VLIW

State 57:
## Known stack suffix:
## KW_ATTR_VISIBILITY
## LR(1) items:
attrib -> KW_ATTR_VISIBILITY . paren(string_literal) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 58
-- On paren(string_literal) shift to state 67
## Reductions:

State 58:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
paren(string_literal) -> TK_LBRACK . string_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
paren(string_literal) -> TK_LBRACK . paren(string_literal) TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_STRING_LITERAL shift to state 16
-- On TK_LBRACK shift to state 58
-- On string_literal shift to state 59
-- On simple_string_literal shift to state 61
-- On paren(string_literal) shift to state 62
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
## Reductions:

State 59:
## Known stack suffix:
## TK_LBRACK string_literal
## LR(1) items:
paren(string_literal) -> TK_LBRACK string_literal . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## TK_LBRACK string_literal TK_RBRACK
## LR(1) items:
paren(string_literal) -> TK_LBRACK string_literal TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren(string_literal) -> TK_LBRACK string_literal TK_RBRACK

State 61:
## Known stack suffix:
## simple_string_literal
## LR(1) items:
nonempty_list_rev(simple_string_literal) -> simple_string_literal . [ TK_WSTRING_LITERAL TK_STRING_LITERAL TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(simple_string_literal) -> simple_string_literal

State 62:
## Known stack suffix:
## TK_LBRACK paren(string_literal)
## LR(1) items:
paren(string_literal) -> TK_LBRACK paren(string_literal) . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## TK_LBRACK paren(string_literal) TK_RBRACK
## LR(1) items:
paren(string_literal) -> TK_LBRACK paren(string_literal) TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren(string_literal) -> TK_LBRACK paren(string_literal) TK_RBRACK

State 64:
## Known stack suffix:
## nonempty_list_rev(simple_string_literal)
## LR(1) items:
nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal) . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
nonempty_list_rev(simple_string_literal) -> nonempty_list_rev(simple_string_literal) . simple_string_literal [ TK_WSTRING_LITERAL TK_STRING_LITERAL TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_STRING_LITERAL shift to state 16
-- On simple_string_literal shift to state 65
## Reductions:
-- On TK_STAR_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_STAR reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_SLASH_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_SLASH reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_SEMICOLON reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_RSQBRACK reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_RBRACK reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_RBRACE reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_QMARK reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_PLUS_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_PLUS reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_PIPE_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_PIPEPIPE reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_PIPE reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_PERIOD reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_PERCENT_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_PERCENT reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_NE reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_MINUS_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_MINUS reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_LTLT_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_LTLT reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_LSQBRACK reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_LESS_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_LESS reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_LBRACK reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_INC reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_GTGT_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_GTGT reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_GREATER_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_GREATER reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_EQUALS reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_EQEQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_ELLIPSIS reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_DEC reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_COMMA reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_COLON reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_CARET_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_CARET reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_ARROW reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_AND_EQ reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_ANDAND reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On TK_AND reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On KW_FASTCALL reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On KW_DECLSPEC reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On KW_ATTRIBUTE reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)
-- On EOF reduce production nonempty_list(simple_string_literal) -> nonempty_list_rev(simple_string_literal)

State 65:
## Known stack suffix:
## nonempty_list_rev(simple_string_literal) simple_string_literal
## LR(1) items:
nonempty_list_rev(simple_string_literal) -> nonempty_list_rev(simple_string_literal) simple_string_literal . [ TK_WSTRING_LITERAL TK_STRING_LITERAL TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(simple_string_literal) -> nonempty_list_rev(simple_string_literal) simple_string_literal

State 66:
## Known stack suffix:
## nonempty_list(simple_string_literal)
## LR(1) items:
string_literal -> nonempty_list(simple_string_literal) . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_literal -> nonempty_list(simple_string_literal)

State 67:
## Known stack suffix:
## KW_ATTR_VISIBILITY paren(string_literal)
## LR(1) items:
attrib -> KW_ATTR_VISIBILITY paren(string_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_VISIBILITY paren(string_literal)

State 68:
## Known stack suffix:
## KW_ATTR_VERSION_ID
## LR(1) items:
attrib -> KW_ATTR_VERSION_ID . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_VERSION_ID

State 69:
## Known stack suffix:
## KW_ATTR_VECTOR_SIZE
## LR(1) items:
attrib -> KW_ATTR_VECTOR_SIZE . TK_LBRACK assignment_expression TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## KW_ATTR_VECTOR_SIZE TK_LBRACK
## LR(1) items:
attrib -> KW_ATTR_VECTOR_SIZE TK_LBRACK . assignment_expression TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 733
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 71:
## Known stack suffix:
## KW_SIZEOF
## LR(1) items:
unary_expression -> KW_SIZEOF . unary_expression [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
unary_expression -> KW_SIZEOF . TK_LBRACK type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 72
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 732
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On identifier shift to state 106
## Reductions:

State 72:
## Known stack suffix:
## KW_SIZEOF TK_LBRACK
## LR(1) items:
postfix_expression -> TK_LBRACK . type_name TK_RBRACK bracketed_initialiser_list [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
primary_expression -> TK_LBRACK . expression TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
statement_expression -> TK_LBRACK . compound_statement TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
unary_expression -> KW_SIZEOF TK_LBRACK . type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On type_name shift to state 730
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 724
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 726
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 73:
## Known stack suffix:
## KW_REAL
## LR(1) items:
unary_operator -> KW_REAL . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> KW_REAL

State 74:
## Known stack suffix:
## KW_OFFSETOF
## LR(1) items:
postfix_expression -> KW_OFFSETOF . TK_LBRACK type_name TK_COMMA postfix_expression TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACK shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## KW_OFFSETOF TK_LBRACK
## LR(1) items:
postfix_expression -> KW_OFFSETOF TK_LBRACK . type_name TK_COMMA postfix_expression TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On type_name shift to state 76
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 76:
## Known stack suffix:
## KW_OFFSETOF TK_LBRACK type_name
## LR(1) items:
postfix_expression -> KW_OFFSETOF TK_LBRACK type_name . TK_COMMA postfix_expression TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_COMMA shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## KW_OFFSETOF TK_LBRACK type_name TK_COMMA
## LR(1) items:
postfix_expression -> KW_OFFSETOF TK_LBRACK type_name TK_COMMA . postfix_expression TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_STRING_LITERAL shift to state 16
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_LBRACK shift to state 78
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_OFFSETOF shift to state 74
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 728
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On identifier shift to state 106
## Reductions:

State 78:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
postfix_expression -> TK_LBRACK . type_name TK_RBRACK bracketed_initialiser_list [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
primary_expression -> TK_LBRACK . expression TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
statement_expression -> TK_LBRACK . compound_statement TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On type_name shift to state 690
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 724
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 726
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 79:
## Known stack suffix:
## KW_IMAG
## LR(1) items:
unary_operator -> KW_IMAG . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> KW_IMAG

State 80:
## Known stack suffix:
## KW_EXTENSION
## LR(1) items:
unary_expression -> KW_EXTENSION . cast_expression [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On identifier shift to state 106
-- On cast_expression shift to state 689
## Reductions:

State 81:
## Known stack suffix:
## KW_ALIGNOF
## LR(1) items:
unary_expression -> KW_ALIGNOF . TK_LBRACK unary_expression TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
unary_expression -> KW_ALIGNOF . TK_LBRACK type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACK shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## KW_ALIGNOF TK_LBRACK
## LR(1) items:
unary_expression -> KW_ALIGNOF TK_LBRACK . unary_expression TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
unary_expression -> KW_ALIGNOF TK_LBRACK . type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 78
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 187
-- On type_name shift to state 189
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
-- On identifier shift to state 106
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 83:
## Known stack suffix:
## unary_prefix_operator
## LR(1) items:
unary_expression -> unary_prefix_operator . unary_expression [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 78
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 186
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On identifier shift to state 106
## Reductions:

State 84:
## Known stack suffix:
## unary_operator
## LR(1) items:
unary_expression -> unary_operator . cast_expression [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On identifier shift to state 106
-- On cast_expression shift to state 185
## Reductions:

State 85:
## Known stack suffix:
## unary_expression
## LR(1) items:
cast_expression -> unary_expression . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cast_expression -> unary_expression

State 86:
## Known stack suffix:
## string_literal
## LR(1) items:
primary_expression -> string_literal . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> string_literal

State 87:
## Known stack suffix:
## statement_expression
## LR(1) items:
primary_expression -> statement_expression . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> statement_expression

State 88:
## Known stack suffix:
## primary_expression
## LR(1) items:
postfix_expression -> primary_expression . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> primary_expression

State 89:
## Known stack suffix:
## postfix_expression
## LR(1) items:
postfix_expression -> postfix_expression . TK_LSQBRACK expression TK_RSQBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> postfix_expression . TK_LBRACK option(sep(TK_COMMA,assignment_expression)) TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> postfix_expression . TK_PERIOD identifier_or_typedef_name [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> postfix_expression . TK_ARROW identifier_or_typedef_name [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> postfix_expression . TK_PERIOD WC_DECL [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> postfix_expression . TK_ARROW WC_DECL [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> postfix_expression . TK_INC [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> postfix_expression . TK_DEC [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
unary_expression -> postfix_expression . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_PERIOD shift to state 90
-- On TK_LSQBRACK shift to state 95
-- On TK_LBRACK shift to state 172
-- On TK_INC shift to state 180
-- On TK_DEC shift to state 181
-- On TK_ARROW shift to state 182
## Reductions:
-- On TK_STAR_EQ reduce production unary_expression -> postfix_expression
-- On TK_STAR reduce production unary_expression -> postfix_expression
-- On TK_SLASH_EQ reduce production unary_expression -> postfix_expression
-- On TK_SLASH reduce production unary_expression -> postfix_expression
-- On TK_SEMICOLON reduce production unary_expression -> postfix_expression
-- On TK_RSQBRACK reduce production unary_expression -> postfix_expression
-- On TK_RBRACK reduce production unary_expression -> postfix_expression
-- On TK_RBRACE reduce production unary_expression -> postfix_expression
-- On TK_QMARK reduce production unary_expression -> postfix_expression
-- On TK_PLUS_EQ reduce production unary_expression -> postfix_expression
-- On TK_PLUS reduce production unary_expression -> postfix_expression
-- On TK_PIPE_EQ reduce production unary_expression -> postfix_expression
-- On TK_PIPEPIPE reduce production unary_expression -> postfix_expression
-- On TK_PIPE reduce production unary_expression -> postfix_expression
-- On TK_PERCENT_EQ reduce production unary_expression -> postfix_expression
-- On TK_PERCENT reduce production unary_expression -> postfix_expression
-- On TK_NE reduce production unary_expression -> postfix_expression
-- On TK_MINUS_EQ reduce production unary_expression -> postfix_expression
-- On TK_MINUS reduce production unary_expression -> postfix_expression
-- On TK_LTLT_EQ reduce production unary_expression -> postfix_expression
-- On TK_LTLT reduce production unary_expression -> postfix_expression
-- On TK_LESS_EQ reduce production unary_expression -> postfix_expression
-- On TK_LESS reduce production unary_expression -> postfix_expression
-- On TK_GTGT_EQ reduce production unary_expression -> postfix_expression
-- On TK_GTGT reduce production unary_expression -> postfix_expression
-- On TK_GREATER_EQ reduce production unary_expression -> postfix_expression
-- On TK_GREATER reduce production unary_expression -> postfix_expression
-- On TK_EQUALS reduce production unary_expression -> postfix_expression
-- On TK_EQEQ reduce production unary_expression -> postfix_expression
-- On TK_ELLIPSIS reduce production unary_expression -> postfix_expression
-- On TK_COMMA reduce production unary_expression -> postfix_expression
-- On TK_COLON reduce production unary_expression -> postfix_expression
-- On TK_CARET_EQ reduce production unary_expression -> postfix_expression
-- On TK_CARET reduce production unary_expression -> postfix_expression
-- On TK_AND_EQ reduce production unary_expression -> postfix_expression
-- On TK_ANDAND reduce production unary_expression -> postfix_expression
-- On TK_AND reduce production unary_expression -> postfix_expression
-- On KW_FASTCALL reduce production unary_expression -> postfix_expression
-- On KW_DECLSPEC reduce production unary_expression -> postfix_expression
-- On KW_ATTRIBUTE reduce production unary_expression -> postfix_expression
-- On EOF reduce production unary_expression -> postfix_expression

State 90:
## Known stack suffix:
## postfix_expression TK_PERIOD
## LR(1) items:
postfix_expression -> postfix_expression TK_PERIOD . identifier_or_typedef_name [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> postfix_expression TK_PERIOD . WC_DECL [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_DECL shift to state 91
-- On TK_TYPEDEF_NAME shift to state 92
-- On TK_IDENTIFIER shift to state 93
-- On identifier_or_typedef_name shift to state 94
## Reductions:

State 91:
## Known stack suffix:
## postfix_expression TK_PERIOD WC_DECL
## LR(1) items:
postfix_expression -> postfix_expression TK_PERIOD WC_DECL . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression TK_PERIOD WC_DECL

State 92:
## Known stack suffix:
## TK_TYPEDEF_NAME
## LR(1) items:
identifier_or_typedef_name -> TK_TYPEDEF_NAME . [ WC_DECL TK_TYPEDEF_NAME TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_LBRACE TK_INC TK_IDENTIFIER TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier_or_typedef_name -> TK_TYPEDEF_NAME

State 93:
## Known stack suffix:
## TK_IDENTIFIER
## LR(1) items:
identifier_or_typedef_name -> TK_IDENTIFIER . [ WC_DECL TK_TYPEDEF_NAME TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_LBRACE TK_INC TK_IDENTIFIER TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier_or_typedef_name -> TK_IDENTIFIER

State 94:
## Known stack suffix:
## postfix_expression TK_PERIOD identifier_or_typedef_name
## LR(1) items:
postfix_expression -> postfix_expression TK_PERIOD identifier_or_typedef_name . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression TK_PERIOD identifier_or_typedef_name

State 95:
## Known stack suffix:
## postfix_expression TK_LSQBRACK
## LR(1) items:
postfix_expression -> postfix_expression TK_LSQBRACK . expression TK_RSQBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 170
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 96:
## Known stack suffix:
## shift_expression
## LR(1) items:
relational_expression -> shift_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LESS_EQ TK_LESS TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
shift_expression -> shift_expression . shift_operator additive_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LTLT shift to state 97
-- On TK_GTGT shift to state 98
-- On shift_operator shift to state 99
## Reductions:
-- On TK_SEMICOLON reduce production relational_expression -> shift_expression
-- On TK_RSQBRACK reduce production relational_expression -> shift_expression
-- On TK_RBRACK reduce production relational_expression -> shift_expression
-- On TK_RBRACE reduce production relational_expression -> shift_expression
-- On TK_QMARK reduce production relational_expression -> shift_expression
-- On TK_PIPEPIPE reduce production relational_expression -> shift_expression
-- On TK_PIPE reduce production relational_expression -> shift_expression
-- On TK_NE reduce production relational_expression -> shift_expression
-- On TK_LESS_EQ reduce production relational_expression -> shift_expression
-- On TK_LESS reduce production relational_expression -> shift_expression
-- On TK_GREATER_EQ reduce production relational_expression -> shift_expression
-- On TK_GREATER reduce production relational_expression -> shift_expression
-- On TK_EQEQ reduce production relational_expression -> shift_expression
-- On TK_ELLIPSIS reduce production relational_expression -> shift_expression
-- On TK_COMMA reduce production relational_expression -> shift_expression
-- On TK_COLON reduce production relational_expression -> shift_expression
-- On TK_CARET reduce production relational_expression -> shift_expression
-- On TK_ANDAND reduce production relational_expression -> shift_expression
-- On TK_AND reduce production relational_expression -> shift_expression
-- On KW_FASTCALL reduce production relational_expression -> shift_expression
-- On KW_DECLSPEC reduce production relational_expression -> shift_expression
-- On KW_ATTRIBUTE reduce production relational_expression -> shift_expression
-- On EOF reduce production relational_expression -> shift_expression

State 97:
## Known stack suffix:
## TK_LTLT
## LR(1) items:
shift_operator -> TK_LTLT . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production shift_operator -> TK_LTLT

State 98:
## Known stack suffix:
## TK_GTGT
## LR(1) items:
shift_operator -> TK_GTGT . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production shift_operator -> TK_GTGT

State 99:
## Known stack suffix:
## shift_expression shift_operator
## LR(1) items:
shift_expression -> shift_expression shift_operator . additive_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On identifier shift to state 106
-- On cast_expression shift to state 108
-- On additive_expression shift to state 109
## Reductions:

State 100:
## Known stack suffix:
## numeric_literal
## LR(1) items:
primary_expression -> numeric_literal . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> numeric_literal

State 101:
## Known stack suffix:
## multiplicative_expression
## LR(1) items:
additive_expression -> multiplicative_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ TK_STAR TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_PERCENT TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_STAR shift to state 102
-- On TK_SLASH shift to state 103
-- On TK_PERCENT shift to state 104
-- On multiplicative_operator shift to state 105
## Reductions:
-- On TK_SEMICOLON reduce production additive_expression -> multiplicative_expression
-- On TK_RSQBRACK reduce production additive_expression -> multiplicative_expression
-- On TK_RBRACK reduce production additive_expression -> multiplicative_expression
-- On TK_RBRACE reduce production additive_expression -> multiplicative_expression
-- On TK_QMARK reduce production additive_expression -> multiplicative_expression
-- On TK_PLUS reduce production additive_expression -> multiplicative_expression
-- On TK_PIPEPIPE reduce production additive_expression -> multiplicative_expression
-- On TK_PIPE reduce production additive_expression -> multiplicative_expression
-- On TK_NE reduce production additive_expression -> multiplicative_expression
-- On TK_MINUS reduce production additive_expression -> multiplicative_expression
-- On TK_LTLT reduce production additive_expression -> multiplicative_expression
-- On TK_LESS_EQ reduce production additive_expression -> multiplicative_expression
-- On TK_LESS reduce production additive_expression -> multiplicative_expression
-- On TK_GTGT reduce production additive_expression -> multiplicative_expression
-- On TK_GREATER_EQ reduce production additive_expression -> multiplicative_expression
-- On TK_GREATER reduce production additive_expression -> multiplicative_expression
-- On TK_EQEQ reduce production additive_expression -> multiplicative_expression
-- On TK_ELLIPSIS reduce production additive_expression -> multiplicative_expression
-- On TK_COMMA reduce production additive_expression -> multiplicative_expression
-- On TK_COLON reduce production additive_expression -> multiplicative_expression
-- On TK_CARET reduce production additive_expression -> multiplicative_expression
-- On TK_ANDAND reduce production additive_expression -> multiplicative_expression
-- On TK_AND reduce production additive_expression -> multiplicative_expression
-- On KW_FASTCALL reduce production additive_expression -> multiplicative_expression
-- On KW_DECLSPEC reduce production additive_expression -> multiplicative_expression
-- On KW_ATTRIBUTE reduce production additive_expression -> multiplicative_expression
-- On EOF reduce production additive_expression -> multiplicative_expression

State 102:
## Known stack suffix:
## TK_STAR
## LR(1) items:
multiplicative_operator -> TK_STAR . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_operator -> TK_STAR

State 103:
## Known stack suffix:
## TK_SLASH
## LR(1) items:
multiplicative_operator -> TK_SLASH . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_operator -> TK_SLASH

State 104:
## Known stack suffix:
## TK_PERCENT
## LR(1) items:
multiplicative_operator -> TK_PERCENT . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_operator -> TK_PERCENT

State 105:
## Known stack suffix:
## multiplicative_expression multiplicative_operator
## LR(1) items:
multiplicative_expression -> multiplicative_expression multiplicative_operator . cast_expression [ TK_STAR TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_PERCENT TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On identifier shift to state 106
-- On cast_expression shift to state 107
## Reductions:

State 106:
## Known stack suffix:
## identifier
## LR(1) items:
primary_expression -> identifier . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> identifier

State 107:
## Known stack suffix:
## multiplicative_expression multiplicative_operator cast_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression . [ TK_STAR TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_PERCENT TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression

State 108:
## Known stack suffix:
## cast_expression
## LR(1) items:
multiplicative_expression -> cast_expression . [ TK_STAR TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_PERCENT TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expression -> cast_expression

State 109:
## Known stack suffix:
## shift_expression shift_operator additive_expression
## LR(1) items:
additive_expression -> additive_expression . additive_operator multiplicative_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
shift_expression -> shift_expression shift_operator additive_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_PLUS shift to state 110
-- On TK_MINUS shift to state 111
-- On additive_operator shift to state 112
## Reductions:
-- On TK_SEMICOLON reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_RSQBRACK reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_RBRACK reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_RBRACE reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_QMARK reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_PIPEPIPE reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_PIPE reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_NE reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_LTLT reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_LESS_EQ reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_LESS reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_GTGT reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_GREATER_EQ reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_GREATER reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_EQEQ reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_ELLIPSIS reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_COMMA reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_COLON reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_CARET reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_ANDAND reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On TK_AND reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On KW_FASTCALL reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On KW_DECLSPEC reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On KW_ATTRIBUTE reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On EOF reduce production shift_expression -> shift_expression shift_operator additive_expression

State 110:
## Known stack suffix:
## TK_PLUS
## LR(1) items:
additive_operator -> TK_PLUS . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production additive_operator -> TK_PLUS

State 111:
## Known stack suffix:
## TK_MINUS
## LR(1) items:
additive_operator -> TK_MINUS . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production additive_operator -> TK_MINUS

State 112:
## Known stack suffix:
## additive_expression additive_operator
## LR(1) items:
additive_expression -> additive_expression additive_operator . multiplicative_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 113
-- On identifier shift to state 106
-- On cast_expression shift to state 108
## Reductions:

State 113:
## Known stack suffix:
## additive_expression additive_operator multiplicative_expression
## LR(1) items:
additive_expression -> additive_expression additive_operator multiplicative_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ TK_STAR TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_PERCENT TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_STAR shift to state 102
-- On TK_SLASH shift to state 103
-- On TK_PERCENT shift to state 104
-- On multiplicative_operator shift to state 105
## Reductions:
-- On TK_SEMICOLON reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_RSQBRACK reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_RBRACK reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_RBRACE reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_QMARK reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_PLUS reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_PIPEPIPE reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_PIPE reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_NE reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_MINUS reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_LTLT reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_LESS_EQ reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_LESS reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_GTGT reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_GREATER_EQ reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_GREATER reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_EQEQ reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_ELLIPSIS reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_COMMA reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_COLON reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_CARET reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_ANDAND reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On TK_AND reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On KW_FASTCALL reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On KW_DECLSPEC reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On KW_ATTRIBUTE reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On EOF reduce production additive_expression -> additive_expression additive_operator multiplicative_expression

State 114:
## Known stack suffix:
## relational_expression
## LR(1) items:
equality_expression -> relational_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
relational_expression -> relational_expression . relational_operator shift_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LESS_EQ TK_LESS TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LESS_EQ shift to state 115
-- On TK_LESS shift to state 116
-- On TK_GREATER_EQ shift to state 117
-- On TK_GREATER shift to state 118
-- On relational_operator shift to state 119
## Reductions:
-- On TK_SEMICOLON reduce production equality_expression -> relational_expression
-- On TK_RSQBRACK reduce production equality_expression -> relational_expression
-- On TK_RBRACK reduce production equality_expression -> relational_expression
-- On TK_RBRACE reduce production equality_expression -> relational_expression
-- On TK_QMARK reduce production equality_expression -> relational_expression
-- On TK_PIPEPIPE reduce production equality_expression -> relational_expression
-- On TK_PIPE reduce production equality_expression -> relational_expression
-- On TK_NE reduce production equality_expression -> relational_expression
-- On TK_EQEQ reduce production equality_expression -> relational_expression
-- On TK_ELLIPSIS reduce production equality_expression -> relational_expression
-- On TK_COMMA reduce production equality_expression -> relational_expression
-- On TK_COLON reduce production equality_expression -> relational_expression
-- On TK_CARET reduce production equality_expression -> relational_expression
-- On TK_ANDAND reduce production equality_expression -> relational_expression
-- On TK_AND reduce production equality_expression -> relational_expression
-- On KW_FASTCALL reduce production equality_expression -> relational_expression
-- On KW_DECLSPEC reduce production equality_expression -> relational_expression
-- On KW_ATTRIBUTE reduce production equality_expression -> relational_expression
-- On EOF reduce production equality_expression -> relational_expression

State 115:
## Known stack suffix:
## TK_LESS_EQ
## LR(1) items:
relational_operator -> TK_LESS_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relational_operator -> TK_LESS_EQ

State 116:
## Known stack suffix:
## TK_LESS
## LR(1) items:
relational_operator -> TK_LESS . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relational_operator -> TK_LESS

State 117:
## Known stack suffix:
## TK_GREATER_EQ
## LR(1) items:
relational_operator -> TK_GREATER_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relational_operator -> TK_GREATER_EQ

State 118:
## Known stack suffix:
## TK_GREATER
## LR(1) items:
relational_operator -> TK_GREATER . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relational_operator -> TK_GREATER

State 119:
## Known stack suffix:
## relational_expression relational_operator
## LR(1) items:
relational_expression -> relational_expression relational_operator . shift_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LESS_EQ TK_LESS TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 120
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On identifier shift to state 106
-- On cast_expression shift to state 108
-- On additive_expression shift to state 121
## Reductions:

State 120:
## Known stack suffix:
## relational_expression relational_operator shift_expression
## LR(1) items:
relational_expression -> relational_expression relational_operator shift_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LESS_EQ TK_LESS TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
shift_expression -> shift_expression . shift_operator additive_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LTLT shift to state 97
-- On TK_GTGT shift to state 98
-- On shift_operator shift to state 99
## Reductions:
-- On TK_SEMICOLON reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_RSQBRACK reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_RBRACK reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_RBRACE reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_QMARK reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_PIPEPIPE reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_PIPE reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_NE reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_LESS_EQ reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_LESS reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_GREATER_EQ reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_GREATER reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_EQEQ reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_ELLIPSIS reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_COMMA reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_COLON reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_CARET reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_ANDAND reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On TK_AND reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On KW_FASTCALL reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On KW_DECLSPEC reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On KW_ATTRIBUTE reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On EOF reduce production relational_expression -> relational_expression relational_operator shift_expression

State 121:
## Known stack suffix:
## additive_expression
## LR(1) items:
additive_expression -> additive_expression . additive_operator multiplicative_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
shift_expression -> additive_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_PLUS shift to state 110
-- On TK_MINUS shift to state 111
-- On additive_operator shift to state 112
## Reductions:
-- On TK_SEMICOLON reduce production shift_expression -> additive_expression
-- On TK_RSQBRACK reduce production shift_expression -> additive_expression
-- On TK_RBRACK reduce production shift_expression -> additive_expression
-- On TK_RBRACE reduce production shift_expression -> additive_expression
-- On TK_QMARK reduce production shift_expression -> additive_expression
-- On TK_PIPEPIPE reduce production shift_expression -> additive_expression
-- On TK_PIPE reduce production shift_expression -> additive_expression
-- On TK_NE reduce production shift_expression -> additive_expression
-- On TK_LTLT reduce production shift_expression -> additive_expression
-- On TK_LESS_EQ reduce production shift_expression -> additive_expression
-- On TK_LESS reduce production shift_expression -> additive_expression
-- On TK_GTGT reduce production shift_expression -> additive_expression
-- On TK_GREATER_EQ reduce production shift_expression -> additive_expression
-- On TK_GREATER reduce production shift_expression -> additive_expression
-- On TK_EQEQ reduce production shift_expression -> additive_expression
-- On TK_ELLIPSIS reduce production shift_expression -> additive_expression
-- On TK_COMMA reduce production shift_expression -> additive_expression
-- On TK_COLON reduce production shift_expression -> additive_expression
-- On TK_CARET reduce production shift_expression -> additive_expression
-- On TK_ANDAND reduce production shift_expression -> additive_expression
-- On TK_AND reduce production shift_expression -> additive_expression
-- On KW_FASTCALL reduce production shift_expression -> additive_expression
-- On KW_DECLSPEC reduce production shift_expression -> additive_expression
-- On KW_ATTRIBUTE reduce production shift_expression -> additive_expression
-- On EOF reduce production shift_expression -> additive_expression

State 122:
## Known stack suffix:
## logical_or_expression
## LR(1) items:
conditional_expression -> logical_or_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
conditional_expression -> logical_or_expression . TK_QMARK option(expression) TK_COLON conditional_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
logical_or_expression -> logical_or_expression . logical_or_operator logical_and_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_QMARK shift to state 123
-- On TK_PIPEPIPE shift to state 167
-- On logical_or_operator shift to state 168
## Reductions:
-- On TK_SEMICOLON reduce production conditional_expression -> logical_or_expression
-- On TK_RSQBRACK reduce production conditional_expression -> logical_or_expression
-- On TK_RBRACK reduce production conditional_expression -> logical_or_expression
-- On TK_RBRACE reduce production conditional_expression -> logical_or_expression
-- On TK_ELLIPSIS reduce production conditional_expression -> logical_or_expression
-- On TK_COMMA reduce production conditional_expression -> logical_or_expression
-- On TK_COLON reduce production conditional_expression -> logical_or_expression
-- On KW_FASTCALL reduce production conditional_expression -> logical_or_expression
-- On KW_DECLSPEC reduce production conditional_expression -> logical_or_expression
-- On KW_ATTRIBUTE reduce production conditional_expression -> logical_or_expression
-- On EOF reduce production conditional_expression -> logical_or_expression

State 123:
## Known stack suffix:
## logical_or_expression TK_QMARK
## LR(1) items:
conditional_expression -> logical_or_expression TK_QMARK . option(expression) TK_COLON conditional_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 124
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_COLON reduce production option(expression) ->

State 124:
## Known stack suffix:
## logical_or_expression TK_QMARK option(expression)
## LR(1) items:
conditional_expression -> logical_or_expression TK_QMARK option(expression) . TK_COLON conditional_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_COLON shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## logical_or_expression TK_QMARK option(expression) TK_COLON
## LR(1) items:
conditional_expression -> logical_or_expression TK_QMARK option(expression) TK_COLON . conditional_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 147
-- On cast_expression shift to state 108
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 126:
## Known stack suffix:
## logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . logical_and_operator inclusive_or_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
logical_or_expression -> logical_and_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_ANDAND shift to state 127
-- On logical_and_operator shift to state 128
## Reductions:
-- On TK_SEMICOLON reduce production logical_or_expression -> logical_and_expression
-- On TK_RSQBRACK reduce production logical_or_expression -> logical_and_expression
-- On TK_RBRACK reduce production logical_or_expression -> logical_and_expression
-- On TK_RBRACE reduce production logical_or_expression -> logical_and_expression
-- On TK_QMARK reduce production logical_or_expression -> logical_and_expression
-- On TK_PIPEPIPE reduce production logical_or_expression -> logical_and_expression
-- On TK_ELLIPSIS reduce production logical_or_expression -> logical_and_expression
-- On TK_COMMA reduce production logical_or_expression -> logical_and_expression
-- On TK_COLON reduce production logical_or_expression -> logical_and_expression
-- On KW_FASTCALL reduce production logical_or_expression -> logical_and_expression
-- On KW_DECLSPEC reduce production logical_or_expression -> logical_and_expression
-- On KW_ATTRIBUTE reduce production logical_or_expression -> logical_and_expression
-- On EOF reduce production logical_or_expression -> logical_and_expression

State 127:
## Known stack suffix:
## TK_ANDAND
## LR(1) items:
logical_and_operator -> TK_ANDAND . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_and_operator -> TK_ANDAND

State 128:
## Known stack suffix:
## logical_and_expression logical_and_operator
## LR(1) items:
logical_and_expression -> logical_and_expression logical_and_operator . inclusive_or_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On inclusive_or_expression shift to state 129
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On cast_expression shift to state 108
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 129:
## Known stack suffix:
## logical_and_expression logical_and_operator inclusive_or_expression
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression . inclusive_or_operator exclusive_or_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_PIPE shift to state 130
-- On inclusive_or_operator shift to state 131
## Reductions:
-- On TK_SEMICOLON reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On TK_RSQBRACK reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On TK_RBRACK reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On TK_RBRACE reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On TK_QMARK reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On TK_PIPEPIPE reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On TK_ELLIPSIS reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On TK_COMMA reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On TK_COLON reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On TK_ANDAND reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On KW_FASTCALL reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On KW_DECLSPEC reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On KW_ATTRIBUTE reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression
-- On EOF reduce production logical_and_expression -> logical_and_expression logical_and_operator inclusive_or_expression

State 130:
## Known stack suffix:
## TK_PIPE
## LR(1) items:
inclusive_or_operator -> TK_PIPE . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production inclusive_or_operator -> TK_PIPE

State 131:
## Known stack suffix:
## inclusive_or_expression inclusive_or_operator
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression inclusive_or_operator . exclusive_or_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 132
-- On equality_expression shift to state 135
-- On cast_expression shift to state 108
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 132:
## Known stack suffix:
## inclusive_or_expression inclusive_or_operator exclusive_or_expression
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression . exclusive_or_operator and_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_CARET shift to state 133
-- On exclusive_or_operator shift to state 134
## Reductions:
-- On TK_SEMICOLON reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_RSQBRACK reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_RBRACK reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_RBRACE reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_QMARK reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_PIPEPIPE reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_PIPE reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_ELLIPSIS reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_COMMA reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_COLON reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On TK_ANDAND reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On KW_FASTCALL reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On KW_DECLSPEC reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On KW_ATTRIBUTE reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression
-- On EOF reduce production inclusive_or_expression -> inclusive_or_expression inclusive_or_operator exclusive_or_expression

State 133:
## Known stack suffix:
## TK_CARET
## LR(1) items:
exclusive_or_operator -> TK_CARET . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exclusive_or_operator -> TK_CARET

State 134:
## Known stack suffix:
## exclusive_or_expression exclusive_or_operator
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression exclusive_or_operator . and_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On identifier shift to state 106
-- On equality_expression shift to state 135
-- On cast_expression shift to state 108
-- On and_expression shift to state 140
-- On additive_expression shift to state 121
## Reductions:

State 135:
## Known stack suffix:
## equality_expression
## LR(1) items:
and_expression -> equality_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
equality_expression -> equality_expression . equality_operator relational_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_NE shift to state 136
-- On TK_EQEQ shift to state 137
-- On equality_operator shift to state 138
## Reductions:
-- On TK_SEMICOLON reduce production and_expression -> equality_expression
-- On TK_RSQBRACK reduce production and_expression -> equality_expression
-- On TK_RBRACK reduce production and_expression -> equality_expression
-- On TK_RBRACE reduce production and_expression -> equality_expression
-- On TK_QMARK reduce production and_expression -> equality_expression
-- On TK_PIPEPIPE reduce production and_expression -> equality_expression
-- On TK_PIPE reduce production and_expression -> equality_expression
-- On TK_ELLIPSIS reduce production and_expression -> equality_expression
-- On TK_COMMA reduce production and_expression -> equality_expression
-- On TK_COLON reduce production and_expression -> equality_expression
-- On TK_CARET reduce production and_expression -> equality_expression
-- On TK_ANDAND reduce production and_expression -> equality_expression
-- On TK_AND reduce production and_expression -> equality_expression
-- On KW_FASTCALL reduce production and_expression -> equality_expression
-- On KW_DECLSPEC reduce production and_expression -> equality_expression
-- On KW_ATTRIBUTE reduce production and_expression -> equality_expression
-- On EOF reduce production and_expression -> equality_expression

State 136:
## Known stack suffix:
## TK_NE
## LR(1) items:
equality_operator -> TK_NE . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equality_operator -> TK_NE

State 137:
## Known stack suffix:
## TK_EQEQ
## LR(1) items:
equality_operator -> TK_EQEQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equality_operator -> TK_EQEQ

State 138:
## Known stack suffix:
## equality_expression equality_operator
## LR(1) items:
equality_expression -> equality_expression equality_operator . relational_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 139
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On identifier shift to state 106
-- On cast_expression shift to state 108
-- On additive_expression shift to state 121
## Reductions:

State 139:
## Known stack suffix:
## equality_expression equality_operator relational_expression
## LR(1) items:
equality_expression -> equality_expression equality_operator relational_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
relational_expression -> relational_expression . relational_operator shift_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_LESS_EQ TK_LESS TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LESS_EQ shift to state 115
-- On TK_LESS shift to state 116
-- On TK_GREATER_EQ shift to state 117
-- On TK_GREATER shift to state 118
-- On relational_operator shift to state 119
## Reductions:
-- On TK_SEMICOLON reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_RSQBRACK reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_RBRACK reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_RBRACE reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_QMARK reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_PIPEPIPE reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_PIPE reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_NE reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_EQEQ reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_ELLIPSIS reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_COMMA reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_COLON reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_CARET reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_ANDAND reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On TK_AND reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On KW_FASTCALL reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On KW_DECLSPEC reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On KW_ATTRIBUTE reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On EOF reduce production equality_expression -> equality_expression equality_operator relational_expression

State 140:
## Known stack suffix:
## exclusive_or_expression exclusive_or_operator and_expression
## LR(1) items:
and_expression -> and_expression . and_operator equality_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_AND shift to state 141
-- On and_operator shift to state 142
## Reductions:
-- On TK_SEMICOLON reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_RSQBRACK reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_RBRACK reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_RBRACE reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_QMARK reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_PIPEPIPE reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_PIPE reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_ELLIPSIS reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_COMMA reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_COLON reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_CARET reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On TK_ANDAND reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On KW_FASTCALL reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On KW_DECLSPEC reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On KW_ATTRIBUTE reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression
-- On EOF reduce production exclusive_or_expression -> exclusive_or_expression exclusive_or_operator and_expression

State 141:
## Known stack suffix:
## TK_AND
## LR(1) items:
and_operator -> TK_AND . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production and_operator -> TK_AND

State 142:
## Known stack suffix:
## and_expression and_operator
## LR(1) items:
and_expression -> and_expression and_operator . equality_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On identifier shift to state 106
-- On equality_expression shift to state 143
-- On cast_expression shift to state 108
-- On additive_expression shift to state 121
## Reductions:

State 143:
## Known stack suffix:
## and_expression and_operator equality_expression
## LR(1) items:
and_expression -> and_expression and_operator equality_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
equality_expression -> equality_expression . equality_operator relational_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_NE TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_NE shift to state 136
-- On TK_EQEQ shift to state 137
-- On equality_operator shift to state 138
## Reductions:
-- On TK_SEMICOLON reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_RSQBRACK reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_RBRACK reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_RBRACE reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_QMARK reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_PIPEPIPE reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_PIPE reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_ELLIPSIS reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_COMMA reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_COLON reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_CARET reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_ANDAND reduce production and_expression -> and_expression and_operator equality_expression
-- On TK_AND reduce production and_expression -> and_expression and_operator equality_expression
-- On KW_FASTCALL reduce production and_expression -> and_expression and_operator equality_expression
-- On KW_DECLSPEC reduce production and_expression -> and_expression and_operator equality_expression
-- On KW_ATTRIBUTE reduce production and_expression -> and_expression and_operator equality_expression
-- On EOF reduce production and_expression -> and_expression and_operator equality_expression

State 144:
## Known stack suffix:
## and_expression
## LR(1) items:
and_expression -> and_expression . and_operator equality_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
exclusive_or_expression -> and_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_AND shift to state 141
-- On and_operator shift to state 142
## Reductions:
-- On TK_SEMICOLON reduce production exclusive_or_expression -> and_expression
-- On TK_RSQBRACK reduce production exclusive_or_expression -> and_expression
-- On TK_RBRACK reduce production exclusive_or_expression -> and_expression
-- On TK_RBRACE reduce production exclusive_or_expression -> and_expression
-- On TK_QMARK reduce production exclusive_or_expression -> and_expression
-- On TK_PIPEPIPE reduce production exclusive_or_expression -> and_expression
-- On TK_PIPE reduce production exclusive_or_expression -> and_expression
-- On TK_ELLIPSIS reduce production exclusive_or_expression -> and_expression
-- On TK_COMMA reduce production exclusive_or_expression -> and_expression
-- On TK_COLON reduce production exclusive_or_expression -> and_expression
-- On TK_CARET reduce production exclusive_or_expression -> and_expression
-- On TK_ANDAND reduce production exclusive_or_expression -> and_expression
-- On KW_FASTCALL reduce production exclusive_or_expression -> and_expression
-- On KW_DECLSPEC reduce production exclusive_or_expression -> and_expression
-- On KW_ATTRIBUTE reduce production exclusive_or_expression -> and_expression
-- On EOF reduce production exclusive_or_expression -> and_expression

State 145:
## Known stack suffix:
## exclusive_or_expression
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression . exclusive_or_operator and_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
inclusive_or_expression -> exclusive_or_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_CARET shift to state 133
-- On exclusive_or_operator shift to state 134
## Reductions:
-- On TK_SEMICOLON reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_RSQBRACK reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_RBRACK reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_RBRACE reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_QMARK reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_PIPEPIPE reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_PIPE reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_ELLIPSIS reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_COMMA reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_COLON reduce production inclusive_or_expression -> exclusive_or_expression
-- On TK_ANDAND reduce production inclusive_or_expression -> exclusive_or_expression
-- On KW_FASTCALL reduce production inclusive_or_expression -> exclusive_or_expression
-- On KW_DECLSPEC reduce production inclusive_or_expression -> exclusive_or_expression
-- On KW_ATTRIBUTE reduce production inclusive_or_expression -> exclusive_or_expression
-- On EOF reduce production inclusive_or_expression -> exclusive_or_expression

State 146:
## Known stack suffix:
## inclusive_or_expression
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression . inclusive_or_operator exclusive_or_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_PIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
logical_and_expression -> inclusive_or_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_PIPE shift to state 130
-- On inclusive_or_operator shift to state 131
## Reductions:
-- On TK_SEMICOLON reduce production logical_and_expression -> inclusive_or_expression
-- On TK_RSQBRACK reduce production logical_and_expression -> inclusive_or_expression
-- On TK_RBRACK reduce production logical_and_expression -> inclusive_or_expression
-- On TK_RBRACE reduce production logical_and_expression -> inclusive_or_expression
-- On TK_QMARK reduce production logical_and_expression -> inclusive_or_expression
-- On TK_PIPEPIPE reduce production logical_and_expression -> inclusive_or_expression
-- On TK_ELLIPSIS reduce production logical_and_expression -> inclusive_or_expression
-- On TK_COMMA reduce production logical_and_expression -> inclusive_or_expression
-- On TK_COLON reduce production logical_and_expression -> inclusive_or_expression
-- On TK_ANDAND reduce production logical_and_expression -> inclusive_or_expression
-- On KW_FASTCALL reduce production logical_and_expression -> inclusive_or_expression
-- On KW_DECLSPEC reduce production logical_and_expression -> inclusive_or_expression
-- On KW_ATTRIBUTE reduce production logical_and_expression -> inclusive_or_expression
-- On EOF reduce production logical_and_expression -> inclusive_or_expression

State 147:
## Known stack suffix:
## logical_or_expression TK_QMARK option(expression) TK_COLON conditional_expression
## LR(1) items:
conditional_expression -> logical_or_expression TK_QMARK option(expression) TK_COLON conditional_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> logical_or_expression TK_QMARK option(expression) TK_COLON conditional_expression

State 148:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_SEMICOLON TK_RBRACK TK_COMMA TK_COLON ]
option(expression) -> expression . [ TK_SEMICOLON TK_RBRACK TK_COLON ]
## Transitions:
-- On TK_COMMA shift to state 149
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) -> expression
-- On TK_RBRACK reduce production option(expression) -> expression
-- On TK_COLON reduce production option(expression) -> expression

State 149:
## Known stack suffix:
## expression TK_COMMA
## LR(1) items:
expression -> expression TK_COMMA . assignment_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_COMMA TK_COLON EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 165
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 150:
## Known stack suffix:
## conditional_expression
## LR(1) items:
assignment_expression -> conditional_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> conditional_expression

State 151:
## Known stack suffix:
## cast_expression
## LR(1) items:
assignment_expression -> cast_expression . assignment_operator assignment_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON EOF ]
multiplicative_expression -> cast_expression . [ TK_STAR TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS TK_PIPEPIPE TK_PIPE TK_PERCENT TK_NE TK_MINUS TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET TK_ANDAND TK_AND EOF ]
## Transitions:
-- On TK_STAR_EQ shift to state 152
-- On TK_SLASH_EQ shift to state 153
-- On TK_PLUS_EQ shift to state 154
-- On TK_PIPE_EQ shift to state 155
-- On TK_PERCENT_EQ shift to state 156
-- On TK_MINUS_EQ shift to state 157
-- On TK_LTLT_EQ shift to state 158
-- On TK_GTGT_EQ shift to state 159
-- On TK_EQUALS shift to state 160
-- On TK_CARET_EQ shift to state 161
-- On TK_AND_EQ shift to state 162
-- On assignment_operator shift to state 163
## Reductions:
-- On TK_STAR reduce production multiplicative_expression -> cast_expression
-- On TK_SLASH reduce production multiplicative_expression -> cast_expression
-- On TK_SEMICOLON reduce production multiplicative_expression -> cast_expression
-- On TK_RSQBRACK reduce production multiplicative_expression -> cast_expression
-- On TK_RBRACK reduce production multiplicative_expression -> cast_expression
-- On TK_RBRACE reduce production multiplicative_expression -> cast_expression
-- On TK_QMARK reduce production multiplicative_expression -> cast_expression
-- On TK_PLUS reduce production multiplicative_expression -> cast_expression
-- On TK_PIPEPIPE reduce production multiplicative_expression -> cast_expression
-- On TK_PIPE reduce production multiplicative_expression -> cast_expression
-- On TK_PERCENT reduce production multiplicative_expression -> cast_expression
-- On TK_NE reduce production multiplicative_expression -> cast_expression
-- On TK_MINUS reduce production multiplicative_expression -> cast_expression
-- On TK_LTLT reduce production multiplicative_expression -> cast_expression
-- On TK_LESS_EQ reduce production multiplicative_expression -> cast_expression
-- On TK_LESS reduce production multiplicative_expression -> cast_expression
-- On TK_GTGT reduce production multiplicative_expression -> cast_expression
-- On TK_GREATER_EQ reduce production multiplicative_expression -> cast_expression
-- On TK_GREATER reduce production multiplicative_expression -> cast_expression
-- On TK_EQEQ reduce production multiplicative_expression -> cast_expression
-- On TK_ELLIPSIS reduce production multiplicative_expression -> cast_expression
-- On TK_COMMA reduce production multiplicative_expression -> cast_expression
-- On TK_COLON reduce production multiplicative_expression -> cast_expression
-- On TK_CARET reduce production multiplicative_expression -> cast_expression
-- On TK_ANDAND reduce production multiplicative_expression -> cast_expression
-- On TK_AND reduce production multiplicative_expression -> cast_expression
-- On EOF reduce production multiplicative_expression -> cast_expression

State 152:
## Known stack suffix:
## TK_STAR_EQ
## LR(1) items:
assignment_operator -> TK_STAR_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_STAR_EQ

State 153:
## Known stack suffix:
## TK_SLASH_EQ
## LR(1) items:
assignment_operator -> TK_SLASH_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_SLASH_EQ

State 154:
## Known stack suffix:
## TK_PLUS_EQ
## LR(1) items:
assignment_operator -> TK_PLUS_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_PLUS_EQ

State 155:
## Known stack suffix:
## TK_PIPE_EQ
## LR(1) items:
assignment_operator -> TK_PIPE_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_PIPE_EQ

State 156:
## Known stack suffix:
## TK_PERCENT_EQ
## LR(1) items:
assignment_operator -> TK_PERCENT_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_PERCENT_EQ

State 157:
## Known stack suffix:
## TK_MINUS_EQ
## LR(1) items:
assignment_operator -> TK_MINUS_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_MINUS_EQ

State 158:
## Known stack suffix:
## TK_LTLT_EQ
## LR(1) items:
assignment_operator -> TK_LTLT_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_LTLT_EQ

State 159:
## Known stack suffix:
## TK_GTGT_EQ
## LR(1) items:
assignment_operator -> TK_GTGT_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_GTGT_EQ

State 160:
## Known stack suffix:
## TK_EQUALS
## LR(1) items:
assignment_operator -> TK_EQUALS . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_EQUALS

State 161:
## Known stack suffix:
## TK_CARET_EQ
## LR(1) items:
assignment_operator -> TK_CARET_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_CARET_EQ

State 162:
## Known stack suffix:
## TK_AND_EQ
## LR(1) items:
assignment_operator -> TK_AND_EQ . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> TK_AND_EQ

State 163:
## Known stack suffix:
## cast_expression assignment_operator
## LR(1) items:
assignment_expression -> cast_expression assignment_operator . assignment_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 164
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 164:
## Known stack suffix:
## cast_expression assignment_operator assignment_expression
## LR(1) items:
assignment_expression -> cast_expression assignment_operator assignment_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_ELLIPSIS TK_COMMA TK_COLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> cast_expression assignment_operator assignment_expression

State 165:
## Known stack suffix:
## expression TK_COMMA assignment_expression
## LR(1) items:
expression -> expression TK_COMMA assignment_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_COMMA TK_COLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> expression TK_COMMA assignment_expression

State 166:
## Known stack suffix:
## assignment_expression
## LR(1) items:
expression -> assignment_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_COMMA TK_COLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> assignment_expression

State 167:
## Known stack suffix:
## TK_PIPEPIPE
## LR(1) items:
logical_or_operator -> TK_PIPEPIPE . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_or_operator -> TK_PIPEPIPE

State 168:
## Known stack suffix:
## logical_or_expression logical_or_operator
## LR(1) items:
logical_or_expression -> logical_or_expression logical_or_operator . logical_and_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_and_expression shift to state 169
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On cast_expression shift to state 108
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 169:
## Known stack suffix:
## logical_or_expression logical_or_operator logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . logical_and_operator inclusive_or_expression [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_ELLIPSIS TK_COMMA TK_COLON TK_ANDAND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PIPEPIPE TK_ELLIPSIS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_ANDAND shift to state 127
-- On logical_and_operator shift to state 128
## Reductions:
-- On TK_SEMICOLON reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On TK_RSQBRACK reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On TK_RBRACK reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On TK_RBRACE reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On TK_QMARK reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On TK_PIPEPIPE reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On TK_ELLIPSIS reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On TK_COMMA reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On TK_COLON reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On KW_FASTCALL reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On KW_DECLSPEC reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On KW_ATTRIBUTE reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression
-- On EOF reduce production logical_or_expression -> logical_or_expression logical_or_operator logical_and_expression

State 170:
## Known stack suffix:
## postfix_expression TK_LSQBRACK expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_RSQBRACK TK_COMMA ]
postfix_expression -> postfix_expression TK_LSQBRACK expression . TK_RSQBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RSQBRACK shift to state 171
-- On TK_COMMA shift to state 149
## Reductions:

State 171:
## Known stack suffix:
## postfix_expression TK_LSQBRACK expression TK_RSQBRACK
## LR(1) items:
postfix_expression -> postfix_expression TK_LSQBRACK expression TK_RSQBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression TK_LSQBRACK expression TK_RSQBRACK

State 172:
## Known stack suffix:
## postfix_expression TK_LBRACK
## LR(1) items:
postfix_expression -> postfix_expression TK_LBRACK . option(sep(TK_COMMA,assignment_expression)) TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On sep_rev(TK_COMMA,assignment_expression) shift to state 173
-- On sep(TK_COMMA,assignment_expression) shift to state 176
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(sep(TK_COMMA,assignment_expression)) shift to state 177
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 179
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_RBRACK reduce production option(sep(TK_COMMA,assignment_expression)) ->

State 173:
## Known stack suffix:
## sep_rev(TK_COMMA,assignment_expression)
## LR(1) items:
sep(TK_COMMA,assignment_expression) -> sep_rev(TK_COMMA,assignment_expression) . [ TK_RBRACK ]
sep_rev(TK_COMMA,assignment_expression) -> sep_rev(TK_COMMA,assignment_expression) . TK_COMMA assignment_expression [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 174
## Reductions:
-- On TK_RBRACK reduce production sep(TK_COMMA,assignment_expression) -> sep_rev(TK_COMMA,assignment_expression)

State 174:
## Known stack suffix:
## sep_rev(TK_COMMA,assignment_expression) TK_COMMA
## LR(1) items:
sep_rev(TK_COMMA,assignment_expression) -> sep_rev(TK_COMMA,assignment_expression) TK_COMMA . assignment_expression [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 175
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 175:
## Known stack suffix:
## sep_rev(TK_COMMA,assignment_expression) TK_COMMA assignment_expression
## LR(1) items:
sep_rev(TK_COMMA,assignment_expression) -> sep_rev(TK_COMMA,assignment_expression) TK_COMMA assignment_expression . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,assignment_expression) -> sep_rev(TK_COMMA,assignment_expression) TK_COMMA assignment_expression

State 176:
## Known stack suffix:
## sep(TK_COMMA,assignment_expression)
## LR(1) items:
option(sep(TK_COMMA,assignment_expression)) -> sep(TK_COMMA,assignment_expression) . [ TK_RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(sep(TK_COMMA,assignment_expression)) -> sep(TK_COMMA,assignment_expression)

State 177:
## Known stack suffix:
## postfix_expression TK_LBRACK option(sep(TK_COMMA,assignment_expression))
## LR(1) items:
postfix_expression -> postfix_expression TK_LBRACK option(sep(TK_COMMA,assignment_expression)) . TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## postfix_expression TK_LBRACK option(sep(TK_COMMA,assignment_expression)) TK_RBRACK
## LR(1) items:
postfix_expression -> postfix_expression TK_LBRACK option(sep(TK_COMMA,assignment_expression)) TK_RBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression TK_LBRACK option(sep(TK_COMMA,assignment_expression)) TK_RBRACK

State 179:
## Known stack suffix:
## assignment_expression
## LR(1) items:
sep_rev(TK_COMMA,assignment_expression) -> assignment_expression . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,assignment_expression) -> assignment_expression

State 180:
## Known stack suffix:
## postfix_expression TK_INC
## LR(1) items:
postfix_expression -> postfix_expression TK_INC . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression TK_INC

State 181:
## Known stack suffix:
## postfix_expression TK_DEC
## LR(1) items:
postfix_expression -> postfix_expression TK_DEC . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression TK_DEC

State 182:
## Known stack suffix:
## postfix_expression TK_ARROW
## LR(1) items:
postfix_expression -> postfix_expression TK_ARROW . identifier_or_typedef_name [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> postfix_expression TK_ARROW . WC_DECL [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_DECL shift to state 183
-- On TK_TYPEDEF_NAME shift to state 92
-- On TK_IDENTIFIER shift to state 93
-- On identifier_or_typedef_name shift to state 184
## Reductions:

State 183:
## Known stack suffix:
## postfix_expression TK_ARROW WC_DECL
## LR(1) items:
postfix_expression -> postfix_expression TK_ARROW WC_DECL . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression TK_ARROW WC_DECL

State 184:
## Known stack suffix:
## postfix_expression TK_ARROW identifier_or_typedef_name
## LR(1) items:
postfix_expression -> postfix_expression TK_ARROW identifier_or_typedef_name . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression TK_ARROW identifier_or_typedef_name

State 185:
## Known stack suffix:
## unary_operator cast_expression
## LR(1) items:
unary_expression -> unary_operator cast_expression . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> unary_operator cast_expression

State 186:
## Known stack suffix:
## unary_prefix_operator unary_expression
## LR(1) items:
unary_expression -> unary_prefix_operator unary_expression . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> unary_prefix_operator unary_expression

State 187:
## Known stack suffix:
## KW_ALIGNOF TK_LBRACK unary_expression
## LR(1) items:
unary_expression -> KW_ALIGNOF TK_LBRACK unary_expression . TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## KW_ALIGNOF TK_LBRACK unary_expression TK_RBRACK
## LR(1) items:
unary_expression -> KW_ALIGNOF TK_LBRACK unary_expression TK_RBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> KW_ALIGNOF TK_LBRACK unary_expression TK_RBRACK

State 189:
## Known stack suffix:
## KW_ALIGNOF TK_LBRACK type_name
## LR(1) items:
unary_expression -> KW_ALIGNOF TK_LBRACK type_name . TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## KW_ALIGNOF TK_LBRACK type_name TK_RBRACK
## LR(1) items:
unary_expression -> KW_ALIGNOF TK_LBRACK type_name TK_RBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> KW_ALIGNOF TK_LBRACK type_name TK_RBRACK

State 191:
## Known stack suffix:
## list(attribute)
## LR(1) items:
type_name -> list(attribute) . type_name_noattr [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On WC_TYPE shift to state 192
-- On TK_TYPEDEF_NAME shift to state 3
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_specifier shift to state 250
-- On typeof_type_name shift to state 252
-- On typedef_type_specifier shift to state 253
-- On type_specifier_nosue shift to state 255
-- On type_specifier shift to state 256
-- On type_qualifier shift to state 312
-- On type_name_noattr shift to state 685
-- On sue_type_specifier shift to state 576
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list(type_qualifier) shift to state 686
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 615
-- On basic_type_name shift to state 618
## Reductions:

State 192:
## Known stack suffix:
## WC_TYPE
## LR(1) items:
type_name_noattr -> WC_TYPE . [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_name_noattr -> WC_TYPE

State 193:
## Known stack suffix:
## KW_STRUCT
## LR(1) items:
struct_or_union -> KW_STRUCT . [ TK_TYPEDEF_NAME TK_LBRACE TK_IDENTIFIER KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_or_union -> KW_STRUCT

State 194:
## Known stack suffix:
## KW_SIGNED
## LR(1) items:
basic_type_name -> KW_SIGNED . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_SIGNED

State 195:
## Known stack suffix:
## KW_SHORT
## LR(1) items:
basic_type_name -> KW_SHORT . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_SHORT

State 196:
## Known stack suffix:
## KW_RESTRICT
## LR(1) items:
type_qualifier -> KW_RESTRICT . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qualifier -> KW_RESTRICT

State 197:
## Known stack suffix:
## KW_LONG
## LR(1) items:
basic_type_name -> KW_LONG . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_LONG

State 198:
## Known stack suffix:
## KW_INTN
## LR(1) items:
basic_type_name -> KW_INTN . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_INTN

State 199:
## Known stack suffix:
## KW_INT
## LR(1) items:
basic_type_name -> KW_INT . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_INT

State 200:
## Known stack suffix:
## KW_FLOATN
## LR(1) items:
basic_type_name -> KW_FLOATN . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_FLOATN

State 201:
## Known stack suffix:
## KW_FLOAT
## LR(1) items:
basic_type_name -> KW_FLOAT . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_FLOAT

State 202:
## Known stack suffix:
## KW_ENUM
## LR(1) items:
enum_specifier -> KW_ENUM . TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
enum_specifier -> KW_ENUM . TK_IDENTIFIER TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
enum_specifier -> KW_ENUM . TK_IDENTIFIER [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACE shift to state 203
-- On TK_IDENTIFIER shift to state 216
## Reductions:

State 203:
## Known stack suffix:
## KW_ENUM TK_LBRACE
## LR(1) items:
enum_specifier -> KW_ENUM TK_LBRACE . sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_IDENTIFIER shift to state 204
-- On sep_rev(TK_COMMA,enumerator) shift to state 210
-- On enumerator shift to state 215
## Reductions:

State 204:
## Known stack suffix:
## TK_IDENTIFIER
## LR(1) items:
enumerator -> TK_IDENTIFIER . option(enumerator_value) [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 205
-- On option(enumerator_value) shift to state 208
-- On enumerator_value shift to state 209
## Reductions:
-- On TK_RBRACE reduce production option(enumerator_value) ->
-- On TK_COMMA reduce production option(enumerator_value) ->

State 205:
## Known stack suffix:
## TK_EQUALS
## LR(1) items:
enumerator_value -> TK_EQUALS . constant_expression [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On constant_expression shift to state 206
-- On conditional_expression shift to state 207
-- On cast_expression shift to state 108
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 206:
## Known stack suffix:
## TK_EQUALS constant_expression
## LR(1) items:
enumerator_value -> TK_EQUALS constant_expression . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enumerator_value -> TK_EQUALS constant_expression

State 207:
## Known stack suffix:
## conditional_expression
## LR(1) items:
constant_expression -> conditional_expression . [ TK_SEMICOLON TK_RSQBRACK TK_RBRACE TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant_expression -> conditional_expression

State 208:
## Known stack suffix:
## TK_IDENTIFIER option(enumerator_value)
## LR(1) items:
enumerator -> TK_IDENTIFIER option(enumerator_value) . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enumerator -> TK_IDENTIFIER option(enumerator_value)

State 209:
## Known stack suffix:
## enumerator_value
## LR(1) items:
option(enumerator_value) -> enumerator_value . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(enumerator_value) -> enumerator_value

State 210:
## Known stack suffix:
## KW_ENUM TK_LBRACE sep_rev(TK_COMMA,enumerator)
## LR(1) items:
enum_specifier -> KW_ENUM TK_LBRACE sep_rev(TK_COMMA,enumerator) . option(TK_COMMA) TK_RBRACE [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
sep_rev(TK_COMMA,enumerator) -> sep_rev(TK_COMMA,enumerator) . TK_COMMA enumerator [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 211
-- On option(TK_COMMA) shift to state 213
## Reductions:
-- On TK_RBRACE reduce production option(TK_COMMA) ->

State 211:
## Known stack suffix:
## sep_rev(TK_COMMA,enumerator) TK_COMMA
## LR(1) items:
option(TK_COMMA) -> TK_COMMA . [ TK_RBRACE ]
sep_rev(TK_COMMA,enumerator) -> sep_rev(TK_COMMA,enumerator) TK_COMMA . enumerator [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On TK_IDENTIFIER shift to state 204
-- On enumerator shift to state 212
## Reductions:
-- On TK_RBRACE reduce production option(TK_COMMA) -> TK_COMMA

State 212:
## Known stack suffix:
## sep_rev(TK_COMMA,enumerator) TK_COMMA enumerator
## LR(1) items:
sep_rev(TK_COMMA,enumerator) -> sep_rev(TK_COMMA,enumerator) TK_COMMA enumerator . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,enumerator) -> sep_rev(TK_COMMA,enumerator) TK_COMMA enumerator

State 213:
## Known stack suffix:
## KW_ENUM TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA)
## LR(1) items:
enum_specifier -> KW_ENUM TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) . TK_RBRACE [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACE shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## KW_ENUM TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE
## LR(1) items:
enum_specifier -> KW_ENUM TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_specifier -> KW_ENUM TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE

State 215:
## Known stack suffix:
## enumerator
## LR(1) items:
sep_rev(TK_COMMA,enumerator) -> enumerator . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,enumerator) -> enumerator

State 216:
## Known stack suffix:
## KW_ENUM TK_IDENTIFIER
## LR(1) items:
enum_specifier -> KW_ENUM TK_IDENTIFIER . TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
enum_specifier -> KW_ENUM TK_IDENTIFIER . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACE shift to state 217
## Reductions:
-- On WC_DECL reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On TK_TYPEDEF_NAME reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On TK_STAR reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On TK_SEMICOLON reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On TK_RBRACK reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On TK_LSQBRACK reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On TK_LBRACK reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On TK_IDENTIFIER reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On TK_COMMA reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On TK_COLON reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_VOLATILE reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_TYPEDEF reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_THREAD reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_STATIC reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_RESTRICT reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_REGISTER reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_INLINE reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_FASTCALL reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_EXTERN reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_EXTENSION reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_DECLSPEC reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_CONST reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_COMPLEX reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_AUTO reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On KW_ATTRIBUTE reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER
-- On EOF reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER

State 217:
## Known stack suffix:
## KW_ENUM TK_IDENTIFIER TK_LBRACE
## LR(1) items:
enum_specifier -> KW_ENUM TK_IDENTIFIER TK_LBRACE . sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_IDENTIFIER shift to state 204
-- On sep_rev(TK_COMMA,enumerator) shift to state 218
-- On enumerator shift to state 215
## Reductions:

State 218:
## Known stack suffix:
## KW_ENUM TK_IDENTIFIER TK_LBRACE sep_rev(TK_COMMA,enumerator)
## LR(1) items:
enum_specifier -> KW_ENUM TK_IDENTIFIER TK_LBRACE sep_rev(TK_COMMA,enumerator) . option(TK_COMMA) TK_RBRACE [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
sep_rev(TK_COMMA,enumerator) -> sep_rev(TK_COMMA,enumerator) . TK_COMMA enumerator [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 211
-- On option(TK_COMMA) shift to state 219
## Reductions:
-- On TK_RBRACE reduce production option(TK_COMMA) ->

State 219:
## Known stack suffix:
## KW_ENUM TK_IDENTIFIER TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA)
## LR(1) items:
enum_specifier -> KW_ENUM TK_IDENTIFIER TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) . TK_RBRACE [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACE shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## KW_ENUM TK_IDENTIFIER TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE
## LR(1) items:
enum_specifier -> KW_ENUM TK_IDENTIFIER TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_specifier -> KW_ENUM TK_IDENTIFIER TK_LBRACE sep_rev(TK_COMMA,enumerator) option(TK_COMMA) TK_RBRACE

State 221:
## Known stack suffix:
## KW_DOUBLE
## LR(1) items:
basic_type_name -> KW_DOUBLE . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_DOUBLE

State 222:
## Known stack suffix:
## KW_DECIMALN
## LR(1) items:
basic_type_name -> KW_DECIMALN . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_DECIMALN

State 223:
## Known stack suffix:
## KW_DATATYPE
## LR(1) items:
datatype_specifier -> KW_DATATYPE . datatype_name TK_EQUALS datatype_declaring_list [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 92
-- On TK_IDENTIFIER shift to state 93
-- On identifier_or_typedef_name shift to state 224
-- On datatype_name shift to state 225
## Reductions:

State 224:
## Known stack suffix:
## identifier_or_typedef_name
## LR(1) items:
datatype_name -> identifier_or_typedef_name . [ TK_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype_name -> identifier_or_typedef_name

State 225:
## Known stack suffix:
## KW_DATATYPE datatype_name
## LR(1) items:
datatype_specifier -> KW_DATATYPE datatype_name . TK_EQUALS datatype_declaring_list [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_EQUALS shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## KW_DATATYPE datatype_name TK_EQUALS
## LR(1) items:
datatype_specifier -> KW_DATATYPE datatype_name TK_EQUALS . datatype_declaring_list [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_PIPE shift to state 227
-- On datatype_declaring_list shift to state 245
## Reductions:

State 227:
## Known stack suffix:
## TK_PIPE
## LR(1) items:
datatype_declaring_list -> TK_PIPE . sep(TK_PIPE,datatype_declarator) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_IDENTIFIER shift to state 228
-- On sep_rev(TK_PIPE,datatype_declarator) shift to state 240
-- On sep(TK_PIPE,datatype_declarator) shift to state 243
-- On datatype_declarator shift to state 244
## Reductions:

State 228:
## Known stack suffix:
## TK_IDENTIFIER
## LR(1) items:
datatype_declarator -> TK_IDENTIFIER . datatype_member_list [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_PIPE TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_LBRACK shift to state 229
-- On datatype_member_list shift to state 239
## Reductions:

State 229:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
datatype_member_list -> TK_LBRACK . sep(TK_COMMA,datatype_member) TK_RBRACK [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_PIPE TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_IDENTIFIER shift to state 230
-- On sep_rev(TK_COMMA,datatype_member) shift to state 233
-- On sep(TK_COMMA,datatype_member) shift to state 236
-- On datatype_member shift to state 238
## Reductions:

State 230:
## Known stack suffix:
## TK_IDENTIFIER
## LR(1) items:
datatype_member -> TK_IDENTIFIER . TK_COLON type_name [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COLON shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## TK_IDENTIFIER TK_COLON
## LR(1) items:
datatype_member -> TK_IDENTIFIER TK_COLON . type_name [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On type_name shift to state 232
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 232:
## Known stack suffix:
## TK_IDENTIFIER TK_COLON type_name
## LR(1) items:
datatype_member -> TK_IDENTIFIER TK_COLON type_name . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype_member -> TK_IDENTIFIER TK_COLON type_name

State 233:
## Known stack suffix:
## sep_rev(TK_COMMA,datatype_member)
## LR(1) items:
sep(TK_COMMA,datatype_member) -> sep_rev(TK_COMMA,datatype_member) . [ TK_RBRACK ]
sep_rev(TK_COMMA,datatype_member) -> sep_rev(TK_COMMA,datatype_member) . TK_COMMA datatype_member [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 234
## Reductions:
-- On TK_RBRACK reduce production sep(TK_COMMA,datatype_member) -> sep_rev(TK_COMMA,datatype_member)

State 234:
## Known stack suffix:
## sep_rev(TK_COMMA,datatype_member) TK_COMMA
## LR(1) items:
sep_rev(TK_COMMA,datatype_member) -> sep_rev(TK_COMMA,datatype_member) TK_COMMA . datatype_member [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_IDENTIFIER shift to state 230
-- On datatype_member shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## sep_rev(TK_COMMA,datatype_member) TK_COMMA datatype_member
## LR(1) items:
sep_rev(TK_COMMA,datatype_member) -> sep_rev(TK_COMMA,datatype_member) TK_COMMA datatype_member . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,datatype_member) -> sep_rev(TK_COMMA,datatype_member) TK_COMMA datatype_member

State 236:
## Known stack suffix:
## TK_LBRACK sep(TK_COMMA,datatype_member)
## LR(1) items:
datatype_member_list -> TK_LBRACK sep(TK_COMMA,datatype_member) . TK_RBRACK [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_PIPE TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_RBRACK shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## TK_LBRACK sep(TK_COMMA,datatype_member) TK_RBRACK
## LR(1) items:
datatype_member_list -> TK_LBRACK sep(TK_COMMA,datatype_member) TK_RBRACK . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_PIPE TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype_member_list -> TK_LBRACK sep(TK_COMMA,datatype_member) TK_RBRACK

State 238:
## Known stack suffix:
## datatype_member
## LR(1) items:
sep_rev(TK_COMMA,datatype_member) -> datatype_member . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,datatype_member) -> datatype_member

State 239:
## Known stack suffix:
## TK_IDENTIFIER datatype_member_list
## LR(1) items:
datatype_declarator -> TK_IDENTIFIER datatype_member_list . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_PIPE TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype_declarator -> TK_IDENTIFIER datatype_member_list

State 240:
## Known stack suffix:
## sep_rev(TK_PIPE,datatype_declarator)
## LR(1) items:
sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
sep_rev(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator) . TK_PIPE datatype_declarator [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_PIPE TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_PIPE shift to state 241
## Reductions:
-- On WC_DECL reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On TK_TYPEDEF_NAME reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On TK_STAR reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On TK_SEMICOLON reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On TK_RBRACK reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On TK_LSQBRACK reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On TK_LBRACK reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On TK_IDENTIFIER reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On TK_COMMA reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On TK_COLON reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_VOLATILE reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_TYPEDEF reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_THREAD reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_STATIC reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_RESTRICT reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_REGISTER reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_INLINE reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_EXTERN reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_EXTENSION reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_CONST reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_COMPLEX reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On KW_AUTO reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)
-- On EOF reduce production sep(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator)

State 241:
## Known stack suffix:
## sep_rev(TK_PIPE,datatype_declarator) TK_PIPE
## LR(1) items:
sep_rev(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator) TK_PIPE . datatype_declarator [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_PIPE TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_IDENTIFIER shift to state 228
-- On datatype_declarator shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## sep_rev(TK_PIPE,datatype_declarator) TK_PIPE datatype_declarator
## LR(1) items:
sep_rev(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator) TK_PIPE datatype_declarator . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_PIPE TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_PIPE,datatype_declarator) -> sep_rev(TK_PIPE,datatype_declarator) TK_PIPE datatype_declarator

State 243:
## Known stack suffix:
## TK_PIPE sep(TK_PIPE,datatype_declarator)
## LR(1) items:
datatype_declaring_list -> TK_PIPE sep(TK_PIPE,datatype_declarator) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype_declaring_list -> TK_PIPE sep(TK_PIPE,datatype_declarator)

State 244:
## Known stack suffix:
## datatype_declarator
## LR(1) items:
sep_rev(TK_PIPE,datatype_declarator) -> datatype_declarator . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_PIPE TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_PIPE,datatype_declarator) -> datatype_declarator

State 245:
## Known stack suffix:
## KW_DATATYPE datatype_name TK_EQUALS datatype_declaring_list
## LR(1) items:
datatype_specifier -> KW_DATATYPE datatype_name TK_EQUALS datatype_declaring_list . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype_specifier -> KW_DATATYPE datatype_name TK_EQUALS datatype_declaring_list

State 246:
## Known stack suffix:
## KW_CONST
## LR(1) items:
type_qualifier -> KW_CONST . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qualifier -> KW_CONST

State 247:
## Known stack suffix:
## KW_COMPLEX
## LR(1) items:
type_qualifier -> KW_COMPLEX . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qualifier -> KW_COMPLEX

State 248:
## Known stack suffix:
## KW_CHAR
## LR(1) items:
basic_type_name -> KW_CHAR . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_CHAR

State 249:
## Known stack suffix:
## KW_BOOL
## LR(1) items:
basic_type_name -> KW_BOOL . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_name -> KW_BOOL

State 250:
## Known stack suffix:
## typeof_type_specifier
## LR(1) items:
type_specifier_nosue -> typeof_type_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE EOF ]
typeof_type_specifier -> typeof_type_specifier . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_RESTRICT KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_ATTRIBUTE EOF ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_RESTRICT shift to state 196
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On type_qualifier shift to state 251
## Reductions:
-- On WC_DECL reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_TYPEDEF_NAME reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_STAR reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_RBRACK reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_LSQBRACK reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_LBRACK reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_IDENTIFIER reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_COMMA reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_COLON reduce production type_specifier_nosue -> typeof_type_specifier
-- On KW_FASTCALL reduce production type_specifier_nosue -> typeof_type_specifier
-- On KW_EXTENSION reduce production type_specifier_nosue -> typeof_type_specifier
-- On KW_DECLSPEC reduce production type_specifier_nosue -> typeof_type_specifier
-- On KW_ATTRIBUTE reduce production type_specifier_nosue -> typeof_type_specifier
-- On EOF reduce production type_specifier_nosue -> typeof_type_specifier

State 251:
## Known stack suffix:
## typeof_type_specifier type_qualifier
## LR(1) items:
typeof_type_specifier -> typeof_type_specifier type_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeof_type_specifier -> typeof_type_specifier type_qualifier

State 252:
## Known stack suffix:
## typeof_type_name
## LR(1) items:
typeof_type_specifier -> typeof_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeof_type_specifier -> typeof_type_name

State 253:
## Known stack suffix:
## typedef_type_specifier
## LR(1) items:
type_specifier_nosue -> typedef_type_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE EOF ]
typedef_type_specifier -> typedef_type_specifier . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_RESTRICT KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_ATTRIBUTE EOF ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_RESTRICT shift to state 196
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On type_qualifier shift to state 254
## Reductions:
-- On WC_DECL reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_TYPEDEF_NAME reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_STAR reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_RBRACK reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_LSQBRACK reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_LBRACK reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_IDENTIFIER reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_COMMA reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_COLON reduce production type_specifier_nosue -> typedef_type_specifier
-- On KW_FASTCALL reduce production type_specifier_nosue -> typedef_type_specifier
-- On KW_EXTENSION reduce production type_specifier_nosue -> typedef_type_specifier
-- On KW_DECLSPEC reduce production type_specifier_nosue -> typedef_type_specifier
-- On KW_ATTRIBUTE reduce production type_specifier_nosue -> typedef_type_specifier
-- On EOF reduce production type_specifier_nosue -> typedef_type_specifier

State 254:
## Known stack suffix:
## typedef_type_specifier type_qualifier
## LR(1) items:
typedef_type_specifier -> typedef_type_specifier type_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_type_specifier -> typedef_type_specifier type_qualifier

State 255:
## Known stack suffix:
## type_specifier_nosue
## LR(1) items:
type_specifier -> type_specifier_nosue . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier -> type_specifier_nosue

State 256:
## Known stack suffix:
## type_specifier
## LR(1) items:
type_name_noattr -> type_specifier . [ TK_RBRACK TK_COMMA EOF ]
type_name_noattr -> type_specifier . abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On TK_STAR shift to state 257
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 263
-- On unary_abstract_declarator shift to state 645
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_abstract_declarator shift to state 647
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 684
## Reductions:
-- On TK_RBRACK reduce production type_name_noattr -> type_specifier
-- On TK_COMMA reduce production type_name_noattr -> type_specifier
-- On EOF reduce production type_name_noattr -> type_specifier

State 257:
## Known stack suffix:
## TK_STAR
## LR(1) items:
unary_abstract_declarator -> TK_STAR . list(attribute) [ TK_RBRACK TK_COMMA EOF ]
unary_abstract_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) [ TK_RBRACK TK_COMMA EOF ]
unary_abstract_declarator -> TK_STAR . list(attribute) abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
unary_abstract_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 258
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 258:
## Known stack suffix:
## TK_STAR list(attribute)
## LR(1) items:
unary_abstract_declarator -> TK_STAR list(attribute) . [ TK_RBRACK TK_COMMA EOF ]
unary_abstract_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) [ TK_RBRACK TK_COMMA EOF ]
unary_abstract_declarator -> TK_STAR list(attribute) . abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
unary_abstract_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On TK_STAR shift to state 257
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 263
-- On KW_VOLATILE shift to state 531
-- On KW_RESTRICT shift to state 532
-- On KW_CONST shift to state 533
-- On unary_abstract_declarator shift to state 645
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_abstract_declarator shift to state 647
-- On pointer_type_qualifier shift to state 537
-- On nonempty_list_rev(pointer_type_qualifier) shift to state 542
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(pointer_type_qualifier) shift to state 683
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 671
## Reductions:
-- On TK_RBRACK reduce production unary_abstract_declarator -> TK_STAR list(attribute)
-- On TK_COMMA reduce production unary_abstract_declarator -> TK_STAR list(attribute)
-- On EOF reduce production unary_abstract_declarator -> TK_STAR list(attribute)

State 259:
## Known stack suffix:
## TK_LSQBRACK
## LR(1) items:
array_abstract_declarator -> TK_LSQBRACK . option(constant_expression) TK_RSQBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(constant_expression) shift to state 260
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On constant_expression shift to state 262
-- On conditional_expression shift to state 207
-- On cast_expression shift to state 108
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_RSQBRACK reduce production option(constant_expression) ->

State 260:
## Known stack suffix:
## TK_LSQBRACK option(constant_expression)
## LR(1) items:
array_abstract_declarator -> TK_LSQBRACK option(constant_expression) . TK_RSQBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On TK_RSQBRACK shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## TK_LSQBRACK option(constant_expression) TK_RSQBRACK
## LR(1) items:
array_abstract_declarator -> TK_LSQBRACK option(constant_expression) TK_RSQBRACK . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_abstract_declarator -> TK_LSQBRACK option(constant_expression) TK_RSQBRACK

State 262:
## Known stack suffix:
## constant_expression
## LR(1) items:
option(constant_expression) -> constant_expression . [ TK_RSQBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(constant_expression) -> constant_expression

State 263:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
postfix_abstract_declarator -> TK_LBRACK . list(attribute) unary_abstract_declarator TK_RBRACK [ TK_RBRACK TK_COMMA EOF ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) postfix_abstract_declarator TK_RBRACK [ TK_RBRACK TK_COMMA EOF ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) postfixing_abstract_declarator TK_RBRACK [ TK_RBRACK TK_COMMA EOF ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) unary_abstract_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
postfixing_abstract_declarator -> TK_LBRACK . option(forward_parameter_type_list) TK_RBRACK [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On sep_rev(TK_SEMICOLON,parameter_type_list) shift to state 264
-- On sep_rev(TK_COMMA,parameter_declaration) shift to state 266
-- On parameter_type_list shift to state 294
-- On parameter_declaration shift to state 295
-- On option(forward_parameter_type_list) shift to state 296
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 682
-- On forward_parameter_type_list shift to state 303
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_STAR reduce production list_rev(attribute) ->
-- On TK_RBRACK reduce production option(forward_parameter_type_list) ->
-- On TK_LSQBRACK reduce production list_rev(attribute) ->
-- On TK_LBRACK reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 264:
## Known stack suffix:
## sep_rev(TK_SEMICOLON,parameter_type_list)
## LR(1) items:
forward_parameter_type_list -> sep_rev(TK_SEMICOLON,parameter_type_list) . [ TK_RBRACK ]
sep_rev(TK_SEMICOLON,parameter_type_list) -> sep_rev(TK_SEMICOLON,parameter_type_list) . TK_SEMICOLON parameter_type_list [ TK_SEMICOLON TK_RBRACK ]
## Transitions:
-- On TK_SEMICOLON shift to state 265
## Reductions:
-- On TK_RBRACK reduce production forward_parameter_type_list -> sep_rev(TK_SEMICOLON,parameter_type_list)

State 265:
## Known stack suffix:
## sep_rev(TK_SEMICOLON,parameter_type_list) TK_SEMICOLON
## LR(1) items:
sep_rev(TK_SEMICOLON,parameter_type_list) -> sep_rev(TK_SEMICOLON,parameter_type_list) TK_SEMICOLON . parameter_type_list [ TK_SEMICOLON TK_RBRACK ]
## Transitions:
-- On sep_rev(TK_COMMA,parameter_declaration) shift to state 266
-- On parameter_type_list shift to state 681
-- On parameter_declaration shift to state 295
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 270
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 266:
## Known stack suffix:
## sep_rev(TK_COMMA,parameter_declaration)
## LR(1) items:
parameter_type_list -> sep_rev(TK_COMMA,parameter_declaration) . [ TK_SEMICOLON TK_RBRACK ]
parameter_type_list -> sep_rev(TK_COMMA,parameter_declaration) . TK_COMMA TK_ELLIPSIS [ TK_SEMICOLON TK_RBRACK ]
sep_rev(TK_COMMA,parameter_declaration) -> sep_rev(TK_COMMA,parameter_declaration) . TK_COMMA parameter_declaration [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 267
## Reductions:
-- On TK_SEMICOLON reduce production parameter_type_list -> sep_rev(TK_COMMA,parameter_declaration)
-- On TK_RBRACK reduce production parameter_type_list -> sep_rev(TK_COMMA,parameter_declaration)

State 267:
## Known stack suffix:
## sep_rev(TK_COMMA,parameter_declaration) TK_COMMA
## LR(1) items:
parameter_type_list -> sep_rev(TK_COMMA,parameter_declaration) TK_COMMA . TK_ELLIPSIS [ TK_SEMICOLON TK_RBRACK ]
sep_rev(TK_COMMA,parameter_declaration) -> sep_rev(TK_COMMA,parameter_declaration) TK_COMMA . parameter_declaration [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_ELLIPSIS shift to state 268
-- On parameter_declaration shift to state 269
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 270
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 268:
## Known stack suffix:
## sep_rev(TK_COMMA,parameter_declaration) TK_COMMA TK_ELLIPSIS
## LR(1) items:
parameter_type_list -> sep_rev(TK_COMMA,parameter_declaration) TK_COMMA TK_ELLIPSIS . [ TK_SEMICOLON TK_RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_type_list -> sep_rev(TK_COMMA,parameter_declaration) TK_COMMA TK_ELLIPSIS

State 269:
## Known stack suffix:
## sep_rev(TK_COMMA,parameter_declaration) TK_COMMA parameter_declaration
## LR(1) items:
sep_rev(TK_COMMA,parameter_declaration) -> sep_rev(TK_COMMA,parameter_declaration) TK_COMMA parameter_declaration . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,parameter_declaration) -> sep_rev(TK_COMMA,parameter_declaration) TK_COMMA parameter_declaration

State 270:
## Known stack suffix:
## list(attribute)
## LR(1) items:
parameter_declaration -> list(attribute) . parameter_declaration_noattr [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On WC_TYPE shift to state 2
-- On TK_TYPEDEF_NAME shift to state 3
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On typeof_type_specifier shift to state 278
-- On typeof_type_name shift to state 252
-- On typeof_declaration_specifier shift to state 280
-- On typedef_type_specifier shift to state 284
-- On typedef_declaration_specifier shift to state 286
-- On type_specifier_nosue shift to state 255
-- On type_specifier shift to state 288
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 313
-- On sue_declaration_specifier shift to state 316
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 627
-- On parameter_declaration_noattr shift to state 633
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list(type_qualifier) shift to state 634
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On declaration_specifier_nosue shift to state 643
-- On declaration_specifier shift to state 644
-- On declaration_qualifier_list shift to state 653
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 664
-- On basic_type_name shift to state 618
-- On basic_declaration_specifier shift to state 666
## Reductions:

State 271:
## Known stack suffix:
## KW_TYPEDEF
## LR(1) items:
storage_class -> KW_TYPEDEF . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class -> KW_TYPEDEF

State 272:
## Known stack suffix:
## KW_THREAD
## LR(1) items:
storage_class -> KW_THREAD . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class -> KW_THREAD

State 273:
## Known stack suffix:
## KW_STATIC
## LR(1) items:
storage_class -> KW_STATIC . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class -> KW_STATIC

State 274:
## Known stack suffix:
## KW_REGISTER
## LR(1) items:
storage_class -> KW_REGISTER . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class -> KW_REGISTER

State 275:
## Known stack suffix:
## KW_INLINE
## LR(1) items:
storage_class -> KW_INLINE . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class -> KW_INLINE

State 276:
## Known stack suffix:
## KW_EXTERN
## LR(1) items:
storage_class -> KW_EXTERN . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class -> KW_EXTERN

State 277:
## Known stack suffix:
## KW_AUTO
## LR(1) items:
storage_class -> KW_AUTO . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class -> KW_AUTO

State 278:
## Known stack suffix:
## typeof_type_specifier
## LR(1) items:
type_specifier_nosue -> typeof_type_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
typeof_declaration_specifier -> typeof_type_specifier . storage_class [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
typeof_type_specifier -> typeof_type_specifier . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_INLINE shift to state 275
-- On KW_EXTERN shift to state 276
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 251
-- On storage_class shift to state 279
## Reductions:
-- On WC_DECL reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_TYPEDEF_NAME reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_STAR reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_SEMICOLON reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_RBRACK reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_LSQBRACK reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_LBRACK reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_IDENTIFIER reduce production type_specifier_nosue -> typeof_type_specifier
-- On TK_COMMA reduce production type_specifier_nosue -> typeof_type_specifier
-- On KW_FASTCALL reduce production type_specifier_nosue -> typeof_type_specifier
-- On KW_EXTENSION reduce production type_specifier_nosue -> typeof_type_specifier
-- On KW_DECLSPEC reduce production type_specifier_nosue -> typeof_type_specifier
-- On KW_ATTRIBUTE reduce production type_specifier_nosue -> typeof_type_specifier

State 279:
## Known stack suffix:
## typeof_type_specifier storage_class
## LR(1) items:
typeof_declaration_specifier -> typeof_type_specifier storage_class . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeof_declaration_specifier -> typeof_type_specifier storage_class

State 280:
## Known stack suffix:
## typeof_declaration_specifier
## LR(1) items:
declaration_specifier_nosue -> typeof_declaration_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
typeof_declaration_specifier -> typeof_declaration_specifier . declaration_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_INLINE shift to state 275
-- On KW_EXTERN shift to state 276
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 281
-- On storage_class shift to state 282
-- On declaration_qualifier shift to state 283
## Reductions:
-- On WC_DECL reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On TK_TYPEDEF_NAME reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On TK_STAR reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On TK_SEMICOLON reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On TK_RBRACK reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On TK_LSQBRACK reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On TK_LBRACK reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On TK_IDENTIFIER reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On TK_COMMA reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On KW_FASTCALL reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On KW_EXTENSION reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On KW_DECLSPEC reduce production declaration_specifier_nosue -> typeof_declaration_specifier
-- On KW_ATTRIBUTE reduce production declaration_specifier_nosue -> typeof_declaration_specifier

State 281:
## Known stack suffix:
## type_qualifier
## LR(1) items:
declaration_qualifier -> type_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_qualifier -> type_qualifier

State 282:
## Known stack suffix:
## storage_class
## LR(1) items:
declaration_qualifier -> storage_class . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_qualifier -> storage_class

State 283:
## Known stack suffix:
## typeof_declaration_specifier declaration_qualifier
## LR(1) items:
typeof_declaration_specifier -> typeof_declaration_specifier declaration_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeof_declaration_specifier -> typeof_declaration_specifier declaration_qualifier

State 284:
## Known stack suffix:
## typedef_type_specifier
## LR(1) items:
type_specifier_nosue -> typedef_type_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
typedef_declaration_specifier -> typedef_type_specifier . storage_class [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
typedef_type_specifier -> typedef_type_specifier . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_INLINE shift to state 275
-- On KW_EXTERN shift to state 276
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 254
-- On storage_class shift to state 285
## Reductions:
-- On WC_DECL reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_TYPEDEF_NAME reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_STAR reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_SEMICOLON reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_RBRACK reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_LSQBRACK reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_LBRACK reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_IDENTIFIER reduce production type_specifier_nosue -> typedef_type_specifier
-- On TK_COMMA reduce production type_specifier_nosue -> typedef_type_specifier
-- On KW_FASTCALL reduce production type_specifier_nosue -> typedef_type_specifier
-- On KW_EXTENSION reduce production type_specifier_nosue -> typedef_type_specifier
-- On KW_DECLSPEC reduce production type_specifier_nosue -> typedef_type_specifier
-- On KW_ATTRIBUTE reduce production type_specifier_nosue -> typedef_type_specifier

State 285:
## Known stack suffix:
## typedef_type_specifier storage_class
## LR(1) items:
typedef_declaration_specifier -> typedef_type_specifier storage_class . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_declaration_specifier -> typedef_type_specifier storage_class

State 286:
## Known stack suffix:
## typedef_declaration_specifier
## LR(1) items:
declaration_specifier_nosue -> typedef_declaration_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
typedef_declaration_specifier -> typedef_declaration_specifier . declaration_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_INLINE shift to state 275
-- On KW_EXTERN shift to state 276
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 281
-- On storage_class shift to state 282
-- On declaration_qualifier shift to state 287
## Reductions:
-- On WC_DECL reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On TK_TYPEDEF_NAME reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On TK_STAR reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On TK_SEMICOLON reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On TK_RBRACK reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On TK_LSQBRACK reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On TK_LBRACK reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On TK_IDENTIFIER reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On TK_COMMA reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On KW_FASTCALL reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On KW_EXTENSION reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On KW_DECLSPEC reduce production declaration_specifier_nosue -> typedef_declaration_specifier
-- On KW_ATTRIBUTE reduce production declaration_specifier_nosue -> typedef_declaration_specifier

State 287:
## Known stack suffix:
## typedef_declaration_specifier declaration_qualifier
## LR(1) items:
typedef_declaration_specifier -> typedef_declaration_specifier declaration_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_declaration_specifier -> typedef_declaration_specifier declaration_qualifier

State 288:
## Known stack suffix:
## type_specifier
## LR(1) items:
parameter_declaration_noattr -> type_specifier . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> type_specifier . abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> type_specifier . identifier_declarator list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> type_specifier . parameter_typedef_declarator list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 291
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 293
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On unary_abstract_declarator shift to state 645
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 647
-- On paren_identifier_declarator shift to state 593
-- On parameter_typedef_declarator shift to state 676
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On identifier_declarator shift to state 678
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 680
## Reductions:
-- On TK_SEMICOLON reduce production parameter_declaration_noattr -> type_specifier
-- On TK_RBRACK reduce production parameter_declaration_noattr -> type_specifier
-- On TK_COMMA reduce production parameter_declaration_noattr -> type_specifier

State 289:
## Known stack suffix:
## WC_DECL
## LR(1) items:
paren_identifier_declarator -> WC_DECL . [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_identifier_declarator -> WC_DECL

State 290:
## Known stack suffix:
## TK_TYPEDEF_NAME
## LR(1) items:
simple_typedef_declarator -> TK_TYPEDEF_NAME . [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_typedef_declarator -> TK_TYPEDEF_NAME

State 291:
## Known stack suffix:
## TK_STAR
## LR(1) items:
clean_typedef_declarator -> TK_STAR . list(attribute) parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
clean_typedef_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
unary_abstract_declarator -> TK_STAR . list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR . list(attribute) abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_identifier_declarator -> TK_STAR . list(attribute) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
unary_identifier_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 292
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 292:
## Known stack suffix:
## TK_STAR list(attribute)
## LR(1) items:
clean_typedef_declarator -> TK_STAR list(attribute) . parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
clean_typedef_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
unary_abstract_declarator -> TK_STAR list(attribute) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR list(attribute) . abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_identifier_declarator -> TK_STAR list(attribute) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
unary_identifier_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 291
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 293
-- On TK_IDENTIFIER shift to state 299
-- On KW_VOLATILE shift to state 531
-- On KW_RESTRICT shift to state 532
-- On KW_CONST shift to state 533
-- On unary_identifier_declarator shift to state 534
-- On unary_abstract_declarator shift to state 645
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 647
-- On pointer_type_qualifier shift to state 537
-- On paren_identifier_declarator shift to state 593
-- On parameter_typedef_declarator shift to state 540
-- On nonempty_list_rev(pointer_type_qualifier) shift to state 542
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(pointer_type_qualifier) shift to state 675
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On identifier_declarator shift to state 554
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 671
## Reductions:
-- On TK_SEMICOLON reduce production unary_abstract_declarator -> TK_STAR list(attribute)
-- On TK_RBRACK reduce production unary_abstract_declarator -> TK_STAR list(attribute)
-- On TK_COMMA reduce production unary_abstract_declarator -> TK_STAR list(attribute)

State 293:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
paren_identifier_declarator -> TK_LBRACK . list(attribute) paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) unary_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) postfix_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) unary_abstract_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfixing_abstract_declarator -> TK_LBRACK . option(forward_parameter_type_list) TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On sep_rev(TK_SEMICOLON,parameter_type_list) shift to state 264
-- On sep_rev(TK_COMMA,parameter_declaration) shift to state 266
-- On parameter_type_list shift to state 294
-- On parameter_declaration shift to state 295
-- On option(forward_parameter_type_list) shift to state 296
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 298
-- On forward_parameter_type_list shift to state 303
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On WC_DECL reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_STAR reduce production list_rev(attribute) ->
-- On TK_RBRACK reduce production option(forward_parameter_type_list) ->
-- On TK_LSQBRACK reduce production list_rev(attribute) ->
-- On TK_LBRACK reduce production list_rev(attribute) ->
-- On TK_IDENTIFIER reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 294:
## Known stack suffix:
## parameter_type_list
## LR(1) items:
sep_rev(TK_SEMICOLON,parameter_type_list) -> parameter_type_list . [ TK_SEMICOLON TK_RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_SEMICOLON,parameter_type_list) -> parameter_type_list

State 295:
## Known stack suffix:
## parameter_declaration
## LR(1) items:
sep_rev(TK_COMMA,parameter_declaration) -> parameter_declaration . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,parameter_declaration) -> parameter_declaration

State 296:
## Known stack suffix:
## TK_LBRACK option(forward_parameter_type_list)
## LR(1) items:
postfixing_abstract_declarator -> TK_LBRACK option(forward_parameter_type_list) . TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On TK_RBRACK shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## TK_LBRACK option(forward_parameter_type_list) TK_RBRACK
## LR(1) items:
postfixing_abstract_declarator -> TK_LBRACK option(forward_parameter_type_list) TK_RBRACK . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfixing_abstract_declarator -> TK_LBRACK option(forward_parameter_type_list) TK_RBRACK

State 298:
## Known stack suffix:
## TK_LBRACK list(attribute)
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
parameter_declaration -> list(attribute) . parameter_declaration_noattr [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
paren_identifier_declarator -> TK_LBRACK list(attribute) . paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . unary_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . postfix_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . unary_abstract_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On WC_TYPE shift to state 2
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 3
-- On TK_STAR shift to state 291
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 293
-- On TK_IDENTIFIER shift to state 299
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On unary_identifier_declarator shift to state 300
-- On unary_abstract_declarator shift to state 309
-- On typeof_type_specifier shift to state 278
-- On typeof_type_name shift to state 252
-- On typeof_declaration_specifier shift to state 280
-- On typedef_type_specifier shift to state 284
-- On typedef_declaration_specifier shift to state 286
-- On type_specifier_nosue shift to state 255
-- On type_specifier shift to state 288
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 313
-- On sue_declaration_specifier shift to state 316
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 627
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 629
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 631
-- On paren_identifier_declarator shift to state 592
-- On parameter_declaration_noattr shift to state 633
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(type_qualifier) shift to state 634
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On declaration_specifier_nosue shift to state 643
-- On declaration_specifier shift to state 644
-- On declaration_qualifier_list shift to state 653
-- On datatype_specifier shift to state 612
-- On clean_typedef_declarator shift to state 525
-- On clean_postfix_typedef_declarator shift to state 528
-- On basic_type_specifier shift to state 664
-- On basic_type_name shift to state 618
-- On basic_declaration_specifier shift to state 666
-- On array_abstract_declarator shift to state 308
## Reductions:

State 299:
## Known stack suffix:
## TK_IDENTIFIER
## LR(1) items:
simple_identifier_declarator -> TK_IDENTIFIER . [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_identifier_declarator -> TK_IDENTIFIER

State 300:
## Known stack suffix:
## TK_LBRACK list(attribute) unary_identifier_declarator
## LR(1) items:
postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator . TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_RBRACK shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
## LR(1) items:
postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK . postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 304
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:
-- On TK_SEMICOLON reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
-- On TK_RBRACK reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
-- On TK_LBRACE reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
-- On TK_EQUALS reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
-- On TK_COMMA reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
-- On TK_COLON reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
-- On KW_FASTCALL reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
-- On KW_DECLSPEC reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
-- On KW_ATTRIBUTE reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK
-- On KW_ASM reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK

State 302:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
postfixing_abstract_declarator -> TK_LBRACK . option(forward_parameter_type_list) TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On sep_rev(TK_SEMICOLON,parameter_type_list) shift to state 264
-- On sep_rev(TK_COMMA,parameter_declaration) shift to state 266
-- On parameter_type_list shift to state 294
-- On parameter_declaration shift to state 295
-- On option(forward_parameter_type_list) shift to state 296
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 270
-- On forward_parameter_type_list shift to state 303
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_RBRACK reduce production option(forward_parameter_type_list) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 303:
## Known stack suffix:
## forward_parameter_type_list
## LR(1) items:
option(forward_parameter_type_list) -> forward_parameter_type_list . [ TK_RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(forward_parameter_type_list) -> forward_parameter_type_list

State 304:
## Known stack suffix:
## TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator
## LR(1) items:
postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_identifier_declarator -> TK_LBRACK list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator

State 305:
## Known stack suffix:
## nonempty_list_rev(array_abstract_declarator)
## LR(1) items:
nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator) . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
nonempty_list_rev(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator) . array_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On array_abstract_declarator shift to state 306
## Reductions:
-- On WC_TYPE reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On TK_TYPEDEF_NAME reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On TK_SEMICOLON reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On TK_RBRACK reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On TK_LBRACE reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On TK_EQUALS reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On TK_COMMA reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On TK_COLON reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_WCHAR_T reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_VOLATILE reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_VOID reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_VA_LIST reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_UNSIGNED reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_UNION reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_TYPEOF reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_TYPEDEF reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_THREAD reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_STRUCT reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_STATIC reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_SIGNED reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_SHORT reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_RESTRICT reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_REGISTER reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_LONG reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_INTN reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_INT reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_INLINE reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_FLOATN reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_FLOAT reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_FASTCALL reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_EXTERN reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_ENUM reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_DOUBLE reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_DECLSPEC reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_DECIMALN reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_DATATYPE reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_CONST reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_COMPLEX reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_CHAR reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_BOOL reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_AUTO reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_ATTRIBUTE reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On KW_ASM reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)
-- On EOF reduce production nonempty_list(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator)

State 306:
## Known stack suffix:
## nonempty_list_rev(array_abstract_declarator) array_abstract_declarator
## LR(1) items:
nonempty_list_rev(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator) array_abstract_declarator . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(array_abstract_declarator) -> nonempty_list_rev(array_abstract_declarator) array_abstract_declarator

State 307:
## Known stack suffix:
## nonempty_list(array_abstract_declarator)
## LR(1) items:
postfixing_abstract_declarator -> nonempty_list(array_abstract_declarator) . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfixing_abstract_declarator -> nonempty_list(array_abstract_declarator)

State 308:
## Known stack suffix:
## array_abstract_declarator
## LR(1) items:
nonempty_list_rev(array_abstract_declarator) -> array_abstract_declarator . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(array_abstract_declarator) -> array_abstract_declarator

State 309:
## Known stack suffix:
## TK_LBRACK list(attribute) unary_abstract_declarator
## LR(1) items:
postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator . TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On TK_RBRACK shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK
## LR(1) items:
postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK . postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 311
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:
-- On TK_SEMICOLON reduce production postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK
-- On TK_RBRACK reduce production postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK
-- On TK_COMMA reduce production postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK
-- On EOF reduce production postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK

State 311:
## Known stack suffix:
## TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK postfixing_abstract_declarator
## LR(1) items:
postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK postfixing_abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_abstract_declarator -> TK_LBRACK list(attribute) unary_abstract_declarator TK_RBRACK postfixing_abstract_declarator

State 312:
## Known stack suffix:
## type_qualifier
## LR(1) items:
nonempty_list_rev(type_qualifier) -> type_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(type_qualifier) -> type_qualifier

State 313:
## Known stack suffix:
## sue_type_specifier
## LR(1) items:
sue_declaration_specifier -> sue_type_specifier . storage_class [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_CONST KW_COMPLEX KW_AUTO ]
sue_type_specifier -> sue_type_specifier . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_CONST KW_COMPLEX KW_AUTO ]
type_specifier -> sue_type_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_INLINE shift to state 275
-- On KW_EXTERN shift to state 276
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 314
-- On storage_class shift to state 315
## Reductions:
-- On WC_DECL reduce production type_specifier -> sue_type_specifier
-- On TK_TYPEDEF_NAME reduce production type_specifier -> sue_type_specifier
-- On TK_STAR reduce production type_specifier -> sue_type_specifier
-- On TK_SEMICOLON reduce production type_specifier -> sue_type_specifier
-- On TK_RBRACK reduce production type_specifier -> sue_type_specifier
-- On TK_LSQBRACK reduce production type_specifier -> sue_type_specifier
-- On TK_LBRACK reduce production type_specifier -> sue_type_specifier
-- On TK_IDENTIFIER reduce production type_specifier -> sue_type_specifier
-- On TK_COMMA reduce production type_specifier -> sue_type_specifier

State 314:
## Known stack suffix:
## sue_type_specifier type_qualifier
## LR(1) items:
sue_type_specifier -> sue_type_specifier type_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sue_type_specifier -> sue_type_specifier type_qualifier

State 315:
## Known stack suffix:
## sue_type_specifier storage_class
## LR(1) items:
sue_declaration_specifier -> sue_type_specifier storage_class . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sue_declaration_specifier -> sue_type_specifier storage_class

State 316:
## Known stack suffix:
## sue_declaration_specifier
## LR(1) items:
declaration_specifier -> sue_declaration_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA ]
sue_declaration_specifier -> sue_declaration_specifier . declaration_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_CONST KW_COMPLEX KW_AUTO ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_INLINE shift to state 275
-- On KW_EXTERN shift to state 276
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 281
-- On storage_class shift to state 282
-- On declaration_qualifier shift to state 317
## Reductions:
-- On WC_DECL reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_TYPEDEF_NAME reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_STAR reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_SEMICOLON reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_RBRACK reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_LSQBRACK reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_LBRACK reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_IDENTIFIER reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_COMMA reduce production declaration_specifier -> sue_declaration_specifier

State 317:
## Known stack suffix:
## sue_declaration_specifier declaration_qualifier
## LR(1) items:
sue_declaration_specifier -> sue_declaration_specifier declaration_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sue_declaration_specifier -> sue_declaration_specifier declaration_qualifier

State 318:
## Known stack suffix:
## struct_or_union_specifier
## LR(1) items:
elaborated_type_name -> struct_or_union_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elaborated_type_name -> struct_or_union_specifier

State 319:
## Known stack suffix:
## struct_or_union
## LR(1) items:
struct_or_union_specifier -> struct_or_union . list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
struct_or_union_specifier -> struct_or_union . list(attribute) identifier_or_typedef_name list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
struct_or_union_specifier -> struct_or_union . list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 320
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 320:
## Known stack suffix:
## struct_or_union list(attribute)
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) . TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
struct_or_union_specifier -> struct_or_union list(attribute) . identifier_or_typedef_name list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
struct_or_union_specifier -> struct_or_union list(attribute) . identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 92
-- On TK_LBRACE shift to state 321
-- On TK_IDENTIFIER shift to state 93
-- On identifier_or_typedef_name shift to state 619
## Reductions:

State 321:
## Known stack suffix:
## struct_or_union list(attribute) TK_LBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) TK_LBRACE . struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On struct_declaration_list_opt shift to state 322
-- On struct_declaration_list shift to state 325
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 582
## Reductions:
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_RBRACE reduce production struct_declaration_list_opt ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTENSION reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 322:
## Known stack suffix:
## struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt . TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_RBRACE shift to state 323
## Reductions:

State 323:
## Known stack suffix:
## struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE . list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 324
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 324:
## Known stack suffix:
## struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute)
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_or_union_specifier -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute)

State 325:
## Known stack suffix:
## struct_declaration_list
## LR(1) items:
struct_declaration_list -> struct_declaration_list . list(attribute) struct_declaration [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
struct_declaration_list_opt -> struct_declaration_list . [ TK_RBRACE ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 326
## Reductions:
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_RBRACE reduce production struct_declaration_list_opt -> struct_declaration_list
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTENSION reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 326:
## Known stack suffix:
## struct_declaration_list list(attribute)
## LR(1) items:
struct_declaration_list -> struct_declaration_list list(attribute) . struct_declaration [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 3
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTENSION shift to state 327
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_specifier shift to state 250
-- On typeof_type_name shift to state 252
-- On typedef_type_specifier shift to state 253
-- On type_specifier_nosue shift to state 328
-- On type_specifier shift to state 574
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 576
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 577
-- On struct_default_declaring_list shift to state 583
-- On struct_declaring_list shift to state 598
-- On struct_declaration shift to state 626
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list(type_qualifier) shift to state 605
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 615
-- On basic_type_name shift to state 618
## Reductions:

State 327:
## Known stack suffix:
## KW_EXTENSION
## LR(1) items:
struct_declaration -> KW_EXTENSION . struct_declaration [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 3
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTENSION shift to state 327
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_specifier shift to state 250
-- On typeof_type_name shift to state 252
-- On typedef_type_specifier shift to state 253
-- On type_specifier_nosue shift to state 328
-- On type_specifier shift to state 574
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 576
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 577
-- On struct_default_declaring_list shift to state 583
-- On struct_declaring_list shift to state 598
-- On struct_declaration shift to state 625
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list(type_qualifier) shift to state 605
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 615
-- On basic_type_name shift to state 618
## Reductions:

State 328:
## Known stack suffix:
## type_specifier_nosue
## LR(1) items:
struct_declaring_list -> type_specifier_nosue . nonempty_list(attribute) struct_declarator [ TK_SEMICOLON TK_COMMA ]
type_specifier -> type_specifier_nosue . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_EXTENSION ]
## Transitions:
-- On KW_FASTCALL shift to state 50
-- On KW_DECLSPEC shift to state 51
-- On KW_ATTRIBUTE shift to state 329
-- On nonempty_list_rev(attribute) shift to state 491
-- On nonempty_list(attribute) shift to state 493
-- On attribute shift to state 573
## Reductions:
-- On WC_DECL reduce production type_specifier -> type_specifier_nosue
-- On TK_TYPEDEF_NAME reduce production type_specifier -> type_specifier_nosue
-- On TK_STAR reduce production type_specifier -> type_specifier_nosue
-- On TK_LBRACK reduce production type_specifier -> type_specifier_nosue
-- On TK_IDENTIFIER reduce production type_specifier -> type_specifier_nosue
-- On TK_COLON reduce production type_specifier -> type_specifier_nosue
-- On KW_EXTENSION reduce production type_specifier -> type_specifier_nosue

State 329:
## Known stack suffix:
## KW_ATTRIBUTE
## LR(1) items:
attribute -> KW_ATTRIBUTE . TK_LBRACK TK_LBRACK option(sep(TK_COMMA,attrib)) TK_RBRACK TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACK shift to state 330
## Reductions:

State 330:
## Known stack suffix:
## KW_ATTRIBUTE TK_LBRACK
## LR(1) items:
attribute -> KW_ATTRIBUTE TK_LBRACK . TK_LBRACK option(sep(TK_COMMA,attrib)) TK_RBRACK TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACK shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## KW_ATTRIBUTE TK_LBRACK TK_LBRACK
## LR(1) items:
attribute -> KW_ATTRIBUTE TK_LBRACK TK_LBRACK . option(sep(TK_COMMA,attrib)) TK_RBRACK TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On KW_ATTR_WEAKREF shift to state 53
-- On KW_ATTR_WEAK shift to state 54
-- On KW_ATTR_WARN_UNUSED_RESULT shift to state 55
-- On KW_ATTR_VLIW shift to state 56
-- On KW_ATTR_VISIBILITY shift to state 57
-- On KW_ATTR_VERSION_ID shift to state 68
-- On KW_ATTR_VECTOR_SIZE shift to state 69
-- On KW_ATTR_USED shift to state 332
-- On KW_ATTR_UNUSED shift to state 333
-- On KW_ATTR_TRAP_EXIT shift to state 334
-- On KW_ATTR_TRANSPARENT_UNION shift to state 335
-- On KW_ATTR_TLS_MODEL shift to state 336
-- On KW_ATTR_TINY_DATA shift to state 337
-- On KW_ATTR_TINY shift to state 338
-- On KW_ATTR_THISCALL shift to state 339
-- On KW_ATTR_TARGET shift to state 340
-- On KW_ATTR_SYSV_ABI shift to state 342
-- On KW_ATTR_SYSCALL_LINKAGE shift to state 343
-- On KW_ATTR_STDCALL shift to state 344
-- On KW_ATTR_SSEREGPARM shift to state 345
-- On KW_ATTR_SP_SWITCH shift to state 346
-- On KW_ATTR_SPU_VECTOR shift to state 347
-- On KW_ATTR_SIGNAL shift to state 348
-- On KW_ATTR_SHORT_CALL shift to state 349
-- On KW_ATTR_SHORTCALL shift to state 350
-- On KW_ATTR_SHARED shift to state 351
-- On KW_ATTR_SENTINEL shift to state 352
-- On KW_ATTR_SELECTANY shift to state 353
-- On KW_ATTR_SECTION shift to state 354
-- On KW_ATTR_SAVE_VOLATILES shift to state 356
-- On KW_ATTR_SAVEALL shift to state 357
-- On KW_ATTR_RETURNS_TWICE shift to state 358
-- On KW_ATTR_RESBANK shift to state 359
-- On KW_ATTR_REGPARM shift to state 360
-- On KW_ATTR_PURE shift to state 367
-- On KW_ATTR_PROGMEM shift to state 368
-- On KW_ATTR_PCS shift to state 369
-- On KW_ATTR_PACKED shift to state 370
-- On KW_ATTR_OS_TASK shift to state 371
-- On KW_ATTR_OS_MAIN shift to state 372
-- On KW_ATTR_OPTIMIZE shift to state 373
-- On KW_ATTR_NO_SPLIT_STACK shift to state 379
-- On KW_ATTR_NO_INSTRUMENT_FUNCTION shift to state 380
-- On KW_ATTR_NOTSHARED shift to state 381
-- On KW_ATTR_NOTHROW shift to state 382
-- On KW_ATTR_NORETURN shift to state 383
-- On KW_ATTR_NONNULL shift to state 384
-- On KW_ATTR_NOMIPS16 shift to state 395
-- On KW_ATTR_NOINLINE shift to state 396
-- On KW_ATTR_NOCOMMON shift to state 397
-- On KW_ATTR_NOCLONE shift to state 398
-- On KW_ATTR_NMI_HANDLER shift to state 399
-- On KW_ATTR_NESTING shift to state 400
-- On KW_ATTR_NEAR shift to state 401
-- On KW_ATTR_NAKED shift to state 402
-- On KW_ATTR_MS_STRUCT shift to state 403
-- On KW_ATTR_MS_HOOK_PROLOGUE shift to state 404
-- On KW_ATTR_MS_ABI shift to state 405
-- On KW_ATTR_MODEL shift to state 406
-- On KW_ATTR_MODE shift to state 407
-- On KW_ATTR_MIPS16 shift to state 414
-- On KW_ATTR_MAY_ALIAS shift to state 415
-- On KW_ATTR_MALLOC shift to state 416
-- On KW_ATTR_LONG_CALL shift to state 417
-- On KW_ATTR_LONGCALL shift to state 418
-- On KW_ATTR_LEAF shift to state 419
-- On KW_ATTR_L2 shift to state 420
-- On KW_ATTR_L1_TEXT shift to state 421
-- On KW_ATTR_L1_DATA_B shift to state 422
-- On KW_ATTR_L1_DATA_A shift to state 423
-- On KW_ATTR_L1_DATA shift to state 424
-- On KW_ATTR_KSPISUSP shift to state 425
-- On KW_ATTR_ISR shift to state 426
-- On KW_ATTR_IO shift to state 427
-- On KW_ATTR_INTERRUPT_THREAD shift to state 428
-- On KW_ATTR_INTERRUPT_HANDLER shift to state 429
-- On KW_ATTR_INTERRUPT shift to state 430
-- On KW_ATTR_IFUNC shift to state 432
-- On KW_ATTR_HOT shift to state 433
-- On KW_ATTR_GNU_INLINE shift to state 434
-- On KW_ATTR_GCC_STRUCT shift to state 435
-- On KW_ATTR_FUNCTION_VECTOR shift to state 436
-- On KW_ATTR_FORMAT_ARG shift to state 437
-- On KW_ATTR_FORMAT shift to state 439
-- On KW_ATTR_FORCE_ALIGN_ARG_POINTER shift to state 447
-- On KW_ATTR_FLATTEN shift to state 448
-- On KW_ATTR_FAST_INTERRUPT shift to state 449
-- On KW_ATTR_FASTCALL shift to state 450
-- On KW_ATTR_FAR shift to state 451
-- On KW_ATTR_EXTERNALLY_VISIBLE shift to state 452
-- On KW_ATTR_EXCEPTION_HANDLER shift to state 453
-- On KW_ATTR_EIGHTBIT_DATA shift to state 454
-- On KW_ATTR_DLLIMPORT shift to state 455
-- On KW_ATTR_DLLEXPORT shift to state 456
-- On KW_ATTR_DISINTERRUPT shift to state 457
-- On KW_ATTR_DESTRUCTOR shift to state 458
-- On KW_ATTR_DEPRECATED shift to state 459
-- On KW_ATTR_CONSTRUCTOR shift to state 460
-- On KW_ATTR_CONST shift to state 461
-- On KW_ATTR_COMMON shift to state 462
-- On KW_ATTR_COLD shift to state 463
-- On KW_ATTR_CLEANUP shift to state 464
-- On KW_ATTR_CDECL shift to state 466
-- On KW_ATTR_CB shift to state 467
-- On KW_ATTR_CALLEE_POP_AGGREGATE_RETURN shift to state 468
-- On KW_ATTR_BELOW100 shift to state 470
-- On KW_ATTR_BASED shift to state 471
-- On KW_ATTR_BACK_SWITCH shift to state 472
-- On KW_ATTR_ARTIFICIAL shift to state 473
-- On KW_ATTR_ALWAYS_INLINE shift to state 474
-- On KW_ATTR_ALTIVEC shift to state 475
-- On KW_ATTR_ALLOC_SIZE shift to state 476
-- On KW_ATTR_ALIGNED shift to state 478
-- On KW_ATTR_ALIAS shift to state 481
-- On sep_rev(TK_COMMA,attrib) shift to state 483
-- On sep(TK_COMMA,attrib) shift to state 486
-- On option(sep(TK_COMMA,attrib)) shift to state 487
-- On attrib shift to state 490
## Reductions:
-- On TK_RBRACK reduce production option(sep(TK_COMMA,attrib)) ->

State 332:
## Known stack suffix:
## KW_ATTR_USED
## LR(1) items:
attrib -> KW_ATTR_USED . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_USED

State 333:
## Known stack suffix:
## KW_ATTR_UNUSED
## LR(1) items:
attrib -> KW_ATTR_UNUSED . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_UNUSED

State 334:
## Known stack suffix:
## KW_ATTR_TRAP_EXIT
## LR(1) items:
attrib -> KW_ATTR_TRAP_EXIT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_TRAP_EXIT

State 335:
## Known stack suffix:
## KW_ATTR_TRANSPARENT_UNION
## LR(1) items:
attrib -> KW_ATTR_TRANSPARENT_UNION . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_TRANSPARENT_UNION

State 336:
## Known stack suffix:
## KW_ATTR_TLS_MODEL
## LR(1) items:
attrib -> KW_ATTR_TLS_MODEL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_TLS_MODEL

State 337:
## Known stack suffix:
## KW_ATTR_TINY_DATA
## LR(1) items:
attrib -> KW_ATTR_TINY_DATA . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_TINY_DATA

State 338:
## Known stack suffix:
## KW_ATTR_TINY
## LR(1) items:
attrib -> KW_ATTR_TINY . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_TINY

State 339:
## Known stack suffix:
## KW_ATTR_THISCALL
## LR(1) items:
attrib -> KW_ATTR_THISCALL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_THISCALL

State 340:
## Known stack suffix:
## KW_ATTR_TARGET
## LR(1) items:
attrib -> KW_ATTR_TARGET . paren(string_literal) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 58
-- On paren(string_literal) shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## KW_ATTR_TARGET paren(string_literal)
## LR(1) items:
attrib -> KW_ATTR_TARGET paren(string_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_TARGET paren(string_literal)

State 342:
## Known stack suffix:
## KW_ATTR_SYSV_ABI
## LR(1) items:
attrib -> KW_ATTR_SYSV_ABI . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SYSV_ABI

State 343:
## Known stack suffix:
## KW_ATTR_SYSCALL_LINKAGE
## LR(1) items:
attrib -> KW_ATTR_SYSCALL_LINKAGE . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SYSCALL_LINKAGE

State 344:
## Known stack suffix:
## KW_ATTR_STDCALL
## LR(1) items:
attrib -> KW_ATTR_STDCALL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_STDCALL

State 345:
## Known stack suffix:
## KW_ATTR_SSEREGPARM
## LR(1) items:
attrib -> KW_ATTR_SSEREGPARM . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SSEREGPARM

State 346:
## Known stack suffix:
## KW_ATTR_SP_SWITCH
## LR(1) items:
attrib -> KW_ATTR_SP_SWITCH . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SP_SWITCH

State 347:
## Known stack suffix:
## KW_ATTR_SPU_VECTOR
## LR(1) items:
attrib -> KW_ATTR_SPU_VECTOR . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SPU_VECTOR

State 348:
## Known stack suffix:
## KW_ATTR_SIGNAL
## LR(1) items:
attrib -> KW_ATTR_SIGNAL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SIGNAL

State 349:
## Known stack suffix:
## KW_ATTR_SHORT_CALL
## LR(1) items:
attrib -> KW_ATTR_SHORT_CALL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SHORT_CALL

State 350:
## Known stack suffix:
## KW_ATTR_SHORTCALL
## LR(1) items:
attrib -> KW_ATTR_SHORTCALL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SHORTCALL

State 351:
## Known stack suffix:
## KW_ATTR_SHARED
## LR(1) items:
attrib -> KW_ATTR_SHARED . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SHARED

State 352:
## Known stack suffix:
## KW_ATTR_SENTINEL
## LR(1) items:
attrib -> KW_ATTR_SENTINEL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SENTINEL

State 353:
## Known stack suffix:
## KW_ATTR_SELECTANY
## LR(1) items:
attrib -> KW_ATTR_SELECTANY . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SELECTANY

State 354:
## Known stack suffix:
## KW_ATTR_SECTION
## LR(1) items:
attrib -> KW_ATTR_SECTION . paren(string_literal) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 58
-- On paren(string_literal) shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## KW_ATTR_SECTION paren(string_literal)
## LR(1) items:
attrib -> KW_ATTR_SECTION paren(string_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SECTION paren(string_literal)

State 356:
## Known stack suffix:
## KW_ATTR_SAVE_VOLATILES
## LR(1) items:
attrib -> KW_ATTR_SAVE_VOLATILES . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SAVE_VOLATILES

State 357:
## Known stack suffix:
## KW_ATTR_SAVEALL
## LR(1) items:
attrib -> KW_ATTR_SAVEALL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_SAVEALL

State 358:
## Known stack suffix:
## KW_ATTR_RETURNS_TWICE
## LR(1) items:
attrib -> KW_ATTR_RETURNS_TWICE . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_RETURNS_TWICE

State 359:
## Known stack suffix:
## KW_ATTR_RESBANK
## LR(1) items:
attrib -> KW_ATTR_RESBANK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_RESBANK

State 360:
## Known stack suffix:
## KW_ATTR_REGPARM
## LR(1) items:
attrib -> KW_ATTR_REGPARM . paren(numeric_literal) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 361
-- On paren(numeric_literal) shift to state 366
## Reductions:

State 361:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
paren(numeric_literal) -> TK_LBRACK . numeric_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
paren(numeric_literal) -> TK_LBRACK . paren(numeric_literal) TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_LBRACK shift to state 361
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On paren(numeric_literal) shift to state 362
-- On numeric_literal shift to state 364
## Reductions:

State 362:
## Known stack suffix:
## TK_LBRACK paren(numeric_literal)
## LR(1) items:
paren(numeric_literal) -> TK_LBRACK paren(numeric_literal) . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 363
## Reductions:

State 363:
## Known stack suffix:
## TK_LBRACK paren(numeric_literal) TK_RBRACK
## LR(1) items:
paren(numeric_literal) -> TK_LBRACK paren(numeric_literal) TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren(numeric_literal) -> TK_LBRACK paren(numeric_literal) TK_RBRACK

State 364:
## Known stack suffix:
## TK_LBRACK numeric_literal
## LR(1) items:
paren(numeric_literal) -> TK_LBRACK numeric_literal . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## TK_LBRACK numeric_literal TK_RBRACK
## LR(1) items:
paren(numeric_literal) -> TK_LBRACK numeric_literal TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren(numeric_literal) -> TK_LBRACK numeric_literal TK_RBRACK

State 366:
## Known stack suffix:
## KW_ATTR_REGPARM paren(numeric_literal)
## LR(1) items:
attrib -> KW_ATTR_REGPARM paren(numeric_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_REGPARM paren(numeric_literal)

State 367:
## Known stack suffix:
## KW_ATTR_PURE
## LR(1) items:
attrib -> KW_ATTR_PURE . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_PURE

State 368:
## Known stack suffix:
## KW_ATTR_PROGMEM
## LR(1) items:
attrib -> KW_ATTR_PROGMEM . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_PROGMEM

State 369:
## Known stack suffix:
## KW_ATTR_PCS
## LR(1) items:
attrib -> KW_ATTR_PCS . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_PCS

State 370:
## Known stack suffix:
## KW_ATTR_PACKED
## LR(1) items:
attrib -> KW_ATTR_PACKED . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_PACKED

State 371:
## Known stack suffix:
## KW_ATTR_OS_TASK
## LR(1) items:
attrib -> KW_ATTR_OS_TASK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_OS_TASK

State 372:
## Known stack suffix:
## KW_ATTR_OS_MAIN
## LR(1) items:
attrib -> KW_ATTR_OS_MAIN . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_OS_MAIN

State 373:
## Known stack suffix:
## KW_ATTR_OPTIMIZE
## LR(1) items:
attrib -> KW_ATTR_OPTIMIZE . TK_LBRACK numeric_literal TK_COMMA string_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## KW_ATTR_OPTIMIZE TK_LBRACK
## LR(1) items:
attrib -> KW_ATTR_OPTIMIZE TK_LBRACK . numeric_literal TK_COMMA string_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On numeric_literal shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## KW_ATTR_OPTIMIZE TK_LBRACK numeric_literal
## LR(1) items:
attrib -> KW_ATTR_OPTIMIZE TK_LBRACK numeric_literal . TK_COMMA string_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## KW_ATTR_OPTIMIZE TK_LBRACK numeric_literal TK_COMMA
## LR(1) items:
attrib -> KW_ATTR_OPTIMIZE TK_LBRACK numeric_literal TK_COMMA . string_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_STRING_LITERAL shift to state 16
-- On string_literal shift to state 377
-- On simple_string_literal shift to state 61
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
## Reductions:

State 377:
## Known stack suffix:
## KW_ATTR_OPTIMIZE TK_LBRACK numeric_literal TK_COMMA string_literal
## LR(1) items:
attrib -> KW_ATTR_OPTIMIZE TK_LBRACK numeric_literal TK_COMMA string_literal . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 378
## Reductions:

State 378:
## Known stack suffix:
## KW_ATTR_OPTIMIZE TK_LBRACK numeric_literal TK_COMMA string_literal TK_RBRACK
## LR(1) items:
attrib -> KW_ATTR_OPTIMIZE TK_LBRACK numeric_literal TK_COMMA string_literal TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_OPTIMIZE TK_LBRACK numeric_literal TK_COMMA string_literal TK_RBRACK

State 379:
## Known stack suffix:
## KW_ATTR_NO_SPLIT_STACK
## LR(1) items:
attrib -> KW_ATTR_NO_SPLIT_STACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NO_SPLIT_STACK

State 380:
## Known stack suffix:
## KW_ATTR_NO_INSTRUMENT_FUNCTION
## LR(1) items:
attrib -> KW_ATTR_NO_INSTRUMENT_FUNCTION . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NO_INSTRUMENT_FUNCTION

State 381:
## Known stack suffix:
## KW_ATTR_NOTSHARED
## LR(1) items:
attrib -> KW_ATTR_NOTSHARED . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NOTSHARED

State 382:
## Known stack suffix:
## KW_ATTR_NOTHROW
## LR(1) items:
attrib -> KW_ATTR_NOTHROW . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NOTHROW

State 383:
## Known stack suffix:
## KW_ATTR_NORETURN
## LR(1) items:
attrib -> KW_ATTR_NORETURN . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NORETURN

State 384:
## Known stack suffix:
## KW_ATTR_NONNULL
## LR(1) items:
attrib -> KW_ATTR_NONNULL . paren(sep(TK_COMMA,numeric_literal)) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 385
-- On paren(sep(TK_COMMA,numeric_literal)) shift to state 394
## Reductions:

State 385:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
paren(sep(TK_COMMA,numeric_literal)) -> TK_LBRACK . sep(TK_COMMA,numeric_literal) TK_RBRACK [ TK_RBRACK TK_COMMA ]
paren(sep(TK_COMMA,numeric_literal)) -> TK_LBRACK . paren(sep(TK_COMMA,numeric_literal)) TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_LBRACK shift to state 385
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On sep_rev(TK_COMMA,numeric_literal) shift to state 386
-- On sep(TK_COMMA,numeric_literal) shift to state 389
-- On paren(sep(TK_COMMA,numeric_literal)) shift to state 391
-- On numeric_literal shift to state 393
## Reductions:

State 386:
## Known stack suffix:
## sep_rev(TK_COMMA,numeric_literal)
## LR(1) items:
sep(TK_COMMA,numeric_literal) -> sep_rev(TK_COMMA,numeric_literal) . [ TK_RBRACK ]
sep_rev(TK_COMMA,numeric_literal) -> sep_rev(TK_COMMA,numeric_literal) . TK_COMMA numeric_literal [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 387
## Reductions:
-- On TK_RBRACK reduce production sep(TK_COMMA,numeric_literal) -> sep_rev(TK_COMMA,numeric_literal)

State 387:
## Known stack suffix:
## sep_rev(TK_COMMA,numeric_literal) TK_COMMA
## LR(1) items:
sep_rev(TK_COMMA,numeric_literal) -> sep_rev(TK_COMMA,numeric_literal) TK_COMMA . numeric_literal [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On numeric_literal shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## sep_rev(TK_COMMA,numeric_literal) TK_COMMA numeric_literal
## LR(1) items:
sep_rev(TK_COMMA,numeric_literal) -> sep_rev(TK_COMMA,numeric_literal) TK_COMMA numeric_literal . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,numeric_literal) -> sep_rev(TK_COMMA,numeric_literal) TK_COMMA numeric_literal

State 389:
## Known stack suffix:
## TK_LBRACK sep(TK_COMMA,numeric_literal)
## LR(1) items:
paren(sep(TK_COMMA,numeric_literal)) -> TK_LBRACK sep(TK_COMMA,numeric_literal) . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 390
## Reductions:

State 390:
## Known stack suffix:
## TK_LBRACK sep(TK_COMMA,numeric_literal) TK_RBRACK
## LR(1) items:
paren(sep(TK_COMMA,numeric_literal)) -> TK_LBRACK sep(TK_COMMA,numeric_literal) TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren(sep(TK_COMMA,numeric_literal)) -> TK_LBRACK sep(TK_COMMA,numeric_literal) TK_RBRACK

State 391:
## Known stack suffix:
## TK_LBRACK paren(sep(TK_COMMA,numeric_literal))
## LR(1) items:
paren(sep(TK_COMMA,numeric_literal)) -> TK_LBRACK paren(sep(TK_COMMA,numeric_literal)) . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 392
## Reductions:

State 392:
## Known stack suffix:
## TK_LBRACK paren(sep(TK_COMMA,numeric_literal)) TK_RBRACK
## LR(1) items:
paren(sep(TK_COMMA,numeric_literal)) -> TK_LBRACK paren(sep(TK_COMMA,numeric_literal)) TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren(sep(TK_COMMA,numeric_literal)) -> TK_LBRACK paren(sep(TK_COMMA,numeric_literal)) TK_RBRACK

State 393:
## Known stack suffix:
## numeric_literal
## LR(1) items:
sep_rev(TK_COMMA,numeric_literal) -> numeric_literal . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,numeric_literal) -> numeric_literal

State 394:
## Known stack suffix:
## KW_ATTR_NONNULL paren(sep(TK_COMMA,numeric_literal))
## LR(1) items:
attrib -> KW_ATTR_NONNULL paren(sep(TK_COMMA,numeric_literal)) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NONNULL paren(sep(TK_COMMA,numeric_literal))

State 395:
## Known stack suffix:
## KW_ATTR_NOMIPS16
## LR(1) items:
attrib -> KW_ATTR_NOMIPS16 . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NOMIPS16

State 396:
## Known stack suffix:
## KW_ATTR_NOINLINE
## LR(1) items:
attrib -> KW_ATTR_NOINLINE . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NOINLINE

State 397:
## Known stack suffix:
## KW_ATTR_NOCOMMON
## LR(1) items:
attrib -> KW_ATTR_NOCOMMON . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NOCOMMON

State 398:
## Known stack suffix:
## KW_ATTR_NOCLONE
## LR(1) items:
attrib -> KW_ATTR_NOCLONE . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NOCLONE

State 399:
## Known stack suffix:
## KW_ATTR_NMI_HANDLER
## LR(1) items:
attrib -> KW_ATTR_NMI_HANDLER . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NMI_HANDLER

State 400:
## Known stack suffix:
## KW_ATTR_NESTING
## LR(1) items:
attrib -> KW_ATTR_NESTING . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NESTING

State 401:
## Known stack suffix:
## KW_ATTR_NEAR
## LR(1) items:
attrib -> KW_ATTR_NEAR . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NEAR

State 402:
## Known stack suffix:
## KW_ATTR_NAKED
## LR(1) items:
attrib -> KW_ATTR_NAKED . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_NAKED

State 403:
## Known stack suffix:
## KW_ATTR_MS_STRUCT
## LR(1) items:
attrib -> KW_ATTR_MS_STRUCT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_MS_STRUCT

State 404:
## Known stack suffix:
## KW_ATTR_MS_HOOK_PROLOGUE
## LR(1) items:
attrib -> KW_ATTR_MS_HOOK_PROLOGUE . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_MS_HOOK_PROLOGUE

State 405:
## Known stack suffix:
## KW_ATTR_MS_ABI
## LR(1) items:
attrib -> KW_ATTR_MS_ABI . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_MS_ABI

State 406:
## Known stack suffix:
## KW_ATTR_MODEL
## LR(1) items:
attrib -> KW_ATTR_MODEL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_MODEL

State 407:
## Known stack suffix:
## KW_ATTR_MODE
## LR(1) items:
attrib -> KW_ATTR_MODE . paren(identifier) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 408
-- On paren(identifier) shift to state 413
## Reductions:

State 408:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
paren(identifier) -> TK_LBRACK . identifier TK_RBRACK [ TK_RBRACK TK_COMMA ]
paren(identifier) -> TK_LBRACK . paren(identifier) TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 408
-- On TK_IDENTIFIER shift to state 40
-- On paren(identifier) shift to state 409
-- On identifier shift to state 411
## Reductions:

State 409:
## Known stack suffix:
## TK_LBRACK paren(identifier)
## LR(1) items:
paren(identifier) -> TK_LBRACK paren(identifier) . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## TK_LBRACK paren(identifier) TK_RBRACK
## LR(1) items:
paren(identifier) -> TK_LBRACK paren(identifier) TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren(identifier) -> TK_LBRACK paren(identifier) TK_RBRACK

State 411:
## Known stack suffix:
## TK_LBRACK identifier
## LR(1) items:
paren(identifier) -> TK_LBRACK identifier . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 412
## Reductions:

State 412:
## Known stack suffix:
## TK_LBRACK identifier TK_RBRACK
## LR(1) items:
paren(identifier) -> TK_LBRACK identifier TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren(identifier) -> TK_LBRACK identifier TK_RBRACK

State 413:
## Known stack suffix:
## KW_ATTR_MODE paren(identifier)
## LR(1) items:
attrib -> KW_ATTR_MODE paren(identifier) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_MODE paren(identifier)

State 414:
## Known stack suffix:
## KW_ATTR_MIPS16
## LR(1) items:
attrib -> KW_ATTR_MIPS16 . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_MIPS16

State 415:
## Known stack suffix:
## KW_ATTR_MAY_ALIAS
## LR(1) items:
attrib -> KW_ATTR_MAY_ALIAS . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_MAY_ALIAS

State 416:
## Known stack suffix:
## KW_ATTR_MALLOC
## LR(1) items:
attrib -> KW_ATTR_MALLOC . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_MALLOC

State 417:
## Known stack suffix:
## KW_ATTR_LONG_CALL
## LR(1) items:
attrib -> KW_ATTR_LONG_CALL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_LONG_CALL

State 418:
## Known stack suffix:
## KW_ATTR_LONGCALL
## LR(1) items:
attrib -> KW_ATTR_LONGCALL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_LONGCALL

State 419:
## Known stack suffix:
## KW_ATTR_LEAF
## LR(1) items:
attrib -> KW_ATTR_LEAF . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_LEAF

State 420:
## Known stack suffix:
## KW_ATTR_L2
## LR(1) items:
attrib -> KW_ATTR_L2 . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_L2

State 421:
## Known stack suffix:
## KW_ATTR_L1_TEXT
## LR(1) items:
attrib -> KW_ATTR_L1_TEXT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_L1_TEXT

State 422:
## Known stack suffix:
## KW_ATTR_L1_DATA_B
## LR(1) items:
attrib -> KW_ATTR_L1_DATA_B . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_L1_DATA_B

State 423:
## Known stack suffix:
## KW_ATTR_L1_DATA_A
## LR(1) items:
attrib -> KW_ATTR_L1_DATA_A . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_L1_DATA_A

State 424:
## Known stack suffix:
## KW_ATTR_L1_DATA
## LR(1) items:
attrib -> KW_ATTR_L1_DATA . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_L1_DATA

State 425:
## Known stack suffix:
## KW_ATTR_KSPISUSP
## LR(1) items:
attrib -> KW_ATTR_KSPISUSP . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_KSPISUSP

State 426:
## Known stack suffix:
## KW_ATTR_ISR
## LR(1) items:
attrib -> KW_ATTR_ISR . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_ISR

State 427:
## Known stack suffix:
## KW_ATTR_IO
## LR(1) items:
attrib -> KW_ATTR_IO . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_IO

State 428:
## Known stack suffix:
## KW_ATTR_INTERRUPT_THREAD
## LR(1) items:
attrib -> KW_ATTR_INTERRUPT_THREAD . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_INTERRUPT_THREAD

State 429:
## Known stack suffix:
## KW_ATTR_INTERRUPT_HANDLER
## LR(1) items:
attrib -> KW_ATTR_INTERRUPT_HANDLER . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_INTERRUPT_HANDLER

State 430:
## Known stack suffix:
## KW_ATTR_INTERRUPT
## LR(1) items:
attrib -> KW_ATTR_INTERRUPT . paren(string_literal) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 58
-- On paren(string_literal) shift to state 431
## Reductions:

State 431:
## Known stack suffix:
## KW_ATTR_INTERRUPT paren(string_literal)
## LR(1) items:
attrib -> KW_ATTR_INTERRUPT paren(string_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_INTERRUPT paren(string_literal)

State 432:
## Known stack suffix:
## KW_ATTR_IFUNC
## LR(1) items:
attrib -> KW_ATTR_IFUNC . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_IFUNC

State 433:
## Known stack suffix:
## KW_ATTR_HOT
## LR(1) items:
attrib -> KW_ATTR_HOT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_HOT

State 434:
## Known stack suffix:
## KW_ATTR_GNU_INLINE
## LR(1) items:
attrib -> KW_ATTR_GNU_INLINE . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_GNU_INLINE

State 435:
## Known stack suffix:
## KW_ATTR_GCC_STRUCT
## LR(1) items:
attrib -> KW_ATTR_GCC_STRUCT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_GCC_STRUCT

State 436:
## Known stack suffix:
## KW_ATTR_FUNCTION_VECTOR
## LR(1) items:
attrib -> KW_ATTR_FUNCTION_VECTOR . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_FUNCTION_VECTOR

State 437:
## Known stack suffix:
## KW_ATTR_FORMAT_ARG
## LR(1) items:
attrib -> KW_ATTR_FORMAT_ARG . paren(numeric_literal) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 361
-- On paren(numeric_literal) shift to state 438
## Reductions:

State 438:
## Known stack suffix:
## KW_ATTR_FORMAT_ARG paren(numeric_literal)
## LR(1) items:
attrib -> KW_ATTR_FORMAT_ARG paren(numeric_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_FORMAT_ARG paren(numeric_literal)

State 439:
## Known stack suffix:
## KW_ATTR_FORMAT
## LR(1) items:
attrib -> KW_ATTR_FORMAT . TK_LBRACK identifier TK_COMMA numeric_literal TK_COMMA numeric_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 440
## Reductions:

State 440:
## Known stack suffix:
## KW_ATTR_FORMAT TK_LBRACK
## LR(1) items:
attrib -> KW_ATTR_FORMAT TK_LBRACK . identifier TK_COMMA numeric_literal TK_COMMA numeric_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_IDENTIFIER shift to state 40
-- On identifier shift to state 441
## Reductions:

State 441:
## Known stack suffix:
## KW_ATTR_FORMAT TK_LBRACK identifier
## LR(1) items:
attrib -> KW_ATTR_FORMAT TK_LBRACK identifier . TK_COMMA numeric_literal TK_COMMA numeric_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 442
## Reductions:

State 442:
## Known stack suffix:
## KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA
## LR(1) items:
attrib -> KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA . numeric_literal TK_COMMA numeric_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On numeric_literal shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA numeric_literal
## LR(1) items:
attrib -> KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA numeric_literal . TK_COMMA numeric_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 444
## Reductions:

State 444:
## Known stack suffix:
## KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA numeric_literal TK_COMMA
## LR(1) items:
attrib -> KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA numeric_literal TK_COMMA . numeric_literal TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On numeric_literal shift to state 445
## Reductions:

State 445:
## Known stack suffix:
## KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA numeric_literal TK_COMMA numeric_literal
## LR(1) items:
attrib -> KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA numeric_literal TK_COMMA numeric_literal . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 446
## Reductions:

State 446:
## Known stack suffix:
## KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA numeric_literal TK_COMMA numeric_literal TK_RBRACK
## LR(1) items:
attrib -> KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA numeric_literal TK_COMMA numeric_literal TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_FORMAT TK_LBRACK identifier TK_COMMA numeric_literal TK_COMMA numeric_literal TK_RBRACK

State 447:
## Known stack suffix:
## KW_ATTR_FORCE_ALIGN_ARG_POINTER
## LR(1) items:
attrib -> KW_ATTR_FORCE_ALIGN_ARG_POINTER . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_FORCE_ALIGN_ARG_POINTER

State 448:
## Known stack suffix:
## KW_ATTR_FLATTEN
## LR(1) items:
attrib -> KW_ATTR_FLATTEN . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_FLATTEN

State 449:
## Known stack suffix:
## KW_ATTR_FAST_INTERRUPT
## LR(1) items:
attrib -> KW_ATTR_FAST_INTERRUPT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_FAST_INTERRUPT

State 450:
## Known stack suffix:
## KW_ATTR_FASTCALL
## LR(1) items:
attrib -> KW_ATTR_FASTCALL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_FASTCALL

State 451:
## Known stack suffix:
## KW_ATTR_FAR
## LR(1) items:
attrib -> KW_ATTR_FAR . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_FAR

State 452:
## Known stack suffix:
## KW_ATTR_EXTERNALLY_VISIBLE
## LR(1) items:
attrib -> KW_ATTR_EXTERNALLY_VISIBLE . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_EXTERNALLY_VISIBLE

State 453:
## Known stack suffix:
## KW_ATTR_EXCEPTION_HANDLER
## LR(1) items:
attrib -> KW_ATTR_EXCEPTION_HANDLER . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_EXCEPTION_HANDLER

State 454:
## Known stack suffix:
## KW_ATTR_EIGHTBIT_DATA
## LR(1) items:
attrib -> KW_ATTR_EIGHTBIT_DATA . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_EIGHTBIT_DATA

State 455:
## Known stack suffix:
## KW_ATTR_DLLIMPORT
## LR(1) items:
attrib -> KW_ATTR_DLLIMPORT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_DLLIMPORT

State 456:
## Known stack suffix:
## KW_ATTR_DLLEXPORT
## LR(1) items:
attrib -> KW_ATTR_DLLEXPORT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_DLLEXPORT

State 457:
## Known stack suffix:
## KW_ATTR_DISINTERRUPT
## LR(1) items:
attrib -> KW_ATTR_DISINTERRUPT . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_DISINTERRUPT

State 458:
## Known stack suffix:
## KW_ATTR_DESTRUCTOR
## LR(1) items:
attrib -> KW_ATTR_DESTRUCTOR . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_DESTRUCTOR

State 459:
## Known stack suffix:
## KW_ATTR_DEPRECATED
## LR(1) items:
attrib -> KW_ATTR_DEPRECATED . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_DEPRECATED

State 460:
## Known stack suffix:
## KW_ATTR_CONSTRUCTOR
## LR(1) items:
attrib -> KW_ATTR_CONSTRUCTOR . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_CONSTRUCTOR

State 461:
## Known stack suffix:
## KW_ATTR_CONST
## LR(1) items:
attrib -> KW_ATTR_CONST . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_CONST

State 462:
## Known stack suffix:
## KW_ATTR_COMMON
## LR(1) items:
attrib -> KW_ATTR_COMMON . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_COMMON

State 463:
## Known stack suffix:
## KW_ATTR_COLD
## LR(1) items:
attrib -> KW_ATTR_COLD . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_COLD

State 464:
## Known stack suffix:
## KW_ATTR_CLEANUP
## LR(1) items:
attrib -> KW_ATTR_CLEANUP . paren(identifier) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 408
-- On paren(identifier) shift to state 465
## Reductions:

State 465:
## Known stack suffix:
## KW_ATTR_CLEANUP paren(identifier)
## LR(1) items:
attrib -> KW_ATTR_CLEANUP paren(identifier) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_CLEANUP paren(identifier)

State 466:
## Known stack suffix:
## KW_ATTR_CDECL
## LR(1) items:
attrib -> KW_ATTR_CDECL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_CDECL

State 467:
## Known stack suffix:
## KW_ATTR_CB
## LR(1) items:
attrib -> KW_ATTR_CB . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_CB

State 468:
## Known stack suffix:
## KW_ATTR_CALLEE_POP_AGGREGATE_RETURN
## LR(1) items:
attrib -> KW_ATTR_CALLEE_POP_AGGREGATE_RETURN . paren(numeric_literal) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 361
-- On paren(numeric_literal) shift to state 469
## Reductions:

State 469:
## Known stack suffix:
## KW_ATTR_CALLEE_POP_AGGREGATE_RETURN paren(numeric_literal)
## LR(1) items:
attrib -> KW_ATTR_CALLEE_POP_AGGREGATE_RETURN paren(numeric_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_CALLEE_POP_AGGREGATE_RETURN paren(numeric_literal)

State 470:
## Known stack suffix:
## KW_ATTR_BELOW100
## LR(1) items:
attrib -> KW_ATTR_BELOW100 . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_BELOW100

State 471:
## Known stack suffix:
## KW_ATTR_BASED
## LR(1) items:
attrib -> KW_ATTR_BASED . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_BASED

State 472:
## Known stack suffix:
## KW_ATTR_BACK_SWITCH
## LR(1) items:
attrib -> KW_ATTR_BACK_SWITCH . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_BACK_SWITCH

State 473:
## Known stack suffix:
## KW_ATTR_ARTIFICIAL
## LR(1) items:
attrib -> KW_ATTR_ARTIFICIAL . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_ARTIFICIAL

State 474:
## Known stack suffix:
## KW_ATTR_ALWAYS_INLINE
## LR(1) items:
attrib -> KW_ATTR_ALWAYS_INLINE . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_ALWAYS_INLINE

State 475:
## Known stack suffix:
## KW_ATTR_ALTIVEC
## LR(1) items:
attrib -> KW_ATTR_ALTIVEC . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_ALTIVEC

State 476:
## Known stack suffix:
## KW_ATTR_ALLOC_SIZE
## LR(1) items:
attrib -> KW_ATTR_ALLOC_SIZE . paren(numeric_literal) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 361
-- On paren(numeric_literal) shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## KW_ATTR_ALLOC_SIZE paren(numeric_literal)
## LR(1) items:
attrib -> KW_ATTR_ALLOC_SIZE paren(numeric_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_ALLOC_SIZE paren(numeric_literal)

State 478:
## Known stack suffix:
## KW_ATTR_ALIGNED
## LR(1) items:
attrib -> KW_ATTR_ALIGNED . option(paren(numeric_literal)) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 361
-- On paren(numeric_literal) shift to state 479
-- On option(paren(numeric_literal)) shift to state 480
## Reductions:
-- On TK_RBRACK reduce production option(paren(numeric_literal)) ->
-- On TK_COMMA reduce production option(paren(numeric_literal)) ->

State 479:
## Known stack suffix:
## paren(numeric_literal)
## LR(1) items:
option(paren(numeric_literal)) -> paren(numeric_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(paren(numeric_literal)) -> paren(numeric_literal)

State 480:
## Known stack suffix:
## KW_ATTR_ALIGNED option(paren(numeric_literal))
## LR(1) items:
attrib -> KW_ATTR_ALIGNED option(paren(numeric_literal)) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_ALIGNED option(paren(numeric_literal))

State 481:
## Known stack suffix:
## KW_ATTR_ALIAS
## LR(1) items:
attrib -> KW_ATTR_ALIAS . paren(string_literal) [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_LBRACK shift to state 58
-- On paren(string_literal) shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## KW_ATTR_ALIAS paren(string_literal)
## LR(1) items:
attrib -> KW_ATTR_ALIAS paren(string_literal) . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_ALIAS paren(string_literal)

State 483:
## Known stack suffix:
## sep_rev(TK_COMMA,attrib)
## LR(1) items:
sep(TK_COMMA,attrib) -> sep_rev(TK_COMMA,attrib) . [ TK_RBRACK ]
sep_rev(TK_COMMA,attrib) -> sep_rev(TK_COMMA,attrib) . TK_COMMA attrib [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 484
## Reductions:
-- On TK_RBRACK reduce production sep(TK_COMMA,attrib) -> sep_rev(TK_COMMA,attrib)

State 484:
## Known stack suffix:
## sep_rev(TK_COMMA,attrib) TK_COMMA
## LR(1) items:
sep_rev(TK_COMMA,attrib) -> sep_rev(TK_COMMA,attrib) TK_COMMA . attrib [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On KW_ATTR_WEAKREF shift to state 53
-- On KW_ATTR_WEAK shift to state 54
-- On KW_ATTR_WARN_UNUSED_RESULT shift to state 55
-- On KW_ATTR_VLIW shift to state 56
-- On KW_ATTR_VISIBILITY shift to state 57
-- On KW_ATTR_VERSION_ID shift to state 68
-- On KW_ATTR_VECTOR_SIZE shift to state 69
-- On KW_ATTR_USED shift to state 332
-- On KW_ATTR_UNUSED shift to state 333
-- On KW_ATTR_TRAP_EXIT shift to state 334
-- On KW_ATTR_TRANSPARENT_UNION shift to state 335
-- On KW_ATTR_TLS_MODEL shift to state 336
-- On KW_ATTR_TINY_DATA shift to state 337
-- On KW_ATTR_TINY shift to state 338
-- On KW_ATTR_THISCALL shift to state 339
-- On KW_ATTR_TARGET shift to state 340
-- On KW_ATTR_SYSV_ABI shift to state 342
-- On KW_ATTR_SYSCALL_LINKAGE shift to state 343
-- On KW_ATTR_STDCALL shift to state 344
-- On KW_ATTR_SSEREGPARM shift to state 345
-- On KW_ATTR_SP_SWITCH shift to state 346
-- On KW_ATTR_SPU_VECTOR shift to state 347
-- On KW_ATTR_SIGNAL shift to state 348
-- On KW_ATTR_SHORT_CALL shift to state 349
-- On KW_ATTR_SHORTCALL shift to state 350
-- On KW_ATTR_SHARED shift to state 351
-- On KW_ATTR_SENTINEL shift to state 352
-- On KW_ATTR_SELECTANY shift to state 353
-- On KW_ATTR_SECTION shift to state 354
-- On KW_ATTR_SAVE_VOLATILES shift to state 356
-- On KW_ATTR_SAVEALL shift to state 357
-- On KW_ATTR_RETURNS_TWICE shift to state 358
-- On KW_ATTR_RESBANK shift to state 359
-- On KW_ATTR_REGPARM shift to state 360
-- On KW_ATTR_PURE shift to state 367
-- On KW_ATTR_PROGMEM shift to state 368
-- On KW_ATTR_PCS shift to state 369
-- On KW_ATTR_PACKED shift to state 370
-- On KW_ATTR_OS_TASK shift to state 371
-- On KW_ATTR_OS_MAIN shift to state 372
-- On KW_ATTR_OPTIMIZE shift to state 373
-- On KW_ATTR_NO_SPLIT_STACK shift to state 379
-- On KW_ATTR_NO_INSTRUMENT_FUNCTION shift to state 380
-- On KW_ATTR_NOTSHARED shift to state 381
-- On KW_ATTR_NOTHROW shift to state 382
-- On KW_ATTR_NORETURN shift to state 383
-- On KW_ATTR_NONNULL shift to state 384
-- On KW_ATTR_NOMIPS16 shift to state 395
-- On KW_ATTR_NOINLINE shift to state 396
-- On KW_ATTR_NOCOMMON shift to state 397
-- On KW_ATTR_NOCLONE shift to state 398
-- On KW_ATTR_NMI_HANDLER shift to state 399
-- On KW_ATTR_NESTING shift to state 400
-- On KW_ATTR_NEAR shift to state 401
-- On KW_ATTR_NAKED shift to state 402
-- On KW_ATTR_MS_STRUCT shift to state 403
-- On KW_ATTR_MS_HOOK_PROLOGUE shift to state 404
-- On KW_ATTR_MS_ABI shift to state 405
-- On KW_ATTR_MODEL shift to state 406
-- On KW_ATTR_MODE shift to state 407
-- On KW_ATTR_MIPS16 shift to state 414
-- On KW_ATTR_MAY_ALIAS shift to state 415
-- On KW_ATTR_MALLOC shift to state 416
-- On KW_ATTR_LONG_CALL shift to state 417
-- On KW_ATTR_LONGCALL shift to state 418
-- On KW_ATTR_LEAF shift to state 419
-- On KW_ATTR_L2 shift to state 420
-- On KW_ATTR_L1_TEXT shift to state 421
-- On KW_ATTR_L1_DATA_B shift to state 422
-- On KW_ATTR_L1_DATA_A shift to state 423
-- On KW_ATTR_L1_DATA shift to state 424
-- On KW_ATTR_KSPISUSP shift to state 425
-- On KW_ATTR_ISR shift to state 426
-- On KW_ATTR_IO shift to state 427
-- On KW_ATTR_INTERRUPT_THREAD shift to state 428
-- On KW_ATTR_INTERRUPT_HANDLER shift to state 429
-- On KW_ATTR_INTERRUPT shift to state 430
-- On KW_ATTR_IFUNC shift to state 432
-- On KW_ATTR_HOT shift to state 433
-- On KW_ATTR_GNU_INLINE shift to state 434
-- On KW_ATTR_GCC_STRUCT shift to state 435
-- On KW_ATTR_FUNCTION_VECTOR shift to state 436
-- On KW_ATTR_FORMAT_ARG shift to state 437
-- On KW_ATTR_FORMAT shift to state 439
-- On KW_ATTR_FORCE_ALIGN_ARG_POINTER shift to state 447
-- On KW_ATTR_FLATTEN shift to state 448
-- On KW_ATTR_FAST_INTERRUPT shift to state 449
-- On KW_ATTR_FASTCALL shift to state 450
-- On KW_ATTR_FAR shift to state 451
-- On KW_ATTR_EXTERNALLY_VISIBLE shift to state 452
-- On KW_ATTR_EXCEPTION_HANDLER shift to state 453
-- On KW_ATTR_EIGHTBIT_DATA shift to state 454
-- On KW_ATTR_DLLIMPORT shift to state 455
-- On KW_ATTR_DLLEXPORT shift to state 456
-- On KW_ATTR_DISINTERRUPT shift to state 457
-- On KW_ATTR_DESTRUCTOR shift to state 458
-- On KW_ATTR_DEPRECATED shift to state 459
-- On KW_ATTR_CONSTRUCTOR shift to state 460
-- On KW_ATTR_CONST shift to state 461
-- On KW_ATTR_COMMON shift to state 462
-- On KW_ATTR_COLD shift to state 463
-- On KW_ATTR_CLEANUP shift to state 464
-- On KW_ATTR_CDECL shift to state 466
-- On KW_ATTR_CB shift to state 467
-- On KW_ATTR_CALLEE_POP_AGGREGATE_RETURN shift to state 468
-- On KW_ATTR_BELOW100 shift to state 470
-- On KW_ATTR_BASED shift to state 471
-- On KW_ATTR_BACK_SWITCH shift to state 472
-- On KW_ATTR_ARTIFICIAL shift to state 473
-- On KW_ATTR_ALWAYS_INLINE shift to state 474
-- On KW_ATTR_ALTIVEC shift to state 475
-- On KW_ATTR_ALLOC_SIZE shift to state 476
-- On KW_ATTR_ALIGNED shift to state 478
-- On KW_ATTR_ALIAS shift to state 481
-- On attrib shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## sep_rev(TK_COMMA,attrib) TK_COMMA attrib
## LR(1) items:
sep_rev(TK_COMMA,attrib) -> sep_rev(TK_COMMA,attrib) TK_COMMA attrib . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,attrib) -> sep_rev(TK_COMMA,attrib) TK_COMMA attrib

State 486:
## Known stack suffix:
## sep(TK_COMMA,attrib)
## LR(1) items:
option(sep(TK_COMMA,attrib)) -> sep(TK_COMMA,attrib) . [ TK_RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(sep(TK_COMMA,attrib)) -> sep(TK_COMMA,attrib)

State 487:
## Known stack suffix:
## KW_ATTRIBUTE TK_LBRACK TK_LBRACK option(sep(TK_COMMA,attrib))
## LR(1) items:
attribute -> KW_ATTRIBUTE TK_LBRACK TK_LBRACK option(sep(TK_COMMA,attrib)) . TK_RBRACK TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 488
## Reductions:

State 488:
## Known stack suffix:
## KW_ATTRIBUTE TK_LBRACK TK_LBRACK option(sep(TK_COMMA,attrib)) TK_RBRACK
## LR(1) items:
attribute -> KW_ATTRIBUTE TK_LBRACK TK_LBRACK option(sep(TK_COMMA,attrib)) TK_RBRACK . TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 489
## Reductions:

State 489:
## Known stack suffix:
## KW_ATTRIBUTE TK_LBRACK TK_LBRACK option(sep(TK_COMMA,attrib)) TK_RBRACK TK_RBRACK
## LR(1) items:
attribute -> KW_ATTRIBUTE TK_LBRACK TK_LBRACK option(sep(TK_COMMA,attrib)) TK_RBRACK TK_RBRACK . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute -> KW_ATTRIBUTE TK_LBRACK TK_LBRACK option(sep(TK_COMMA,attrib)) TK_RBRACK TK_RBRACK

State 490:
## Known stack suffix:
## attrib
## LR(1) items:
sep_rev(TK_COMMA,attrib) -> attrib . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,attrib) -> attrib

State 491:
## Known stack suffix:
## nonempty_list_rev(attribute)
## LR(1) items:
nonempty_list(attribute) -> nonempty_list_rev(attribute) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_EXTENSION ]
nonempty_list_rev(attribute) -> nonempty_list_rev(attribute) . attribute [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On KW_FASTCALL shift to state 50
-- On KW_DECLSPEC shift to state 51
-- On KW_ATTRIBUTE shift to state 329
-- On attribute shift to state 492
## Reductions:
-- On WC_DECL reduce production nonempty_list(attribute) -> nonempty_list_rev(attribute)
-- On TK_TYPEDEF_NAME reduce production nonempty_list(attribute) -> nonempty_list_rev(attribute)
-- On TK_STAR reduce production nonempty_list(attribute) -> nonempty_list_rev(attribute)
-- On TK_LBRACK reduce production nonempty_list(attribute) -> nonempty_list_rev(attribute)
-- On TK_IDENTIFIER reduce production nonempty_list(attribute) -> nonempty_list_rev(attribute)
-- On TK_COLON reduce production nonempty_list(attribute) -> nonempty_list_rev(attribute)
-- On KW_EXTENSION reduce production nonempty_list(attribute) -> nonempty_list_rev(attribute)

State 492:
## Known stack suffix:
## nonempty_list_rev(attribute) attribute
## LR(1) items:
nonempty_list_rev(attribute) -> nonempty_list_rev(attribute) attribute . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(attribute) -> nonempty_list_rev(attribute) attribute

State 493:
## Known stack suffix:
## type_specifier_nosue nonempty_list(attribute)
## LR(1) items:
struct_declaring_list -> type_specifier_nosue nonempty_list(attribute) . struct_declarator [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On TK_COLON shift to state 558
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On struct_declarator shift to state 566
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 563
-- On identifier_declarator shift to state 564
-- On declarator shift to state 567
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
-- On bit_field_size shift to state 571
## Reductions:

State 494:
## Known stack suffix:
## TK_STAR
## LR(1) items:
clean_typedef_declarator -> TK_STAR . list(attribute) parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_typedef_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
old_function_declarator -> TK_STAR . list(attribute) old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
old_function_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR . list(attribute) paren_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR . list(attribute) TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) paren_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
unary_identifier_declarator -> TK_STAR . list(attribute) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
unary_identifier_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 495
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 495:
## Known stack suffix:
## TK_STAR list(attribute)
## LR(1) items:
clean_typedef_declarator -> TK_STAR list(attribute) . parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_typedef_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
old_function_declarator -> TK_STAR list(attribute) . old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
old_function_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) . paren_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) . TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) paren_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
unary_identifier_declarator -> TK_STAR list(attribute) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
unary_identifier_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 496
-- On TK_IDENTIFIER shift to state 299
-- On KW_VOLATILE shift to state 531
-- On KW_RESTRICT shift to state 532
-- On KW_CONST shift to state 533
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On pointer_type_qualifier shift to state 537
-- On paren_typedef_declarator shift to state 538
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 540
-- On old_function_declarator shift to state 541
-- On nonempty_list_rev(pointer_type_qualifier) shift to state 542
-- On nonempty_list(pointer_type_qualifier) shift to state 544
-- On identifier_declarator shift to state 554
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 496:
## Known stack suffix:
## TK_STAR list(attribute) TK_LBRACK
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_identifier_declarator -> TK_LBRACK . list(attribute) paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) TK_LBRACK . list(attribute) simple_paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 497
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 497:
## Known stack suffix:
## TK_STAR list(attribute) TK_LBRACK list(attribute)
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_identifier_declarator -> TK_LBRACK list(attribute) . paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) TK_LBRACK list(attribute) . simple_paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 498
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 300
-- On simple_typedef_declarator shift to state 500
-- On simple_paren_typedef_declarator shift to state 529
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 508
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 512
-- On old_function_declarator shift to state 522
-- On clean_typedef_declarator shift to state 525
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 498:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK [ TK_RBRACK ]
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK ]
paren_identifier_declarator -> TK_LBRACK . list(attribute) paren_identifier_declarator TK_RBRACK [ TK_RBRACK TK_LSQBRACK TK_LBRACK ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) paren_typedef_declarator TK_RBRACK [ TK_RBRACK ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK [ TK_RBRACK ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK [ TK_RBRACK ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK [ TK_RBRACK ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK ]
simple_paren_typedef_declarator -> TK_LBRACK . list(attribute) simple_paren_typedef_declarator TK_RBRACK [ TK_RBRACK TK_LSQBRACK TK_LBRACK ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 499
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 499:
## Known stack suffix:
## TK_LBRACK list(attribute)
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK [ TK_RBRACK ]
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK ]
paren_identifier_declarator -> TK_LBRACK list(attribute) . paren_identifier_declarator TK_RBRACK [ TK_RBRACK TK_LSQBRACK TK_LBRACK ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . paren_typedef_declarator TK_RBRACK [ TK_RBRACK ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK [ TK_RBRACK ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK [ TK_RBRACK ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK [ TK_RBRACK ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK ]
simple_paren_typedef_declarator -> TK_LBRACK list(attribute) . simple_paren_typedef_declarator TK_RBRACK [ TK_RBRACK TK_LSQBRACK TK_LBRACK ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 498
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 300
-- On simple_typedef_declarator shift to state 500
-- On simple_paren_typedef_declarator shift to state 501
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 508
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 512
-- On old_function_declarator shift to state 522
-- On clean_typedef_declarator shift to state 525
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 500:
## Known stack suffix:
## simple_typedef_declarator
## LR(1) items:
simple_paren_typedef_declarator -> simple_typedef_declarator . [ TK_RBRACK TK_LSQBRACK TK_LBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_paren_typedef_declarator -> simple_typedef_declarator

State 501:
## Known stack suffix:
## TK_LBRACK list(attribute) simple_paren_typedef_declarator
## LR(1) items:
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator . postfixing_abstract_declarator TK_RBRACK [ TK_RBRACK ]
simple_paren_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator . TK_RBRACK [ TK_RBRACK TK_LSQBRACK TK_LBRACK ]
## Transitions:
-- On TK_RBRACK shift to state 502
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 503
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:

State 502:
## Known stack suffix:
## TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK
## LR(1) items:
simple_paren_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK . [ TK_RBRACK TK_LSQBRACK TK_LBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_paren_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK

State 503:
## Known stack suffix:
## TK_LBRACK list(attribute) simple_paren_typedef_declarator postfixing_abstract_declarator
## LR(1) items:
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator postfixing_abstract_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_RBRACK shift to state 504
## Reductions:

State 504:
## Known stack suffix:
## TK_LBRACK list(attribute) simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK
## LR(1) items:
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK

State 505:
## Known stack suffix:
## simple_identifier_declarator
## LR(1) items:
paren_identifier_declarator -> simple_identifier_declarator . [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_identifier_declarator -> simple_identifier_declarator

State 506:
## Known stack suffix:
## postfix_old_function_declarator
## LR(1) items:
old_function_declarator -> postfix_old_function_declarator . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_function_declarator -> postfix_old_function_declarator

State 507:
## Known stack suffix:
## postfix_identifier_declarator
## LR(1) items:
unary_identifier_declarator -> postfix_identifier_declarator . [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_identifier_declarator -> postfix_identifier_declarator

State 508:
## Known stack suffix:
## TK_LBRACK list(attribute) paren_typedef_declarator
## LR(1) items:
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator . TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_RBRACK shift to state 509
## Reductions:

State 509:
## Known stack suffix:
## TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK
## LR(1) items:
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK . postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 510
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:
-- On TK_SEMICOLON reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK
-- On TK_RBRACK reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK
-- On TK_EQUALS reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK
-- On TK_COMMA reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK
-- On TK_COLON reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK
-- On KW_FASTCALL reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK
-- On KW_DECLSPEC reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK
-- On KW_ATTRIBUTE reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK
-- On KW_ASM reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK

State 510:
## Known stack suffix:
## TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator
## LR(1) items:
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator

State 511:
## Known stack suffix:
## paren_postfix_typedef_declarator
## LR(1) items:
paren_typedef_declarator -> paren_postfix_typedef_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_typedef_declarator -> paren_postfix_typedef_declarator

State 512:
## Known stack suffix:
## TK_LBRACK list(attribute) paren_identifier_declarator
## LR(1) items:
paren_identifier_declarator -> TK_LBRACK list(attribute) paren_identifier_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> paren_identifier_declarator . postfixing_abstract_declarator [ TK_RBRACK ]
postfix_old_function_declarator -> paren_identifier_declarator . TK_LBRACK sep(TK_COMMA,simple_identifier_declarator) TK_RBRACK [ TK_RBRACK ]
## Transitions:
-- On TK_RBRACK shift to state 513
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 514
-- On postfixing_abstract_declarator shift to state 521
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:

State 513:
## Known stack suffix:
## TK_LBRACK list(attribute) paren_identifier_declarator TK_RBRACK
## LR(1) items:
paren_identifier_declarator -> TK_LBRACK list(attribute) paren_identifier_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_identifier_declarator -> TK_LBRACK list(attribute) paren_identifier_declarator TK_RBRACK

State 514:
## Known stack suffix:
## paren_identifier_declarator TK_LBRACK
## LR(1) items:
postfix_old_function_declarator -> paren_identifier_declarator TK_LBRACK . sep(TK_COMMA,simple_identifier_declarator) TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
postfixing_abstract_declarator -> TK_LBRACK . option(forward_parameter_type_list) TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_IDENTIFIER shift to state 299
-- On simple_identifier_declarator shift to state 515
-- On sep_rev(TK_SEMICOLON,parameter_type_list) shift to state 264
-- On sep_rev(TK_COMMA,simple_identifier_declarator) shift to state 516
-- On sep_rev(TK_COMMA,parameter_declaration) shift to state 266
-- On sep(TK_COMMA,simple_identifier_declarator) shift to state 519
-- On parameter_type_list shift to state 294
-- On parameter_declaration shift to state 295
-- On option(forward_parameter_type_list) shift to state 296
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 270
-- On forward_parameter_type_list shift to state 303
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_RBRACK reduce production option(forward_parameter_type_list) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 515:
## Known stack suffix:
## simple_identifier_declarator
## LR(1) items:
sep_rev(TK_COMMA,simple_identifier_declarator) -> simple_identifier_declarator . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,simple_identifier_declarator) -> simple_identifier_declarator

State 516:
## Known stack suffix:
## sep_rev(TK_COMMA,simple_identifier_declarator)
## LR(1) items:
sep(TK_COMMA,simple_identifier_declarator) -> sep_rev(TK_COMMA,simple_identifier_declarator) . [ TK_RBRACK ]
sep_rev(TK_COMMA,simple_identifier_declarator) -> sep_rev(TK_COMMA,simple_identifier_declarator) . TK_COMMA simple_identifier_declarator [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 517
## Reductions:
-- On TK_RBRACK reduce production sep(TK_COMMA,simple_identifier_declarator) -> sep_rev(TK_COMMA,simple_identifier_declarator)

State 517:
## Known stack suffix:
## sep_rev(TK_COMMA,simple_identifier_declarator) TK_COMMA
## LR(1) items:
sep_rev(TK_COMMA,simple_identifier_declarator) -> sep_rev(TK_COMMA,simple_identifier_declarator) TK_COMMA . simple_identifier_declarator [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_IDENTIFIER shift to state 299
-- On simple_identifier_declarator shift to state 518
## Reductions:

State 518:
## Known stack suffix:
## sep_rev(TK_COMMA,simple_identifier_declarator) TK_COMMA simple_identifier_declarator
## LR(1) items:
sep_rev(TK_COMMA,simple_identifier_declarator) -> sep_rev(TK_COMMA,simple_identifier_declarator) TK_COMMA simple_identifier_declarator . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,simple_identifier_declarator) -> sep_rev(TK_COMMA,simple_identifier_declarator) TK_COMMA simple_identifier_declarator

State 519:
## Known stack suffix:
## paren_identifier_declarator TK_LBRACK sep(TK_COMMA,simple_identifier_declarator)
## LR(1) items:
postfix_old_function_declarator -> paren_identifier_declarator TK_LBRACK sep(TK_COMMA,simple_identifier_declarator) . TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_RBRACK shift to state 520
## Reductions:

State 520:
## Known stack suffix:
## paren_identifier_declarator TK_LBRACK sep(TK_COMMA,simple_identifier_declarator) TK_RBRACK
## LR(1) items:
postfix_old_function_declarator -> paren_identifier_declarator TK_LBRACK sep(TK_COMMA,simple_identifier_declarator) TK_RBRACK . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_old_function_declarator -> paren_identifier_declarator TK_LBRACK sep(TK_COMMA,simple_identifier_declarator) TK_RBRACK

State 521:
## Known stack suffix:
## paren_identifier_declarator postfixing_abstract_declarator
## LR(1) items:
postfix_identifier_declarator -> paren_identifier_declarator postfixing_abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_identifier_declarator -> paren_identifier_declarator postfixing_abstract_declarator

State 522:
## Known stack suffix:
## TK_LBRACK list(attribute) old_function_declarator
## LR(1) items:
postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator . TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator . TK_RBRACK postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_RBRACK shift to state 523
## Reductions:

State 523:
## Known stack suffix:
## TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
## LR(1) items:
postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK . postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 524
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:
-- On WC_TYPE reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On TK_TYPEDEF_NAME reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On TK_SEMICOLON reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On TK_RBRACK reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On TK_LBRACE reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On TK_EQUALS reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On TK_COMMA reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On TK_COLON reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_WCHAR_T reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_VOLATILE reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_VOID reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_VA_LIST reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_UNSIGNED reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_UNION reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_TYPEOF reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_TYPEDEF reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_THREAD reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_STRUCT reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_STATIC reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_SIGNED reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_SHORT reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_RESTRICT reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_REGISTER reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_LONG reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_INTN reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_INT reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_INLINE reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_FLOATN reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_FLOAT reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_FASTCALL reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_EXTERN reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_ENUM reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_DOUBLE reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_DECLSPEC reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_DECIMALN reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_DATATYPE reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_CONST reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_COMPLEX reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_CHAR reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_BOOL reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_AUTO reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_ATTRIBUTE reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK
-- On KW_ASM reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK

State 524:
## Known stack suffix:
## TK_LBRACK list(attribute) old_function_declarator TK_RBRACK postfixing_abstract_declarator
## LR(1) items:
postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK postfixing_abstract_declarator . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_old_function_declarator -> TK_LBRACK list(attribute) old_function_declarator TK_RBRACK postfixing_abstract_declarator

State 525:
## Known stack suffix:
## TK_LBRACK list(attribute) clean_typedef_declarator
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator . TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_RBRACK shift to state 526
## Reductions:

State 526:
## Known stack suffix:
## TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK . postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 527
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:
-- On TK_SEMICOLON reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK
-- On TK_RBRACK reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK
-- On TK_EQUALS reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK
-- On TK_COMMA reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK
-- On TK_COLON reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK
-- On KW_FASTCALL reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK
-- On KW_DECLSPEC reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK
-- On KW_ATTRIBUTE reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK
-- On KW_ASM reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK

State 527:
## Known stack suffix:
## TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator

State 528:
## Known stack suffix:
## clean_postfix_typedef_declarator
## LR(1) items:
clean_typedef_declarator -> clean_postfix_typedef_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clean_typedef_declarator -> clean_postfix_typedef_declarator

State 529:
## Known stack suffix:
## TK_STAR list(attribute) TK_LBRACK list(attribute) simple_paren_typedef_declarator
## LR(1) items:
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator . postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) TK_LBRACK list(attribute) simple_paren_typedef_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_RBRACK shift to state 530
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 503
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:

State 530:
## Known stack suffix:
## TK_STAR list(attribute) TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK
## LR(1) items:
paren_typedef_declarator -> TK_STAR list(attribute) TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_typedef_declarator -> TK_STAR list(attribute) TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK

State 531:
## Known stack suffix:
## KW_VOLATILE
## LR(1) items:
pointer_type_qualifier -> KW_VOLATILE . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_RESTRICT KW_CONST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pointer_type_qualifier -> KW_VOLATILE

State 532:
## Known stack suffix:
## KW_RESTRICT
## LR(1) items:
pointer_type_qualifier -> KW_RESTRICT . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_RESTRICT KW_CONST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pointer_type_qualifier -> KW_RESTRICT

State 533:
## Known stack suffix:
## KW_CONST
## LR(1) items:
pointer_type_qualifier -> KW_CONST . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_RESTRICT KW_CONST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pointer_type_qualifier -> KW_CONST

State 534:
## Known stack suffix:
## unary_identifier_declarator
## LR(1) items:
identifier_declarator -> unary_identifier_declarator . [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier_declarator -> unary_identifier_declarator

State 535:
## Known stack suffix:
## simple_typedef_declarator
## LR(1) items:
parameter_typedef_declarator -> simple_typedef_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
parameter_typedef_declarator -> simple_typedef_declarator . postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 536
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:
-- On TK_SEMICOLON reduce production parameter_typedef_declarator -> simple_typedef_declarator
-- On TK_RBRACK reduce production parameter_typedef_declarator -> simple_typedef_declarator
-- On TK_EQUALS reduce production parameter_typedef_declarator -> simple_typedef_declarator
-- On TK_COMMA reduce production parameter_typedef_declarator -> simple_typedef_declarator
-- On TK_COLON reduce production parameter_typedef_declarator -> simple_typedef_declarator
-- On KW_FASTCALL reduce production parameter_typedef_declarator -> simple_typedef_declarator
-- On KW_DECLSPEC reduce production parameter_typedef_declarator -> simple_typedef_declarator
-- On KW_ATTRIBUTE reduce production parameter_typedef_declarator -> simple_typedef_declarator
-- On KW_ASM reduce production parameter_typedef_declarator -> simple_typedef_declarator

State 536:
## Known stack suffix:
## simple_typedef_declarator postfixing_abstract_declarator
## LR(1) items:
parameter_typedef_declarator -> simple_typedef_declarator postfixing_abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_typedef_declarator -> simple_typedef_declarator postfixing_abstract_declarator

State 537:
## Known stack suffix:
## pointer_type_qualifier
## LR(1) items:
nonempty_list_rev(pointer_type_qualifier) -> pointer_type_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_RESTRICT KW_CONST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(pointer_type_qualifier) -> pointer_type_qualifier

State 538:
## Known stack suffix:
## TK_STAR list(attribute) paren_typedef_declarator
## LR(1) items:
paren_typedef_declarator -> TK_STAR list(attribute) paren_typedef_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_typedef_declarator -> TK_STAR list(attribute) paren_typedef_declarator

State 539:
## Known stack suffix:
## paren_identifier_declarator
## LR(1) items:
identifier_declarator -> paren_identifier_declarator . [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> paren_identifier_declarator . postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> paren_identifier_declarator . TK_LBRACK sep(TK_COMMA,simple_identifier_declarator) TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 514
-- On postfixing_abstract_declarator shift to state 521
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:
-- On TK_SEMICOLON reduce production identifier_declarator -> paren_identifier_declarator
-- On TK_RBRACK reduce production identifier_declarator -> paren_identifier_declarator
-- On TK_LBRACE reduce production identifier_declarator -> paren_identifier_declarator
-- On TK_EQUALS reduce production identifier_declarator -> paren_identifier_declarator
-- On TK_COMMA reduce production identifier_declarator -> paren_identifier_declarator
-- On TK_COLON reduce production identifier_declarator -> paren_identifier_declarator
-- On KW_FASTCALL reduce production identifier_declarator -> paren_identifier_declarator
-- On KW_DECLSPEC reduce production identifier_declarator -> paren_identifier_declarator
-- On KW_ATTRIBUTE reduce production identifier_declarator -> paren_identifier_declarator
-- On KW_ASM reduce production identifier_declarator -> paren_identifier_declarator

State 540:
## Known stack suffix:
## TK_STAR list(attribute) parameter_typedef_declarator
## LR(1) items:
clean_typedef_declarator -> TK_STAR list(attribute) parameter_typedef_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clean_typedef_declarator -> TK_STAR list(attribute) parameter_typedef_declarator

State 541:
## Known stack suffix:
## TK_STAR list(attribute) old_function_declarator
## LR(1) items:
old_function_declarator -> TK_STAR list(attribute) old_function_declarator . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_function_declarator -> TK_STAR list(attribute) old_function_declarator

State 542:
## Known stack suffix:
## nonempty_list_rev(pointer_type_qualifier)
## LR(1) items:
nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA EOF ]
nonempty_list_rev(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier) . pointer_type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_RESTRICT KW_CONST EOF ]
## Transitions:
-- On KW_VOLATILE shift to state 531
-- On KW_RESTRICT shift to state 532
-- On KW_CONST shift to state 533
-- On pointer_type_qualifier shift to state 543
## Reductions:
-- On WC_DECL reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)
-- On TK_TYPEDEF_NAME reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)
-- On TK_STAR reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)
-- On TK_SEMICOLON reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)
-- On TK_RBRACK reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)
-- On TK_LSQBRACK reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)
-- On TK_LBRACK reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)
-- On TK_IDENTIFIER reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)
-- On TK_COMMA reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)
-- On EOF reduce production nonempty_list(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier)

State 543:
## Known stack suffix:
## nonempty_list_rev(pointer_type_qualifier) pointer_type_qualifier
## LR(1) items:
nonempty_list_rev(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier) pointer_type_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_RESTRICT KW_CONST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(pointer_type_qualifier) -> nonempty_list_rev(pointer_type_qualifier) pointer_type_qualifier

State 544:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
## LR(1) items:
clean_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
old_function_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . paren_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
unary_identifier_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 545
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 549
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 550
-- On old_function_declarator shift to state 551
-- On identifier_declarator shift to state 552
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 545:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_identifier_declarator -> TK_LBRACK . list(attribute) paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK . list(attribute) simple_paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 546
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 546:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK list(attribute)
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_identifier_declarator -> TK_LBRACK list(attribute) . paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK list(attribute) . simple_paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 498
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 300
-- On simple_typedef_declarator shift to state 500
-- On simple_paren_typedef_declarator shift to state 547
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 508
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 512
-- On old_function_declarator shift to state 522
-- On clean_typedef_declarator shift to state 525
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 547:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK list(attribute) simple_paren_typedef_declarator
## LR(1) items:
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator . postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK list(attribute) simple_paren_typedef_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_RBRACK shift to state 548
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 503
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:

State 548:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK
## LR(1) items:
paren_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) TK_LBRACK list(attribute) simple_paren_typedef_declarator TK_RBRACK

State 549:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) paren_typedef_declarator
## LR(1) items:
paren_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) paren_typedef_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) paren_typedef_declarator

State 550:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) parameter_typedef_declarator
## LR(1) items:
clean_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) parameter_typedef_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clean_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) parameter_typedef_declarator

State 551:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) old_function_declarator
## LR(1) items:
old_function_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) old_function_declarator . [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_function_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) old_function_declarator

State 552:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) identifier_declarator
## LR(1) items:
unary_identifier_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) identifier_declarator . [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_identifier_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) identifier_declarator

State 553:
## Known stack suffix:
## clean_typedef_declarator
## LR(1) items:
parameter_typedef_declarator -> clean_typedef_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_typedef_declarator -> clean_typedef_declarator

State 554:
## Known stack suffix:
## TK_STAR list(attribute) identifier_declarator
## LR(1) items:
unary_identifier_declarator -> TK_STAR list(attribute) identifier_declarator . [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_identifier_declarator -> TK_STAR list(attribute) identifier_declarator

State 555:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_postfix_typedef_declarator -> TK_LBRACK . list(attribute) clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_identifier_declarator -> TK_LBRACK . list(attribute) paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK . list(attribute) paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 556
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 556:
## Known stack suffix:
## TK_LBRACK list(attribute)
## LR(1) items:
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
clean_postfix_typedef_declarator -> TK_LBRACK list(attribute) . clean_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_identifier_declarator -> TK_LBRACK list(attribute) . paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . paren_typedef_declarator TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . simple_paren_typedef_declarator postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) . paren_typedef_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_SEMICOLON TK_LBRACE TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 498
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 300
-- On simple_typedef_declarator shift to state 500
-- On simple_paren_typedef_declarator shift to state 557
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 508
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 512
-- On old_function_declarator shift to state 522
-- On clean_typedef_declarator shift to state 525
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 557:
## Known stack suffix:
## TK_LBRACK list(attribute) simple_paren_typedef_declarator
## LR(1) items:
paren_postfix_typedef_declarator -> TK_LBRACK list(attribute) simple_paren_typedef_declarator . postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 503
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:

State 558:
## Known stack suffix:
## TK_COLON
## LR(1) items:
bit_field_size -> TK_COLON . constant_expression [ TK_SEMICOLON TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On constant_expression shift to state 559
-- On conditional_expression shift to state 207
-- On cast_expression shift to state 108
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 559:
## Known stack suffix:
## TK_COLON constant_expression
## LR(1) items:
bit_field_size -> TK_COLON constant_expression . [ TK_SEMICOLON TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bit_field_size -> TK_COLON constant_expression

State 560:
## Known stack suffix:
## KW_EXTENSION
## LR(1) items:
declarator -> KW_EXTENSION . declarator [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 563
-- On identifier_declarator shift to state 564
-- On declarator shift to state 565
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 561:
## Known stack suffix:
## paren_typedef_declarator
## LR(1) items:
declarator -> paren_typedef_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarator -> paren_typedef_declarator

State 562:
## Known stack suffix:
## parameter_typedef_declarator
## LR(1) items:
declarator -> parameter_typedef_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarator -> parameter_typedef_declarator

State 563:
## Known stack suffix:
## old_function_declarator
## LR(1) items:
declarator -> old_function_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarator -> old_function_declarator

State 564:
## Known stack suffix:
## identifier_declarator
## LR(1) items:
declarator -> identifier_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarator -> identifier_declarator

State 565:
## Known stack suffix:
## KW_EXTENSION declarator
## LR(1) items:
declarator -> KW_EXTENSION declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarator -> KW_EXTENSION declarator

State 566:
## Known stack suffix:
## type_specifier_nosue nonempty_list(attribute) struct_declarator
## LR(1) items:
struct_declaring_list -> type_specifier_nosue nonempty_list(attribute) struct_declarator . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaring_list -> type_specifier_nosue nonempty_list(attribute) struct_declarator

State 567:
## Known stack suffix:
## declarator
## LR(1) items:
struct_declarator -> declarator . option(bit_field_size) list(attribute) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_COLON shift to state 558
-- On option(bit_field_size) shift to state 568
-- On bit_field_size shift to state 570
## Reductions:
-- On TK_SEMICOLON reduce production option(bit_field_size) ->
-- On TK_COMMA reduce production option(bit_field_size) ->
-- On KW_FASTCALL reduce production option(bit_field_size) ->
-- On KW_DECLSPEC reduce production option(bit_field_size) ->
-- On KW_ATTRIBUTE reduce production option(bit_field_size) ->

State 568:
## Known stack suffix:
## declarator option(bit_field_size)
## LR(1) items:
struct_declarator -> declarator option(bit_field_size) . list(attribute) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 569
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 569:
## Known stack suffix:
## declarator option(bit_field_size) list(attribute)
## LR(1) items:
struct_declarator -> declarator option(bit_field_size) list(attribute) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declarator -> declarator option(bit_field_size) list(attribute)

State 570:
## Known stack suffix:
## bit_field_size
## LR(1) items:
option(bit_field_size) -> bit_field_size . [ TK_SEMICOLON TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(bit_field_size) -> bit_field_size

State 571:
## Known stack suffix:
## bit_field_size
## LR(1) items:
struct_declarator -> bit_field_size . list(attribute) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 572
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 572:
## Known stack suffix:
## bit_field_size list(attribute)
## LR(1) items:
struct_declarator -> bit_field_size list(attribute) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declarator -> bit_field_size list(attribute)

State 573:
## Known stack suffix:
## attribute
## LR(1) items:
nonempty_list_rev(attribute) -> attribute . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(attribute) -> attribute

State 574:
## Known stack suffix:
## type_specifier
## LR(1) items:
struct_declaring_list -> type_specifier . struct_declarator [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On TK_COLON shift to state 558
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On struct_declarator shift to state 575
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 563
-- On identifier_declarator shift to state 564
-- On declarator shift to state 567
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
-- On bit_field_size shift to state 571
## Reductions:

State 575:
## Known stack suffix:
## type_specifier struct_declarator
## LR(1) items:
struct_declaring_list -> type_specifier struct_declarator . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaring_list -> type_specifier struct_declarator

State 576:
## Known stack suffix:
## sue_type_specifier
## LR(1) items:
sue_type_specifier -> sue_type_specifier . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX EOF ]
type_specifier -> sue_type_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_EXTENSION EOF ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_RESTRICT shift to state 196
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On type_qualifier shift to state 314
## Reductions:
-- On WC_DECL reduce production type_specifier -> sue_type_specifier
-- On TK_TYPEDEF_NAME reduce production type_specifier -> sue_type_specifier
-- On TK_STAR reduce production type_specifier -> sue_type_specifier
-- On TK_RBRACK reduce production type_specifier -> sue_type_specifier
-- On TK_LSQBRACK reduce production type_specifier -> sue_type_specifier
-- On TK_LBRACK reduce production type_specifier -> sue_type_specifier
-- On TK_IDENTIFIER reduce production type_specifier -> sue_type_specifier
-- On TK_COMMA reduce production type_specifier -> sue_type_specifier
-- On TK_COLON reduce production type_specifier -> sue_type_specifier
-- On KW_EXTENSION reduce production type_specifier -> sue_type_specifier
-- On EOF reduce production type_specifier -> sue_type_specifier

State 577:
## Known stack suffix:
## struct_or_union
## LR(1) items:
struct_declaring_list -> struct_or_union . list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE [ TK_SEMICOLON TK_COMMA ]
struct_or_union_specifier -> struct_or_union . list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
struct_or_union_specifier -> struct_or_union . list(attribute) identifier_or_typedef_name list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
struct_or_union_specifier -> struct_or_union . list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 578
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 578:
## Known stack suffix:
## struct_or_union list(attribute)
## LR(1) items:
struct_declaring_list -> struct_or_union list(attribute) . TK_LBRACE struct_declaration_list_opt TK_RBRACE [ TK_SEMICOLON TK_COMMA ]
struct_or_union_specifier -> struct_or_union list(attribute) . TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
struct_or_union_specifier -> struct_or_union list(attribute) . identifier_or_typedef_name list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
struct_or_union_specifier -> struct_or_union list(attribute) . identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 92
-- On TK_LBRACE shift to state 579
-- On TK_IDENTIFIER shift to state 93
-- On identifier_or_typedef_name shift to state 619
## Reductions:

State 579:
## Known stack suffix:
## struct_or_union list(attribute) TK_LBRACE
## LR(1) items:
struct_declaring_list -> struct_or_union list(attribute) TK_LBRACE . struct_declaration_list_opt TK_RBRACE [ TK_SEMICOLON TK_COMMA ]
struct_or_union_specifier -> struct_or_union list(attribute) TK_LBRACE . struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
## Transitions:
-- On struct_declaration_list_opt shift to state 580
-- On struct_declaration_list shift to state 325
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 582
## Reductions:
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_RBRACE reduce production struct_declaration_list_opt ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTENSION reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 580:
## Known stack suffix:
## struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt
## LR(1) items:
struct_declaring_list -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt . TK_RBRACE [ TK_SEMICOLON TK_COMMA ]
struct_or_union_specifier -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt . TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
## Transitions:
-- On TK_RBRACE shift to state 581
## Reductions:

State 581:
## Known stack suffix:
## struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE
## LR(1) items:
struct_declaring_list -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE . [ TK_SEMICOLON TK_COMMA ]
struct_or_union_specifier -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE . list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 324
## Reductions:
-- On WC_DECL reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_STAR reduce production list_rev(attribute) ->
-- On TK_SEMICOLON reduce production struct_declaring_list -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE
-- On TK_LBRACK reduce production list_rev(attribute) ->
-- On TK_IDENTIFIER reduce production list_rev(attribute) ->
-- On TK_COMMA reduce production struct_declaring_list -> struct_or_union list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE
-- On TK_COLON reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTENSION reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 582:
## Known stack suffix:
## list(attribute)
## LR(1) items:
struct_declaration_list -> list(attribute) . struct_declaration [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 3
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTENSION shift to state 327
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_specifier shift to state 250
-- On typeof_type_name shift to state 252
-- On typedef_type_specifier shift to state 253
-- On type_specifier_nosue shift to state 328
-- On type_specifier shift to state 574
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 576
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 577
-- On struct_default_declaring_list shift to state 583
-- On struct_declaring_list shift to state 598
-- On struct_declaration shift to state 602
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list(type_qualifier) shift to state 605
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 615
-- On basic_type_name shift to state 618
## Reductions:

State 583:
## Known stack suffix:
## struct_default_declaring_list
## LR(1) items:
struct_declaration -> struct_default_declaring_list . TK_SEMICOLON [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
struct_default_declaring_list -> struct_default_declaring_list . TK_COMMA struct_identifier_declarator [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_SEMICOLON shift to state 584
-- On TK_COMMA shift to state 585
## Reductions:

State 584:
## Known stack suffix:
## struct_default_declaring_list TK_SEMICOLON
## LR(1) items:
struct_declaration -> struct_default_declaring_list TK_SEMICOLON . [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaration -> struct_default_declaring_list TK_SEMICOLON

State 585:
## Known stack suffix:
## struct_default_declaring_list TK_COMMA
## LR(1) items:
struct_default_declaring_list -> struct_default_declaring_list TK_COMMA . struct_identifier_declarator [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On struct_identifier_declarator shift to state 586
-- On default_int shift to state 587
## Default reduction:
-- After reading the next token, reduce production default_int ->

State 586:
## Known stack suffix:
## struct_default_declaring_list TK_COMMA struct_identifier_declarator
## LR(1) items:
struct_default_declaring_list -> struct_default_declaring_list TK_COMMA struct_identifier_declarator . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_default_declaring_list -> struct_default_declaring_list TK_COMMA struct_identifier_declarator

State 587:
## Known stack suffix:
## default_int
## LR(1) items:
struct_identifier_declarator -> default_int . identifier_declarator option(bit_field_size) list(attribute) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 588
-- On TK_LBRACK shift to state 590
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 593
-- On identifier_declarator shift to state 595
## Reductions:

State 588:
## Known stack suffix:
## TK_STAR
## LR(1) items:
unary_identifier_declarator -> TK_STAR . list(attribute) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
unary_identifier_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 589
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 589:
## Known stack suffix:
## TK_STAR list(attribute)
## LR(1) items:
unary_identifier_declarator -> TK_STAR list(attribute) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
unary_identifier_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 588
-- On TK_LBRACK shift to state 590
-- On TK_IDENTIFIER shift to state 299
-- On KW_VOLATILE shift to state 531
-- On KW_RESTRICT shift to state 532
-- On KW_CONST shift to state 533
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_identifier_declarator shift to state 507
-- On pointer_type_qualifier shift to state 537
-- On paren_identifier_declarator shift to state 593
-- On nonempty_list_rev(pointer_type_qualifier) shift to state 542
-- On nonempty_list(pointer_type_qualifier) shift to state 594
-- On identifier_declarator shift to state 554
## Reductions:

State 590:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
paren_identifier_declarator -> TK_LBRACK . list(attribute) paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 591
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 591:
## Known stack suffix:
## TK_LBRACK list(attribute)
## LR(1) items:
paren_identifier_declarator -> TK_LBRACK list(attribute) . paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 588
-- On TK_LBRACK shift to state 590
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 300
-- On simple_identifier_declarator shift to state 505
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 592
## Reductions:

State 592:
## Known stack suffix:
## TK_LBRACK list(attribute) paren_identifier_declarator
## LR(1) items:
paren_identifier_declarator -> TK_LBRACK list(attribute) paren_identifier_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> paren_identifier_declarator . postfixing_abstract_declarator [ TK_RBRACK ]
## Transitions:
-- On TK_RBRACK shift to state 513
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 521
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:

State 593:
## Known stack suffix:
## paren_identifier_declarator
## LR(1) items:
identifier_declarator -> paren_identifier_declarator . [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> paren_identifier_declarator . postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 302
-- On postfixing_abstract_declarator shift to state 521
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
## Reductions:
-- On TK_SEMICOLON reduce production identifier_declarator -> paren_identifier_declarator
-- On TK_RBRACK reduce production identifier_declarator -> paren_identifier_declarator
-- On TK_EQUALS reduce production identifier_declarator -> paren_identifier_declarator
-- On TK_COMMA reduce production identifier_declarator -> paren_identifier_declarator
-- On TK_COLON reduce production identifier_declarator -> paren_identifier_declarator
-- On KW_FASTCALL reduce production identifier_declarator -> paren_identifier_declarator
-- On KW_DECLSPEC reduce production identifier_declarator -> paren_identifier_declarator
-- On KW_ATTRIBUTE reduce production identifier_declarator -> paren_identifier_declarator
-- On KW_ASM reduce production identifier_declarator -> paren_identifier_declarator

State 594:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
## LR(1) items:
unary_identifier_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_EQUALS TK_COMMA TK_COLON KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 588
-- On TK_LBRACK shift to state 590
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 593
-- On identifier_declarator shift to state 552
## Reductions:

State 595:
## Known stack suffix:
## default_int identifier_declarator
## LR(1) items:
struct_identifier_declarator -> default_int identifier_declarator . option(bit_field_size) list(attribute) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_COLON shift to state 558
-- On option(bit_field_size) shift to state 596
-- On bit_field_size shift to state 570
## Reductions:
-- On TK_SEMICOLON reduce production option(bit_field_size) ->
-- On TK_COMMA reduce production option(bit_field_size) ->
-- On KW_FASTCALL reduce production option(bit_field_size) ->
-- On KW_DECLSPEC reduce production option(bit_field_size) ->
-- On KW_ATTRIBUTE reduce production option(bit_field_size) ->

State 596:
## Known stack suffix:
## default_int identifier_declarator option(bit_field_size)
## LR(1) items:
struct_identifier_declarator -> default_int identifier_declarator option(bit_field_size) . list(attribute) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 597
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 597:
## Known stack suffix:
## default_int identifier_declarator option(bit_field_size) list(attribute)
## LR(1) items:
struct_identifier_declarator -> default_int identifier_declarator option(bit_field_size) list(attribute) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_identifier_declarator -> default_int identifier_declarator option(bit_field_size) list(attribute)

State 598:
## Known stack suffix:
## struct_declaring_list
## LR(1) items:
struct_declaration -> struct_declaring_list . TK_SEMICOLON [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
struct_declaring_list -> struct_declaring_list . TK_COMMA struct_declarator [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_SEMICOLON shift to state 599
-- On TK_COMMA shift to state 600
## Reductions:

State 599:
## Known stack suffix:
## struct_declaring_list TK_SEMICOLON
## LR(1) items:
struct_declaration -> struct_declaring_list TK_SEMICOLON . [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaration -> struct_declaring_list TK_SEMICOLON

State 600:
## Known stack suffix:
## struct_declaring_list TK_COMMA
## LR(1) items:
struct_declaring_list -> struct_declaring_list TK_COMMA . struct_declarator [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On TK_COLON shift to state 558
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On struct_declarator shift to state 601
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 563
-- On identifier_declarator shift to state 564
-- On declarator shift to state 567
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
-- On bit_field_size shift to state 571
## Reductions:

State 601:
## Known stack suffix:
## struct_declaring_list TK_COMMA struct_declarator
## LR(1) items:
struct_declaring_list -> struct_declaring_list TK_COMMA struct_declarator . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaring_list -> struct_declaring_list TK_COMMA struct_declarator

State 602:
## Known stack suffix:
## list(attribute) struct_declaration
## LR(1) items:
struct_declaration_list -> list(attribute) struct_declaration . [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaration_list -> list(attribute) struct_declaration

State 603:
## Known stack suffix:
## nonempty_list_rev(type_qualifier)
## LR(1) items:
nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
nonempty_list_rev(type_qualifier) -> nonempty_list_rev(type_qualifier) . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On KW_VOLATILE shift to state 5
-- On KW_RESTRICT shift to state 196
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On type_qualifier shift to state 604
## Reductions:
-- On WC_DECL reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On TK_TYPEDEF_NAME reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On TK_STAR reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On TK_SEMICOLON reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On TK_RBRACK reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On TK_LSQBRACK reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On TK_LBRACK reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On TK_IDENTIFIER reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On TK_COMMA reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_WCHAR_T reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_VOID reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_VA_LIST reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_UNSIGNED reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_UNION reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_TYPEOF reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_TYPEDEF reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_THREAD reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_STRUCT reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_STATIC reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_SIGNED reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_SHORT reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_REGISTER reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_LONG reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_INTN reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_INT reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_INLINE reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_FLOATN reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_FLOAT reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_FASTCALL reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_EXTERN reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_ENUM reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_DOUBLE reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_DECLSPEC reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_DECIMALN reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_DATATYPE reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_CHAR reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_BOOL reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_AUTO reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On KW_ATTRIBUTE reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)
-- On EOF reduce production nonempty_list(type_qualifier) -> nonempty_list_rev(type_qualifier)

State 604:
## Known stack suffix:
## nonempty_list_rev(type_qualifier) type_qualifier
## LR(1) items:
nonempty_list_rev(type_qualifier) -> nonempty_list_rev(type_qualifier) type_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(type_qualifier) -> nonempty_list_rev(type_qualifier) type_qualifier

State 605:
## Known stack suffix:
## nonempty_list(type_qualifier)
## LR(1) items:
basic_type_specifier -> nonempty_list(type_qualifier) . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
struct_default_declaring_list -> nonempty_list(type_qualifier) . struct_identifier_declarator [ TK_SEMICOLON TK_COMMA ]
sue_type_specifier -> nonempty_list(type_qualifier) . elaborated_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_EXTENSION KW_CONST KW_COMPLEX ]
typedef_type_specifier -> nonempty_list(type_qualifier) . TK_TYPEDEF_NAME [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_ATTRIBUTE ]
typeof_type_specifier -> nonempty_list(type_qualifier) . typeof_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER TK_COLON KW_VOLATILE KW_RESTRICT KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_ATTRIBUTE ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 606
-- On KW_WCHAR_T shift to state 4
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_name shift to state 607
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On struct_identifier_declarator shift to state 608
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 611
-- On default_int shift to state 587
-- On datatype_specifier shift to state 612
-- On basic_type_name shift to state 613
## Reductions:
-- On WC_DECL reduce production default_int ->
-- On TK_STAR reduce production default_int ->
-- On TK_LBRACK reduce production default_int ->
-- On TK_IDENTIFIER reduce production default_int ->

State 606:
## Known stack suffix:
## nonempty_list(type_qualifier) TK_TYPEDEF_NAME
## LR(1) items:
typedef_type_specifier -> nonempty_list(type_qualifier) TK_TYPEDEF_NAME . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_type_specifier -> nonempty_list(type_qualifier) TK_TYPEDEF_NAME

State 607:
## Known stack suffix:
## nonempty_list(type_qualifier) typeof_type_name
## LR(1) items:
typeof_type_specifier -> nonempty_list(type_qualifier) typeof_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeof_type_specifier -> nonempty_list(type_qualifier) typeof_type_name

State 608:
## Known stack suffix:
## nonempty_list(type_qualifier) struct_identifier_declarator
## LR(1) items:
struct_default_declaring_list -> nonempty_list(type_qualifier) struct_identifier_declarator . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_default_declaring_list -> nonempty_list(type_qualifier) struct_identifier_declarator

State 609:
## Known stack suffix:
## enum_specifier
## LR(1) items:
elaborated_type_name -> enum_specifier . list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 610
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 610:
## Known stack suffix:
## enum_specifier list(attribute)
## LR(1) items:
elaborated_type_name -> enum_specifier list(attribute) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elaborated_type_name -> enum_specifier list(attribute)

State 611:
## Known stack suffix:
## nonempty_list(type_qualifier) elaborated_type_name
## LR(1) items:
sue_type_specifier -> nonempty_list(type_qualifier) elaborated_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sue_type_specifier -> nonempty_list(type_qualifier) elaborated_type_name

State 612:
## Known stack suffix:
## datatype_specifier
## LR(1) items:
elaborated_type_name -> datatype_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elaborated_type_name -> datatype_specifier

State 613:
## Known stack suffix:
## nonempty_list(type_qualifier) basic_type_name
## LR(1) items:
basic_type_specifier -> nonempty_list(type_qualifier) basic_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_specifier -> nonempty_list(type_qualifier) basic_type_name

State 614:
## Known stack suffix:
## elaborated_type_name
## LR(1) items:
sue_type_specifier -> elaborated_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sue_type_specifier -> elaborated_type_name

State 615:
## Known stack suffix:
## basic_type_specifier
## LR(1) items:
basic_type_specifier -> basic_type_specifier . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE EOF ]
basic_type_specifier -> basic_type_specifier . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE EOF ]
type_specifier_nosue -> basic_type_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On type_qualifier shift to state 616
-- On basic_type_name shift to state 617
## Reductions:
-- On WC_DECL reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_TYPEDEF_NAME reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_STAR reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_RBRACK reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_LSQBRACK reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_LBRACK reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_IDENTIFIER reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_COMMA reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_COLON reduce production type_specifier_nosue -> basic_type_specifier
-- On KW_FASTCALL reduce production type_specifier_nosue -> basic_type_specifier
-- On KW_EXTENSION reduce production type_specifier_nosue -> basic_type_specifier
-- On KW_DECLSPEC reduce production type_specifier_nosue -> basic_type_specifier
-- On KW_ATTRIBUTE reduce production type_specifier_nosue -> basic_type_specifier
-- On EOF reduce production type_specifier_nosue -> basic_type_specifier

State 616:
## Known stack suffix:
## basic_type_specifier type_qualifier
## LR(1) items:
basic_type_specifier -> basic_type_specifier type_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_specifier -> basic_type_specifier type_qualifier

State 617:
## Known stack suffix:
## basic_type_specifier basic_type_name
## LR(1) items:
basic_type_specifier -> basic_type_specifier basic_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_specifier -> basic_type_specifier basic_type_name

State 618:
## Known stack suffix:
## basic_type_name
## LR(1) items:
basic_type_specifier -> basic_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_type_specifier -> basic_type_name

State 619:
## Known stack suffix:
## struct_or_union list(attribute) identifier_or_typedef_name
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name . list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name . list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 620
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 620:
## Known stack suffix:
## struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute) . TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_LBRACE shift to state 621
## Reductions:
-- On WC_DECL reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On TK_TYPEDEF_NAME reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On TK_STAR reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On TK_SEMICOLON reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On TK_RBRACK reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On TK_LSQBRACK reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On TK_LBRACK reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On TK_IDENTIFIER reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On TK_COMMA reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On TK_COLON reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_VOLATILE reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_TYPEDEF reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_THREAD reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_STATIC reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_RESTRICT reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_REGISTER reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_INLINE reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_EXTERN reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_EXTENSION reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_CONST reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_COMPLEX reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On KW_AUTO reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)
-- On EOF reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute)

State 621:
## Known stack suffix:
## struct_or_union list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE . struct_declaration_list_opt TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On struct_declaration_list_opt shift to state 622
-- On struct_declaration_list shift to state 325
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 582
## Reductions:
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_RBRACE reduce production struct_declaration_list_opt ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTENSION reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 622:
## Known stack suffix:
## struct_or_union list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt . TK_RBRACE list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On TK_RBRACE shift to state 623
## Reductions:

State 623:
## Known stack suffix:
## struct_or_union list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE . list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 624
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 624:
## Known stack suffix:
## struct_or_union list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute)
## LR(1) items:
struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_or_union_specifier -> struct_or_union list(attribute) identifier_or_typedef_name list(attribute) TK_LBRACE struct_declaration_list_opt TK_RBRACE list(attribute)

State 625:
## Known stack suffix:
## KW_EXTENSION struct_declaration
## LR(1) items:
struct_declaration -> KW_EXTENSION struct_declaration . [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaration -> KW_EXTENSION struct_declaration

State 626:
## Known stack suffix:
## struct_declaration_list list(attribute) struct_declaration
## LR(1) items:
struct_declaration_list -> struct_declaration_list list(attribute) struct_declaration . [ TK_TYPEDEF_NAME TK_RBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_STRUCT KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaration_list -> struct_declaration_list list(attribute) struct_declaration

State 627:
## Known stack suffix:
## storage_class
## LR(1) items:
declaration_qualifier_list -> storage_class . list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 628
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 628:
## Known stack suffix:
## storage_class list(attribute)
## LR(1) items:
declaration_qualifier_list -> storage_class list(attribute) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_qualifier_list -> storage_class list(attribute)

State 629:
## Known stack suffix:
## TK_LBRACK list(attribute) postfixing_abstract_declarator
## LR(1) items:
postfix_abstract_declarator -> TK_LBRACK list(attribute) postfixing_abstract_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On TK_RBRACK shift to state 630
## Reductions:

State 630:
## Known stack suffix:
## TK_LBRACK list(attribute) postfixing_abstract_declarator TK_RBRACK
## LR(1) items:
postfix_abstract_declarator -> TK_LBRACK list(attribute) postfixing_abstract_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_abstract_declarator -> TK_LBRACK list(attribute) postfixing_abstract_declarator TK_RBRACK

State 631:
## Known stack suffix:
## TK_LBRACK list(attribute) postfix_abstract_declarator
## LR(1) items:
postfix_abstract_declarator -> TK_LBRACK list(attribute) postfix_abstract_declarator . TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On TK_RBRACK shift to state 632
## Reductions:

State 632:
## Known stack suffix:
## TK_LBRACK list(attribute) postfix_abstract_declarator TK_RBRACK
## LR(1) items:
postfix_abstract_declarator -> TK_LBRACK list(attribute) postfix_abstract_declarator TK_RBRACK . [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_abstract_declarator -> TK_LBRACK list(attribute) postfix_abstract_declarator TK_RBRACK

State 633:
## Known stack suffix:
## list(attribute) parameter_declaration_noattr
## LR(1) items:
parameter_declaration -> list(attribute) parameter_declaration_noattr . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration -> list(attribute) parameter_declaration_noattr

State 634:
## Known stack suffix:
## nonempty_list(type_qualifier)
## LR(1) items:
basic_type_specifier -> nonempty_list(type_qualifier) . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_DOUBLE KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
declaration_qualifier_list -> nonempty_list(type_qualifier) . list(attribute) storage_class list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
parameter_declaration_noattr -> nonempty_list(type_qualifier) . default_int [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> nonempty_list(type_qualifier) . default_int abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> nonempty_list(type_qualifier) . default_int identifier_declarator list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
sue_type_specifier -> nonempty_list(type_qualifier) . elaborated_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_CONST KW_COMPLEX KW_AUTO ]
typedef_type_specifier -> nonempty_list(type_qualifier) . TK_TYPEDEF_NAME [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_CONST KW_COMPLEX KW_AUTO ]
typeof_type_specifier -> nonempty_list(type_qualifier) . typeof_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_CONST KW_COMPLEX KW_AUTO ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 606
-- On KW_WCHAR_T shift to state 4
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_name shift to state 607
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 635
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 611
-- On default_int shift to state 638
-- On datatype_specifier shift to state 612
-- On basic_type_name shift to state 613
## Reductions:
-- On WC_DECL reduce production default_int ->
-- On TK_STAR reduce production default_int ->
-- On TK_SEMICOLON reduce production default_int ->
-- On TK_RBRACK reduce production default_int ->
-- On TK_LSQBRACK reduce production default_int ->
-- On TK_LBRACK reduce production default_int ->
-- On TK_IDENTIFIER reduce production default_int ->
-- On TK_COMMA reduce production default_int ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 635:
## Known stack suffix:
## nonempty_list(type_qualifier) list(attribute)
## LR(1) items:
declaration_qualifier_list -> nonempty_list(type_qualifier) list(attribute) . storage_class list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_REGISTER shift to state 274
-- On KW_INLINE shift to state 275
-- On KW_EXTERN shift to state 276
-- On KW_AUTO shift to state 277
-- On storage_class shift to state 636
## Reductions:

State 636:
## Known stack suffix:
## nonempty_list(type_qualifier) list(attribute) storage_class
## LR(1) items:
declaration_qualifier_list -> nonempty_list(type_qualifier) list(attribute) storage_class . list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 637
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 637:
## Known stack suffix:
## nonempty_list(type_qualifier) list(attribute) storage_class list(attribute)
## LR(1) items:
declaration_qualifier_list -> nonempty_list(type_qualifier) list(attribute) storage_class list(attribute) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_qualifier_list -> nonempty_list(type_qualifier) list(attribute) storage_class list(attribute)

State 638:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int
## LR(1) items:
parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int . abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int . identifier_declarator list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 639
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 641
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On unary_abstract_declarator shift to state 645
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 647
-- On paren_identifier_declarator shift to state 593
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On identifier_declarator shift to state 672
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 674
## Reductions:
-- On TK_SEMICOLON reduce production parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int
-- On TK_RBRACK reduce production parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int
-- On TK_COMMA reduce production parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int

State 639:
## Known stack suffix:
## TK_STAR
## LR(1) items:
unary_abstract_declarator -> TK_STAR . list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR . list(attribute) abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_identifier_declarator -> TK_STAR . list(attribute) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
unary_identifier_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 640
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 640:
## Known stack suffix:
## TK_STAR list(attribute)
## LR(1) items:
unary_abstract_declarator -> TK_STAR list(attribute) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR list(attribute) . abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_identifier_declarator -> TK_STAR list(attribute) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
unary_identifier_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 639
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 641
-- On TK_IDENTIFIER shift to state 299
-- On KW_VOLATILE shift to state 531
-- On KW_RESTRICT shift to state 532
-- On KW_CONST shift to state 533
-- On unary_identifier_declarator shift to state 534
-- On unary_abstract_declarator shift to state 645
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 647
-- On pointer_type_qualifier shift to state 537
-- On paren_identifier_declarator shift to state 593
-- On nonempty_list_rev(pointer_type_qualifier) shift to state 542
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(pointer_type_qualifier) shift to state 669
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On identifier_declarator shift to state 554
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 671
## Reductions:
-- On TK_SEMICOLON reduce production unary_abstract_declarator -> TK_STAR list(attribute)
-- On TK_RBRACK reduce production unary_abstract_declarator -> TK_STAR list(attribute)
-- On TK_COMMA reduce production unary_abstract_declarator -> TK_STAR list(attribute)

State 641:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
paren_identifier_declarator -> TK_LBRACK . list(attribute) paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) unary_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) postfix_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK . list(attribute) unary_abstract_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfixing_abstract_declarator -> TK_LBRACK . option(forward_parameter_type_list) TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On sep_rev(TK_SEMICOLON,parameter_type_list) shift to state 264
-- On sep_rev(TK_COMMA,parameter_declaration) shift to state 266
-- On parameter_type_list shift to state 294
-- On parameter_declaration shift to state 295
-- On option(forward_parameter_type_list) shift to state 296
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 642
-- On forward_parameter_type_list shift to state 303
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On WC_DECL reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_STAR reduce production list_rev(attribute) ->
-- On TK_RBRACK reduce production option(forward_parameter_type_list) ->
-- On TK_LSQBRACK reduce production list_rev(attribute) ->
-- On TK_LBRACK reduce production list_rev(attribute) ->
-- On TK_IDENTIFIER reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 642:
## Known stack suffix:
## TK_LBRACK list(attribute)
## LR(1) items:
parameter_declaration -> list(attribute) . parameter_declaration_noattr [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
paren_identifier_declarator -> TK_LBRACK list(attribute) . paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . unary_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . postfix_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . postfixing_abstract_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . unary_abstract_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On WC_TYPE shift to state 2
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 3
-- On TK_STAR shift to state 639
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 641
-- On TK_IDENTIFIER shift to state 299
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On unary_identifier_declarator shift to state 300
-- On unary_abstract_declarator shift to state 309
-- On typeof_type_specifier shift to state 278
-- On typeof_type_name shift to state 252
-- On typeof_declaration_specifier shift to state 280
-- On typedef_type_specifier shift to state 284
-- On typedef_declaration_specifier shift to state 286
-- On type_specifier_nosue shift to state 255
-- On type_specifier shift to state 288
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 313
-- On sue_declaration_specifier shift to state 316
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 627
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 629
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 631
-- On paren_identifier_declarator shift to state 592
-- On parameter_declaration_noattr shift to state 633
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(type_qualifier) shift to state 634
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On declaration_specifier_nosue shift to state 643
-- On declaration_specifier shift to state 644
-- On declaration_qualifier_list shift to state 653
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 664
-- On basic_type_name shift to state 618
-- On basic_declaration_specifier shift to state 666
-- On array_abstract_declarator shift to state 308
## Reductions:

State 643:
## Known stack suffix:
## declaration_specifier_nosue
## LR(1) items:
declaration_specifier -> declaration_specifier_nosue . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_specifier -> declaration_specifier_nosue

State 644:
## Known stack suffix:
## declaration_specifier
## LR(1) items:
parameter_declaration_noattr -> declaration_specifier . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> declaration_specifier . abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> declaration_specifier . identifier_declarator list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> declaration_specifier . parameter_typedef_declarator list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 291
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 293
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On unary_abstract_declarator shift to state 645
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 647
-- On paren_identifier_declarator shift to state 593
-- On parameter_typedef_declarator shift to state 648
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On identifier_declarator shift to state 650
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 652
## Reductions:
-- On TK_SEMICOLON reduce production parameter_declaration_noattr -> declaration_specifier
-- On TK_RBRACK reduce production parameter_declaration_noattr -> declaration_specifier
-- On TK_COMMA reduce production parameter_declaration_noattr -> declaration_specifier

State 645:
## Known stack suffix:
## unary_abstract_declarator
## LR(1) items:
abstract_declarator -> unary_abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production abstract_declarator -> unary_abstract_declarator

State 646:
## Known stack suffix:
## postfixing_abstract_declarator
## LR(1) items:
abstract_declarator -> postfixing_abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production abstract_declarator -> postfixing_abstract_declarator

State 647:
## Known stack suffix:
## postfix_abstract_declarator
## LR(1) items:
abstract_declarator -> postfix_abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production abstract_declarator -> postfix_abstract_declarator

State 648:
## Known stack suffix:
## declaration_specifier parameter_typedef_declarator
## LR(1) items:
parameter_declaration_noattr -> declaration_specifier parameter_typedef_declarator . list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 649
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 649:
## Known stack suffix:
## declaration_specifier parameter_typedef_declarator list(attribute)
## LR(1) items:
parameter_declaration_noattr -> declaration_specifier parameter_typedef_declarator list(attribute) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> declaration_specifier parameter_typedef_declarator list(attribute)

State 650:
## Known stack suffix:
## declaration_specifier identifier_declarator
## LR(1) items:
parameter_declaration_noattr -> declaration_specifier identifier_declarator . list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 651
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 651:
## Known stack suffix:
## declaration_specifier identifier_declarator list(attribute)
## LR(1) items:
parameter_declaration_noattr -> declaration_specifier identifier_declarator list(attribute) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> declaration_specifier identifier_declarator list(attribute)

State 652:
## Known stack suffix:
## declaration_specifier abstract_declarator
## LR(1) items:
parameter_declaration_noattr -> declaration_specifier abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> declaration_specifier abstract_declarator

State 653:
## Known stack suffix:
## declaration_qualifier_list
## LR(1) items:
basic_declaration_specifier -> declaration_qualifier_list . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_DOUBLE KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
declaration_qualifier_list -> declaration_qualifier_list . declaration_qualifier list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
parameter_declaration_noattr -> declaration_qualifier_list . default_int [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> declaration_qualifier_list . default_int abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> declaration_qualifier_list . default_int identifier_declarator list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
sue_declaration_specifier -> declaration_qualifier_list . elaborated_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_CONST KW_COMPLEX KW_AUTO ]
typedef_declaration_specifier -> declaration_qualifier_list . TK_TYPEDEF_NAME [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_CONST KW_COMPLEX KW_AUTO ]
typeof_declaration_specifier -> declaration_qualifier_list . typeof_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_CONST KW_COMPLEX KW_AUTO ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 654
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On typeof_type_name shift to state 655
-- On type_qualifier shift to state 281
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 282
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 656
-- On default_int shift to state 657
-- On declaration_qualifier shift to state 661
-- On datatype_specifier shift to state 612
-- On basic_type_name shift to state 663
## Reductions:
-- On WC_DECL reduce production default_int ->
-- On TK_STAR reduce production default_int ->
-- On TK_SEMICOLON reduce production default_int ->
-- On TK_RBRACK reduce production default_int ->
-- On TK_LSQBRACK reduce production default_int ->
-- On TK_LBRACK reduce production default_int ->
-- On TK_IDENTIFIER reduce production default_int ->
-- On TK_COMMA reduce production default_int ->

State 654:
## Known stack suffix:
## declaration_qualifier_list TK_TYPEDEF_NAME
## LR(1) items:
typedef_declaration_specifier -> declaration_qualifier_list TK_TYPEDEF_NAME . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_declaration_specifier -> declaration_qualifier_list TK_TYPEDEF_NAME

State 655:
## Known stack suffix:
## declaration_qualifier_list typeof_type_name
## LR(1) items:
typeof_declaration_specifier -> declaration_qualifier_list typeof_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeof_declaration_specifier -> declaration_qualifier_list typeof_type_name

State 656:
## Known stack suffix:
## declaration_qualifier_list elaborated_type_name
## LR(1) items:
sue_declaration_specifier -> declaration_qualifier_list elaborated_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sue_declaration_specifier -> declaration_qualifier_list elaborated_type_name

State 657:
## Known stack suffix:
## declaration_qualifier_list default_int
## LR(1) items:
parameter_declaration_noattr -> declaration_qualifier_list default_int . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> declaration_qualifier_list default_int . abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
parameter_declaration_noattr -> declaration_qualifier_list default_int . identifier_declarator list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 639
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 641
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On unary_abstract_declarator shift to state 645
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 647
-- On paren_identifier_declarator shift to state 593
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On identifier_declarator shift to state 658
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 660
## Reductions:
-- On TK_SEMICOLON reduce production parameter_declaration_noattr -> declaration_qualifier_list default_int
-- On TK_RBRACK reduce production parameter_declaration_noattr -> declaration_qualifier_list default_int
-- On TK_COMMA reduce production parameter_declaration_noattr -> declaration_qualifier_list default_int

State 658:
## Known stack suffix:
## declaration_qualifier_list default_int identifier_declarator
## LR(1) items:
parameter_declaration_noattr -> declaration_qualifier_list default_int identifier_declarator . list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 659
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 659:
## Known stack suffix:
## declaration_qualifier_list default_int identifier_declarator list(attribute)
## LR(1) items:
parameter_declaration_noattr -> declaration_qualifier_list default_int identifier_declarator list(attribute) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> declaration_qualifier_list default_int identifier_declarator list(attribute)

State 660:
## Known stack suffix:
## declaration_qualifier_list default_int abstract_declarator
## LR(1) items:
parameter_declaration_noattr -> declaration_qualifier_list default_int abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> declaration_qualifier_list default_int abstract_declarator

State 661:
## Known stack suffix:
## declaration_qualifier_list declaration_qualifier
## LR(1) items:
declaration_qualifier_list -> declaration_qualifier_list declaration_qualifier . list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 662
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 662:
## Known stack suffix:
## declaration_qualifier_list declaration_qualifier list(attribute)
## LR(1) items:
declaration_qualifier_list -> declaration_qualifier_list declaration_qualifier list(attribute) . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_qualifier_list -> declaration_qualifier_list declaration_qualifier list(attribute)

State 663:
## Known stack suffix:
## declaration_qualifier_list basic_type_name
## LR(1) items:
basic_declaration_specifier -> declaration_qualifier_list basic_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_declaration_specifier -> declaration_qualifier_list basic_type_name

State 664:
## Known stack suffix:
## basic_type_specifier
## LR(1) items:
basic_declaration_specifier -> basic_type_specifier . storage_class [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
basic_type_specifier -> basic_type_specifier . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
basic_type_specifier -> basic_type_specifier . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
type_specifier_nosue -> basic_type_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 616
-- On storage_class shift to state 665
-- On basic_type_name shift to state 617
## Reductions:
-- On WC_DECL reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_TYPEDEF_NAME reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_STAR reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_SEMICOLON reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_RBRACK reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_LSQBRACK reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_LBRACK reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_IDENTIFIER reduce production type_specifier_nosue -> basic_type_specifier
-- On TK_COMMA reduce production type_specifier_nosue -> basic_type_specifier
-- On KW_FASTCALL reduce production type_specifier_nosue -> basic_type_specifier
-- On KW_EXTENSION reduce production type_specifier_nosue -> basic_type_specifier
-- On KW_DECLSPEC reduce production type_specifier_nosue -> basic_type_specifier
-- On KW_ATTRIBUTE reduce production type_specifier_nosue -> basic_type_specifier

State 665:
## Known stack suffix:
## basic_type_specifier storage_class
## LR(1) items:
basic_declaration_specifier -> basic_type_specifier storage_class . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_declaration_specifier -> basic_type_specifier storage_class

State 666:
## Known stack suffix:
## basic_declaration_specifier
## LR(1) items:
basic_declaration_specifier -> basic_declaration_specifier . declaration_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
basic_declaration_specifier -> basic_declaration_specifier . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
declaration_specifier_nosue -> basic_declaration_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_FASTCALL KW_EXTENSION KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 281
-- On storage_class shift to state 282
-- On declaration_qualifier shift to state 667
-- On basic_type_name shift to state 668
## Reductions:
-- On WC_DECL reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On TK_TYPEDEF_NAME reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On TK_STAR reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On TK_SEMICOLON reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On TK_RBRACK reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On TK_LSQBRACK reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On TK_LBRACK reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On TK_IDENTIFIER reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On TK_COMMA reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On KW_FASTCALL reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On KW_EXTENSION reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On KW_DECLSPEC reduce production declaration_specifier_nosue -> basic_declaration_specifier
-- On KW_ATTRIBUTE reduce production declaration_specifier_nosue -> basic_declaration_specifier

State 667:
## Known stack suffix:
## basic_declaration_specifier declaration_qualifier
## LR(1) items:
basic_declaration_specifier -> basic_declaration_specifier declaration_qualifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_declaration_specifier -> basic_declaration_specifier declaration_qualifier

State 668:
## Known stack suffix:
## basic_declaration_specifier basic_type_name
## LR(1) items:
basic_declaration_specifier -> basic_declaration_specifier basic_type_name . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_declaration_specifier -> basic_declaration_specifier basic_type_name

State 669:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
## LR(1) items:
unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_identifier_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 639
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 641
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On unary_abstract_declarator shift to state 645
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 647
-- On paren_identifier_declarator shift to state 593
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On identifier_declarator shift to state 552
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 670
## Reductions:
-- On TK_SEMICOLON reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
-- On TK_RBRACK reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
-- On TK_COMMA reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)

State 670:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) abstract_declarator
## LR(1) items:
unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) abstract_declarator

State 671:
## Known stack suffix:
## TK_STAR list(attribute) abstract_declarator
## LR(1) items:
unary_abstract_declarator -> TK_STAR list(attribute) abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_abstract_declarator -> TK_STAR list(attribute) abstract_declarator

State 672:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int identifier_declarator
## LR(1) items:
parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int identifier_declarator . list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 673
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 673:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int identifier_declarator list(attribute)
## LR(1) items:
parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int identifier_declarator list(attribute) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int identifier_declarator list(attribute)

State 674:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int abstract_declarator
## LR(1) items:
parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> nonempty_list(type_qualifier) default_int abstract_declarator

State 675:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
## LR(1) items:
clean_typedef_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . parameter_typedef_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
unary_identifier_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 291
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 293
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On unary_abstract_declarator shift to state 645
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_identifier_declarator shift to state 507
-- On postfix_abstract_declarator shift to state 647
-- On paren_identifier_declarator shift to state 593
-- On parameter_typedef_declarator shift to state 550
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On identifier_declarator shift to state 552
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 670
## Reductions:
-- On TK_SEMICOLON reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
-- On TK_RBRACK reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
-- On TK_COMMA reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)

State 676:
## Known stack suffix:
## type_specifier parameter_typedef_declarator
## LR(1) items:
parameter_declaration_noattr -> type_specifier parameter_typedef_declarator . list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 677
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 677:
## Known stack suffix:
## type_specifier parameter_typedef_declarator list(attribute)
## LR(1) items:
parameter_declaration_noattr -> type_specifier parameter_typedef_declarator list(attribute) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> type_specifier parameter_typedef_declarator list(attribute)

State 678:
## Known stack suffix:
## type_specifier identifier_declarator
## LR(1) items:
parameter_declaration_noattr -> type_specifier identifier_declarator . list(attribute) [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 679
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 679:
## Known stack suffix:
## type_specifier identifier_declarator list(attribute)
## LR(1) items:
parameter_declaration_noattr -> type_specifier identifier_declarator list(attribute) . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> type_specifier identifier_declarator list(attribute)

State 680:
## Known stack suffix:
## type_specifier abstract_declarator
## LR(1) items:
parameter_declaration_noattr -> type_specifier abstract_declarator . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration_noattr -> type_specifier abstract_declarator

State 681:
## Known stack suffix:
## sep_rev(TK_SEMICOLON,parameter_type_list) TK_SEMICOLON parameter_type_list
## LR(1) items:
sep_rev(TK_SEMICOLON,parameter_type_list) -> sep_rev(TK_SEMICOLON,parameter_type_list) TK_SEMICOLON parameter_type_list . [ TK_SEMICOLON TK_RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_SEMICOLON,parameter_type_list) -> sep_rev(TK_SEMICOLON,parameter_type_list) TK_SEMICOLON parameter_type_list

State 682:
## Known stack suffix:
## TK_LBRACK list(attribute)
## LR(1) items:
parameter_declaration -> list(attribute) . parameter_declaration_noattr [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . unary_abstract_declarator TK_RBRACK [ TK_RBRACK TK_COMMA EOF ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . postfix_abstract_declarator TK_RBRACK [ TK_RBRACK TK_COMMA EOF ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . postfixing_abstract_declarator TK_RBRACK [ TK_RBRACK TK_COMMA EOF ]
postfix_abstract_declarator -> TK_LBRACK list(attribute) . unary_abstract_declarator TK_RBRACK postfixing_abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On WC_TYPE shift to state 2
-- On TK_TYPEDEF_NAME shift to state 3
-- On TK_STAR shift to state 257
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 263
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On unary_abstract_declarator shift to state 309
-- On typeof_type_specifier shift to state 278
-- On typeof_type_name shift to state 252
-- On typeof_declaration_specifier shift to state 280
-- On typedef_type_specifier shift to state 284
-- On typedef_declaration_specifier shift to state 286
-- On type_specifier_nosue shift to state 255
-- On type_specifier shift to state 288
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 313
-- On sue_declaration_specifier shift to state 316
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 627
-- On postfixing_abstract_declarator shift to state 629
-- On postfix_abstract_declarator shift to state 631
-- On parameter_declaration_noattr shift to state 633
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(type_qualifier) shift to state 634
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On declaration_specifier_nosue shift to state 643
-- On declaration_specifier shift to state 644
-- On declaration_qualifier_list shift to state 653
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 664
-- On basic_type_name shift to state 618
-- On basic_declaration_specifier shift to state 666
-- On array_abstract_declarator shift to state 308
## Reductions:

State 683:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
## LR(1) items:
unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . [ TK_RBRACK TK_COMMA EOF ]
unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On TK_STAR shift to state 257
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 263
-- On unary_abstract_declarator shift to state 645
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_abstract_declarator shift to state 647
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 670
## Reductions:
-- On TK_RBRACK reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
-- On TK_COMMA reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
-- On EOF reduce production unary_abstract_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)

State 684:
## Known stack suffix:
## type_specifier abstract_declarator
## LR(1) items:
type_name_noattr -> type_specifier abstract_declarator . [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_name_noattr -> type_specifier abstract_declarator

State 685:
## Known stack suffix:
## list(attribute) type_name_noattr
## LR(1) items:
type_name -> list(attribute) type_name_noattr . [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_name -> list(attribute) type_name_noattr

State 686:
## Known stack suffix:
## nonempty_list(type_qualifier)
## LR(1) items:
basic_type_specifier -> nonempty_list(type_qualifier) . basic_type_name [ TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_COMMA KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_DOUBLE KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL EOF ]
sue_type_specifier -> nonempty_list(type_qualifier) . elaborated_type_name [ TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_COMMA KW_VOLATILE KW_RESTRICT KW_CONST KW_COMPLEX EOF ]
type_name_noattr -> nonempty_list(type_qualifier) . default_int [ TK_RBRACK TK_COMMA EOF ]
type_name_noattr -> nonempty_list(type_qualifier) . default_int abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
typedef_type_specifier -> nonempty_list(type_qualifier) . TK_TYPEDEF_NAME [ TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_COMMA KW_VOLATILE KW_RESTRICT KW_CONST KW_COMPLEX EOF ]
typeof_type_specifier -> nonempty_list(type_qualifier) . typeof_type_name [ TK_STAR TK_RBRACK TK_LSQBRACK TK_LBRACK TK_COMMA KW_VOLATILE KW_RESTRICT KW_CONST KW_COMPLEX EOF ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 606
-- On KW_WCHAR_T shift to state 4
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_name shift to state 607
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 611
-- On default_int shift to state 687
-- On datatype_specifier shift to state 612
-- On basic_type_name shift to state 613
## Reductions:
-- On TK_STAR reduce production default_int ->
-- On TK_RBRACK reduce production default_int ->
-- On TK_LSQBRACK reduce production default_int ->
-- On TK_LBRACK reduce production default_int ->
-- On TK_COMMA reduce production default_int ->
-- On EOF reduce production default_int ->

State 687:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int
## LR(1) items:
type_name_noattr -> nonempty_list(type_qualifier) default_int . [ TK_RBRACK TK_COMMA EOF ]
type_name_noattr -> nonempty_list(type_qualifier) default_int . abstract_declarator [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
-- On TK_STAR shift to state 257
-- On TK_LSQBRACK shift to state 259
-- On TK_LBRACK shift to state 263
-- On unary_abstract_declarator shift to state 645
-- On postfixing_abstract_declarator shift to state 646
-- On postfix_abstract_declarator shift to state 647
-- On nonempty_list_rev(array_abstract_declarator) shift to state 305
-- On nonempty_list(array_abstract_declarator) shift to state 307
-- On array_abstract_declarator shift to state 308
-- On abstract_declarator shift to state 688
## Reductions:
-- On TK_RBRACK reduce production type_name_noattr -> nonempty_list(type_qualifier) default_int
-- On TK_COMMA reduce production type_name_noattr -> nonempty_list(type_qualifier) default_int
-- On EOF reduce production type_name_noattr -> nonempty_list(type_qualifier) default_int

State 688:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int abstract_declarator
## LR(1) items:
type_name_noattr -> nonempty_list(type_qualifier) default_int abstract_declarator . [ TK_RBRACK TK_COMMA EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_name_noattr -> nonempty_list(type_qualifier) default_int abstract_declarator

State 689:
## Known stack suffix:
## KW_EXTENSION cast_expression
## LR(1) items:
unary_expression -> KW_EXTENSION cast_expression . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> KW_EXTENSION cast_expression

State 690:
## Known stack suffix:
## TK_LBRACK type_name
## LR(1) items:
postfix_expression -> TK_LBRACK type_name . TK_RBRACK bracketed_initialiser_list [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 691
## Reductions:

State 691:
## Known stack suffix:
## TK_LBRACK type_name TK_RBRACK
## LR(1) items:
postfix_expression -> TK_LBRACK type_name TK_RBRACK . bracketed_initialiser_list [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACE shift to state 692
-- On bracketed_initialiser_list shift to state 723
## Reductions:

State 692:
## Known stack suffix:
## TK_LBRACE
## LR(1) items:
bracketed_initialiser_list -> TK_LBRACE . TK_RBRACE [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
bracketed_initialiser_list -> TK_LBRACE . sep_rev(TK_COMMA,initialiser) option(TK_COMMA) TK_RBRACE [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_RBRACE shift to state 693
-- On TK_PLUS shift to state 18
-- On TK_PERIOD shift to state 694
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LSQBRACK shift to state 696
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 692
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 707
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On sep_rev(TK_COMMA,initialiser) shift to state 709
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list_rev(member_designator) shift to state 711
-- On nonempty_list(simple_string_literal) shift to state 66
-- On nonempty_list(member_designator) shift to state 713
-- On multiplicative_expression shift to state 101
-- On member_designators shift to state 715
-- On member_designator shift to state 717
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On initialiser shift to state 722
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On bracketed_initialiser_list shift to state 701
-- On basic_initialiser shift to state 719
-- On assignment_expression shift to state 703
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 693:
## Known stack suffix:
## TK_LBRACE TK_RBRACE
## LR(1) items:
bracketed_initialiser_list -> TK_LBRACE TK_RBRACE . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bracketed_initialiser_list -> TK_LBRACE TK_RBRACE

State 694:
## Known stack suffix:
## TK_PERIOD
## LR(1) items:
member_designator -> TK_PERIOD . TK_IDENTIFIER [ TK_PERIOD TK_EQUALS ]
## Transitions:
-- On TK_IDENTIFIER shift to state 695
## Reductions:

State 695:
## Known stack suffix:
## TK_PERIOD TK_IDENTIFIER
## LR(1) items:
member_designator -> TK_PERIOD TK_IDENTIFIER . [ TK_PERIOD TK_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_designator -> TK_PERIOD TK_IDENTIFIER

State 696:
## Known stack suffix:
## TK_LSQBRACK
## LR(1) items:
initialiser -> TK_LSQBRACK . range_expression TK_RSQBRACK option(TK_EQUALS) basic_initialiser [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On range_expression shift to state 697
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 704
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 697:
## Known stack suffix:
## TK_LSQBRACK range_expression
## LR(1) items:
initialiser -> TK_LSQBRACK range_expression . TK_RSQBRACK option(TK_EQUALS) basic_initialiser [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On TK_RSQBRACK shift to state 698
## Reductions:

State 698:
## Known stack suffix:
## TK_LSQBRACK range_expression TK_RSQBRACK
## LR(1) items:
initialiser -> TK_LSQBRACK range_expression TK_RSQBRACK . option(TK_EQUALS) basic_initialiser [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 699
-- On option(TK_EQUALS) shift to state 700
## Reductions:
-- On WC_EXPR reduce production option(TK_EQUALS) ->
-- On TK_WSTRING_LITERAL reduce production option(TK_EQUALS) ->
-- On TK_WCHAR_CONSTANT reduce production option(TK_EQUALS) ->
-- On TK_TILDE reduce production option(TK_EQUALS) ->
-- On TK_STRING_LITERAL reduce production option(TK_EQUALS) ->
-- On TK_STAR reduce production option(TK_EQUALS) ->
-- On TK_PLUS reduce production option(TK_EQUALS) ->
-- On TK_OCTAL_CONSTANT reduce production option(TK_EQUALS) ->
-- On TK_MINUS reduce production option(TK_EQUALS) ->
-- On TK_LBRACK reduce production option(TK_EQUALS) ->
-- On TK_LBRACE reduce production option(TK_EQUALS) ->
-- On TK_INTEGER_CONSTANT reduce production option(TK_EQUALS) ->
-- On TK_INC reduce production option(TK_EQUALS) ->
-- On TK_IDENTIFIER reduce production option(TK_EQUALS) ->
-- On TK_HEX_FLOATING_CONSTANT reduce production option(TK_EQUALS) ->
-- On TK_HEX_CONSTANT reduce production option(TK_EQUALS) ->
-- On TK_FLOATING_CONSTANT reduce production option(TK_EQUALS) ->
-- On TK_EXMARK reduce production option(TK_EQUALS) ->
-- On TK_DEC reduce production option(TK_EQUALS) ->
-- On TK_CHAR_CONSTANT reduce production option(TK_EQUALS) ->
-- On TK_BIN_CONSTANT reduce production option(TK_EQUALS) ->
-- On TK_ANDAND reduce production option(TK_EQUALS) ->
-- On TK_AND reduce production option(TK_EQUALS) ->
-- On KW_VA_ARG reduce production option(TK_EQUALS) ->
-- On KW_TYPES_COMPATIBLE_P reduce production option(TK_EQUALS) ->
-- On KW_SIZEOF reduce production option(TK_EQUALS) ->
-- On KW_REAL reduce production option(TK_EQUALS) ->
-- On KW_OFFSETOF reduce production option(TK_EQUALS) ->
-- On KW_IMAG reduce production option(TK_EQUALS) ->
-- On KW_EXTENSION reduce production option(TK_EQUALS) ->
-- On KW_ALIGNOF reduce production option(TK_EQUALS) ->

State 699:
## Known stack suffix:
## TK_EQUALS
## LR(1) items:
option(TK_EQUALS) -> TK_EQUALS . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(TK_EQUALS) -> TK_EQUALS

State 700:
## Known stack suffix:
## TK_LSQBRACK range_expression TK_RSQBRACK option(TK_EQUALS)
## LR(1) items:
initialiser -> TK_LSQBRACK range_expression TK_RSQBRACK option(TK_EQUALS) . basic_initialiser [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 692
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On bracketed_initialiser_list shift to state 701
-- On basic_initialiser shift to state 702
-- On assignment_expression shift to state 703
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 701:
## Known stack suffix:
## bracketed_initialiser_list
## LR(1) items:
basic_initialiser -> bracketed_initialiser_list . [ TK_SEMICOLON TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_initialiser -> bracketed_initialiser_list

State 702:
## Known stack suffix:
## TK_LSQBRACK range_expression TK_RSQBRACK option(TK_EQUALS) basic_initialiser
## LR(1) items:
initialiser -> TK_LSQBRACK range_expression TK_RSQBRACK option(TK_EQUALS) basic_initialiser . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initialiser -> TK_LSQBRACK range_expression TK_RSQBRACK option(TK_EQUALS) basic_initialiser

State 703:
## Known stack suffix:
## assignment_expression
## LR(1) items:
basic_initialiser -> assignment_expression . [ TK_SEMICOLON TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production basic_initialiser -> assignment_expression

State 704:
## Known stack suffix:
## assignment_expression
## LR(1) items:
range_expression -> assignment_expression . [ TK_RSQBRACK TK_COLON ]
range_expression -> assignment_expression . TK_ELLIPSIS assignment_expression [ TK_RSQBRACK TK_COLON ]
## Transitions:
-- On TK_ELLIPSIS shift to state 705
## Reductions:
-- On TK_RSQBRACK reduce production range_expression -> assignment_expression
-- On TK_COLON reduce production range_expression -> assignment_expression

State 705:
## Known stack suffix:
## assignment_expression TK_ELLIPSIS
## LR(1) items:
range_expression -> assignment_expression TK_ELLIPSIS . assignment_expression [ TK_RSQBRACK TK_COLON ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 706
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 706:
## Known stack suffix:
## assignment_expression TK_ELLIPSIS assignment_expression
## LR(1) items:
range_expression -> assignment_expression TK_ELLIPSIS assignment_expression . [ TK_RSQBRACK TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production range_expression -> assignment_expression TK_ELLIPSIS assignment_expression

State 707:
## Known stack suffix:
## TK_IDENTIFIER
## LR(1) items:
identifier -> TK_IDENTIFIER . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_DEC TK_COMMA TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND ]
member_designators -> TK_IDENTIFIER . TK_COLON [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
-- On TK_COLON shift to state 708
## Reductions:
-- On TK_STAR_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_STAR reduce production identifier -> TK_IDENTIFIER
-- On TK_SLASH_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_SLASH reduce production identifier -> TK_IDENTIFIER
-- On TK_RBRACE reduce production identifier -> TK_IDENTIFIER
-- On TK_QMARK reduce production identifier -> TK_IDENTIFIER
-- On TK_PLUS_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_PLUS reduce production identifier -> TK_IDENTIFIER
-- On TK_PIPE_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_PIPEPIPE reduce production identifier -> TK_IDENTIFIER
-- On TK_PIPE reduce production identifier -> TK_IDENTIFIER
-- On TK_PERIOD reduce production identifier -> TK_IDENTIFIER
-- On TK_PERCENT_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_PERCENT reduce production identifier -> TK_IDENTIFIER
-- On TK_NE reduce production identifier -> TK_IDENTIFIER
-- On TK_MINUS_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_MINUS reduce production identifier -> TK_IDENTIFIER
-- On TK_LTLT_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_LTLT reduce production identifier -> TK_IDENTIFIER
-- On TK_LSQBRACK reduce production identifier -> TK_IDENTIFIER
-- On TK_LESS_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_LESS reduce production identifier -> TK_IDENTIFIER
-- On TK_LBRACK reduce production identifier -> TK_IDENTIFIER
-- On TK_INC reduce production identifier -> TK_IDENTIFIER
-- On TK_GTGT_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_GTGT reduce production identifier -> TK_IDENTIFIER
-- On TK_GREATER_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_GREATER reduce production identifier -> TK_IDENTIFIER
-- On TK_EQUALS reduce production identifier -> TK_IDENTIFIER
-- On TK_EQEQ reduce production identifier -> TK_IDENTIFIER
-- On TK_DEC reduce production identifier -> TK_IDENTIFIER
-- On TK_COMMA reduce production identifier -> TK_IDENTIFIER
-- On TK_CARET_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_CARET reduce production identifier -> TK_IDENTIFIER
-- On TK_ARROW reduce production identifier -> TK_IDENTIFIER
-- On TK_AND_EQ reduce production identifier -> TK_IDENTIFIER
-- On TK_ANDAND reduce production identifier -> TK_IDENTIFIER
-- On TK_AND reduce production identifier -> TK_IDENTIFIER

State 708:
## Known stack suffix:
## TK_IDENTIFIER TK_COLON
## LR(1) items:
member_designators -> TK_IDENTIFIER TK_COLON . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_designators -> TK_IDENTIFIER TK_COLON

State 709:
## Known stack suffix:
## TK_LBRACE sep_rev(TK_COMMA,initialiser)
## LR(1) items:
bracketed_initialiser_list -> TK_LBRACE sep_rev(TK_COMMA,initialiser) . option(TK_COMMA) TK_RBRACE [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
sep_rev(TK_COMMA,initialiser) -> sep_rev(TK_COMMA,initialiser) . TK_COMMA initialiser [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 710
-- On option(TK_COMMA) shift to state 720
## Reductions:
-- On TK_RBRACE reduce production option(TK_COMMA) ->

State 710:
## Known stack suffix:
## sep_rev(TK_COMMA,initialiser) TK_COMMA
## LR(1) items:
option(TK_COMMA) -> TK_COMMA . [ TK_RBRACE ]
sep_rev(TK_COMMA,initialiser) -> sep_rev(TK_COMMA,initialiser) TK_COMMA . initialiser [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_PERIOD shift to state 694
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LSQBRACK shift to state 696
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 692
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 707
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list_rev(member_designator) shift to state 711
-- On nonempty_list(simple_string_literal) shift to state 66
-- On nonempty_list(member_designator) shift to state 713
-- On multiplicative_expression shift to state 101
-- On member_designators shift to state 715
-- On member_designator shift to state 717
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On initialiser shift to state 718
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On bracketed_initialiser_list shift to state 701
-- On basic_initialiser shift to state 719
-- On assignment_expression shift to state 703
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_RBRACE reduce production option(TK_COMMA) -> TK_COMMA

State 711:
## Known stack suffix:
## nonempty_list_rev(member_designator)
## LR(1) items:
nonempty_list(member_designator) -> nonempty_list_rev(member_designator) . [ TK_EQUALS ]
nonempty_list_rev(member_designator) -> nonempty_list_rev(member_designator) . member_designator [ TK_PERIOD TK_EQUALS ]
## Transitions:
-- On TK_PERIOD shift to state 694
-- On member_designator shift to state 712
## Reductions:
-- On TK_EQUALS reduce production nonempty_list(member_designator) -> nonempty_list_rev(member_designator)

State 712:
## Known stack suffix:
## nonempty_list_rev(member_designator) member_designator
## LR(1) items:
nonempty_list_rev(member_designator) -> nonempty_list_rev(member_designator) member_designator . [ TK_PERIOD TK_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(member_designator) -> nonempty_list_rev(member_designator) member_designator

State 713:
## Known stack suffix:
## nonempty_list(member_designator)
## LR(1) items:
member_designators -> nonempty_list(member_designator) . TK_EQUALS [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
-- On TK_EQUALS shift to state 714
## Reductions:

State 714:
## Known stack suffix:
## nonempty_list(member_designator) TK_EQUALS
## LR(1) items:
member_designators -> nonempty_list(member_designator) TK_EQUALS . [ WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TILDE TK_STRING_LITERAL TK_STAR TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_VA_ARG KW_TYPES_COMPATIBLE_P KW_SIZEOF KW_REAL KW_OFFSETOF KW_IMAG KW_EXTENSION KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_designators -> nonempty_list(member_designator) TK_EQUALS

State 715:
## Known stack suffix:
## member_designators
## LR(1) items:
initialiser -> member_designators . basic_initialiser [ TK_RBRACE TK_COMMA ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 692
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On bracketed_initialiser_list shift to state 701
-- On basic_initialiser shift to state 716
-- On assignment_expression shift to state 703
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 716:
## Known stack suffix:
## member_designators basic_initialiser
## LR(1) items:
initialiser -> member_designators basic_initialiser . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initialiser -> member_designators basic_initialiser

State 717:
## Known stack suffix:
## member_designator
## LR(1) items:
nonempty_list_rev(member_designator) -> member_designator . [ TK_PERIOD TK_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(member_designator) -> member_designator

State 718:
## Known stack suffix:
## sep_rev(TK_COMMA,initialiser) TK_COMMA initialiser
## LR(1) items:
sep_rev(TK_COMMA,initialiser) -> sep_rev(TK_COMMA,initialiser) TK_COMMA initialiser . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,initialiser) -> sep_rev(TK_COMMA,initialiser) TK_COMMA initialiser

State 719:
## Known stack suffix:
## basic_initialiser
## LR(1) items:
initialiser -> basic_initialiser . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initialiser -> basic_initialiser

State 720:
## Known stack suffix:
## TK_LBRACE sep_rev(TK_COMMA,initialiser) option(TK_COMMA)
## LR(1) items:
bracketed_initialiser_list -> TK_LBRACE sep_rev(TK_COMMA,initialiser) option(TK_COMMA) . TK_RBRACE [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACE shift to state 721
## Reductions:

State 721:
## Known stack suffix:
## TK_LBRACE sep_rev(TK_COMMA,initialiser) option(TK_COMMA) TK_RBRACE
## LR(1) items:
bracketed_initialiser_list -> TK_LBRACE sep_rev(TK_COMMA,initialiser) option(TK_COMMA) TK_RBRACE . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bracketed_initialiser_list -> TK_LBRACE sep_rev(TK_COMMA,initialiser) option(TK_COMMA) TK_RBRACE

State 722:
## Known stack suffix:
## initialiser
## LR(1) items:
sep_rev(TK_COMMA,initialiser) -> initialiser . [ TK_RBRACE TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,initialiser) -> initialiser

State 723:
## Known stack suffix:
## TK_LBRACK type_name TK_RBRACK bracketed_initialiser_list
## LR(1) items:
postfix_expression -> TK_LBRACK type_name TK_RBRACK bracketed_initialiser_list . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> TK_LBRACK type_name TK_RBRACK bracketed_initialiser_list

State 724:
## Known stack suffix:
## TK_LBRACK expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_RBRACK TK_COMMA ]
primary_expression -> TK_LBRACK expression . TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 725
-- On TK_COMMA shift to state 149
## Reductions:

State 725:
## Known stack suffix:
## TK_LBRACK expression TK_RBRACK
## LR(1) items:
primary_expression -> TK_LBRACK expression TK_RBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> TK_LBRACK expression TK_RBRACK

State 726:
## Known stack suffix:
## TK_LBRACK compound_statement
## LR(1) items:
statement_expression -> TK_LBRACK compound_statement . TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 727
## Reductions:

State 727:
## Known stack suffix:
## TK_LBRACK compound_statement TK_RBRACK
## LR(1) items:
statement_expression -> TK_LBRACK compound_statement TK_RBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_expression -> TK_LBRACK compound_statement TK_RBRACK

State 728:
## Known stack suffix:
## KW_OFFSETOF TK_LBRACK type_name TK_COMMA postfix_expression
## LR(1) items:
postfix_expression -> postfix_expression . TK_LSQBRACK expression TK_RSQBRACK [ TK_RBRACK TK_PERIOD TK_LSQBRACK TK_LBRACK TK_INC TK_DEC TK_ARROW ]
postfix_expression -> postfix_expression . TK_LBRACK option(sep(TK_COMMA,assignment_expression)) TK_RBRACK [ TK_RBRACK TK_PERIOD TK_LSQBRACK TK_LBRACK TK_INC TK_DEC TK_ARROW ]
postfix_expression -> postfix_expression . TK_PERIOD identifier_or_typedef_name [ TK_RBRACK TK_PERIOD TK_LSQBRACK TK_LBRACK TK_INC TK_DEC TK_ARROW ]
postfix_expression -> postfix_expression . TK_ARROW identifier_or_typedef_name [ TK_RBRACK TK_PERIOD TK_LSQBRACK TK_LBRACK TK_INC TK_DEC TK_ARROW ]
postfix_expression -> postfix_expression . TK_PERIOD WC_DECL [ TK_RBRACK TK_PERIOD TK_LSQBRACK TK_LBRACK TK_INC TK_DEC TK_ARROW ]
postfix_expression -> postfix_expression . TK_ARROW WC_DECL [ TK_RBRACK TK_PERIOD TK_LSQBRACK TK_LBRACK TK_INC TK_DEC TK_ARROW ]
postfix_expression -> postfix_expression . TK_INC [ TK_RBRACK TK_PERIOD TK_LSQBRACK TK_LBRACK TK_INC TK_DEC TK_ARROW ]
postfix_expression -> postfix_expression . TK_DEC [ TK_RBRACK TK_PERIOD TK_LSQBRACK TK_LBRACK TK_INC TK_DEC TK_ARROW ]
postfix_expression -> KW_OFFSETOF TK_LBRACK type_name TK_COMMA postfix_expression . TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 729
-- On TK_PERIOD shift to state 90
-- On TK_LSQBRACK shift to state 95
-- On TK_LBRACK shift to state 172
-- On TK_INC shift to state 180
-- On TK_DEC shift to state 181
-- On TK_ARROW shift to state 182
## Reductions:

State 729:
## Known stack suffix:
## KW_OFFSETOF TK_LBRACK type_name TK_COMMA postfix_expression TK_RBRACK
## LR(1) items:
postfix_expression -> KW_OFFSETOF TK_LBRACK type_name TK_COMMA postfix_expression TK_RBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> KW_OFFSETOF TK_LBRACK type_name TK_COMMA postfix_expression TK_RBRACK

State 730:
## Known stack suffix:
## KW_SIZEOF TK_LBRACK type_name
## LR(1) items:
postfix_expression -> TK_LBRACK type_name . TK_RBRACK bracketed_initialiser_list [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
unary_expression -> KW_SIZEOF TK_LBRACK type_name . TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 731
## Reductions:

State 731:
## Known stack suffix:
## KW_SIZEOF TK_LBRACK type_name TK_RBRACK
## LR(1) items:
postfix_expression -> TK_LBRACK type_name TK_RBRACK . bracketed_initialiser_list [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_LBRACE shift to state 692
-- On bracketed_initialiser_list shift to state 723
## Reductions:
-- On TK_STAR_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_STAR reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_SLASH_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_SLASH reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_SEMICOLON reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_RSQBRACK reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_RBRACK reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_RBRACE reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_QMARK reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_PLUS_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_PLUS reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_PIPE_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_PIPEPIPE reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_PIPE reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_PERCENT_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_PERCENT reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_NE reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_MINUS_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_MINUS reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_LTLT_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_LTLT reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_LESS_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_LESS reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_GTGT_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_GTGT reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_GREATER_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_GREATER reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_EQUALS reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_EQEQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_ELLIPSIS reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_COMMA reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_COLON reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_CARET_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_CARET reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_AND_EQ reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_ANDAND reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On TK_AND reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On KW_FASTCALL reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On KW_DECLSPEC reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On KW_ATTRIBUTE reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK
-- On EOF reduce production unary_expression -> KW_SIZEOF TK_LBRACK type_name TK_RBRACK

State 732:
## Known stack suffix:
## KW_SIZEOF unary_expression
## LR(1) items:
unary_expression -> KW_SIZEOF unary_expression . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> KW_SIZEOF unary_expression

State 733:
## Known stack suffix:
## KW_ATTR_VECTOR_SIZE TK_LBRACK assignment_expression
## LR(1) items:
attrib -> KW_ATTR_VECTOR_SIZE TK_LBRACK assignment_expression . TK_RBRACK [ TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_RBRACK shift to state 734
## Reductions:

State 734:
## Known stack suffix:
## KW_ATTR_VECTOR_SIZE TK_LBRACK assignment_expression TK_RBRACK
## LR(1) items:
attrib -> KW_ATTR_VECTOR_SIZE TK_LBRACK assignment_expression TK_RBRACK . [ TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrib -> KW_ATTR_VECTOR_SIZE TK_LBRACK assignment_expression TK_RBRACK

State 735:
## Known stack suffix:
## KW_DECLSPEC TK_LBRACK sep(TK_COMMA,attrib)
## LR(1) items:
attribute -> KW_DECLSPEC TK_LBRACK sep(TK_COMMA,attrib) . TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 736
## Reductions:

State 736:
## Known stack suffix:
## KW_DECLSPEC TK_LBRACK sep(TK_COMMA,attrib) TK_RBRACK
## LR(1) items:
attribute -> KW_DECLSPEC TK_LBRACK sep(TK_COMMA,attrib) TK_RBRACK . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute -> KW_DECLSPEC TK_LBRACK sep(TK_COMMA,attrib) TK_RBRACK

State 737:
## Known stack suffix:
## list_rev(attribute) attribute
## LR(1) items:
list_rev(attribute) -> list_rev(attribute) attribute . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_IDENTIFIER TK_EQUALS TK_COMMA TK_COLON KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) -> list_rev(attribute) attribute

State 738:
## Known stack suffix:
## KW_VA_ARG TK_LBRACK assignment_expression
## LR(1) items:
postfix_expression -> KW_VA_ARG TK_LBRACK assignment_expression . TK_COMMA type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_COMMA shift to state 739
## Reductions:

State 739:
## Known stack suffix:
## KW_VA_ARG TK_LBRACK assignment_expression TK_COMMA
## LR(1) items:
postfix_expression -> KW_VA_ARG TK_LBRACK assignment_expression TK_COMMA . type_name TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On type_name shift to state 740
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 740:
## Known stack suffix:
## KW_VA_ARG TK_LBRACK assignment_expression TK_COMMA type_name
## LR(1) items:
postfix_expression -> KW_VA_ARG TK_LBRACK assignment_expression TK_COMMA type_name . TK_RBRACK [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 741
## Reductions:

State 741:
## Known stack suffix:
## KW_VA_ARG TK_LBRACK assignment_expression TK_COMMA type_name TK_RBRACK
## LR(1) items:
postfix_expression -> KW_VA_ARG TK_LBRACK assignment_expression TK_COMMA type_name TK_RBRACK . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> KW_VA_ARG TK_LBRACK assignment_expression TK_COMMA type_name TK_RBRACK

State 742:
## Known stack suffix:
## KW_WHILE TK_LBRACK expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_RBRACK TK_COMMA ]
iteration_statement -> KW_WHILE TK_LBRACK expression . TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 743
-- On TK_COMMA shift to state 149
## Reductions:

State 743:
## Known stack suffix:
## KW_WHILE TK_LBRACK expression TK_RBRACK
## LR(1) items:
iteration_statement -> KW_WHILE TK_LBRACK expression TK_RBRACK . statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 834
-- On statement_expression shift to state 87
-- On statement shift to state 856
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On selection_statement shift to state 841
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 842
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression_statement shift to state 847
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 848
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On asm_statement shift to state 849
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 744:
## Known stack suffix:
## KW_SWITCH
## LR(1) items:
selection_statement -> KW_SWITCH . TK_LBRACK expression TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_LBRACK shift to state 745
## Reductions:

State 745:
## Known stack suffix:
## KW_SWITCH TK_LBRACK
## LR(1) items:
selection_statement -> KW_SWITCH TK_LBRACK . expression TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 746
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 746:
## Known stack suffix:
## KW_SWITCH TK_LBRACK expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_RBRACK TK_COMMA ]
selection_statement -> KW_SWITCH TK_LBRACK expression . TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 747
-- On TK_COMMA shift to state 149
## Reductions:

State 747:
## Known stack suffix:
## KW_SWITCH TK_LBRACK expression TK_RBRACK
## LR(1) items:
selection_statement -> KW_SWITCH TK_LBRACK expression TK_RBRACK . statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 834
-- On statement_expression shift to state 87
-- On statement shift to state 855
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On selection_statement shift to state 841
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 842
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression_statement shift to state 847
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 848
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On asm_statement shift to state 849
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 748:
## Known stack suffix:
## KW_RETURN
## LR(1) items:
jump_statement -> KW_RETURN . option(expression) TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 749
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 749:
## Known stack suffix:
## KW_RETURN option(expression)
## LR(1) items:
jump_statement -> KW_RETURN option(expression) . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 750
## Reductions:

State 750:
## Known stack suffix:
## KW_RETURN option(expression) TK_SEMICOLON
## LR(1) items:
jump_statement -> KW_RETURN option(expression) TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jump_statement -> KW_RETURN option(expression) TK_SEMICOLON

State 751:
## Known stack suffix:
## KW_LABEL
## LR(1) items:
labelled_statement -> KW_LABEL . sep(TK_COMMA,TK_IDENTIFIER) TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_IDENTIFIER shift to state 752
-- On sep_rev(TK_COMMA,TK_IDENTIFIER) shift to state 753
-- On sep(TK_COMMA,TK_IDENTIFIER) shift to state 756
## Reductions:

State 752:
## Known stack suffix:
## TK_IDENTIFIER
## LR(1) items:
sep_rev(TK_COMMA,TK_IDENTIFIER) -> TK_IDENTIFIER . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,TK_IDENTIFIER) -> TK_IDENTIFIER

State 753:
## Known stack suffix:
## sep_rev(TK_COMMA,TK_IDENTIFIER)
## LR(1) items:
sep(TK_COMMA,TK_IDENTIFIER) -> sep_rev(TK_COMMA,TK_IDENTIFIER) . [ TK_SEMICOLON TK_RBRACK ]
sep_rev(TK_COMMA,TK_IDENTIFIER) -> sep_rev(TK_COMMA,TK_IDENTIFIER) . TK_COMMA TK_IDENTIFIER [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_COMMA shift to state 754
## Reductions:
-- On TK_SEMICOLON reduce production sep(TK_COMMA,TK_IDENTIFIER) -> sep_rev(TK_COMMA,TK_IDENTIFIER)
-- On TK_RBRACK reduce production sep(TK_COMMA,TK_IDENTIFIER) -> sep_rev(TK_COMMA,TK_IDENTIFIER)

State 754:
## Known stack suffix:
## sep_rev(TK_COMMA,TK_IDENTIFIER) TK_COMMA
## LR(1) items:
sep_rev(TK_COMMA,TK_IDENTIFIER) -> sep_rev(TK_COMMA,TK_IDENTIFIER) TK_COMMA . TK_IDENTIFIER [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
-- On TK_IDENTIFIER shift to state 755
## Reductions:

State 755:
## Known stack suffix:
## sep_rev(TK_COMMA,TK_IDENTIFIER) TK_COMMA TK_IDENTIFIER
## LR(1) items:
sep_rev(TK_COMMA,TK_IDENTIFIER) -> sep_rev(TK_COMMA,TK_IDENTIFIER) TK_COMMA TK_IDENTIFIER . [ TK_SEMICOLON TK_RBRACK TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,TK_IDENTIFIER) -> sep_rev(TK_COMMA,TK_IDENTIFIER) TK_COMMA TK_IDENTIFIER

State 756:
## Known stack suffix:
## KW_LABEL sep(TK_COMMA,TK_IDENTIFIER)
## LR(1) items:
labelled_statement -> KW_LABEL sep(TK_COMMA,TK_IDENTIFIER) . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 757
## Reductions:

State 757:
## Known stack suffix:
## KW_LABEL sep(TK_COMMA,TK_IDENTIFIER) TK_SEMICOLON
## LR(1) items:
labelled_statement -> KW_LABEL sep(TK_COMMA,TK_IDENTIFIER) TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labelled_statement -> KW_LABEL sep(TK_COMMA,TK_IDENTIFIER) TK_SEMICOLON

State 758:
## Known stack suffix:
## KW_IF
## LR(1) items:
selection_statement -> KW_IF . TK_LBRACK expression TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
selection_statement -> KW_IF . TK_LBRACK expression TK_RBRACK statement KW_ELSE statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_LBRACK shift to state 759
## Reductions:

State 759:
## Known stack suffix:
## KW_IF TK_LBRACK
## LR(1) items:
selection_statement -> KW_IF TK_LBRACK . expression TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
selection_statement -> KW_IF TK_LBRACK . expression TK_RBRACK statement KW_ELSE statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 760
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 760:
## Known stack suffix:
## KW_IF TK_LBRACK expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_RBRACK TK_COMMA ]
selection_statement -> KW_IF TK_LBRACK expression . TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
selection_statement -> KW_IF TK_LBRACK expression . TK_RBRACK statement KW_ELSE statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 761
-- On TK_COMMA shift to state 149
## Reductions:

State 761:
## Known stack suffix:
## KW_IF TK_LBRACK expression TK_RBRACK
## LR(1) items:
selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK . statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK . statement KW_ELSE statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 834
-- On statement_expression shift to state 87
-- On statement shift to state 852
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On selection_statement shift to state 841
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 842
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression_statement shift to state 847
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 848
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On asm_statement shift to state 849
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 762:
## Known stack suffix:
## KW_GOTO
## LR(1) items:
jump_statement -> KW_GOTO . expression TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 763
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 763:
## Known stack suffix:
## KW_GOTO expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_SEMICOLON TK_COMMA ]
jump_statement -> KW_GOTO expression . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 764
-- On TK_COMMA shift to state 149
## Reductions:

State 764:
## Known stack suffix:
## KW_GOTO expression TK_SEMICOLON
## LR(1) items:
jump_statement -> KW_GOTO expression TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jump_statement -> KW_GOTO expression TK_SEMICOLON

State 765:
## Known stack suffix:
## KW_FOR
## LR(1) items:
iteration_statement -> KW_FOR . TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON option(expression) TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_LBRACK shift to state 766
## Reductions:

State 766:
## Known stack suffix:
## KW_FOR TK_LBRACK
## LR(1) items:
iteration_statement -> KW_FOR TK_LBRACK . option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON option(expression) TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 767
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 767:
## Known stack suffix:
## KW_FOR TK_LBRACK option(expression)
## LR(1) items:
iteration_statement -> KW_FOR TK_LBRACK option(expression) . TK_SEMICOLON option(expression) TK_SEMICOLON option(expression) TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 768
## Reductions:

State 768:
## Known stack suffix:
## KW_FOR TK_LBRACK option(expression) TK_SEMICOLON
## LR(1) items:
iteration_statement -> KW_FOR TK_LBRACK option(expression) TK_SEMICOLON . option(expression) TK_SEMICOLON option(expression) TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 769
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 769:
## Known stack suffix:
## KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression)
## LR(1) items:
iteration_statement -> KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) . TK_SEMICOLON option(expression) TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 770
## Reductions:

State 770:
## Known stack suffix:
## KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON
## LR(1) items:
iteration_statement -> KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON . option(expression) TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 771
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_RBRACK reduce production option(expression) ->

State 771:
## Known stack suffix:
## KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON option(expression)
## LR(1) items:
iteration_statement -> KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON option(expression) . TK_RBRACK statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 772
## Reductions:

State 772:
## Known stack suffix:
## KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON option(expression) TK_RBRACK
## LR(1) items:
iteration_statement -> KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON option(expression) TK_RBRACK . statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 834
-- On statement_expression shift to state 87
-- On statement shift to state 851
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On selection_statement shift to state 841
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 842
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression_statement shift to state 847
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 848
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On asm_statement shift to state 849
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 773:
## Known stack suffix:
## KW_EXTENSION
## LR(1) items:
statement_noexpr -> KW_EXTENSION . statement_noexpr [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
unary_expression -> KW_EXTENSION . cast_expression [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_COMMA TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 850
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On selection_statement shift to state 841
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On identifier shift to state 106
-- On compound_statement shift to state 848
-- On cast_expression shift to state 689
-- On asm_statement shift to state 849
## Reductions:

State 774:
## Known stack suffix:
## KW_DO
## LR(1) items:
iteration_statement -> KW_DO . statement KW_WHILE TK_LBRACK expression TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 834
-- On statement_expression shift to state 87
-- On statement shift to state 835
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On selection_statement shift to state 841
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 842
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression_statement shift to state 847
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 848
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On asm_statement shift to state 849
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 775:
## Known stack suffix:
## KW_DEFAULT
## LR(1) items:
labelled_statement -> KW_DEFAULT . TK_COLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_COLON shift to state 776
## Reductions:

State 776:
## Known stack suffix:
## KW_DEFAULT TK_COLON
## LR(1) items:
labelled_statement -> KW_DEFAULT TK_COLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labelled_statement -> KW_DEFAULT TK_COLON

State 777:
## Known stack suffix:
## KW_CONTINUE
## LR(1) items:
jump_statement -> KW_CONTINUE . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 778
## Reductions:

State 778:
## Known stack suffix:
## KW_CONTINUE TK_SEMICOLON
## LR(1) items:
jump_statement -> KW_CONTINUE TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jump_statement -> KW_CONTINUE TK_SEMICOLON

State 779:
## Known stack suffix:
## KW_CASE
## LR(1) items:
labelled_statement -> KW_CASE . range_expression TK_COLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On range_expression shift to state 780
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 704
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 780:
## Known stack suffix:
## KW_CASE range_expression
## LR(1) items:
labelled_statement -> KW_CASE range_expression . TK_COLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_COLON shift to state 781
## Reductions:

State 781:
## Known stack suffix:
## KW_CASE range_expression TK_COLON
## LR(1) items:
labelled_statement -> KW_CASE range_expression TK_COLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labelled_statement -> KW_CASE range_expression TK_COLON

State 782:
## Known stack suffix:
## KW_BREAK
## LR(1) items:
jump_statement -> KW_BREAK . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 783
## Reductions:

State 783:
## Known stack suffix:
## KW_BREAK TK_SEMICOLON
## LR(1) items:
jump_statement -> KW_BREAK TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jump_statement -> KW_BREAK TK_SEMICOLON

State 784:
## Known stack suffix:
## KW_ASM
## LR(1) items:
asm_statement -> KW_ASM . boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM . boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM . boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM . boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM . boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On KW_VOLATILE shift to state 785
-- On boption(KW_VOLATILE) shift to state 786
## Reductions:
-- On TK_LBRACK reduce production boption(KW_VOLATILE) ->
-- On KW_GOTO reduce production boption(KW_VOLATILE) ->

State 785:
## Known stack suffix:
## KW_VOLATILE
## LR(1) items:
boption(KW_VOLATILE) -> KW_VOLATILE . [ TK_LBRACK KW_GOTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boption(KW_VOLATILE) -> KW_VOLATILE

State 786:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE)
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) . TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) . TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) . TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) . TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) . KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_LBRACK shift to state 787
-- On KW_GOTO shift to state 822
## Reductions:

State 787:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK . nonempty_list(TK_STRING_LITERAL) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK . nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK . nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK . nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 791
## Reductions:

State 788:
## Known stack suffix:
## TK_STRING_LITERAL
## LR(1) items:
nonempty_list_rev(TK_STRING_LITERAL) -> TK_STRING_LITERAL . [ TK_STRING_LITERAL TK_RBRACK TK_LBRACK TK_COMMA TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(TK_STRING_LITERAL) -> TK_STRING_LITERAL

State 789:
## Known stack suffix:
## nonempty_list_rev(TK_STRING_LITERAL)
## LR(1) items:
nonempty_list(TK_STRING_LITERAL) -> nonempty_list_rev(TK_STRING_LITERAL) . [ TK_RBRACK TK_LBRACK TK_COMMA TK_COLON ]
nonempty_list_rev(TK_STRING_LITERAL) -> nonempty_list_rev(TK_STRING_LITERAL) . TK_STRING_LITERAL [ TK_STRING_LITERAL TK_RBRACK TK_LBRACK TK_COMMA TK_COLON ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 790
## Reductions:
-- On TK_RBRACK reduce production nonempty_list(TK_STRING_LITERAL) -> nonempty_list_rev(TK_STRING_LITERAL)
-- On TK_LBRACK reduce production nonempty_list(TK_STRING_LITERAL) -> nonempty_list_rev(TK_STRING_LITERAL)
-- On TK_COMMA reduce production nonempty_list(TK_STRING_LITERAL) -> nonempty_list_rev(TK_STRING_LITERAL)
-- On TK_COLON reduce production nonempty_list(TK_STRING_LITERAL) -> nonempty_list_rev(TK_STRING_LITERAL)

State 790:
## Known stack suffix:
## nonempty_list_rev(TK_STRING_LITERAL) TK_STRING_LITERAL
## LR(1) items:
nonempty_list_rev(TK_STRING_LITERAL) -> nonempty_list_rev(TK_STRING_LITERAL) TK_STRING_LITERAL . [ TK_STRING_LITERAL TK_RBRACK TK_LBRACK TK_COMMA TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list_rev(TK_STRING_LITERAL) -> nonempty_list_rev(TK_STRING_LITERAL) TK_STRING_LITERAL

State 791:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL)
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) . TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) . TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) . TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) . TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 792
-- On TK_COLON shift to state 794
## Reductions:

State 792:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 793
## Reductions:

State 793:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK TK_SEMICOLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK TK_SEMICOLON

State 794:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON . option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON . option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON . option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On sep_rev(TK_COMMA,asm_argument) shift to state 795
-- On sep(TK_COMMA,asm_argument) shift to state 802
-- On option(asm_argument_list) shift to state 803
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 797
-- On asm_argument_list shift to state 820
-- On asm_argument shift to state 821
## Reductions:
-- On TK_RBRACK reduce production option(asm_argument_list) ->
-- On TK_COLON reduce production option(asm_argument_list) ->

State 795:
## Known stack suffix:
## sep_rev(TK_COMMA,asm_argument)
## LR(1) items:
sep(TK_COMMA,asm_argument) -> sep_rev(TK_COMMA,asm_argument) . [ TK_RBRACK TK_COLON ]
sep_rev(TK_COMMA,asm_argument) -> sep_rev(TK_COMMA,asm_argument) . TK_COMMA asm_argument [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
-- On TK_COMMA shift to state 796
## Reductions:
-- On TK_RBRACK reduce production sep(TK_COMMA,asm_argument) -> sep_rev(TK_COMMA,asm_argument)
-- On TK_COLON reduce production sep(TK_COMMA,asm_argument) -> sep_rev(TK_COMMA,asm_argument)

State 796:
## Known stack suffix:
## sep_rev(TK_COMMA,asm_argument) TK_COMMA
## LR(1) items:
sep_rev(TK_COMMA,asm_argument) -> sep_rev(TK_COMMA,asm_argument) TK_COMMA . asm_argument [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 797
-- On asm_argument shift to state 801
## Reductions:

State 797:
## Known stack suffix:
## nonempty_list(TK_STRING_LITERAL)
## LR(1) items:
asm_argument -> nonempty_list(TK_STRING_LITERAL) . TK_LBRACK assignment_expression TK_RBRACK [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
-- On TK_LBRACK shift to state 798
## Reductions:

State 798:
## Known stack suffix:
## nonempty_list(TK_STRING_LITERAL) TK_LBRACK
## LR(1) items:
asm_argument -> nonempty_list(TK_STRING_LITERAL) TK_LBRACK . assignment_expression TK_RBRACK [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 799
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 799:
## Known stack suffix:
## nonempty_list(TK_STRING_LITERAL) TK_LBRACK assignment_expression
## LR(1) items:
asm_argument -> nonempty_list(TK_STRING_LITERAL) TK_LBRACK assignment_expression . TK_RBRACK [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
-- On TK_RBRACK shift to state 800
## Reductions:

State 800:
## Known stack suffix:
## nonempty_list(TK_STRING_LITERAL) TK_LBRACK assignment_expression TK_RBRACK
## LR(1) items:
asm_argument -> nonempty_list(TK_STRING_LITERAL) TK_LBRACK assignment_expression TK_RBRACK . [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_argument -> nonempty_list(TK_STRING_LITERAL) TK_LBRACK assignment_expression TK_RBRACK

State 801:
## Known stack suffix:
## sep_rev(TK_COMMA,asm_argument) TK_COMMA asm_argument
## LR(1) items:
sep_rev(TK_COMMA,asm_argument) -> sep_rev(TK_COMMA,asm_argument) TK_COMMA asm_argument . [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,asm_argument) -> sep_rev(TK_COMMA,asm_argument) TK_COMMA asm_argument

State 802:
## Known stack suffix:
## sep(TK_COMMA,asm_argument)
## LR(1) items:
asm_argument_list -> sep(TK_COMMA,asm_argument) . [ TK_RBRACK TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_argument_list -> sep(TK_COMMA,asm_argument)

State 803:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list)
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) . TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) . TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) . TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 804
-- On TK_COLON shift to state 806
## Reductions:

State 804:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_RBRACK
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_RBRACK . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 805
## Reductions:

State 805:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON

State 806:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON . option(asm_argument_list) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON . option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On sep_rev(TK_COMMA,asm_argument) shift to state 795
-- On sep(TK_COMMA,asm_argument) shift to state 802
-- On option(asm_argument_list) shift to state 807
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 797
-- On asm_argument_list shift to state 820
-- On asm_argument shift to state 821
## Reductions:
-- On TK_RBRACK reduce production option(asm_argument_list) ->
-- On TK_COLON reduce production option(asm_argument_list) ->

State 807:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list)
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) . TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) . TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 808
-- On TK_COLON shift to state 810
## Reductions:

State 808:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 809
## Reductions:

State 809:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_RBRACK TK_SEMICOLON

State 810:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON . option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On sep_rev(TK_COMMA,asm_clobbered) shift to state 811
-- On sep(TK_COMMA,asm_clobbered) shift to state 815
-- On option(sep(TK_COMMA,asm_clobbered)) shift to state 816
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 813
-- On asm_clobbered shift to state 819
## Reductions:
-- On TK_RBRACK reduce production option(sep(TK_COMMA,asm_clobbered)) ->

State 811:
## Known stack suffix:
## sep_rev(TK_COMMA,asm_clobbered)
## LR(1) items:
sep(TK_COMMA,asm_clobbered) -> sep_rev(TK_COMMA,asm_clobbered) . [ TK_RBRACK TK_COLON ]
sep_rev(TK_COMMA,asm_clobbered) -> sep_rev(TK_COMMA,asm_clobbered) . TK_COMMA asm_clobbered [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
-- On TK_COMMA shift to state 812
## Reductions:
-- On TK_RBRACK reduce production sep(TK_COMMA,asm_clobbered) -> sep_rev(TK_COMMA,asm_clobbered)
-- On TK_COLON reduce production sep(TK_COMMA,asm_clobbered) -> sep_rev(TK_COMMA,asm_clobbered)

State 812:
## Known stack suffix:
## sep_rev(TK_COMMA,asm_clobbered) TK_COMMA
## LR(1) items:
sep_rev(TK_COMMA,asm_clobbered) -> sep_rev(TK_COMMA,asm_clobbered) TK_COMMA . asm_clobbered [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 813
-- On asm_clobbered shift to state 814
## Reductions:

State 813:
## Known stack suffix:
## nonempty_list(TK_STRING_LITERAL)
## LR(1) items:
asm_clobbered -> nonempty_list(TK_STRING_LITERAL) . [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_clobbered -> nonempty_list(TK_STRING_LITERAL)

State 814:
## Known stack suffix:
## sep_rev(TK_COMMA,asm_clobbered) TK_COMMA asm_clobbered
## LR(1) items:
sep_rev(TK_COMMA,asm_clobbered) -> sep_rev(TK_COMMA,asm_clobbered) TK_COMMA asm_clobbered . [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,asm_clobbered) -> sep_rev(TK_COMMA,asm_clobbered) TK_COMMA asm_clobbered

State 815:
## Known stack suffix:
## sep(TK_COMMA,asm_clobbered)
## LR(1) items:
option(sep(TK_COMMA,asm_clobbered)) -> sep(TK_COMMA,asm_clobbered) . [ TK_RBRACK TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(sep(TK_COMMA,asm_clobbered)) -> sep(TK_COMMA,asm_clobbered)

State 816:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered))
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) . TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 817
## Reductions:

State 817:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 818
## Reductions:

State 818:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_statement -> KW_ASM boption(KW_VOLATILE) TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON option(asm_argument_list) TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_RBRACK TK_SEMICOLON

State 819:
## Known stack suffix:
## asm_clobbered
## LR(1) items:
sep_rev(TK_COMMA,asm_clobbered) -> asm_clobbered . [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,asm_clobbered) -> asm_clobbered

State 820:
## Known stack suffix:
## asm_argument_list
## LR(1) items:
option(asm_argument_list) -> asm_argument_list . [ TK_RBRACK TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(asm_argument_list) -> asm_argument_list

State 821:
## Known stack suffix:
## asm_argument
## LR(1) items:
sep_rev(TK_COMMA,asm_argument) -> asm_argument . [ TK_RBRACK TK_COMMA TK_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sep_rev(TK_COMMA,asm_argument) -> asm_argument

State 822:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO . TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_LBRACK shift to state 823
## Reductions:

State 823:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK . nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 824
## Reductions:

State 824:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL)
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) . TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_COLON shift to state 825
## Reductions:

State 825:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON . TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_COLON shift to state 826
## Reductions:

State 826:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON . option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On sep_rev(TK_COMMA,asm_argument) shift to state 795
-- On sep(TK_COMMA,asm_argument) shift to state 802
-- On option(asm_argument_list) shift to state 827
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 797
-- On asm_argument_list shift to state 820
-- On asm_argument shift to state 821
## Reductions:
-- On TK_COLON reduce production option(asm_argument_list) ->

State 827:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list)
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) . TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_COLON shift to state 828
## Reductions:

State 828:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON . option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On sep_rev(TK_COMMA,asm_clobbered) shift to state 811
-- On sep(TK_COMMA,asm_clobbered) shift to state 815
-- On option(sep(TK_COMMA,asm_clobbered)) shift to state 829
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 813
-- On asm_clobbered shift to state 819
## Reductions:
-- On TK_COLON reduce production option(sep(TK_COMMA,asm_clobbered)) ->

State 829:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered))
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) . TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_COLON shift to state 830
## Reductions:

State 830:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON . sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_IDENTIFIER shift to state 752
-- On sep_rev(TK_COMMA,TK_IDENTIFIER) shift to state 753
-- On sep(TK_COMMA,TK_IDENTIFIER) shift to state 831
## Reductions:

State 831:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER)
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) . TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 832
## Reductions:

State 832:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 833
## Reductions:

State 833:
## Known stack suffix:
## KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON
## LR(1) items:
asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_statement -> KW_ASM boption(KW_VOLATILE) KW_GOTO TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_COLON TK_COLON option(asm_argument_list) TK_COLON option(sep(TK_COMMA,asm_clobbered)) TK_COLON sep(TK_COMMA,TK_IDENTIFIER) TK_RBRACK TK_SEMICOLON

State 834:
## Known stack suffix:
## statement_noexpr
## LR(1) items:
statement -> statement_noexpr . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> statement_noexpr

State 835:
## Known stack suffix:
## KW_DO statement
## LR(1) items:
iteration_statement -> KW_DO statement . KW_WHILE TK_LBRACK expression TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On KW_WHILE shift to state 836
## Reductions:

State 836:
## Known stack suffix:
## KW_DO statement KW_WHILE
## LR(1) items:
iteration_statement -> KW_DO statement KW_WHILE . TK_LBRACK expression TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_LBRACK shift to state 837
## Reductions:

State 837:
## Known stack suffix:
## KW_DO statement KW_WHILE TK_LBRACK
## LR(1) items:
iteration_statement -> KW_DO statement KW_WHILE TK_LBRACK . expression TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 838
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 838:
## Known stack suffix:
## KW_DO statement KW_WHILE TK_LBRACK expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_RBRACK TK_COMMA ]
iteration_statement -> KW_DO statement KW_WHILE TK_LBRACK expression . TK_RBRACK TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACK shift to state 839
-- On TK_COMMA shift to state 149
## Reductions:

State 839:
## Known stack suffix:
## KW_DO statement KW_WHILE TK_LBRACK expression TK_RBRACK
## LR(1) items:
iteration_statement -> KW_DO statement KW_WHILE TK_LBRACK expression TK_RBRACK . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 840
## Reductions:

State 840:
## Known stack suffix:
## KW_DO statement KW_WHILE TK_LBRACK expression TK_RBRACK TK_SEMICOLON
## LR(1) items:
iteration_statement -> KW_DO statement KW_WHILE TK_LBRACK expression TK_RBRACK TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> KW_DO statement KW_WHILE TK_LBRACK expression TK_RBRACK TK_SEMICOLON

State 841:
## Known stack suffix:
## selection_statement
## LR(1) items:
statement_noexpr -> selection_statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_noexpr -> selection_statement

State 842:
## Known stack suffix:
## option(expression)
## LR(1) items:
expression_statement -> option(expression) . TK_SEMICOLON [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 843
## Reductions:

State 843:
## Known stack suffix:
## option(expression) TK_SEMICOLON
## LR(1) items:
expression_statement -> option(expression) TK_SEMICOLON . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression_statement -> option(expression) TK_SEMICOLON

State 844:
## Known stack suffix:
## labelled_statement
## LR(1) items:
statement_noexpr -> labelled_statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_noexpr -> labelled_statement

State 845:
## Known stack suffix:
## jump_statement
## LR(1) items:
statement_noexpr -> jump_statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_noexpr -> jump_statement

State 846:
## Known stack suffix:
## iteration_statement
## LR(1) items:
statement_noexpr -> iteration_statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_noexpr -> iteration_statement

State 847:
## Known stack suffix:
## expression_statement
## LR(1) items:
statement -> expression_statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> expression_statement

State 848:
## Known stack suffix:
## compound_statement
## LR(1) items:
statement_noexpr -> compound_statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_noexpr -> compound_statement

State 849:
## Known stack suffix:
## asm_statement
## LR(1) items:
statement_noexpr -> asm_statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_noexpr -> asm_statement

State 850:
## Known stack suffix:
## KW_EXTENSION statement_noexpr
## LR(1) items:
statement_noexpr -> KW_EXTENSION statement_noexpr . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_noexpr -> KW_EXTENSION statement_noexpr

State 851:
## Known stack suffix:
## KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON option(expression) TK_RBRACK statement
## LR(1) items:
iteration_statement -> KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON option(expression) TK_RBRACK statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> KW_FOR TK_LBRACK option(expression) TK_SEMICOLON option(expression) TK_SEMICOLON option(expression) TK_RBRACK statement

State 852:
## Known stack suffix:
## KW_IF TK_LBRACK expression TK_RBRACK statement
## LR(1) items:
selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement . KW_ELSE statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On KW_ELSE shift to state 853
## Reductions:
-- On WC_TYPE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On WC_EXPR reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_WSTRING_LITERAL reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_WCHAR_CONSTANT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_TYPEDEF_NAME reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_TILDE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_STRING_LITERAL reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_STAR reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_SEMICOLON reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_RBRACE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_PLUS reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_OCTAL_CONSTANT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_MINUS reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_LBRACK reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_LBRACE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_INTEGER_CONSTANT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_INC reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_IDENTIFIER reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_HEX_FLOATING_CONSTANT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_HEX_CONSTANT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_FLOATING_CONSTANT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_EXMARK reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_DEC reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_CHAR_CONSTANT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_BIN_CONSTANT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_ANDAND reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On TK_AND reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_WHILE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_WCHAR_T reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_VOLATILE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_VOID reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_VA_LIST reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_VA_ARG reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_UNSIGNED reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_UNION reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_TYPES_COMPATIBLE_P reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_TYPEOF reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_TYPEDEF reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_THREAD reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_SWITCH reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_STRUCT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_STATIC reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_SIZEOF reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_SIGNED reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_SHORT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_RETURN reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_RESTRICT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_REGISTER reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_REAL reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_OFFSETOF reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_LONG reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_LABEL reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_INTN reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_INT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_INLINE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_IMAG reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_IF reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_GOTO reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_FOR reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_FLOATN reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_FLOAT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_FASTCALL reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_EXTERN reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_EXTENSION reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_ENUM reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_DOUBLE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_DO reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_DEFAULT reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_DECLSPEC reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_DECIMALN reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_DATATYPE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_CONTINUE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_CONST reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_COMPLEX reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_CHAR reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_CASE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_BREAK reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_BOOL reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_AUTO reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_ATTRIBUTE reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_ASM reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On KW_ALIGNOF reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement
-- On EOF reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement

State 853:
## Known stack suffix:
## KW_IF TK_LBRACK expression TK_RBRACK statement KW_ELSE
## LR(1) items:
selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement KW_ELSE . statement [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 834
-- On statement_expression shift to state 87
-- On statement shift to state 854
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On selection_statement shift to state 841
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 842
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression_statement shift to state 847
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 848
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On asm_statement shift to state 849
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 854:
## Known stack suffix:
## KW_IF TK_LBRACK expression TK_RBRACK statement KW_ELSE statement
## LR(1) items:
selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement KW_ELSE statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production selection_statement -> KW_IF TK_LBRACK expression TK_RBRACK statement KW_ELSE statement

State 855:
## Known stack suffix:
## KW_SWITCH TK_LBRACK expression TK_RBRACK statement
## LR(1) items:
selection_statement -> KW_SWITCH TK_LBRACK expression TK_RBRACK statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production selection_statement -> KW_SWITCH TK_LBRACK expression TK_RBRACK statement

State 856:
## Known stack suffix:
## KW_WHILE TK_LBRACK expression TK_RBRACK statement
## LR(1) items:
iteration_statement -> KW_WHILE TK_LBRACK expression TK_RBRACK statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> KW_WHILE TK_LBRACK expression TK_RBRACK statement

State 857:
## Known stack suffix:
## TK_IDENTIFIER TK_COLON statement
## LR(1) items:
labelled_statement -> TK_IDENTIFIER TK_COLON statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labelled_statement -> TK_IDENTIFIER TK_COLON statement

State 858:
## Known stack suffix:
## KW_EXTENSION
## LR(1) items:
option(KW_EXTENSION) -> KW_EXTENSION . [ WC_TYPE TK_TYPEDEF_NAME KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
statement_noexpr -> KW_EXTENSION . statement_noexpr [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF ]
unary_expression -> KW_EXTENSION . cast_expression [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_COMMA TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 850
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On selection_statement shift to state 841
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On identifier shift to state 106
-- On compound_statement shift to state 848
-- On cast_expression shift to state 689
-- On asm_statement shift to state 849
## Reductions:
-- On WC_TYPE reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On TK_TYPEDEF_NAME reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_WCHAR_T reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_VOLATILE reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_VOID reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_VA_LIST reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_UNSIGNED reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_UNION reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_TYPEOF reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_TYPEDEF reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_THREAD reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_STRUCT reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_STATIC reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_SIGNED reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_SHORT reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_RESTRICT reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_REGISTER reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_LONG reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_INTN reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_INT reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_INLINE reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_FLOATN reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_FLOAT reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_FASTCALL reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_EXTERN reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_ENUM reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_DOUBLE reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_DECLSPEC reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_DECIMALN reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_DATATYPE reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_CONST reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_COMPLEX reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_CHAR reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_BOOL reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_AUTO reduce production option(KW_EXTENSION) -> KW_EXTENSION
-- On KW_ATTRIBUTE reduce production option(KW_EXTENSION) -> KW_EXTENSION

State 859:
## Known stack suffix:
## list_rev(statement_or_declaration) statement_or_declaration
## LR(1) items:
list_rev(statement_or_declaration) -> list_rev(statement_or_declaration) statement_or_declaration . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_rev(statement_or_declaration) -> list_rev(statement_or_declaration) statement_or_declaration

State 860:
## Known stack suffix:
## statement
## LR(1) items:
statement_or_declaration -> statement . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_or_declaration -> statement

State 861:
## Known stack suffix:
## option(KW_EXTENSION)
## LR(1) items:
statement_or_declaration -> option(KW_EXTENSION) . list(attribute) declaration [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 862
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 862:
## Known stack suffix:
## option(KW_EXTENSION) list(attribute)
## LR(1) items:
statement_or_declaration -> option(KW_EXTENSION) list(attribute) . declaration [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF ]
## Transitions:
-- On WC_TYPE shift to state 2
-- On TK_TYPEDEF_NAME shift to state 3
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On typeof_type_specifier shift to state 278
-- On typeof_type_name shift to state 252
-- On typeof_declaration_specifier shift to state 280
-- On typedef_type_specifier shift to state 284
-- On typedef_declaration_specifier shift to state 286
-- On type_specifier_nosue shift to state 863
-- On type_specifier shift to state 878
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 884
-- On sue_declaration_specifier shift to state 886
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 627
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list(type_qualifier) shift to state 888
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On default_declaring_list shift to state 894
-- On declaring_list shift to state 902
-- On declaration_specifier_nosue shift to state 910
-- On declaration_specifier shift to state 917
-- On declaration_qualifier_list shift to state 923
-- On declaration shift to state 929
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 664
-- On basic_type_name shift to state 618
-- On basic_declaration_specifier shift to state 666
-- On attr_function_declarator_ shift to state 930
-- On attr_function_declarator shift to state 931
-- On attr_function_declaration shift to state 933
## Reductions:

State 863:
## Known stack suffix:
## type_specifier_nosue
## LR(1) items:
attr_function_declarator_ -> type_specifier_nosue . nonempty_list(attribute) identifier_declarator [ TK_LBRACE ]
declaring_list -> type_specifier_nosue . nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
type_specifier -> type_specifier_nosue . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_EXTENSION ]
## Transitions:
-- On KW_FASTCALL shift to state 50
-- On KW_DECLSPEC shift to state 51
-- On KW_ATTRIBUTE shift to state 329
-- On nonempty_list_rev(attribute) shift to state 491
-- On nonempty_list(attribute) shift to state 864
-- On attribute shift to state 573
## Reductions:
-- On WC_DECL reduce production type_specifier -> type_specifier_nosue
-- On TK_TYPEDEF_NAME reduce production type_specifier -> type_specifier_nosue
-- On TK_STAR reduce production type_specifier -> type_specifier_nosue
-- On TK_LBRACK reduce production type_specifier -> type_specifier_nosue
-- On TK_IDENTIFIER reduce production type_specifier -> type_specifier_nosue
-- On KW_EXTENSION reduce production type_specifier -> type_specifier_nosue

State 864:
## Known stack suffix:
## type_specifier_nosue nonempty_list(attribute)
## LR(1) items:
attr_function_declarator_ -> type_specifier_nosue nonempty_list(attribute) . identifier_declarator [ TK_LBRACE ]
declaring_list -> type_specifier_nosue nonempty_list(attribute) . declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 563
-- On identifier_declarator shift to state 865
-- On declarator shift to state 866
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 865:
## Known stack suffix:
## type_specifier_nosue nonempty_list(attribute) identifier_declarator
## LR(1) items:
attr_function_declarator_ -> type_specifier_nosue nonempty_list(attribute) identifier_declarator . [ TK_LBRACE ]
declarator -> identifier_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Reductions:
-- On TK_SEMICOLON reduce production declarator -> identifier_declarator
-- On TK_LBRACE reduce production attr_function_declarator_ -> type_specifier_nosue nonempty_list(attribute) identifier_declarator
-- On TK_EQUALS reduce production declarator -> identifier_declarator
-- On TK_COMMA reduce production declarator -> identifier_declarator
-- On KW_FASTCALL reduce production declarator -> identifier_declarator
-- On KW_DECLSPEC reduce production declarator -> identifier_declarator
-- On KW_ATTRIBUTE reduce production declarator -> identifier_declarator
-- On KW_ASM reduce production declarator -> identifier_declarator

State 866:
## Known stack suffix:
## type_specifier_nosue nonempty_list(attribute) declarator
## LR(1) items:
declaring_list -> type_specifier_nosue nonempty_list(attribute) declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 871
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 867:
## Known stack suffix:
## KW_ASM
## LR(1) items:
asm_declaration_specifier -> KW_ASM . TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On TK_LBRACK shift to state 868
## Reductions:

State 868:
## Known stack suffix:
## KW_ASM TK_LBRACK
## LR(1) items:
asm_declaration_specifier -> KW_ASM TK_LBRACK . nonempty_list(TK_STRING_LITERAL) TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 869
## Reductions:

State 869:
## Known stack suffix:
## KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL)
## LR(1) items:
asm_declaration_specifier -> KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL) . TK_RBRACK [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
-- On TK_RBRACK shift to state 870
## Reductions:

State 870:
## Known stack suffix:
## KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK
## LR(1) items:
asm_declaration_specifier -> KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK . [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_declaration_specifier -> KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK

State 871:
## Known stack suffix:
## type_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier)
## LR(1) items:
declaring_list -> type_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 872
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 872:
## Known stack suffix:
## type_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
declaring_list -> type_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 875
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 873:
## Known stack suffix:
## TK_EQUALS
## LR(1) items:
decl_initialiser -> TK_EQUALS . basic_initialiser [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 692
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On bracketed_initialiser_list shift to state 701
-- On basic_initialiser shift to state 874
-- On assignment_expression shift to state 703
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 874:
## Known stack suffix:
## TK_EQUALS basic_initialiser
## LR(1) items:
decl_initialiser -> TK_EQUALS basic_initialiser . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl_initialiser -> TK_EQUALS basic_initialiser

State 875:
## Known stack suffix:
## type_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
declaring_list -> type_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaring_list -> type_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 876:
## Known stack suffix:
## decl_initialiser
## LR(1) items:
option(decl_initialiser) -> decl_initialiser . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(decl_initialiser) -> decl_initialiser

State 877:
## Known stack suffix:
## asm_declaration_specifier
## LR(1) items:
option(asm_declaration_specifier) -> asm_declaration_specifier . [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(asm_declaration_specifier) -> asm_declaration_specifier

State 878:
## Known stack suffix:
## type_specifier
## LR(1) items:
attr_function_declarator_ -> type_specifier . identifier_declarator [ TK_LBRACE ]
declaring_list -> type_specifier . declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 563
-- On identifier_declarator shift to state 879
-- On declarator shift to state 880
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 879:
## Known stack suffix:
## type_specifier identifier_declarator
## LR(1) items:
attr_function_declarator_ -> type_specifier identifier_declarator . [ TK_LBRACE ]
declarator -> identifier_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Reductions:
-- On TK_SEMICOLON reduce production declarator -> identifier_declarator
-- On TK_LBRACE reduce production attr_function_declarator_ -> type_specifier identifier_declarator
-- On TK_EQUALS reduce production declarator -> identifier_declarator
-- On TK_COMMA reduce production declarator -> identifier_declarator
-- On KW_FASTCALL reduce production declarator -> identifier_declarator
-- On KW_DECLSPEC reduce production declarator -> identifier_declarator
-- On KW_ATTRIBUTE reduce production declarator -> identifier_declarator
-- On KW_ASM reduce production declarator -> identifier_declarator

State 880:
## Known stack suffix:
## type_specifier declarator
## LR(1) items:
declaring_list -> type_specifier declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 881
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 881:
## Known stack suffix:
## type_specifier declarator option(asm_declaration_specifier)
## LR(1) items:
declaring_list -> type_specifier declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 882
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 882:
## Known stack suffix:
## type_specifier declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
declaring_list -> type_specifier declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 883
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 883:
## Known stack suffix:
## type_specifier declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
declaring_list -> type_specifier declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaring_list -> type_specifier declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 884:
## Known stack suffix:
## sue_type_specifier
## LR(1) items:
declaration -> sue_type_specifier . TK_SEMICOLON [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
sue_declaration_specifier -> sue_type_specifier . storage_class [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
sue_type_specifier -> sue_type_specifier . type_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
type_specifier -> sue_type_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_EXTENSION ]
## Transitions:
-- On TK_SEMICOLON shift to state 885
-- On KW_VOLATILE shift to state 5
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_INLINE shift to state 275
-- On KW_EXTERN shift to state 276
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 314
-- On storage_class shift to state 315
## Reductions:
-- On WC_DECL reduce production type_specifier -> sue_type_specifier
-- On TK_TYPEDEF_NAME reduce production type_specifier -> sue_type_specifier
-- On TK_STAR reduce production type_specifier -> sue_type_specifier
-- On TK_LBRACK reduce production type_specifier -> sue_type_specifier
-- On TK_IDENTIFIER reduce production type_specifier -> sue_type_specifier
-- On KW_EXTENSION reduce production type_specifier -> sue_type_specifier

State 885:
## Known stack suffix:
## sue_type_specifier TK_SEMICOLON
## LR(1) items:
declaration -> sue_type_specifier TK_SEMICOLON . [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> sue_type_specifier TK_SEMICOLON

State 886:
## Known stack suffix:
## sue_declaration_specifier
## LR(1) items:
declaration -> sue_declaration_specifier . TK_SEMICOLON [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
declaration_specifier -> sue_declaration_specifier . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_EXTENSION ]
sue_declaration_specifier -> sue_declaration_specifier . declaration_qualifier [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
## Transitions:
-- On TK_SEMICOLON shift to state 887
-- On KW_VOLATILE shift to state 5
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STATIC shift to state 273
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_INLINE shift to state 275
-- On KW_EXTERN shift to state 276
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_AUTO shift to state 277
-- On type_qualifier shift to state 281
-- On storage_class shift to state 282
-- On declaration_qualifier shift to state 317
## Reductions:
-- On WC_DECL reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_TYPEDEF_NAME reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_STAR reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_LBRACK reduce production declaration_specifier -> sue_declaration_specifier
-- On TK_IDENTIFIER reduce production declaration_specifier -> sue_declaration_specifier
-- On KW_EXTENSION reduce production declaration_specifier -> sue_declaration_specifier

State 887:
## Known stack suffix:
## sue_declaration_specifier TK_SEMICOLON
## LR(1) items:
declaration -> sue_declaration_specifier TK_SEMICOLON . [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> sue_declaration_specifier TK_SEMICOLON

State 888:
## Known stack suffix:
## nonempty_list(type_qualifier)
## LR(1) items:
basic_type_specifier -> nonempty_list(type_qualifier) . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
declaration_qualifier_list -> nonempty_list(type_qualifier) . list(attribute) storage_class list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
default_declaring_list -> nonempty_list(type_qualifier) . default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
sue_type_specifier -> nonempty_list(type_qualifier) . elaborated_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
typedef_type_specifier -> nonempty_list(type_qualifier) . TK_TYPEDEF_NAME [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
typeof_type_specifier -> nonempty_list(type_qualifier) . typeof_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 606
-- On KW_WCHAR_T shift to state 4
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_name shift to state 607
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 635
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 611
-- On default_int shift to state 889
-- On datatype_specifier shift to state 612
-- On basic_type_name shift to state 613
## Reductions:
-- On WC_DECL reduce production default_int ->
-- On TK_STAR reduce production default_int ->
-- On TK_LBRACK reduce production default_int ->
-- On TK_IDENTIFIER reduce production default_int ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 889:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int
## LR(1) items:
default_declaring_list -> nonempty_list(type_qualifier) default_int . identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 588
-- On TK_LBRACK shift to state 590
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 593
-- On identifier_declarator shift to state 890
## Reductions:

State 890:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int identifier_declarator
## LR(1) items:
default_declaring_list -> nonempty_list(type_qualifier) default_int identifier_declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 891
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 891:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int identifier_declarator option(asm_declaration_specifier)
## LR(1) items:
default_declaring_list -> nonempty_list(type_qualifier) default_int identifier_declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 892
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 892:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int identifier_declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
default_declaring_list -> nonempty_list(type_qualifier) default_int identifier_declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 893
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 893:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
default_declaring_list -> nonempty_list(type_qualifier) default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production default_declaring_list -> nonempty_list(type_qualifier) default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 894:
## Known stack suffix:
## default_declaring_list
## LR(1) items:
declaration -> default_declaring_list . TK_SEMICOLON [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
default_declaring_list -> default_declaring_list . TK_COMMA list(attribute) identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_SEMICOLON shift to state 895
-- On TK_COMMA shift to state 896
## Reductions:

State 895:
## Known stack suffix:
## default_declaring_list TK_SEMICOLON
## LR(1) items:
declaration -> default_declaring_list TK_SEMICOLON . [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> default_declaring_list TK_SEMICOLON

State 896:
## Known stack suffix:
## default_declaring_list TK_COMMA
## LR(1) items:
default_declaring_list -> default_declaring_list TK_COMMA . list(attribute) identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 897
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 897:
## Known stack suffix:
## default_declaring_list TK_COMMA list(attribute)
## LR(1) items:
default_declaring_list -> default_declaring_list TK_COMMA list(attribute) . identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 588
-- On TK_LBRACK shift to state 590
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 593
-- On identifier_declarator shift to state 898
## Reductions:

State 898:
## Known stack suffix:
## default_declaring_list TK_COMMA list(attribute) identifier_declarator
## LR(1) items:
default_declaring_list -> default_declaring_list TK_COMMA list(attribute) identifier_declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 899
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 899:
## Known stack suffix:
## default_declaring_list TK_COMMA list(attribute) identifier_declarator option(asm_declaration_specifier)
## LR(1) items:
default_declaring_list -> default_declaring_list TK_COMMA list(attribute) identifier_declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 900
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 900:
## Known stack suffix:
## default_declaring_list TK_COMMA list(attribute) identifier_declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
default_declaring_list -> default_declaring_list TK_COMMA list(attribute) identifier_declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 901
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 901:
## Known stack suffix:
## default_declaring_list TK_COMMA list(attribute) identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
default_declaring_list -> default_declaring_list TK_COMMA list(attribute) identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production default_declaring_list -> default_declaring_list TK_COMMA list(attribute) identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 902:
## Known stack suffix:
## declaring_list
## LR(1) items:
declaration -> declaring_list . TK_SEMICOLON [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
declaring_list -> declaring_list . TK_COMMA list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_SEMICOLON shift to state 903
-- On TK_COMMA shift to state 904
## Reductions:

State 903:
## Known stack suffix:
## declaring_list TK_SEMICOLON
## LR(1) items:
declaration -> declaring_list TK_SEMICOLON . [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> declaring_list TK_SEMICOLON

State 904:
## Known stack suffix:
## declaring_list TK_COMMA
## LR(1) items:
declaring_list -> declaring_list TK_COMMA . list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 905
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 905:
## Known stack suffix:
## declaring_list TK_COMMA list(attribute)
## LR(1) items:
declaring_list -> declaring_list TK_COMMA list(attribute) . declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 563
-- On identifier_declarator shift to state 564
-- On declarator shift to state 906
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 906:
## Known stack suffix:
## declaring_list TK_COMMA list(attribute) declarator
## LR(1) items:
declaring_list -> declaring_list TK_COMMA list(attribute) declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 907
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 907:
## Known stack suffix:
## declaring_list TK_COMMA list(attribute) declarator option(asm_declaration_specifier)
## LR(1) items:
declaring_list -> declaring_list TK_COMMA list(attribute) declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 908
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 908:
## Known stack suffix:
## declaring_list TK_COMMA list(attribute) declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
declaring_list -> declaring_list TK_COMMA list(attribute) declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 909
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 909:
## Known stack suffix:
## declaring_list TK_COMMA list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
declaring_list -> declaring_list TK_COMMA list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaring_list -> declaring_list TK_COMMA list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 910:
## Known stack suffix:
## declaration_specifier_nosue
## LR(1) items:
attr_function_declarator_ -> declaration_specifier_nosue . nonempty_list(attribute) identifier_declarator [ TK_LBRACE ]
declaration_specifier -> declaration_specifier_nosue . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_EXTENSION ]
declaring_list -> declaration_specifier_nosue . nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_FASTCALL shift to state 50
-- On KW_DECLSPEC shift to state 51
-- On KW_ATTRIBUTE shift to state 329
-- On nonempty_list_rev(attribute) shift to state 491
-- On nonempty_list(attribute) shift to state 911
-- On attribute shift to state 573
## Reductions:
-- On WC_DECL reduce production declaration_specifier -> declaration_specifier_nosue
-- On TK_TYPEDEF_NAME reduce production declaration_specifier -> declaration_specifier_nosue
-- On TK_STAR reduce production declaration_specifier -> declaration_specifier_nosue
-- On TK_LBRACK reduce production declaration_specifier -> declaration_specifier_nosue
-- On TK_IDENTIFIER reduce production declaration_specifier -> declaration_specifier_nosue
-- On KW_EXTENSION reduce production declaration_specifier -> declaration_specifier_nosue

State 911:
## Known stack suffix:
## declaration_specifier_nosue nonempty_list(attribute)
## LR(1) items:
attr_function_declarator_ -> declaration_specifier_nosue nonempty_list(attribute) . identifier_declarator [ TK_LBRACE ]
declaring_list -> declaration_specifier_nosue nonempty_list(attribute) . declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 563
-- On identifier_declarator shift to state 912
-- On declarator shift to state 913
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 912:
## Known stack suffix:
## declaration_specifier_nosue nonempty_list(attribute) identifier_declarator
## LR(1) items:
attr_function_declarator_ -> declaration_specifier_nosue nonempty_list(attribute) identifier_declarator . [ TK_LBRACE ]
declarator -> identifier_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Reductions:
-- On TK_SEMICOLON reduce production declarator -> identifier_declarator
-- On TK_LBRACE reduce production attr_function_declarator_ -> declaration_specifier_nosue nonempty_list(attribute) identifier_declarator
-- On TK_EQUALS reduce production declarator -> identifier_declarator
-- On TK_COMMA reduce production declarator -> identifier_declarator
-- On KW_FASTCALL reduce production declarator -> identifier_declarator
-- On KW_DECLSPEC reduce production declarator -> identifier_declarator
-- On KW_ATTRIBUTE reduce production declarator -> identifier_declarator
-- On KW_ASM reduce production declarator -> identifier_declarator

State 913:
## Known stack suffix:
## declaration_specifier_nosue nonempty_list(attribute) declarator
## LR(1) items:
declaring_list -> declaration_specifier_nosue nonempty_list(attribute) declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 914
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 914:
## Known stack suffix:
## declaration_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier)
## LR(1) items:
declaring_list -> declaration_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 915
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 915:
## Known stack suffix:
## declaration_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
declaring_list -> declaration_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 916
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 916:
## Known stack suffix:
## declaration_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
declaring_list -> declaration_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaring_list -> declaration_specifier_nosue nonempty_list(attribute) declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 917:
## Known stack suffix:
## declaration_specifier
## LR(1) items:
attr_function_declarator_ -> declaration_specifier . identifier_declarator [ TK_LBRACE ]
declaring_list -> declaration_specifier . declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 563
-- On identifier_declarator shift to state 918
-- On declarator shift to state 919
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 918:
## Known stack suffix:
## declaration_specifier identifier_declarator
## LR(1) items:
attr_function_declarator_ -> declaration_specifier identifier_declarator . [ TK_LBRACE ]
declarator -> identifier_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
## Reductions:
-- On TK_SEMICOLON reduce production declarator -> identifier_declarator
-- On TK_LBRACE reduce production attr_function_declarator_ -> declaration_specifier identifier_declarator
-- On TK_EQUALS reduce production declarator -> identifier_declarator
-- On TK_COMMA reduce production declarator -> identifier_declarator
-- On KW_FASTCALL reduce production declarator -> identifier_declarator
-- On KW_DECLSPEC reduce production declarator -> identifier_declarator
-- On KW_ATTRIBUTE reduce production declarator -> identifier_declarator
-- On KW_ASM reduce production declarator -> identifier_declarator

State 919:
## Known stack suffix:
## declaration_specifier declarator
## LR(1) items:
declaring_list -> declaration_specifier declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 920
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 920:
## Known stack suffix:
## declaration_specifier declarator option(asm_declaration_specifier)
## LR(1) items:
declaring_list -> declaration_specifier declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 921
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 921:
## Known stack suffix:
## declaration_specifier declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
declaring_list -> declaration_specifier declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 922
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 922:
## Known stack suffix:
## declaration_specifier declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
declaring_list -> declaration_specifier declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaring_list -> declaration_specifier declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 923:
## Known stack suffix:
## declaration_qualifier_list
## LR(1) items:
basic_declaration_specifier -> declaration_qualifier_list . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
declaration_qualifier_list -> declaration_qualifier_list . declaration_qualifier list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
default_declaring_list -> declaration_qualifier_list . default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
sue_declaration_specifier -> declaration_qualifier_list . elaborated_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
typedef_declaration_specifier -> declaration_qualifier_list . TK_TYPEDEF_NAME [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
typeof_declaration_specifier -> declaration_qualifier_list . typeof_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 654
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On typeof_type_name shift to state 655
-- On type_qualifier shift to state 281
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 282
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 656
-- On default_int shift to state 924
-- On declaration_qualifier shift to state 661
-- On datatype_specifier shift to state 612
-- On basic_type_name shift to state 663
## Reductions:
-- On WC_DECL reduce production default_int ->
-- On TK_STAR reduce production default_int ->
-- On TK_LBRACK reduce production default_int ->
-- On TK_IDENTIFIER reduce production default_int ->

State 924:
## Known stack suffix:
## declaration_qualifier_list default_int
## LR(1) items:
default_declaring_list -> declaration_qualifier_list default_int . identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 588
-- On TK_LBRACK shift to state 590
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 593
-- On identifier_declarator shift to state 925
## Reductions:

State 925:
## Known stack suffix:
## declaration_qualifier_list default_int identifier_declarator
## LR(1) items:
default_declaring_list -> declaration_qualifier_list default_int identifier_declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 926
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 926:
## Known stack suffix:
## declaration_qualifier_list default_int identifier_declarator option(asm_declaration_specifier)
## LR(1) items:
default_declaring_list -> declaration_qualifier_list default_int identifier_declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 927
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 927:
## Known stack suffix:
## declaration_qualifier_list default_int identifier_declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
default_declaring_list -> declaration_qualifier_list default_int identifier_declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 928
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 928:
## Known stack suffix:
## declaration_qualifier_list default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
default_declaring_list -> declaration_qualifier_list default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production default_declaring_list -> declaration_qualifier_list default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 929:
## Known stack suffix:
## option(KW_EXTENSION) list(attribute) declaration
## LR(1) items:
statement_or_declaration -> option(KW_EXTENSION) list(attribute) declaration . [ WC_TYPE WC_EXPR TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_or_declaration -> option(KW_EXTENSION) list(attribute) declaration

State 930:
## Known stack suffix:
## attr_function_declarator_
## LR(1) items:
attr_function_declarator -> attr_function_declarator_ . [ TK_LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_function_declarator -> attr_function_declarator_

State 931:
## Known stack suffix:
## attr_function_declarator
## LR(1) items:
attr_function_declaration -> attr_function_declarator . compound_statement [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_LBRACE shift to state 22
-- On compound_statement shift to state 932
## Reductions:

State 932:
## Known stack suffix:
## attr_function_declarator compound_statement
## LR(1) items:
attr_function_declaration -> attr_function_declarator compound_statement . [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_function_declaration -> attr_function_declarator compound_statement

State 933:
## Known stack suffix:
## attr_function_declaration
## LR(1) items:
declaration -> attr_function_declaration . [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> attr_function_declaration

State 934:
## Known stack suffix:
## TK_LBRACE push_scope list(statement_or_declaration)
## LR(1) items:
compound_statement -> TK_LBRACE push_scope list(statement_or_declaration) . pop_scope TK_RBRACE [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACK TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On pop_scope shift to state 935
## Default reduction:
-- After reading the next token, reduce production pop_scope ->

State 935:
## Known stack suffix:
## TK_LBRACE push_scope list(statement_or_declaration) pop_scope
## LR(1) items:
compound_statement -> TK_LBRACE push_scope list(statement_or_declaration) pop_scope . TK_RBRACE [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACK TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
-- On TK_RBRACE shift to state 936
## Reductions:

State 936:
## Known stack suffix:
## TK_LBRACE push_scope list(statement_or_declaration) pop_scope TK_RBRACE
## LR(1) items:
compound_statement -> TK_LBRACE push_scope list(statement_or_declaration) pop_scope TK_RBRACE . [ WC_TYPE WC_EXPR WC_DECL TK_WSTRING_LITERAL TK_WCHAR_CONSTANT TK_TYPEDEF_NAME TK_TILDE TK_STRING_LITERAL TK_STAR TK_SEMICOLON TK_RBRACK TK_RBRACE TK_PLUS TK_OCTAL_CONSTANT TK_MINUS TK_LBRACK TK_LBRACE TK_INTEGER_CONSTANT TK_INCLUDE TK_INC TK_IDENTIFIER TK_HEX_FLOATING_CONSTANT TK_HEX_CONSTANT TK_FLOATING_CONSTANT TK_EXMARK TK_DEC TK_CHAR_CONSTANT TK_BIN_CONSTANT TK_ANDAND TK_AND KW_WHILE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_VA_ARG KW_UNSIGNED KW_UNION KW_TYPES_COMPATIBLE_P KW_TYPEOF KW_TYPEDEF KW_THREAD KW_SWITCH KW_STRUCT KW_STATIC KW_SIZEOF KW_SIGNED KW_SHORT KW_RETURN KW_RESTRICT KW_REGISTER KW_REAL KW_OFFSETOF KW_LONG KW_LABEL KW_INTN KW_INT KW_INLINE KW_IMAG KW_IF KW_GOTO KW_FOR KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_ELSE KW_DOUBLE KW_DO KW_DEFAULT KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONTINUE KW_CONST KW_COMPLEX KW_CHAR KW_CASE KW_BREAK KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM KW_ALIGNOF EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_statement -> TK_LBRACE push_scope list(statement_or_declaration) pop_scope TK_RBRACE

State 937:
## Known stack suffix:
## TK_LBRACK type_name
## LR(1) items:
cast_expression -> TK_LBRACK type_name . TK_RBRACK cast_expression [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> TK_LBRACK type_name . TK_RBRACK bracketed_initialiser_list [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 938
## Reductions:

State 938:
## Known stack suffix:
## TK_LBRACK type_name TK_RBRACK
## LR(1) items:
cast_expression -> TK_LBRACK type_name TK_RBRACK . cast_expression [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
postfix_expression -> TK_LBRACK type_name TK_RBRACK . bracketed_initialiser_list [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERIOD TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LSQBRACK TK_LESS_EQ TK_LESS TK_LBRACK TK_INC TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_DEC TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_ARROW TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 692
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On identifier shift to state 106
-- On cast_expression shift to state 939
-- On bracketed_initialiser_list shift to state 723
## Reductions:

State 939:
## Known stack suffix:
## TK_LBRACK type_name TK_RBRACK cast_expression
## LR(1) items:
cast_expression -> TK_LBRACK type_name TK_RBRACK cast_expression . [ TK_STAR_EQ TK_STAR TK_SLASH_EQ TK_SLASH TK_SEMICOLON TK_RSQBRACK TK_RBRACK TK_RBRACE TK_QMARK TK_PLUS_EQ TK_PLUS TK_PIPE_EQ TK_PIPEPIPE TK_PIPE TK_PERCENT_EQ TK_PERCENT TK_NE TK_MINUS_EQ TK_MINUS TK_LTLT_EQ TK_LTLT TK_LESS_EQ TK_LESS TK_GTGT_EQ TK_GTGT TK_GREATER_EQ TK_GREATER TK_EQUALS TK_EQEQ TK_ELLIPSIS TK_COMMA TK_COLON TK_CARET_EQ TK_CARET TK_AND_EQ TK_ANDAND TK_AND KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cast_expression -> TK_LBRACK type_name TK_RBRACK cast_expression

State 940:
## Known stack suffix:
## KW_TYPEOF TK_LBRACK type_specifier
## LR(1) items:
typeof_type_name -> KW_TYPEOF TK_LBRACK type_specifier . TK_RBRACK [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 941
## Reductions:

State 941:
## Known stack suffix:
## KW_TYPEOF TK_LBRACK type_specifier TK_RBRACK
## LR(1) items:
typeof_type_name -> KW_TYPEOF TK_LBRACK type_specifier TK_RBRACK . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeof_type_name -> KW_TYPEOF TK_LBRACK type_specifier TK_RBRACK

State 942:
## Known stack suffix:
## nonempty_list(type_qualifier)
## LR(1) items:
basic_type_specifier -> nonempty_list(type_qualifier) . basic_type_name [ TK_RBRACK KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_SIGNED KW_SHORT KW_RESTRICT KW_LONG KW_INTN KW_INT KW_FLOATN KW_FLOAT KW_DOUBLE KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL ]
sue_type_specifier -> nonempty_list(type_qualifier) . elaborated_type_name [ TK_RBRACK KW_VOLATILE KW_RESTRICT KW_CONST KW_COMPLEX ]
typedef_type_specifier -> nonempty_list(type_qualifier) . TK_TYPEDEF_NAME [ TK_RBRACK KW_VOLATILE KW_RESTRICT KW_CONST KW_COMPLEX ]
typeof_type_specifier -> nonempty_list(type_qualifier) . typeof_type_name [ TK_RBRACK KW_VOLATILE KW_RESTRICT KW_CONST KW_COMPLEX ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 606
-- On KW_WCHAR_T shift to state 4
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_name shift to state 607
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 611
-- On datatype_specifier shift to state 612
-- On basic_type_name shift to state 613
## Reductions:

State 943:
## Known stack suffix:
## KW_TYPEOF TK_LBRACK expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_RBRACK TK_COMMA ]
typeof_type_name -> KW_TYPEOF TK_LBRACK expression . TK_RBRACK [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
-- On TK_RBRACK shift to state 944
-- On TK_COMMA shift to state 149
## Reductions:

State 944:
## Known stack suffix:
## KW_TYPEOF TK_LBRACK expression TK_RBRACK
## LR(1) items:
typeof_type_name -> KW_TYPEOF TK_LBRACK expression TK_RBRACK . [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_IDENTIFIER TK_COMMA TK_COLON KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeof_type_name -> KW_TYPEOF TK_LBRACK expression TK_RBRACK

State 945:
## Known stack suffix:
## push_scope declaration
## LR(1) items:
parse_decl -> push_scope declaration . pop_scope EOF [ # ]
## Transitions:
-- On pop_scope shift to state 946
## Default reduction:
-- After reading the next token, reduce production pop_scope ->

State 946:
## Known stack suffix:
## push_scope declaration pop_scope
## LR(1) items:
parse_decl -> push_scope declaration pop_scope . EOF [ # ]
## Transitions:
-- On EOF shift to state 947
## Reductions:

State 947:
## Known stack suffix:
## push_scope declaration pop_scope EOF
## LR(1) items:
parse_decl -> push_scope declaration pop_scope EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_decl -> push_scope declaration pop_scope EOF

State 948:
## Known stack suffix:
## parse_decl
## LR(1) items:
parse_decl' -> parse_decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_decl

State 949:
## Known stack suffix:
##
## LR(1) items:
parse_expr' -> . parse_expr [ # ]
## Transitions:
-- On push_scope shift to state 950
-- On parse_expr shift to state 954
## Default reduction:
-- After reading the next token, reduce production push_scope ->

State 950:
## Known stack suffix:
## push_scope
## LR(1) items:
parse_expr -> push_scope . expression pop_scope EOF [ # ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 40
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SIZEOF shift to state 71
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_IMAG shift to state 79
-- On KW_EXTENSION shift to state 80
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_expression shift to state 87
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression shift to state 951
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:

State 951:
## Known stack suffix:
## push_scope expression
## LR(1) items:
expression -> expression . TK_COMMA assignment_expression [ TK_COMMA EOF ]
parse_expr -> push_scope expression . pop_scope EOF [ # ]
## Transitions:
-- On TK_COMMA shift to state 149
-- On pop_scope shift to state 952
## Reductions:
-- On EOF reduce production pop_scope ->

State 952:
## Known stack suffix:
## push_scope expression pop_scope
## LR(1) items:
parse_expr -> push_scope expression pop_scope . EOF [ # ]
## Transitions:
-- On EOF shift to state 953
## Reductions:

State 953:
## Known stack suffix:
## push_scope expression pop_scope EOF
## LR(1) items:
parse_expr -> push_scope expression pop_scope EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_expr -> push_scope expression pop_scope EOF

State 954:
## Known stack suffix:
## parse_expr
## LR(1) items:
parse_expr' -> parse_expr . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_expr

State 955:
## Known stack suffix:
##
## LR(1) items:
parse_stmt' -> . parse_stmt [ # ]
## Transitions:
-- On push_scope shift to state 956
-- On parse_stmt shift to state 960
## Default reduction:
-- After reading the next token, reduce production push_scope ->

State 956:
## Known stack suffix:
## push_scope
## LR(1) items:
parse_stmt -> push_scope . statement pop_scope EOF [ # ]
## Transitions:
-- On WC_EXPR shift to state 12
-- On TK_WSTRING_LITERAL shift to state 13
-- On TK_WCHAR_CONSTANT shift to state 14
-- On TK_TILDE shift to state 15
-- On TK_STRING_LITERAL shift to state 16
-- On TK_STAR shift to state 17
-- On TK_PLUS shift to state 18
-- On TK_OCTAL_CONSTANT shift to state 19
-- On TK_MINUS shift to state 20
-- On TK_LBRACK shift to state 21
-- On TK_LBRACE shift to state 22
-- On TK_INTEGER_CONSTANT shift to state 25
-- On TK_INC shift to state 26
-- On TK_IDENTIFIER shift to state 27
-- On TK_HEX_FLOATING_CONSTANT shift to state 29
-- On TK_HEX_CONSTANT shift to state 30
-- On TK_FLOATING_CONSTANT shift to state 31
-- On TK_EXMARK shift to state 32
-- On TK_DEC shift to state 33
-- On TK_CHAR_CONSTANT shift to state 34
-- On TK_BIN_CONSTANT shift to state 35
-- On TK_ANDAND shift to state 36
-- On TK_AND shift to state 37
-- On KW_WHILE shift to state 38
-- On KW_VA_ARG shift to state 41
-- On KW_TYPES_COMPATIBLE_P shift to state 43
-- On KW_SWITCH shift to state 744
-- On KW_SIZEOF shift to state 71
-- On KW_RETURN shift to state 748
-- On KW_REAL shift to state 73
-- On KW_OFFSETOF shift to state 74
-- On KW_LABEL shift to state 751
-- On KW_IMAG shift to state 79
-- On KW_IF shift to state 758
-- On KW_GOTO shift to state 762
-- On KW_FOR shift to state 765
-- On KW_EXTENSION shift to state 773
-- On KW_DO shift to state 774
-- On KW_DEFAULT shift to state 775
-- On KW_CONTINUE shift to state 777
-- On KW_CASE shift to state 779
-- On KW_BREAK shift to state 782
-- On KW_ASM shift to state 784
-- On KW_ALIGNOF shift to state 81
-- On unary_prefix_operator shift to state 83
-- On unary_operator shift to state 84
-- On unary_expression shift to state 85
-- On string_literal shift to state 86
-- On statement_noexpr shift to state 834
-- On statement_expression shift to state 87
-- On statement shift to state 957
-- On simple_string_literal shift to state 61
-- On shift_expression shift to state 96
-- On selection_statement shift to state 841
-- On relational_expression shift to state 114
-- On primary_expression shift to state 88
-- On postfix_expression shift to state 89
-- On option(expression) shift to state 842
-- On numeric_literal shift to state 100
-- On nonempty_list_rev(simple_string_literal) shift to state 64
-- On nonempty_list(simple_string_literal) shift to state 66
-- On multiplicative_expression shift to state 101
-- On logical_or_expression shift to state 122
-- On logical_and_expression shift to state 126
-- On labelled_statement shift to state 844
-- On jump_statement shift to state 845
-- On iteration_statement shift to state 846
-- On inclusive_or_expression shift to state 146
-- On identifier shift to state 106
-- On expression_statement shift to state 847
-- On expression shift to state 148
-- On exclusive_or_expression shift to state 145
-- On equality_expression shift to state 135
-- On conditional_expression shift to state 150
-- On compound_statement shift to state 848
-- On cast_expression shift to state 151
-- On assignment_expression shift to state 166
-- On asm_statement shift to state 849
-- On and_expression shift to state 144
-- On additive_expression shift to state 121
## Reductions:
-- On TK_SEMICOLON reduce production option(expression) ->

State 957:
## Known stack suffix:
## push_scope statement
## LR(1) items:
parse_stmt -> push_scope statement . pop_scope EOF [ # ]
## Transitions:
-- On pop_scope shift to state 958
## Default reduction:
-- After reading the next token, reduce production pop_scope ->

State 958:
## Known stack suffix:
## push_scope statement pop_scope
## LR(1) items:
parse_stmt -> push_scope statement pop_scope . EOF [ # ]
## Transitions:
-- On EOF shift to state 959
## Reductions:

State 959:
## Known stack suffix:
## push_scope statement pop_scope EOF
## LR(1) items:
parse_stmt -> push_scope statement pop_scope EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_stmt -> push_scope statement pop_scope EOF

State 960:
## Known stack suffix:
## parse_stmt
## LR(1) items:
parse_stmt' -> parse_stmt . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_stmt

State 961:
## Known stack suffix:
##
## LR(1) items:
parse_type' -> . parse_type [ # ]
## Transitions:
-- On push_scope shift to state 962
-- On parse_type shift to state 966
## Default reduction:
-- After reading the next token, reduce production push_scope ->

State 962:
## Known stack suffix:
## push_scope
## LR(1) items:
parse_type -> push_scope . type_name pop_scope EOF [ # ]
## Transitions:
-- On type_name shift to state 963
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 191
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 963:
## Known stack suffix:
## push_scope type_name
## LR(1) items:
parse_type -> push_scope type_name . pop_scope EOF [ # ]
## Transitions:
-- On pop_scope shift to state 964
## Default reduction:
-- After reading the next token, reduce production pop_scope ->

State 964:
## Known stack suffix:
## push_scope type_name pop_scope
## LR(1) items:
parse_type -> push_scope type_name pop_scope . EOF [ # ]
## Transitions:
-- On EOF shift to state 965
## Reductions:

State 965:
## Known stack suffix:
## push_scope type_name pop_scope EOF
## LR(1) items:
parse_type -> push_scope type_name pop_scope EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_type -> push_scope type_name pop_scope EOF

State 966:
## Known stack suffix:
## parse_type
## LR(1) items:
parse_type' -> parse_type . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_type

State 967:
## Known stack suffix:
##
## LR(1) items:
parse_unit' -> . parse_unit [ # ]
## Transitions:
-- On EOF shift to state 968
-- On push_scope shift to state 969
-- On parse_unit shift to state 1027
## Reductions:
-- On WC_TYPE reduce production push_scope ->
-- On WC_DECL reduce production push_scope ->
-- On TK_TYPEDEF_NAME reduce production push_scope ->
-- On TK_STAR reduce production push_scope ->
-- On TK_SEMICOLON reduce production push_scope ->
-- On TK_LBRACK reduce production push_scope ->
-- On TK_INCLUDE reduce production push_scope ->
-- On TK_IDENTIFIER reduce production push_scope ->
-- On KW_WCHAR_T reduce production push_scope ->
-- On KW_VOLATILE reduce production push_scope ->
-- On KW_VOID reduce production push_scope ->
-- On KW_VA_LIST reduce production push_scope ->
-- On KW_UNSIGNED reduce production push_scope ->
-- On KW_UNION reduce production push_scope ->
-- On KW_TYPEOF reduce production push_scope ->
-- On KW_TYPEDEF reduce production push_scope ->
-- On KW_THREAD reduce production push_scope ->
-- On KW_STRUCT reduce production push_scope ->
-- On KW_STATIC reduce production push_scope ->
-- On KW_SIGNED reduce production push_scope ->
-- On KW_SHORT reduce production push_scope ->
-- On KW_RESTRICT reduce production push_scope ->
-- On KW_REGISTER reduce production push_scope ->
-- On KW_LONG reduce production push_scope ->
-- On KW_INTN reduce production push_scope ->
-- On KW_INT reduce production push_scope ->
-- On KW_INLINE reduce production push_scope ->
-- On KW_FLOATN reduce production push_scope ->
-- On KW_FLOAT reduce production push_scope ->
-- On KW_FASTCALL reduce production push_scope ->
-- On KW_EXTERN reduce production push_scope ->
-- On KW_EXTENSION reduce production push_scope ->
-- On KW_ENUM reduce production push_scope ->
-- On KW_DOUBLE reduce production push_scope ->
-- On KW_DECLSPEC reduce production push_scope ->
-- On KW_DECIMALN reduce production push_scope ->
-- On KW_DATATYPE reduce production push_scope ->
-- On KW_CONST reduce production push_scope ->
-- On KW_COMPLEX reduce production push_scope ->
-- On KW_CHAR reduce production push_scope ->
-- On KW_BOOL reduce production push_scope ->
-- On KW_AUTO reduce production push_scope ->
-- On KW_ATTRIBUTE reduce production push_scope ->
-- On KW_ASM reduce production push_scope ->

State 968:
## Known stack suffix:
## EOF
## LR(1) items:
parse_unit -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_unit -> EOF

State 969:
## Known stack suffix:
## push_scope
## LR(1) items:
parse_unit -> push_scope . external_definitions pop_scope EOF [ # ]
## Transitions:
-- On TK_SEMICOLON shift to state 970
-- On TK_INCLUDE shift to state 971
-- On KW_EXTENSION shift to state 972
-- On KW_ASM shift to state 973
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 977
-- On external_definitions shift to state 1022
-- On external_definition shift to state 1026
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On WC_DECL reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_STAR reduce production list_rev(attribute) ->
-- On TK_LBRACK reduce production list_rev(attribute) ->
-- On TK_IDENTIFIER reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 970:
## Known stack suffix:
## TK_SEMICOLON
## LR(1) items:
external_definition -> TK_SEMICOLON . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production external_definition -> TK_SEMICOLON

State 971:
## Known stack suffix:
## TK_INCLUDE
## LR(1) items:
external_definition -> TK_INCLUDE . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production external_definition -> TK_INCLUDE

State 972:
## Known stack suffix:
## KW_EXTENSION
## LR(1) items:
external_definition -> KW_EXTENSION . external_definition [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 970
-- On TK_INCLUDE shift to state 971
-- On KW_EXTENSION shift to state 972
-- On KW_ASM shift to state 973
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 977
-- On external_definition shift to state 1021
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On WC_DECL reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_STAR reduce production list_rev(attribute) ->
-- On TK_LBRACK reduce production list_rev(attribute) ->
-- On TK_IDENTIFIER reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 973:
## Known stack suffix:
## KW_ASM
## LR(1) items:
external_definition -> KW_ASM . TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On TK_LBRACK shift to state 974
## Reductions:

State 974:
## Known stack suffix:
## KW_ASM TK_LBRACK
## LR(1) items:
external_definition -> KW_ASM TK_LBRACK . nonempty_list(TK_STRING_LITERAL) TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On TK_STRING_LITERAL shift to state 788
-- On nonempty_list_rev(TK_STRING_LITERAL) shift to state 789
-- On nonempty_list(TK_STRING_LITERAL) shift to state 975
## Reductions:

State 975:
## Known stack suffix:
## KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL)
## LR(1) items:
external_definition -> KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL) . TK_RBRACK [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On TK_RBRACK shift to state 976
## Reductions:

State 976:
## Known stack suffix:
## KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK
## LR(1) items:
external_definition -> KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production external_definition -> KW_ASM TK_LBRACK nonempty_list(TK_STRING_LITERAL) TK_RBRACK

State 977:
## Known stack suffix:
## list(attribute)
## LR(1) items:
external_definition -> list(attribute) . declaration [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
external_definition -> list(attribute) . default_toplevel_declaring_list TK_SEMICOLON [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
external_definition -> list(attribute) . function_definition [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On WC_TYPE shift to state 2
-- On TK_TYPEDEF_NAME shift to state 3
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On typeof_type_specifier shift to state 278
-- On typeof_type_name shift to state 252
-- On typeof_declaration_specifier shift to state 280
-- On typedef_type_specifier shift to state 284
-- On typedef_declaration_specifier shift to state 286
-- On type_specifier_nosue shift to state 863
-- On type_specifier shift to state 978
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 884
-- On sue_declaration_specifier shift to state 886
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 627
-- On std_function_declaration shift to state 983
-- On old_function_declaration shift to state 984
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list(type_qualifier) shift to state 985
-- On function_definition shift to state 995
-- On function_declaration shift to state 996
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On default_toplevel_declaring_list shift to state 998
-- On default_int shift to state 1005
-- On default_declaring_list shift to state 894
-- On declaring_list shift to state 902
-- On declaration_specifier_nosue shift to state 910
-- On declaration_specifier shift to state 1012
-- On declaration_qualifier_list shift to state 1015
-- On declaration shift to state 1020
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 664
-- On basic_type_name shift to state 618
-- On basic_declaration_specifier shift to state 666
-- On attr_function_declarator_ shift to state 930
-- On attr_function_declarator shift to state 931
-- On attr_function_declaration shift to state 933
## Reductions:
-- On WC_DECL reduce production default_int ->
-- On TK_STAR reduce production default_int ->
-- On TK_LBRACK reduce production default_int ->
-- On TK_IDENTIFIER reduce production default_int ->

State 978:
## Known stack suffix:
## type_specifier
## LR(1) items:
attr_function_declarator_ -> type_specifier . identifier_declarator [ TK_LBRACE ]
declaring_list -> type_specifier . declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
old_function_declaration -> type_specifier . old_function_declarator list(declaration) [ TK_LBRACE ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 979
-- On identifier_declarator shift to state 879
-- On declarator shift to state 880
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 979:
## Known stack suffix:
## type_specifier old_function_declarator
## LR(1) items:
declarator -> old_function_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
old_function_declaration -> type_specifier old_function_declarator . list(declaration) [ TK_LBRACE ]
## Transitions:
-- On list_rev(declaration) shift to state 980
-- On list(declaration) shift to state 982
## Reductions:
-- On WC_TYPE reduce production list_rev(declaration) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(declaration) ->
-- On TK_SEMICOLON reduce production declarator -> old_function_declarator
-- On TK_LBRACE reduce production list_rev(declaration) ->
-- On TK_EQUALS reduce production declarator -> old_function_declarator
-- On TK_COMMA reduce production declarator -> old_function_declarator
-- On KW_WCHAR_T reduce production list_rev(declaration) ->
-- On KW_VOLATILE reduce production list_rev(declaration) ->
-- On KW_VOID reduce production list_rev(declaration) ->
-- On KW_VA_LIST reduce production list_rev(declaration) ->
-- On KW_UNSIGNED reduce production list_rev(declaration) ->
-- On KW_UNION reduce production list_rev(declaration) ->
-- On KW_TYPEOF reduce production list_rev(declaration) ->
-- On KW_TYPEDEF reduce production list_rev(declaration) ->
-- On KW_THREAD reduce production list_rev(declaration) ->
-- On KW_STRUCT reduce production list_rev(declaration) ->
-- On KW_STATIC reduce production list_rev(declaration) ->
-- On KW_SIGNED reduce production list_rev(declaration) ->
-- On KW_SHORT reduce production list_rev(declaration) ->
-- On KW_RESTRICT reduce production list_rev(declaration) ->
-- On KW_REGISTER reduce production list_rev(declaration) ->
-- On KW_LONG reduce production list_rev(declaration) ->
-- On KW_INTN reduce production list_rev(declaration) ->
-- On KW_INT reduce production list_rev(declaration) ->
-- On KW_INLINE reduce production list_rev(declaration) ->
-- On KW_FLOATN reduce production list_rev(declaration) ->
-- On KW_FLOAT reduce production list_rev(declaration) ->
-- On KW_FASTCALL reduce production declarator -> old_function_declarator
-- On KW_EXTERN reduce production list_rev(declaration) ->
-- On KW_ENUM reduce production list_rev(declaration) ->
-- On KW_DOUBLE reduce production list_rev(declaration) ->
-- On KW_DECLSPEC reduce production declarator -> old_function_declarator
-- On KW_DECIMALN reduce production list_rev(declaration) ->
-- On KW_DATATYPE reduce production list_rev(declaration) ->
-- On KW_CONST reduce production list_rev(declaration) ->
-- On KW_COMPLEX reduce production list_rev(declaration) ->
-- On KW_CHAR reduce production list_rev(declaration) ->
-- On KW_BOOL reduce production list_rev(declaration) ->
-- On KW_AUTO reduce production list_rev(declaration) ->
-- On KW_ATTRIBUTE reduce production declarator -> old_function_declarator
-- On KW_ASM reduce production declarator -> old_function_declarator

State 980:
## Known stack suffix:
## list_rev(declaration)
## LR(1) items:
list(declaration) -> list_rev(declaration) . [ TK_LBRACE ]
list_rev(declaration) -> list_rev(declaration) . declaration [ WC_TYPE TK_TYPEDEF_NAME TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
-- On WC_TYPE shift to state 2
-- On TK_TYPEDEF_NAME shift to state 3
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On typeof_type_specifier shift to state 278
-- On typeof_type_name shift to state 252
-- On typeof_declaration_specifier shift to state 280
-- On typedef_type_specifier shift to state 284
-- On typedef_declaration_specifier shift to state 286
-- On type_specifier_nosue shift to state 863
-- On type_specifier shift to state 878
-- On type_qualifier shift to state 312
-- On sue_type_specifier shift to state 884
-- On sue_declaration_specifier shift to state 886
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 627
-- On nonempty_list_rev(type_qualifier) shift to state 603
-- On nonempty_list(type_qualifier) shift to state 888
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 614
-- On default_declaring_list shift to state 894
-- On declaring_list shift to state 902
-- On declaration_specifier_nosue shift to state 910
-- On declaration_specifier shift to state 917
-- On declaration_qualifier_list shift to state 923
-- On declaration shift to state 981
-- On datatype_specifier shift to state 612
-- On basic_type_specifier shift to state 664
-- On basic_type_name shift to state 618
-- On basic_declaration_specifier shift to state 666
-- On attr_function_declarator_ shift to state 930
-- On attr_function_declarator shift to state 931
-- On attr_function_declaration shift to state 933
## Reductions:
-- On TK_LBRACE reduce production list(declaration) -> list_rev(declaration)

State 981:
## Known stack suffix:
## list_rev(declaration) declaration
## LR(1) items:
list_rev(declaration) -> list_rev(declaration) declaration . [ WC_TYPE TK_TYPEDEF_NAME TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_rev(declaration) -> list_rev(declaration) declaration

State 982:
## Known stack suffix:
## type_specifier old_function_declarator list(declaration)
## LR(1) items:
old_function_declaration -> type_specifier old_function_declarator list(declaration) . [ TK_LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_function_declaration -> type_specifier old_function_declarator list(declaration)

State 983:
## Known stack suffix:
## std_function_declaration
## LR(1) items:
function_declaration -> std_function_declaration . [ TK_LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_declaration -> std_function_declaration

State 984:
## Known stack suffix:
## old_function_declaration
## LR(1) items:
function_declaration -> old_function_declaration . [ TK_LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_declaration -> old_function_declaration

State 985:
## Known stack suffix:
## nonempty_list(type_qualifier)
## LR(1) items:
basic_type_specifier -> nonempty_list(type_qualifier) . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
declaration_qualifier_list -> nonempty_list(type_qualifier) . list(attribute) storage_class list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
default_declaring_list -> nonempty_list(type_qualifier) . default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
old_function_declaration -> nonempty_list(type_qualifier) . default_int old_function_declarator list(declaration) [ TK_LBRACE ]
std_function_declaration -> nonempty_list(type_qualifier) . default_int identifier_declarator [ TK_LBRACE ]
sue_type_specifier -> nonempty_list(type_qualifier) . elaborated_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
typedef_type_specifier -> nonempty_list(type_qualifier) . TK_TYPEDEF_NAME [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
typeof_type_specifier -> nonempty_list(type_qualifier) . typeof_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 606
-- On KW_WCHAR_T shift to state 4
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_STRUCT shift to state 193
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On typeof_type_name shift to state 607
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 635
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 611
-- On default_int shift to state 986
-- On datatype_specifier shift to state 612
-- On basic_type_name shift to state 613
## Reductions:
-- On WC_DECL reduce production default_int ->
-- On TK_STAR reduce production default_int ->
-- On TK_LBRACK reduce production default_int ->
-- On TK_IDENTIFIER reduce production default_int ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->

State 986:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int
## LR(1) items:
default_declaring_list -> nonempty_list(type_qualifier) default_int . identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
old_function_declaration -> nonempty_list(type_qualifier) default_int . old_function_declarator list(declaration) [ TK_LBRACE ]
std_function_declaration -> nonempty_list(type_qualifier) default_int . identifier_declarator [ TK_LBRACE ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 987
-- On TK_LBRACK shift to state 989
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 539
-- On old_function_declarator shift to state 992
-- On identifier_declarator shift to state 994
## Reductions:

State 987:
## Known stack suffix:
## TK_STAR
## LR(1) items:
old_function_declarator -> TK_STAR . list(attribute) old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_RBRACK TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
old_function_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_RBRACK TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
unary_identifier_declarator -> TK_STAR . list(attribute) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
unary_identifier_declarator -> TK_STAR . list(attribute) nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 988
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 988:
## Known stack suffix:
## TK_STAR list(attribute)
## LR(1) items:
old_function_declarator -> TK_STAR list(attribute) . old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_RBRACK TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
old_function_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_RBRACK TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
unary_identifier_declarator -> TK_STAR list(attribute) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
unary_identifier_declarator -> TK_STAR list(attribute) . nonempty_list(pointer_type_qualifier) identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 987
-- On TK_LBRACK shift to state 989
-- On TK_IDENTIFIER shift to state 299
-- On KW_VOLATILE shift to state 531
-- On KW_RESTRICT shift to state 532
-- On KW_CONST shift to state 533
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On pointer_type_qualifier shift to state 537
-- On paren_identifier_declarator shift to state 539
-- On old_function_declarator shift to state 541
-- On nonempty_list_rev(pointer_type_qualifier) shift to state 542
-- On nonempty_list(pointer_type_qualifier) shift to state 991
-- On identifier_declarator shift to state 554
## Reductions:

State 989:
## Known stack suffix:
## TK_LBRACK
## LR(1) items:
paren_identifier_declarator -> TK_LBRACK . list(attribute) paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK . list(attribute) unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_RBRACK TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
postfix_old_function_declarator -> TK_LBRACK . list(attribute) old_function_declarator TK_RBRACK postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_RBRACK TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 990
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 990:
## Known stack suffix:
## TK_LBRACK list(attribute)
## LR(1) items:
paren_identifier_declarator -> TK_LBRACK list(attribute) . paren_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LSQBRACK TK_LBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_identifier_declarator -> TK_LBRACK list(attribute) . unary_identifier_declarator TK_RBRACK postfixing_abstract_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK [ WC_TYPE TK_TYPEDEF_NAME TK_RBRACK TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
postfix_old_function_declarator -> TK_LBRACK list(attribute) . old_function_declarator TK_RBRACK postfixing_abstract_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_RBRACK TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 987
-- On TK_LBRACK shift to state 989
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 300
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 512
-- On old_function_declarator shift to state 522
## Reductions:

State 991:
## Known stack suffix:
## TK_STAR list(attribute) nonempty_list(pointer_type_qualifier)
## LR(1) items:
old_function_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . old_function_declarator [ WC_TYPE TK_TYPEDEF_NAME TK_RBRACK TK_LBRACE KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
unary_identifier_declarator -> TK_STAR list(attribute) nonempty_list(pointer_type_qualifier) . identifier_declarator [ TK_SEMICOLON TK_RBRACK TK_LBRACE TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 987
-- On TK_LBRACK shift to state 989
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 539
-- On old_function_declarator shift to state 551
-- On identifier_declarator shift to state 552
## Reductions:

State 992:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int old_function_declarator
## LR(1) items:
old_function_declaration -> nonempty_list(type_qualifier) default_int old_function_declarator . list(declaration) [ TK_LBRACE ]
## Transitions:
-- On list_rev(declaration) shift to state 980
-- On list(declaration) shift to state 993
## Default reduction:
-- After reading the next token, reduce production list_rev(declaration) ->

State 993:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int old_function_declarator list(declaration)
## LR(1) items:
old_function_declaration -> nonempty_list(type_qualifier) default_int old_function_declarator list(declaration) . [ TK_LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_function_declaration -> nonempty_list(type_qualifier) default_int old_function_declarator list(declaration)

State 994:
## Known stack suffix:
## nonempty_list(type_qualifier) default_int identifier_declarator
## LR(1) items:
default_declaring_list -> nonempty_list(type_qualifier) default_int identifier_declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
std_function_declaration -> nonempty_list(type_qualifier) default_int identifier_declarator . [ TK_LBRACE ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 891
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_LBRACE reduce production std_function_declaration -> nonempty_list(type_qualifier) default_int identifier_declarator
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 995:
## Known stack suffix:
## list(attribute) function_definition
## LR(1) items:
external_definition -> list(attribute) function_definition . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production external_definition -> list(attribute) function_definition

State 996:
## Known stack suffix:
## function_declaration
## LR(1) items:
function_definition -> function_declaration . compound_statement [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On TK_LBRACE shift to state 22
-- On compound_statement shift to state 997
## Reductions:

State 997:
## Known stack suffix:
## function_declaration compound_statement
## LR(1) items:
function_definition -> function_declaration compound_statement . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_definition -> function_declaration compound_statement

State 998:
## Known stack suffix:
## list(attribute) default_toplevel_declaring_list
## LR(1) items:
default_toplevel_declaring_list -> default_toplevel_declaring_list . TK_COMMA identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
external_definition -> list(attribute) default_toplevel_declaring_list . TK_SEMICOLON [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
-- On TK_SEMICOLON shift to state 999
-- On TK_COMMA shift to state 1000
## Reductions:

State 999:
## Known stack suffix:
## list(attribute) default_toplevel_declaring_list TK_SEMICOLON
## LR(1) items:
external_definition -> list(attribute) default_toplevel_declaring_list TK_SEMICOLON . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production external_definition -> list(attribute) default_toplevel_declaring_list TK_SEMICOLON

State 1000:
## Known stack suffix:
## default_toplevel_declaring_list TK_COMMA
## LR(1) items:
default_toplevel_declaring_list -> default_toplevel_declaring_list TK_COMMA . identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 588
-- On TK_LBRACK shift to state 590
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 593
-- On identifier_declarator shift to state 1001
## Reductions:

State 1001:
## Known stack suffix:
## default_toplevel_declaring_list TK_COMMA identifier_declarator
## LR(1) items:
default_toplevel_declaring_list -> default_toplevel_declaring_list TK_COMMA identifier_declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 1002
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 1002:
## Known stack suffix:
## default_toplevel_declaring_list TK_COMMA identifier_declarator option(asm_declaration_specifier)
## LR(1) items:
default_toplevel_declaring_list -> default_toplevel_declaring_list TK_COMMA identifier_declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 1003
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 1003:
## Known stack suffix:
## default_toplevel_declaring_list TK_COMMA identifier_declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
default_toplevel_declaring_list -> default_toplevel_declaring_list TK_COMMA identifier_declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 1004
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 1004:
## Known stack suffix:
## default_toplevel_declaring_list TK_COMMA identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
default_toplevel_declaring_list -> default_toplevel_declaring_list TK_COMMA identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production default_toplevel_declaring_list -> default_toplevel_declaring_list TK_COMMA identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 1005:
## Known stack suffix:
## default_int
## LR(1) items:
default_toplevel_declaring_list -> default_int . identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
old_function_declaration -> default_int . old_function_declarator list(declaration) [ TK_LBRACE ]
std_function_declaration -> default_int . identifier_declarator [ TK_LBRACE ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 987
-- On TK_LBRACK shift to state 989
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 539
-- On old_function_declarator shift to state 1006
-- On identifier_declarator shift to state 1008
## Reductions:

State 1006:
## Known stack suffix:
## default_int old_function_declarator
## LR(1) items:
old_function_declaration -> default_int old_function_declarator . list(declaration) [ TK_LBRACE ]
## Transitions:
-- On list_rev(declaration) shift to state 980
-- On list(declaration) shift to state 1007
## Default reduction:
-- After reading the next token, reduce production list_rev(declaration) ->

State 1007:
## Known stack suffix:
## default_int old_function_declarator list(declaration)
## LR(1) items:
old_function_declaration -> default_int old_function_declarator list(declaration) . [ TK_LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_function_declaration -> default_int old_function_declarator list(declaration)

State 1008:
## Known stack suffix:
## default_int identifier_declarator
## LR(1) items:
default_toplevel_declaring_list -> default_int identifier_declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
std_function_declaration -> default_int identifier_declarator . [ TK_LBRACE ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 1009
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_LBRACE reduce production std_function_declaration -> default_int identifier_declarator
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 1009:
## Known stack suffix:
## default_int identifier_declarator option(asm_declaration_specifier)
## LR(1) items:
default_toplevel_declaring_list -> default_int identifier_declarator option(asm_declaration_specifier) . list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 1010
## Default reduction:
-- After reading the next token, reduce production list_rev(attribute) ->

State 1010:
## Known stack suffix:
## default_int identifier_declarator option(asm_declaration_specifier) list(attribute)
## LR(1) items:
default_toplevel_declaring_list -> default_int identifier_declarator option(asm_declaration_specifier) list(attribute) . option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
## Transitions:
-- On TK_EQUALS shift to state 873
-- On option(decl_initialiser) shift to state 1011
-- On decl_initialiser shift to state 876
## Reductions:
-- On TK_SEMICOLON reduce production option(decl_initialiser) ->
-- On TK_COMMA reduce production option(decl_initialiser) ->

State 1011:
## Known stack suffix:
## default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)
## LR(1) items:
default_toplevel_declaring_list -> default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) . [ TK_SEMICOLON TK_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production default_toplevel_declaring_list -> default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser)

State 1012:
## Known stack suffix:
## declaration_specifier
## LR(1) items:
attr_function_declarator_ -> declaration_specifier . identifier_declarator [ TK_LBRACE ]
declaring_list -> declaration_specifier . declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
old_function_declaration -> declaration_specifier . old_function_declarator list(declaration) [ TK_LBRACE ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_TYPEDEF_NAME shift to state 290
-- On TK_STAR shift to state 494
-- On TK_LBRACK shift to state 555
-- On TK_IDENTIFIER shift to state 299
-- On KW_EXTENSION shift to state 560
-- On unary_identifier_declarator shift to state 534
-- On simple_typedef_declarator shift to state 535
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_typedef_declarator shift to state 561
-- On paren_postfix_typedef_declarator shift to state 511
-- On paren_identifier_declarator shift to state 539
-- On parameter_typedef_declarator shift to state 562
-- On old_function_declarator shift to state 1013
-- On identifier_declarator shift to state 918
-- On declarator shift to state 919
-- On clean_typedef_declarator shift to state 553
-- On clean_postfix_typedef_declarator shift to state 528
## Reductions:

State 1013:
## Known stack suffix:
## declaration_specifier old_function_declarator
## LR(1) items:
declarator -> old_function_declarator . [ TK_SEMICOLON TK_EQUALS TK_COMMA KW_FASTCALL KW_DECLSPEC KW_ATTRIBUTE KW_ASM ]
old_function_declaration -> declaration_specifier old_function_declarator . list(declaration) [ TK_LBRACE ]
## Transitions:
-- On list_rev(declaration) shift to state 980
-- On list(declaration) shift to state 1014
## Reductions:
-- On WC_TYPE reduce production list_rev(declaration) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(declaration) ->
-- On TK_SEMICOLON reduce production declarator -> old_function_declarator
-- On TK_LBRACE reduce production list_rev(declaration) ->
-- On TK_EQUALS reduce production declarator -> old_function_declarator
-- On TK_COMMA reduce production declarator -> old_function_declarator
-- On KW_WCHAR_T reduce production list_rev(declaration) ->
-- On KW_VOLATILE reduce production list_rev(declaration) ->
-- On KW_VOID reduce production list_rev(declaration) ->
-- On KW_VA_LIST reduce production list_rev(declaration) ->
-- On KW_UNSIGNED reduce production list_rev(declaration) ->
-- On KW_UNION reduce production list_rev(declaration) ->
-- On KW_TYPEOF reduce production list_rev(declaration) ->
-- On KW_TYPEDEF reduce production list_rev(declaration) ->
-- On KW_THREAD reduce production list_rev(declaration) ->
-- On KW_STRUCT reduce production list_rev(declaration) ->
-- On KW_STATIC reduce production list_rev(declaration) ->
-- On KW_SIGNED reduce production list_rev(declaration) ->
-- On KW_SHORT reduce production list_rev(declaration) ->
-- On KW_RESTRICT reduce production list_rev(declaration) ->
-- On KW_REGISTER reduce production list_rev(declaration) ->
-- On KW_LONG reduce production list_rev(declaration) ->
-- On KW_INTN reduce production list_rev(declaration) ->
-- On KW_INT reduce production list_rev(declaration) ->
-- On KW_INLINE reduce production list_rev(declaration) ->
-- On KW_FLOATN reduce production list_rev(declaration) ->
-- On KW_FLOAT reduce production list_rev(declaration) ->
-- On KW_FASTCALL reduce production declarator -> old_function_declarator
-- On KW_EXTERN reduce production list_rev(declaration) ->
-- On KW_ENUM reduce production list_rev(declaration) ->
-- On KW_DOUBLE reduce production list_rev(declaration) ->
-- On KW_DECLSPEC reduce production declarator -> old_function_declarator
-- On KW_DECIMALN reduce production list_rev(declaration) ->
-- On KW_DATATYPE reduce production list_rev(declaration) ->
-- On KW_CONST reduce production list_rev(declaration) ->
-- On KW_COMPLEX reduce production list_rev(declaration) ->
-- On KW_CHAR reduce production list_rev(declaration) ->
-- On KW_BOOL reduce production list_rev(declaration) ->
-- On KW_AUTO reduce production list_rev(declaration) ->
-- On KW_ATTRIBUTE reduce production declarator -> old_function_declarator
-- On KW_ASM reduce production declarator -> old_function_declarator

State 1014:
## Known stack suffix:
## declaration_specifier old_function_declarator list(declaration)
## LR(1) items:
old_function_declaration -> declaration_specifier old_function_declarator list(declaration) . [ TK_LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_function_declaration -> declaration_specifier old_function_declarator list(declaration)

State 1015:
## Known stack suffix:
## declaration_qualifier_list
## LR(1) items:
basic_declaration_specifier -> declaration_qualifier_list . basic_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_TYPEDEF KW_THREAD KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE ]
declaration_qualifier_list -> declaration_qualifier_list . declaration_qualifier list(attribute) [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_EXTERN KW_ENUM KW_DOUBLE KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO ]
default_declaring_list -> declaration_qualifier_list . default_int identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
old_function_declaration -> declaration_qualifier_list . default_int old_function_declarator list(declaration) [ TK_LBRACE ]
std_function_declaration -> declaration_qualifier_list . default_int identifier_declarator [ TK_LBRACE ]
sue_declaration_specifier -> declaration_qualifier_list . elaborated_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_EXTERN KW_EXTENSION KW_CONST KW_COMPLEX KW_AUTO ]
typedef_declaration_specifier -> declaration_qualifier_list . TK_TYPEDEF_NAME [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
typeof_declaration_specifier -> declaration_qualifier_list . typeof_type_name [ WC_DECL TK_TYPEDEF_NAME TK_STAR TK_LBRACK TK_IDENTIFIER KW_VOLATILE KW_TYPEDEF KW_THREAD KW_STATIC KW_RESTRICT KW_REGISTER KW_INLINE KW_FASTCALL KW_EXTERN KW_EXTENSION KW_DECLSPEC KW_CONST KW_COMPLEX KW_AUTO KW_ATTRIBUTE ]
## Transitions:
-- On TK_TYPEDEF_NAME shift to state 654
-- On KW_WCHAR_T shift to state 4
-- On KW_VOLATILE shift to state 5
-- On KW_VOID shift to state 6
-- On KW_VA_LIST shift to state 7
-- On KW_UNSIGNED shift to state 8
-- On KW_UNION shift to state 9
-- On KW_TYPEOF shift to state 10
-- On KW_TYPEDEF shift to state 271
-- On KW_THREAD shift to state 272
-- On KW_STRUCT shift to state 193
-- On KW_STATIC shift to state 273
-- On KW_SIGNED shift to state 194
-- On KW_SHORT shift to state 195
-- On KW_RESTRICT shift to state 196
-- On KW_REGISTER shift to state 274
-- On KW_LONG shift to state 197
-- On KW_INTN shift to state 198
-- On KW_INT shift to state 199
-- On KW_INLINE shift to state 275
-- On KW_FLOATN shift to state 200
-- On KW_FLOAT shift to state 201
-- On KW_EXTERN shift to state 276
-- On KW_ENUM shift to state 202
-- On KW_DOUBLE shift to state 221
-- On KW_DECIMALN shift to state 222
-- On KW_DATATYPE shift to state 223
-- On KW_CONST shift to state 246
-- On KW_COMPLEX shift to state 247
-- On KW_CHAR shift to state 248
-- On KW_BOOL shift to state 249
-- On KW_AUTO shift to state 277
-- On typeof_type_name shift to state 655
-- On type_qualifier shift to state 281
-- On struct_or_union_specifier shift to state 318
-- On struct_or_union shift to state 319
-- On storage_class shift to state 282
-- On enum_specifier shift to state 609
-- On elaborated_type_name shift to state 656
-- On default_int shift to state 1016
-- On declaration_qualifier shift to state 661
-- On datatype_specifier shift to state 612
-- On basic_type_name shift to state 663
## Reductions:
-- On WC_DECL reduce production default_int ->
-- On TK_STAR reduce production default_int ->
-- On TK_LBRACK reduce production default_int ->
-- On TK_IDENTIFIER reduce production default_int ->

State 1016:
## Known stack suffix:
## declaration_qualifier_list default_int
## LR(1) items:
default_declaring_list -> declaration_qualifier_list default_int . identifier_declarator option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
old_function_declaration -> declaration_qualifier_list default_int . old_function_declarator list(declaration) [ TK_LBRACE ]
std_function_declaration -> declaration_qualifier_list default_int . identifier_declarator [ TK_LBRACE ]
## Transitions:
-- On WC_DECL shift to state 289
-- On TK_STAR shift to state 987
-- On TK_LBRACK shift to state 989
-- On TK_IDENTIFIER shift to state 299
-- On unary_identifier_declarator shift to state 534
-- On simple_identifier_declarator shift to state 505
-- On postfix_old_function_declarator shift to state 506
-- On postfix_identifier_declarator shift to state 507
-- On paren_identifier_declarator shift to state 539
-- On old_function_declarator shift to state 1017
-- On identifier_declarator shift to state 1019
## Reductions:

State 1017:
## Known stack suffix:
## declaration_qualifier_list default_int old_function_declarator
## LR(1) items:
old_function_declaration -> declaration_qualifier_list default_int old_function_declarator . list(declaration) [ TK_LBRACE ]
## Transitions:
-- On list_rev(declaration) shift to state 980
-- On list(declaration) shift to state 1018
## Default reduction:
-- After reading the next token, reduce production list_rev(declaration) ->

State 1018:
## Known stack suffix:
## declaration_qualifier_list default_int old_function_declarator list(declaration)
## LR(1) items:
old_function_declaration -> declaration_qualifier_list default_int old_function_declarator list(declaration) . [ TK_LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_function_declaration -> declaration_qualifier_list default_int old_function_declarator list(declaration)

State 1019:
## Known stack suffix:
## declaration_qualifier_list default_int identifier_declarator
## LR(1) items:
default_declaring_list -> declaration_qualifier_list default_int identifier_declarator . option(asm_declaration_specifier) list(attribute) option(decl_initialiser) [ TK_SEMICOLON TK_COMMA ]
std_function_declaration -> declaration_qualifier_list default_int identifier_declarator . [ TK_LBRACE ]
## Transitions:
-- On KW_ASM shift to state 867
-- On option(asm_declaration_specifier) shift to state 926
-- On asm_declaration_specifier shift to state 877
## Reductions:
-- On TK_SEMICOLON reduce production option(asm_declaration_specifier) ->
-- On TK_LBRACE reduce production std_function_declaration -> declaration_qualifier_list default_int identifier_declarator
-- On TK_EQUALS reduce production option(asm_declaration_specifier) ->
-- On TK_COMMA reduce production option(asm_declaration_specifier) ->
-- On KW_FASTCALL reduce production option(asm_declaration_specifier) ->
-- On KW_DECLSPEC reduce production option(asm_declaration_specifier) ->
-- On KW_ATTRIBUTE reduce production option(asm_declaration_specifier) ->

State 1020:
## Known stack suffix:
## list(attribute) declaration
## LR(1) items:
external_definition -> list(attribute) declaration . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production external_definition -> list(attribute) declaration

State 1021:
## Known stack suffix:
## KW_EXTENSION external_definition
## LR(1) items:
external_definition -> KW_EXTENSION external_definition . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production external_definition -> KW_EXTENSION external_definition

State 1022:
## Known stack suffix:
## push_scope external_definitions
## LR(1) items:
external_definitions -> external_definitions . external_definition [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
parse_unit -> push_scope external_definitions . pop_scope EOF [ # ]
## Transitions:
-- On TK_SEMICOLON shift to state 970
-- On TK_INCLUDE shift to state 971
-- On KW_EXTENSION shift to state 972
-- On KW_ASM shift to state 973
-- On pop_scope shift to state 1023
-- On list_rev(attribute) shift to state 49
-- On list(attribute) shift to state 977
-- On external_definition shift to state 1025
## Reductions:
-- On WC_TYPE reduce production list_rev(attribute) ->
-- On WC_DECL reduce production list_rev(attribute) ->
-- On TK_TYPEDEF_NAME reduce production list_rev(attribute) ->
-- On TK_STAR reduce production list_rev(attribute) ->
-- On TK_LBRACK reduce production list_rev(attribute) ->
-- On TK_IDENTIFIER reduce production list_rev(attribute) ->
-- On KW_WCHAR_T reduce production list_rev(attribute) ->
-- On KW_VOLATILE reduce production list_rev(attribute) ->
-- On KW_VOID reduce production list_rev(attribute) ->
-- On KW_VA_LIST reduce production list_rev(attribute) ->
-- On KW_UNSIGNED reduce production list_rev(attribute) ->
-- On KW_UNION reduce production list_rev(attribute) ->
-- On KW_TYPEOF reduce production list_rev(attribute) ->
-- On KW_TYPEDEF reduce production list_rev(attribute) ->
-- On KW_THREAD reduce production list_rev(attribute) ->
-- On KW_STRUCT reduce production list_rev(attribute) ->
-- On KW_STATIC reduce production list_rev(attribute) ->
-- On KW_SIGNED reduce production list_rev(attribute) ->
-- On KW_SHORT reduce production list_rev(attribute) ->
-- On KW_RESTRICT reduce production list_rev(attribute) ->
-- On KW_REGISTER reduce production list_rev(attribute) ->
-- On KW_LONG reduce production list_rev(attribute) ->
-- On KW_INTN reduce production list_rev(attribute) ->
-- On KW_INT reduce production list_rev(attribute) ->
-- On KW_INLINE reduce production list_rev(attribute) ->
-- On KW_FLOATN reduce production list_rev(attribute) ->
-- On KW_FLOAT reduce production list_rev(attribute) ->
-- On KW_FASTCALL reduce production list_rev(attribute) ->
-- On KW_EXTERN reduce production list_rev(attribute) ->
-- On KW_ENUM reduce production list_rev(attribute) ->
-- On KW_DOUBLE reduce production list_rev(attribute) ->
-- On KW_DECLSPEC reduce production list_rev(attribute) ->
-- On KW_DECIMALN reduce production list_rev(attribute) ->
-- On KW_DATATYPE reduce production list_rev(attribute) ->
-- On KW_CONST reduce production list_rev(attribute) ->
-- On KW_COMPLEX reduce production list_rev(attribute) ->
-- On KW_CHAR reduce production list_rev(attribute) ->
-- On KW_BOOL reduce production list_rev(attribute) ->
-- On KW_AUTO reduce production list_rev(attribute) ->
-- On KW_ATTRIBUTE reduce production list_rev(attribute) ->
-- On EOF reduce production pop_scope ->

State 1023:
## Known stack suffix:
## push_scope external_definitions pop_scope
## LR(1) items:
parse_unit -> push_scope external_definitions pop_scope . EOF [ # ]
## Transitions:
-- On EOF shift to state 1024
## Reductions:

State 1024:
## Known stack suffix:
## push_scope external_definitions pop_scope EOF
## LR(1) items:
parse_unit -> push_scope external_definitions pop_scope EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_unit -> push_scope external_definitions pop_scope EOF

State 1025:
## Known stack suffix:
## external_definitions external_definition
## LR(1) items:
external_definitions -> external_definitions external_definition . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production external_definitions -> external_definitions external_definition

State 1026:
## Known stack suffix:
## external_definition
## LR(1) items:
external_definitions -> external_definition . [ WC_TYPE WC_DECL TK_TYPEDEF_NAME TK_STAR TK_SEMICOLON TK_LBRACK TK_INCLUDE TK_IDENTIFIER KW_WCHAR_T KW_VOLATILE KW_VOID KW_VA_LIST KW_UNSIGNED KW_UNION KW_TYPEOF KW_TYPEDEF KW_THREAD KW_STRUCT KW_STATIC KW_SIGNED KW_SHORT KW_RESTRICT KW_REGISTER KW_LONG KW_INTN KW_INT KW_INLINE KW_FLOATN KW_FLOAT KW_FASTCALL KW_EXTERN KW_EXTENSION KW_ENUM KW_DOUBLE KW_DECLSPEC KW_DECIMALN KW_DATATYPE KW_CONST KW_COMPLEX KW_CHAR KW_BOOL KW_AUTO KW_ATTRIBUTE KW_ASM EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production external_definitions -> external_definition

State 1027:
## Known stack suffix:
## parse_unit
## LR(1) items:
parse_unit' -> parse_unit . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_unit

State 1028:
## Known stack suffix:
##
## LR(1) items:
test' -> . test [ # ]
## Transitions:
-- On EOF shift to state 968
-- On test shift to state 1029
-- On push_scope shift to state 969
-- On parse_unit shift to state 1030
## Reductions:
-- On WC_TYPE reduce production push_scope ->
-- On WC_DECL reduce production push_scope ->
-- On TK_TYPEDEF_NAME reduce production push_scope ->
-- On TK_STAR reduce production push_scope ->
-- On TK_SEMICOLON reduce production push_scope ->
-- On TK_LBRACK reduce production push_scope ->
-- On TK_INCLUDE reduce production push_scope ->
-- On TK_IDENTIFIER reduce production push_scope ->
-- On KW_WCHAR_T reduce production push_scope ->
-- On KW_VOLATILE reduce production push_scope ->
-- On KW_VOID reduce production push_scope ->
-- On KW_VA_LIST reduce production push_scope ->
-- On KW_UNSIGNED reduce production push_scope ->
-- On KW_UNION reduce production push_scope ->
-- On KW_TYPEOF reduce production push_scope ->
-- On KW_TYPEDEF reduce production push_scope ->
-- On KW_THREAD reduce production push_scope ->
-- On KW_STRUCT reduce production push_scope ->
-- On KW_STATIC reduce production push_scope ->
-- On KW_SIGNED reduce production push_scope ->
-- On KW_SHORT reduce production push_scope ->
-- On KW_RESTRICT reduce production push_scope ->
-- On KW_REGISTER reduce production push_scope ->
-- On KW_LONG reduce production push_scope ->
-- On KW_INTN reduce production push_scope ->
-- On KW_INT reduce production push_scope ->
-- On KW_INLINE reduce production push_scope ->
-- On KW_FLOATN reduce production push_scope ->
-- On KW_FLOAT reduce production push_scope ->
-- On KW_FASTCALL reduce production push_scope ->
-- On KW_EXTERN reduce production push_scope ->
-- On KW_EXTENSION reduce production push_scope ->
-- On KW_ENUM reduce production push_scope ->
-- On KW_DOUBLE reduce production push_scope ->
-- On KW_DECLSPEC reduce production push_scope ->
-- On KW_DECIMALN reduce production push_scope ->
-- On KW_DATATYPE reduce production push_scope ->
-- On KW_CONST reduce production push_scope ->
-- On KW_COMPLEX reduce production push_scope ->
-- On KW_CHAR reduce production push_scope ->
-- On KW_BOOL reduce production push_scope ->
-- On KW_AUTO reduce production push_scope ->
-- On KW_ATTRIBUTE reduce production push_scope ->
-- On KW_ASM reduce production push_scope ->

State 1029:
## Known stack suffix:
## test
## LR(1) items:
test' -> test . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept test

State 1030:
## Known stack suffix:
## parse_unit
## LR(1) items:
test -> parse_unit . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production test -> parse_unit

