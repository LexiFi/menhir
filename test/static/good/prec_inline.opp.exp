%start main
%token DIV
%token EOL
%token <int> INT
%token LPAREN
%token MINUS
%token PLUS
%token RPAREN
%token TIMES
%left MINUS PLUS
%left DIV TIMES
%nonassoc UMINUS
%type <int> main
%%

main:
  e = expr _2 = EOL
    {    ( e )}

expr:
  i = INT
    {let e =     ( i ) in
    ( e )}
| _1 = LPAREN e = expr _3 = RPAREN
    {let e =     ( e ) in
    ( e )}
| e1 = expr _2 = PLUS e2 = expr
    {let e =     ( e1 + e2 ) in
    ( e )}
| e1 = expr _2 = MINUS e2 = expr
    {let e =     ( e1 - e2 ) in
    ( e )}
| e1 = expr _2 = TIMES e2 = expr
    {let e =     ( e1 * e2 ) in
    ( e )}
| e1 = expr _2 = DIV e2 = expr
    {let e =     ( e1 / e2 ) in
    ( e )}
| _1 = MINUS e = expr %prec UMINUS
    {let e =     ( - e ) in
    ( e )}

%%
