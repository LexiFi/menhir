State 0:
## Known stack suffix:
##
## LR(1) items:
promela' -> . promela [ # ]
## Transitions:
-- On PROMELA_NEVER shift to state 1
-- On promela shift to state 47
## Reductions:

State 1:
## Known stack suffix:
## PROMELA_NEVER
## LR(1) items:
promela -> PROMELA_NEVER . PROMELA_LBRACE states PROMELA_RBRACE EOF [ # ]
promela -> PROMELA_NEVER . PROMELA_LBRACE states PROMELA_SEMICOLON PROMELA_RBRACE EOF [ # ]
## Transitions:
-- On PROMELA_LBRACE shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## PROMELA_NEVER PROMELA_LBRACE
## LR(1) items:
promela -> PROMELA_NEVER PROMELA_LBRACE . states PROMELA_RBRACE EOF [ # ]
promela -> PROMELA_NEVER PROMELA_LBRACE . states PROMELA_SEMICOLON PROMELA_RBRACE EOF [ # ]
## Transitions:
-- On PROMELA_LABEL shift to state 3
-- On states shift to state 5
-- On state_labels shift to state 9
-- On state shift to state 46
-- On label shift to state 42
## Reductions:

State 3:
## Known stack suffix:
## PROMELA_LABEL
## LR(1) items:
label -> PROMELA_LABEL . PROMELA_COLON [ PROMELA_SKIP PROMELA_LABEL PROMELA_IF PROMELA_FALSE ]
## Transitions:
-- On PROMELA_COLON shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## PROMELA_LABEL PROMELA_COLON
## LR(1) items:
label -> PROMELA_LABEL PROMELA_COLON . [ PROMELA_SKIP PROMELA_LABEL PROMELA_IF PROMELA_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label -> PROMELA_LABEL PROMELA_COLON

State 5:
## Known stack suffix:
## PROMELA_NEVER PROMELA_LBRACE states
## LR(1) items:
promela -> PROMELA_NEVER PROMELA_LBRACE states . PROMELA_RBRACE EOF [ # ]
promela -> PROMELA_NEVER PROMELA_LBRACE states . PROMELA_SEMICOLON PROMELA_RBRACE EOF [ # ]
states -> states . PROMELA_SEMICOLON state [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
-- On PROMELA_SEMICOLON shift to state 6
-- On PROMELA_RBRACE shift to state 44
## Reductions:

State 6:
## Known stack suffix:
## PROMELA_NEVER PROMELA_LBRACE states PROMELA_SEMICOLON
## LR(1) items:
promela -> PROMELA_NEVER PROMELA_LBRACE states PROMELA_SEMICOLON . PROMELA_RBRACE EOF [ # ]
states -> states PROMELA_SEMICOLON . state [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
-- On PROMELA_RBRACE shift to state 7
-- On PROMELA_LABEL shift to state 3
-- On state_labels shift to state 9
-- On state shift to state 41
-- On label shift to state 42
## Reductions:

State 7:
## Known stack suffix:
## PROMELA_NEVER PROMELA_LBRACE states PROMELA_SEMICOLON PROMELA_RBRACE
## LR(1) items:
promela -> PROMELA_NEVER PROMELA_LBRACE states PROMELA_SEMICOLON PROMELA_RBRACE . EOF [ # ]
## Transitions:
-- On EOF shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## PROMELA_NEVER PROMELA_LBRACE states PROMELA_SEMICOLON PROMELA_RBRACE EOF
## LR(1) items:
promela -> PROMELA_NEVER PROMELA_LBRACE states PROMELA_SEMICOLON PROMELA_RBRACE EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production promela -> PROMELA_NEVER PROMELA_LBRACE states PROMELA_SEMICOLON PROMELA_RBRACE EOF

State 9:
## Known stack suffix:
## state_labels
## LR(1) items:
state -> state_labels . state_body [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
-- On PROMELA_SKIP shift to state 10
-- On PROMELA_IF shift to state 11
-- On PROMELA_FALSE shift to state 39
-- On state_body shift to state 40
## Reductions:

State 10:
## Known stack suffix:
## PROMELA_SKIP
## LR(1) items:
state_body -> PROMELA_SKIP . [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production state_body -> PROMELA_SKIP

State 11:
## Known stack suffix:
## PROMELA_IF
## LR(1) items:
state_body -> PROMELA_IF . transitions PROMELA_FI [ PROMELA_SEMICOLON PROMELA_RBRACE ]
state_body -> PROMELA_IF . PROMELA_DOUBLE_COLON PROMELA_FALSE PROMELA_FI [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
-- On PROMELA_DOUBLE_COLON shift to state 12
-- On transitions shift to state 34
-- On transition shift to state 38
## Reductions:

State 12:
## Known stack suffix:
## PROMELA_IF PROMELA_DOUBLE_COLON
## LR(1) items:
state_body -> PROMELA_IF PROMELA_DOUBLE_COLON . PROMELA_FALSE PROMELA_FI [ PROMELA_SEMICOLON PROMELA_RBRACE ]
transition -> PROMELA_DOUBLE_COLON . guard PROMELA_RIGHT_ARROW PROMELA_GOTO PROMELA_LABEL [ PROMELA_FI PROMELA_DOUBLE_COLON ]
## Transitions:
-- On PROMELA_TRUE shift to state 13
-- On PROMELA_RETURNOF shift to state 14
-- On PROMELA_NOT shift to state 15
-- On PROMELA_LPAREN shift to state 16
-- On PROMELA_LABEL shift to state 17
-- On PROMELA_FALSE shift to state 28
-- On PROMELA_CALLORRETURNOF shift to state 19
-- On PROMELA_CALLOF shift to state 20
-- On guard shift to state 30
## Reductions:

State 13:
## Known stack suffix:
## PROMELA_TRUE
## LR(1) items:
guard -> PROMELA_TRUE . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production guard -> PROMELA_TRUE

State 14:
## Known stack suffix:
## PROMELA_RETURNOF
## LR(1) items:
guard -> PROMELA_RETURNOF . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production guard -> PROMELA_RETURNOF

State 15:
## Known stack suffix:
## PROMELA_NOT
## LR(1) items:
guard -> PROMELA_NOT . guard [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
-- On PROMELA_TRUE shift to state 13
-- On PROMELA_RETURNOF shift to state 14
-- On PROMELA_NOT shift to state 15
-- On PROMELA_LPAREN shift to state 16
-- On PROMELA_LABEL shift to state 17
-- On PROMELA_FALSE shift to state 18
-- On PROMELA_CALLORRETURNOF shift to state 19
-- On PROMELA_CALLOF shift to state 20
-- On guard shift to state 27
## Reductions:

State 16:
## Known stack suffix:
## PROMELA_LPAREN
## LR(1) items:
guard -> PROMELA_LPAREN . guard PROMELA_RPAREN [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
-- On PROMELA_TRUE shift to state 13
-- On PROMELA_RETURNOF shift to state 14
-- On PROMELA_NOT shift to state 15
-- On PROMELA_LPAREN shift to state 16
-- On PROMELA_LABEL shift to state 17
-- On PROMELA_FALSE shift to state 18
-- On PROMELA_CALLORRETURNOF shift to state 19
-- On PROMELA_CALLOF shift to state 20
-- On guard shift to state 21
## Reductions:

State 17:
## Known stack suffix:
## PROMELA_LABEL
## LR(1) items:
guard -> PROMELA_LABEL . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production guard -> PROMELA_LABEL

State 18:
## Known stack suffix:
## PROMELA_FALSE
## LR(1) items:
guard -> PROMELA_FALSE . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production guard -> PROMELA_FALSE

State 19:
## Known stack suffix:
## PROMELA_CALLORRETURNOF
## LR(1) items:
guard -> PROMELA_CALLORRETURNOF . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production guard -> PROMELA_CALLORRETURNOF

State 20:
## Known stack suffix:
## PROMELA_CALLOF
## LR(1) items:
guard -> PROMELA_CALLOF . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production guard -> PROMELA_CALLOF

State 21:
## Known stack suffix:
## PROMELA_LPAREN guard
## LR(1) items:
guard -> guard . PROMELA_AND guard [ PROMELA_RPAREN PROMELA_OR PROMELA_AND ]
guard -> guard . PROMELA_OR guard [ PROMELA_RPAREN PROMELA_OR PROMELA_AND ]
guard -> PROMELA_LPAREN guard . PROMELA_RPAREN [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
-- On PROMELA_RPAREN shift to state 22
-- On PROMELA_OR shift to state 23
-- On PROMELA_AND shift to state 25
## Reductions:

State 22:
## Known stack suffix:
## PROMELA_LPAREN guard PROMELA_RPAREN
## LR(1) items:
guard -> PROMELA_LPAREN guard PROMELA_RPAREN . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production guard -> PROMELA_LPAREN guard PROMELA_RPAREN

State 23:
## Known stack suffix:
## guard PROMELA_OR
## LR(1) items:
guard -> guard PROMELA_OR . guard [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
-- On PROMELA_TRUE shift to state 13
-- On PROMELA_RETURNOF shift to state 14
-- On PROMELA_NOT shift to state 15
-- On PROMELA_LPAREN shift to state 16
-- On PROMELA_LABEL shift to state 17
-- On PROMELA_FALSE shift to state 18
-- On PROMELA_CALLORRETURNOF shift to state 19
-- On PROMELA_CALLOF shift to state 20
-- On guard shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## guard PROMELA_OR guard
## LR(1) items:
guard -> guard . PROMELA_AND guard [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
guard -> guard . PROMELA_OR guard [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
guard -> guard PROMELA_OR guard . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
-- On PROMELA_OR shift to state 23
-- On PROMELA_AND shift to state 25
## Reductions:
-- On PROMELA_RPAREN PROMELA_RIGHT_ARROW
--   reduce production guard -> guard PROMELA_OR guard

State 25:
## Known stack suffix:
## guard PROMELA_AND
## LR(1) items:
guard -> guard PROMELA_AND . guard [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
-- On PROMELA_TRUE shift to state 13
-- On PROMELA_RETURNOF shift to state 14
-- On PROMELA_NOT shift to state 15
-- On PROMELA_LPAREN shift to state 16
-- On PROMELA_LABEL shift to state 17
-- On PROMELA_FALSE shift to state 18
-- On PROMELA_CALLORRETURNOF shift to state 19
-- On PROMELA_CALLOF shift to state 20
-- On guard shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## guard PROMELA_AND guard
## LR(1) items:
guard -> guard . PROMELA_AND guard [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
guard -> guard PROMELA_AND guard . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
guard -> guard . PROMELA_OR guard [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
-- On PROMELA_AND shift to state 25
## Reductions:
-- On PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR
--   reduce production guard -> guard PROMELA_AND guard

State 27:
## Known stack suffix:
## PROMELA_NOT guard
## LR(1) items:
guard -> PROMELA_NOT guard . [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
guard -> guard . PROMELA_AND guard [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
guard -> guard . PROMELA_OR guard [ PROMELA_RPAREN PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production guard -> PROMELA_NOT guard

State 28:
## Known stack suffix:
## PROMELA_IF PROMELA_DOUBLE_COLON PROMELA_FALSE
## LR(1) items:
guard -> PROMELA_FALSE . [ PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
state_body -> PROMELA_IF PROMELA_DOUBLE_COLON PROMELA_FALSE . PROMELA_FI [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
-- On PROMELA_FI shift to state 29
## Reductions:
-- On PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND
--   reduce production guard -> PROMELA_FALSE

State 29:
## Known stack suffix:
## PROMELA_IF PROMELA_DOUBLE_COLON PROMELA_FALSE PROMELA_FI
## LR(1) items:
state_body -> PROMELA_IF PROMELA_DOUBLE_COLON PROMELA_FALSE PROMELA_FI . [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production state_body -> PROMELA_IF PROMELA_DOUBLE_COLON PROMELA_FALSE PROMELA_FI

State 30:
## Known stack suffix:
## PROMELA_DOUBLE_COLON guard
## LR(1) items:
guard -> guard . PROMELA_AND guard [ PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
guard -> guard . PROMELA_OR guard [ PROMELA_RIGHT_ARROW PROMELA_OR PROMELA_AND ]
transition -> PROMELA_DOUBLE_COLON guard . PROMELA_RIGHT_ARROW PROMELA_GOTO PROMELA_LABEL [ PROMELA_FI PROMELA_DOUBLE_COLON ]
## Transitions:
-- On PROMELA_RIGHT_ARROW shift to state 31
-- On PROMELA_OR shift to state 23
-- On PROMELA_AND shift to state 25
## Reductions:

State 31:
## Known stack suffix:
## PROMELA_DOUBLE_COLON guard PROMELA_RIGHT_ARROW
## LR(1) items:
transition -> PROMELA_DOUBLE_COLON guard PROMELA_RIGHT_ARROW . PROMELA_GOTO PROMELA_LABEL [ PROMELA_FI PROMELA_DOUBLE_COLON ]
## Transitions:
-- On PROMELA_GOTO shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## PROMELA_DOUBLE_COLON guard PROMELA_RIGHT_ARROW PROMELA_GOTO
## LR(1) items:
transition -> PROMELA_DOUBLE_COLON guard PROMELA_RIGHT_ARROW PROMELA_GOTO . PROMELA_LABEL [ PROMELA_FI PROMELA_DOUBLE_COLON ]
## Transitions:
-- On PROMELA_LABEL shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## PROMELA_DOUBLE_COLON guard PROMELA_RIGHT_ARROW PROMELA_GOTO PROMELA_LABEL
## LR(1) items:
transition -> PROMELA_DOUBLE_COLON guard PROMELA_RIGHT_ARROW PROMELA_GOTO PROMELA_LABEL . [ PROMELA_FI PROMELA_DOUBLE_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production transition -> PROMELA_DOUBLE_COLON guard PROMELA_RIGHT_ARROW PROMELA_GOTO PROMELA_LABEL

State 34:
## Known stack suffix:
## PROMELA_IF transitions
## LR(1) items:
state_body -> PROMELA_IF transitions . PROMELA_FI [ PROMELA_SEMICOLON PROMELA_RBRACE ]
transitions -> transitions . transition [ PROMELA_FI PROMELA_DOUBLE_COLON ]
## Transitions:
-- On PROMELA_FI shift to state 35
-- On PROMELA_DOUBLE_COLON shift to state 36
-- On transition shift to state 37
## Reductions:

State 35:
## Known stack suffix:
## PROMELA_IF transitions PROMELA_FI
## LR(1) items:
state_body -> PROMELA_IF transitions PROMELA_FI . [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production state_body -> PROMELA_IF transitions PROMELA_FI

State 36:
## Known stack suffix:
## PROMELA_DOUBLE_COLON
## LR(1) items:
transition -> PROMELA_DOUBLE_COLON . guard PROMELA_RIGHT_ARROW PROMELA_GOTO PROMELA_LABEL [ PROMELA_FI PROMELA_DOUBLE_COLON ]
## Transitions:
-- On PROMELA_TRUE shift to state 13
-- On PROMELA_RETURNOF shift to state 14
-- On PROMELA_NOT shift to state 15
-- On PROMELA_LPAREN shift to state 16
-- On PROMELA_LABEL shift to state 17
-- On PROMELA_FALSE shift to state 18
-- On PROMELA_CALLORRETURNOF shift to state 19
-- On PROMELA_CALLOF shift to state 20
-- On guard shift to state 30
## Reductions:

State 37:
## Known stack suffix:
## transitions transition
## LR(1) items:
transitions -> transitions transition . [ PROMELA_FI PROMELA_DOUBLE_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production transitions -> transitions transition

State 38:
## Known stack suffix:
## transition
## LR(1) items:
transitions -> transition . [ PROMELA_FI PROMELA_DOUBLE_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production transitions -> transition

State 39:
## Known stack suffix:
## PROMELA_FALSE
## LR(1) items:
state_body -> PROMELA_FALSE . [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production state_body -> PROMELA_FALSE

State 40:
## Known stack suffix:
## state_labels state_body
## LR(1) items:
state -> state_labels state_body . [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production state -> state_labels state_body

State 41:
## Known stack suffix:
## states PROMELA_SEMICOLON state
## LR(1) items:
states -> states PROMELA_SEMICOLON state . [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production states -> states PROMELA_SEMICOLON state

State 42:
## Known stack suffix:
## label
## LR(1) items:
state_labels -> label . state_labels [ PROMELA_SKIP PROMELA_IF PROMELA_FALSE ]
state_labels -> label . [ PROMELA_SKIP PROMELA_IF PROMELA_FALSE ]
## Transitions:
-- On PROMELA_LABEL shift to state 3
-- On state_labels shift to state 43
-- On label shift to state 42
## Reductions:
-- On PROMELA_SKIP PROMELA_IF PROMELA_FALSE
--   reduce production state_labels -> label

State 43:
## Known stack suffix:
## label state_labels
## LR(1) items:
state_labels -> label state_labels . [ PROMELA_SKIP PROMELA_IF PROMELA_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production state_labels -> label state_labels

State 44:
## Known stack suffix:
## PROMELA_NEVER PROMELA_LBRACE states PROMELA_RBRACE
## LR(1) items:
promela -> PROMELA_NEVER PROMELA_LBRACE states PROMELA_RBRACE . EOF [ # ]
## Transitions:
-- On EOF shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## PROMELA_NEVER PROMELA_LBRACE states PROMELA_RBRACE EOF
## LR(1) items:
promela -> PROMELA_NEVER PROMELA_LBRACE states PROMELA_RBRACE EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production promela -> PROMELA_NEVER PROMELA_LBRACE states PROMELA_RBRACE EOF

State 46:
## Known stack suffix:
## state
## LR(1) items:
states -> state . [ PROMELA_SEMICOLON PROMELA_RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production states -> state

State 47:
## Known stack suffix:
## promela
## LR(1) items:
promela' -> promela . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept promela

