%{
open Promelaast
open Bool3

let observed_states=Hashtbl.create 1

let to_seq c =
  [{ condition = Some c; nested = [];
    min_rep = Some (PCst (Logic_ptree.IntConstant "1"));
    max_rep = Some (PCst (Logic_ptree.IntConstant "1"));
   }]

%}
%start promela
%token EOF
%token PROMELA_AND
%token <string> PROMELA_CALLOF
%token <string> PROMELA_CALLORRETURNOF
%token PROMELA_COLON
%token PROMELA_DOUBLE_COLON
%token PROMELA_FALSE
%token PROMELA_FI
%token PROMELA_GOTO
%token PROMELA_IF
%token <string> PROMELA_LABEL
%token PROMELA_LBRACE
%token PROMELA_LPAREN
%token PROMELA_NEVER
%token PROMELA_NOT
%token PROMELA_OR
%token PROMELA_RBRACE
%token <string> PROMELA_RETURNOF
%token PROMELA_RIGHT_ARROW
%token PROMELA_RPAREN
%token PROMELA_SEMICOLON
%token PROMELA_SKIP
%token PROMELA_TRUE
%right PROMELA_OR
%right PROMELA_AND
%nonassoc PROMELA_FALSE PROMELA_NOT PROMELA_TRUE
%type <Promelaast.parsed_automaton> promela
%%

promela:
  _1 = PROMELA_NEVER _2 = PROMELA_LBRACE _3 = states _4 = PROMELA_RBRACE _5 = EOF
    {                                                                 (
	    let states=
	      Hashtbl.fold (fun _ st l ->
		if st.acceptation=Undefined || st.init=Undefined then
		  begin
                    Aorai_option.abort
                      "Error: the state %s is used but never defined" st.name;
		  end;
		st::l
	      ) observed_states []
            in
            (states , _3)
	)}
| _1 = PROMELA_NEVER _2 = PROMELA_LBRACE _3 = states _4 = PROMELA_SEMICOLON _5 = PROMELA_RBRACE _6 = EOF
    {                               (
	      let states=
	        Hashtbl.fold (fun _ st l ->
		  if st.acceptation=Undefined || st.init=Undefined then
		    begin
                      Aorai_option.abort
                        "Error: the state %s is used but never defined" st.name;
		    end;
		  st::l
	        ) observed_states []
	      in
	      (states , _3) )}

states:
  _1 = states _2 = PROMELA_SEMICOLON _3 = state
    {                                         (
	    _1@_3
	  )}
| _1 = state
    {         ( _1 )}

state:
  _1 = state_labels _2 = state_body
    {                                  (
	  let (stl,trans)=_1 in
	  let (trl,force_final)=_2 in
	    if force_final then
	      begin
		List.iter (fun s ->
		  try
		    (Hashtbl.find observed_states s.name).acceptation <- True
		  with
		    | Not_found -> assert false
                (* This state has to be in the hashtable -- by construction *)
		) stl
	      end;
	    if trl=[] then
	      trans
	    else
	      let tr_list=
		List.fold_left (fun l1 (cr,stop_st)  ->
		  List.fold_left (fun l2 st ->
		    {start=st;stop=stop_st;cross=Seq (to_seq cr);numt=(-1)}::l2
		  ) l1 stl
		) [] trl
	      in
	        (List.rev tr_list)@trans
	)}

state_labels:
  _1 = label _2 = state_labels
    {                             (
	    let (stl1,trl1)=_1 in
	    let (stl2,trl2)=_2 in
	      (stl1@stl2,trl1@trl2)
	)}
| _1 = label
    {         ( _1 )}

label:
  _1 = PROMELA_LABEL _2 = PROMELA_COLON
    {                                      (
	  begin
    (* Step 0 : trans is the set of new transitions and old is the description of the current state *)
	    let trans = ref [] in
	    (* Promela Label is a state. According to its name, we will try to give him its properties (init / accept) *)
	    (* Firstly, if this state is still referenced, then we get it back. Else, we make a new "empty" state *)
	    let old=
	      try
		Hashtbl.find observed_states _1
	      with
		| Not_found ->
		    let s = Data_for_aorai.new_state _1 in
		    Hashtbl.add observed_states _1 s;
		    s
	    in
            (* Step 1 : setting up the acceptance status *)
	    (* Default status : Non acceptation state *)
 	    old.acceptation <- False;

	    (* Accept_all state means acceptance state with a
               reflexive transition without cross condition *)
	    (* This case is not exclusive with the following.
               Acceptation status is set in this last. *)
	    if (String.length _1>=10) &&
              (String.compare (String.sub _1 0 10) "accept_all")=0
            then
	      trans:=
                {start=old;stop=old;cross=Seq (to_seq PTrue);numt=(-1)} ::
                !trans;
	    (* If the name includes accept then
               this state is an acceptation one. *)
	    if (String.length _1>=7) &&
              (String.compare (String.sub _1 0 7) "accept_")=0
            then
	      old.acceptation <- True;

            (* Step 2 : setting up the init status *)
	    (* If the state name ended with "_init" then
               it is an initial state. Else, it is not. *)
	    if (String.length _1>=5) &&
              (String.compare (String.sub _1 ((String.length _1)-5) 5)
                 "_init" ) = 0
	    then
	      old.init <- True
	    else
	      old.init <- False;
	    ([old],!trans)
	  end
	)}

state_body:
  _1 = PROMELA_IF _2 = transitions _3 = PROMELA_FI
    {                                            ( (_2,false) )}
| _1 = PROMELA_SKIP
    {                ( ([],false) )}
| _1 = PROMELA_FALSE
    {                 ( ([],true) )}
| _1 = PROMELA_IF _2 = PROMELA_DOUBLE_COLON _3 = PROMELA_FALSE _4 = PROMELA_FI
    {                                                            ( ([],true) )}

transitions:
  _1 = transitions _2 = transition
    {                                 ( _1@[_2] )}
| _1 = transition
    {              ( [_1] )}

transition:
  _1 = PROMELA_DOUBLE_COLON _2 = guard _3 = PROMELA_RIGHT_ARROW _4 = PROMELA_GOTO _5 = PROMELA_LABEL
    {                                                                                    (
	  let s=
	    try
	      Hashtbl.find observed_states _5
	    with
		Not_found ->
		  let r = Data_for_aorai.new_state _5 in
		  Hashtbl.add observed_states _5 r;
		  r
	  in
	  (_2,s)
	)}

guard:
  _1 = PROMELA_CALLORRETURNOF
    {                          ( POr(PCall (_1,None), PReturn _1) )}
| _1 = PROMELA_CALLOF
    {                         ( PCall (_1,None) )}
| _1 = PROMELA_RETURNOF
    {                           ( PReturn _1 )}
| _1 = PROMELA_TRUE
    {                ( PTrue )}
| _1 = PROMELA_FALSE
    {                 ( PFalse )}
| _1 = PROMELA_NOT _2 = guard
    {                     ( PNot _2 )}
| _1 = guard _2 = PROMELA_AND _3 = guard
    {                           ( PAnd (_1,_3) )}
| _1 = guard _2 = PROMELA_OR _3 = guard
    {                          ( POr (_1,_3) )}
| _1 = PROMELA_LPAREN _2 = guard _3 = PROMELA_RPAREN
    {                                       ( _2 )}
| _1 = PROMELA_LABEL
    {            ( PRel (Logic_ptree.Neq,PVar _1,PCst(Logic_ptree.IntConstant "0")) )}

%%
