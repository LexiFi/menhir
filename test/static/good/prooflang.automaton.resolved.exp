State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 144
-- On main shift to state 146
## Reductions:

State 1:
## Known stack suffix:
## UNFINISHED
## LR(1) items:
step -> UNFINISHED . [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> UNFINISHED

State 2:
## Known stack suffix:
## TRIVIAL
## LR(1) items:
step -> TRIVIAL . [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> TRIVIAL

State 3:
## Known stack suffix:
## SUBGOALS
## LR(1) items:
step -> SUBGOALS . nafos IN steplist TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 6
-- On nafos shift to state 38
-- On nafo shift to state 141
## Reductions:

State 4:
## Known stack suffix:
## PUNKT
## LR(1) items:
name -> PUNKT . [ QUOT KOMMA DOPPPEQ DOPPELPUNKT APOST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> PUNKT

State 5:
## Known stack suffix:
## IDENT
## LR(1) items:
name -> IDENT . [ QUOT KOMMA DOPPPEQ DOPPELPUNKT APOST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> IDENT

State 6:
## Known stack suffix:
## name
## LR(1) items:
nafo -> name . DOPPELPUNKT formula [ SEMIKOLON KOMMA IN FROM BY ]
## Transitions:
-- On DOPPELPUNKT shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## name DOPPELPUNKT
## LR(1) items:
nafo -> name DOPPELPUNKT . formula [ SEMIKOLON PROVE KOMMA IN FROM BY ]
## Transitions:
-- On PUNKT shift to state 8
-- On LPARAN shift to state 9
-- On term shift to state 36
-- On formula shift to state 37
## Reductions:

State 8:
## Known stack suffix:
## PUNKT
## LR(1) items:
formula -> PUNKT . [ SEMIKOLON PROVE KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> PUNKT

State 9:
## Known stack suffix:
## LPARAN
## LR(1) items:
term -> LPARAN . APOST var APOST RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
term -> LPARAN . QUOT const QUOT RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
term -> LPARAN . term term RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
term -> LPARAN . LAM var DOPPELPUNKT complextype PUNKT term RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On QUOT shift to state 10
-- On LPARAN shift to state 9
-- On LAM shift to state 15
-- On APOST shift to state 29
-- On term shift to state 33
## Reductions:

State 10:
## Known stack suffix:
## LPARAN QUOT
## LR(1) items:
term -> LPARAN QUOT . const QUOT RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 11
-- On const shift to state 12
## Reductions:

State 11:
## Known stack suffix:
## name
## LR(1) items:
const -> name . [ QUOT DOPPPEQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const -> name

State 12:
## Known stack suffix:
## LPARAN QUOT const
## LR(1) items:
term -> LPARAN QUOT const . QUOT RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On QUOT shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## LPARAN QUOT const QUOT
## LR(1) items:
term -> LPARAN QUOT const QUOT . RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On RPARAN shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## LPARAN QUOT const QUOT RPARAN
## LR(1) items:
term -> LPARAN QUOT const QUOT RPARAN . [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> LPARAN QUOT const QUOT RPARAN

State 15:
## Known stack suffix:
## LPARAN LAM
## LR(1) items:
term -> LPARAN LAM . var DOPPELPUNKT complextype PUNKT term RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On var shift to state 16
-- On name shift to state 28
## Reductions:

State 16:
## Known stack suffix:
## LPARAN LAM var
## LR(1) items:
term -> LPARAN LAM var . DOPPELPUNKT complextype PUNKT term RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On DOPPELPUNKT shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## LPARAN LAM var DOPPELPUNKT
## LR(1) items:
term -> LPARAN LAM var DOPPELPUNKT . complextype PUNKT term RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On LPARAN shift to state 18
-- On IDENT shift to state 19
-- On complextype shift to state 24
## Reductions:

State 18:
## Known stack suffix:
## LPARAN
## LR(1) items:
complextype -> LPARAN . complextype PFEIL complextype RPARAN [ RPARAN PUNKT PROVE PFEIL KOMMA ]
## Transitions:
-- On LPARAN shift to state 18
-- On IDENT shift to state 19
-- On complextype shift to state 20
## Reductions:

State 19:
## Known stack suffix:
## IDENT
## LR(1) items:
complextype -> IDENT . [ RPARAN PUNKT PROVE PFEIL KOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production complextype -> IDENT

State 20:
## Known stack suffix:
## LPARAN complextype
## LR(1) items:
complextype -> LPARAN complextype . PFEIL complextype RPARAN [ RPARAN PUNKT PROVE PFEIL KOMMA ]
## Transitions:
-- On PFEIL shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## LPARAN complextype PFEIL
## LR(1) items:
complextype -> LPARAN complextype PFEIL . complextype RPARAN [ RPARAN PUNKT PROVE PFEIL KOMMA ]
## Transitions:
-- On LPARAN shift to state 18
-- On IDENT shift to state 19
-- On complextype shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## LPARAN complextype PFEIL complextype
## LR(1) items:
complextype -> LPARAN complextype PFEIL complextype . RPARAN [ RPARAN PUNKT PROVE PFEIL KOMMA ]
## Transitions:
-- On RPARAN shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## LPARAN complextype PFEIL complextype RPARAN
## LR(1) items:
complextype -> LPARAN complextype PFEIL complextype RPARAN . [ RPARAN PUNKT PROVE PFEIL KOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production complextype -> LPARAN complextype PFEIL complextype RPARAN

State 24:
## Known stack suffix:
## LPARAN LAM var DOPPELPUNKT complextype
## LR(1) items:
term -> LPARAN LAM var DOPPELPUNKT complextype . PUNKT term RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On PUNKT shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## LPARAN LAM var DOPPELPUNKT complextype PUNKT
## LR(1) items:
term -> LPARAN LAM var DOPPELPUNKT complextype PUNKT . term RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On LPARAN shift to state 9
-- On term shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## LPARAN LAM var DOPPELPUNKT complextype PUNKT term
## LR(1) items:
term -> LPARAN LAM var DOPPELPUNKT complextype PUNKT term . RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On RPARAN shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## LPARAN LAM var DOPPELPUNKT complextype PUNKT term RPARAN
## LR(1) items:
term -> LPARAN LAM var DOPPELPUNKT complextype PUNKT term RPARAN . [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> LPARAN LAM var DOPPELPUNKT complextype PUNKT term RPARAN

State 28:
## Known stack suffix:
## name
## LR(1) items:
var -> name . [ DOPPPEQ DOPPELPUNKT APOST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> name

State 29:
## Known stack suffix:
## LPARAN APOST
## LR(1) items:
term -> LPARAN APOST . var APOST RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On var shift to state 30
-- On name shift to state 28
## Reductions:

State 30:
## Known stack suffix:
## LPARAN APOST var
## LR(1) items:
term -> LPARAN APOST var . APOST RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On APOST shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## LPARAN APOST var APOST
## LR(1) items:
term -> LPARAN APOST var APOST . RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On RPARAN shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## LPARAN APOST var APOST RPARAN
## LR(1) items:
term -> LPARAN APOST var APOST RPARAN . [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> LPARAN APOST var APOST RPARAN

State 33:
## Known stack suffix:
## LPARAN term
## LR(1) items:
term -> LPARAN term . term RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On LPARAN shift to state 9
-- On term shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LPARAN term term
## LR(1) items:
term -> LPARAN term term . RPARAN [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
-- On RPARAN shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## LPARAN term term RPARAN
## LR(1) items:
term -> LPARAN term term RPARAN . [ SEMIKOLON RPARAN PROVE LPARAN KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> LPARAN term term RPARAN

State 36:
## Known stack suffix:
## term
## LR(1) items:
formula -> term . [ SEMIKOLON PROVE KOMMA IN FROM DOPPELPUNKT BY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> term

State 37:
## Known stack suffix:
## name DOPPELPUNKT formula
## LR(1) items:
nafo -> name DOPPELPUNKT formula . [ SEMIKOLON PROVE KOMMA IN FROM BY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nafo -> name DOPPELPUNKT formula

State 38:
## Known stack suffix:
## SUBGOALS nafos
## LR(1) items:
step -> SUBGOALS nafos . IN steplist TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On IN shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## SUBGOALS nafos IN
## LR(1) items:
step -> SUBGOALS nafos IN . steplist TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On steplist shift to state 131
-- On step shift to state 138
## Reductions:

State 40:
## Known stack suffix:
## OR
## LR(1) items:
step -> OR . LPARAN orsteps RPARAN SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On LPARAN shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## OR LPARAN
## LR(1) items:
step -> OR LPARAN . orsteps RPARAN SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 124
-- On orsteps shift to state 127
## Reductions:

State 42:
## Known stack suffix:
## FACT
## LR(1) items:
step -> FACT . nafo FROM reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 6
-- On nafo shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## FACT nafo
## LR(1) items:
step -> FACT nafo . FROM reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On FROM shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## FACT nafo FROM
## LR(1) items:
step -> FACT nafo FROM . reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On LPARAN shift to state 45
-- On reflist shift to state 54
-- On ref shift to state 102
## Reductions:

State 45:
## Known stack suffix:
## LPARAN
## LR(1) items:
ref -> LPARAN . name KOMMA formula KOMMA occurence RPARAN [ SEMIKOLON KOMMA ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## LPARAN name
## LR(1) items:
ref -> LPARAN name . KOMMA formula KOMMA occurence RPARAN [ SEMIKOLON KOMMA ]
## Transitions:
-- On KOMMA shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## LPARAN name KOMMA
## LR(1) items:
ref -> LPARAN name KOMMA . formula KOMMA occurence RPARAN [ SEMIKOLON KOMMA ]
## Transitions:
-- On PUNKT shift to state 8
-- On LPARAN shift to state 9
-- On term shift to state 36
-- On formula shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## LPARAN name KOMMA formula
## LR(1) items:
ref -> LPARAN name KOMMA formula . KOMMA occurence RPARAN [ SEMIKOLON KOMMA ]
## Transitions:
-- On KOMMA shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## LPARAN name KOMMA formula KOMMA
## LR(1) items:
ref -> LPARAN name KOMMA formula KOMMA . occurence RPARAN [ SEMIKOLON KOMMA ]
## Transitions:
-- On PUNKT shift to state 50
-- On INTLIST shift to state 51
-- On occurence shift to state 52
## Reductions:

State 50:
## Known stack suffix:
## PUNKT
## LR(1) items:
occurence -> PUNKT . [ RPARAN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production occurence -> PUNKT

State 51:
## Known stack suffix:
## INTLIST
## LR(1) items:
occurence -> INTLIST . [ RPARAN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production occurence -> INTLIST

State 52:
## Known stack suffix:
## LPARAN name KOMMA formula KOMMA occurence
## LR(1) items:
ref -> LPARAN name KOMMA formula KOMMA occurence . RPARAN [ SEMIKOLON KOMMA ]
## Transitions:
-- On RPARAN shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LPARAN name KOMMA formula KOMMA occurence RPARAN
## LR(1) items:
ref -> LPARAN name KOMMA formula KOMMA occurence RPARAN . [ SEMIKOLON KOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ref -> LPARAN name KOMMA formula KOMMA occurence RPARAN

State 54:
## Known stack suffix:
## FACT nafo FROM reflist
## LR(1) items:
step -> FACT nafo FROM reflist . SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On SEMIKOLON shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## FACT nafo FROM reflist SEMIKOLON
## LR(1) items:
step -> FACT nafo FROM reflist SEMIKOLON . step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 123
## Reductions:

State 56:
## Known stack suffix:
## CASES
## LR(1) items:
step -> CASES . formulalist DOPPELPUNKT caseends TOOBTAIN nafo SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On PUNKT shift to state 8
-- On LPARAN shift to state 9
-- On term shift to state 36
-- On formulalist shift to state 57
-- On formula shift to state 120
## Reductions:

State 57:
## Known stack suffix:
## CASES formulalist
## LR(1) items:
step -> CASES formulalist . DOPPELPUNKT caseends TOOBTAIN nafo SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On DOPPELPUNKT shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## CASES formulalist DOPPELPUNKT
## LR(1) items:
step -> CASES formulalist DOPPELPUNKT . caseends TOOBTAIN nafo SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On CASE shift to state 59
-- On caseends shift to state 113
## Reductions:

State 59:
## Known stack suffix:
## CASE
## LR(1) items:
caseends -> CASE . name DOPPELPUNKT formula DOPPELPUNKT step END [ TOOBTAIN KOMMA ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## CASE name
## LR(1) items:
caseends -> CASE name . DOPPELPUNKT formula DOPPELPUNKT step END [ TOOBTAIN KOMMA ]
## Transitions:
-- On DOPPELPUNKT shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## CASE name DOPPELPUNKT
## LR(1) items:
caseends -> CASE name DOPPELPUNKT . formula DOPPELPUNKT step END [ TOOBTAIN KOMMA ]
## Transitions:
-- On PUNKT shift to state 8
-- On LPARAN shift to state 9
-- On term shift to state 36
-- On formula shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## CASE name DOPPELPUNKT formula
## LR(1) items:
caseends -> CASE name DOPPELPUNKT formula . DOPPELPUNKT step END [ TOOBTAIN KOMMA ]
## Transitions:
-- On DOPPELPUNKT shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## CASE name DOPPELPUNKT formula DOPPELPUNKT
## LR(1) items:
caseends -> CASE name DOPPELPUNKT formula DOPPELPUNKT . step END [ TOOBTAIN KOMMA ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 111
## Reductions:

State 64:
## Known stack suffix:
## ASSUME
## LR(1) items:
step -> ASSUME . hyps PROVE nafo IN step TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On var shift to state 65
-- On name shift to state 70
-- On nafo shift to state 71
-- On hyps shift to state 72
-- On hyp shift to state 105
-- On const shift to state 108
## Reductions:

State 65:
## Known stack suffix:
## var
## LR(1) items:
hyp -> var . DOPPELPUNKT hyptyp [ PROVE KOMMA ]
## Transitions:
-- On DOPPELPUNKT shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## var DOPPELPUNKT
## LR(1) items:
hyp -> var DOPPELPUNKT . hyptyp [ PROVE KOMMA ]
## Transitions:
-- On NOTYPE shift to state 67
-- On LPARAN shift to state 18
-- On IDENT shift to state 19
-- On hyptyp shift to state 68
-- On complextype shift to state 69
## Reductions:

State 67:
## Known stack suffix:
## NOTYPE
## LR(1) items:
hyptyp -> NOTYPE . [ PROVE KOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hyptyp -> NOTYPE

State 68:
## Known stack suffix:
## var DOPPELPUNKT hyptyp
## LR(1) items:
hyp -> var DOPPELPUNKT hyptyp . [ PROVE KOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hyp -> var DOPPELPUNKT hyptyp

State 69:
## Known stack suffix:
## complextype
## LR(1) items:
hyptyp -> complextype . [ PROVE KOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hyptyp -> complextype

State 70:
## Known stack suffix:
## name
## LR(1) items:
const -> name . [ DOPPELPUNKT ]
nafo -> name . DOPPELPUNKT formula [ PROVE KOMMA ]
var -> name . [ DOPPELPUNKT ]
## Transitions:
-- On DOPPELPUNKT shift to state 7
## Reductions:

State 71:
## Known stack suffix:
## nafo
## LR(1) items:
hyp -> nafo . [ PROVE KOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hyp -> nafo

State 72:
## Known stack suffix:
## ASSUME hyps
## LR(1) items:
step -> ASSUME hyps . PROVE nafo IN step TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On PROVE shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## ASSUME hyps PROVE
## LR(1) items:
step -> ASSUME hyps PROVE . nafo IN step TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 6
-- On nafo shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## ASSUME hyps PROVE nafo
## LR(1) items:
step -> ASSUME hyps PROVE nafo . IN step TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On IN shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## ASSUME hyps PROVE nafo IN
## LR(1) items:
step -> ASSUME hyps PROVE nafo IN . step TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 95
## Reductions:

State 76:
## Known stack suffix:
## ASSIGN
## LR(1) items:
step -> ASSIGN . subst SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
step -> ASSIGN . abbrv SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On LPARAN shift to state 77
-- On subst shift to state 89
-- On abbrv shift to state 92
## Reductions:

State 77:
## Known stack suffix:
## LPARAN
## LR(1) items:
abbrv -> LPARAN . LET CONST const DOPPPEQ term RPARAN [ SEMIKOLON ]
subst -> LPARAN . LET VAR var DOPPPEQ term RPARAN [ SEMIKOLON ]
## Transitions:
-- On LET shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## LPARAN LET
## LR(1) items:
abbrv -> LPARAN LET . CONST const DOPPPEQ term RPARAN [ SEMIKOLON ]
subst -> LPARAN LET . VAR var DOPPPEQ term RPARAN [ SEMIKOLON ]
## Transitions:
-- On VAR shift to state 79
-- On CONST shift to state 84
## Reductions:

State 79:
## Known stack suffix:
## LPARAN LET VAR
## LR(1) items:
subst -> LPARAN LET VAR . var DOPPPEQ term RPARAN [ SEMIKOLON ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On var shift to state 80
-- On name shift to state 28
## Reductions:

State 80:
## Known stack suffix:
## LPARAN LET VAR var
## LR(1) items:
subst -> LPARAN LET VAR var . DOPPPEQ term RPARAN [ SEMIKOLON ]
## Transitions:
-- On DOPPPEQ shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## LPARAN LET VAR var DOPPPEQ
## LR(1) items:
subst -> LPARAN LET VAR var DOPPPEQ . term RPARAN [ SEMIKOLON ]
## Transitions:
-- On LPARAN shift to state 9
-- On term shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## LPARAN LET VAR var DOPPPEQ term
## LR(1) items:
subst -> LPARAN LET VAR var DOPPPEQ term . RPARAN [ SEMIKOLON ]
## Transitions:
-- On RPARAN shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## LPARAN LET VAR var DOPPPEQ term RPARAN
## LR(1) items:
subst -> LPARAN LET VAR var DOPPPEQ term RPARAN . [ SEMIKOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subst -> LPARAN LET VAR var DOPPPEQ term RPARAN

State 84:
## Known stack suffix:
## LPARAN LET CONST
## LR(1) items:
abbrv -> LPARAN LET CONST . const DOPPPEQ term RPARAN [ SEMIKOLON ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 11
-- On const shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## LPARAN LET CONST const
## LR(1) items:
abbrv -> LPARAN LET CONST const . DOPPPEQ term RPARAN [ SEMIKOLON ]
## Transitions:
-- On DOPPPEQ shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## LPARAN LET CONST const DOPPPEQ
## LR(1) items:
abbrv -> LPARAN LET CONST const DOPPPEQ . term RPARAN [ SEMIKOLON ]
## Transitions:
-- On LPARAN shift to state 9
-- On term shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## LPARAN LET CONST const DOPPPEQ term
## LR(1) items:
abbrv -> LPARAN LET CONST const DOPPPEQ term . RPARAN [ SEMIKOLON ]
## Transitions:
-- On RPARAN shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## LPARAN LET CONST const DOPPPEQ term RPARAN
## LR(1) items:
abbrv -> LPARAN LET CONST const DOPPPEQ term RPARAN . [ SEMIKOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production abbrv -> LPARAN LET CONST const DOPPPEQ term RPARAN

State 89:
## Known stack suffix:
## ASSIGN subst
## LR(1) items:
step -> ASSIGN subst . SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On SEMIKOLON shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## ASSIGN subst SEMIKOLON
## LR(1) items:
step -> ASSIGN subst SEMIKOLON . step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## ASSIGN subst SEMIKOLON step
## LR(1) items:
step -> ASSIGN subst SEMIKOLON step . [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> ASSIGN subst SEMIKOLON step

State 92:
## Known stack suffix:
## ASSIGN abbrv
## LR(1) items:
step -> ASSIGN abbrv . SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On SEMIKOLON shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## ASSIGN abbrv SEMIKOLON
## LR(1) items:
step -> ASSIGN abbrv SEMIKOLON . step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## ASSIGN abbrv SEMIKOLON step
## LR(1) items:
step -> ASSIGN abbrv SEMIKOLON step . [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> ASSIGN abbrv SEMIKOLON step

State 95:
## Known stack suffix:
## ASSUME hyps PROVE nafo IN step
## LR(1) items:
step -> ASSUME hyps PROVE nafo IN step . TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On TOOBTAIN shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## ASSUME hyps PROVE nafo IN step TOOBTAIN
## LR(1) items:
step -> ASSUME hyps PROVE nafo IN step TOOBTAIN . nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 6
-- On nafo shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## ASSUME hyps PROVE nafo IN step TOOBTAIN nafo
## LR(1) items:
step -> ASSUME hyps PROVE nafo IN step TOOBTAIN nafo . BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On BY shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## ASSUME hyps PROVE nafo IN step TOOBTAIN nafo BY
## LR(1) items:
step -> ASSUME hyps PROVE nafo IN step TOOBTAIN nafo BY . reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On LPARAN shift to state 45
-- On reflist shift to state 99
-- On ref shift to state 102
## Reductions:

State 99:
## Known stack suffix:
## ASSUME hyps PROVE nafo IN step TOOBTAIN nafo BY reflist
## LR(1) items:
step -> ASSUME hyps PROVE nafo IN step TOOBTAIN nafo BY reflist . SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On SEMIKOLON shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## ASSUME hyps PROVE nafo IN step TOOBTAIN nafo BY reflist SEMIKOLON
## LR(1) items:
step -> ASSUME hyps PROVE nafo IN step TOOBTAIN nafo BY reflist SEMIKOLON . step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## ASSUME hyps PROVE nafo IN step TOOBTAIN nafo BY reflist SEMIKOLON step
## LR(1) items:
step -> ASSUME hyps PROVE nafo IN step TOOBTAIN nafo BY reflist SEMIKOLON step . [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> ASSUME hyps PROVE nafo IN step TOOBTAIN nafo BY reflist SEMIKOLON step

State 102:
## Known stack suffix:
## ref
## LR(1) items:
reflist -> ref . [ SEMIKOLON ]
reflist -> ref . KOMMA reflist [ SEMIKOLON ]
## Transitions:
-- On KOMMA shift to state 103
## Reductions:
-- On SEMIKOLON
--   reduce production reflist -> ref

State 103:
## Known stack suffix:
## ref KOMMA
## LR(1) items:
reflist -> ref KOMMA . reflist [ SEMIKOLON ]
## Transitions:
-- On LPARAN shift to state 45
-- On reflist shift to state 104
-- On ref shift to state 102
## Reductions:

State 104:
## Known stack suffix:
## ref KOMMA reflist
## LR(1) items:
reflist -> ref KOMMA reflist . [ SEMIKOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reflist -> ref KOMMA reflist

State 105:
## Known stack suffix:
## hyp
## LR(1) items:
hyps -> hyp . [ PROVE ]
hyps -> hyp . KOMMA hyps [ PROVE ]
## Transitions:
-- On KOMMA shift to state 106
## Reductions:
-- On PROVE
--   reduce production hyps -> hyp

State 106:
## Known stack suffix:
## hyp KOMMA
## LR(1) items:
hyps -> hyp KOMMA . hyps [ PROVE ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On var shift to state 65
-- On name shift to state 70
-- On nafo shift to state 71
-- On hyps shift to state 107
-- On hyp shift to state 105
-- On const shift to state 108
## Reductions:

State 107:
## Known stack suffix:
## hyp KOMMA hyps
## LR(1) items:
hyps -> hyp KOMMA hyps . [ PROVE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hyps -> hyp KOMMA hyps

State 108:
## Known stack suffix:
## const
## LR(1) items:
hyp -> const . DOPPELPUNKT hyptyp [ PROVE KOMMA ]
## Transitions:
-- On DOPPELPUNKT shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## const DOPPELPUNKT
## LR(1) items:
hyp -> const DOPPELPUNKT . hyptyp [ PROVE KOMMA ]
## Transitions:
-- On NOTYPE shift to state 67
-- On LPARAN shift to state 18
-- On IDENT shift to state 19
-- On hyptyp shift to state 110
-- On complextype shift to state 69
## Reductions:

State 110:
## Known stack suffix:
## const DOPPELPUNKT hyptyp
## LR(1) items:
hyp -> const DOPPELPUNKT hyptyp . [ PROVE KOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hyp -> const DOPPELPUNKT hyptyp

State 111:
## Known stack suffix:
## CASE name DOPPELPUNKT formula DOPPELPUNKT step
## LR(1) items:
caseends -> CASE name DOPPELPUNKT formula DOPPELPUNKT step . END [ TOOBTAIN KOMMA ]
## Transitions:
-- On END shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## CASE name DOPPELPUNKT formula DOPPELPUNKT step END
## LR(1) items:
caseends -> CASE name DOPPELPUNKT formula DOPPELPUNKT step END . [ TOOBTAIN KOMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production caseends -> CASE name DOPPELPUNKT formula DOPPELPUNKT step END

State 113:
## Known stack suffix:
## CASES formulalist DOPPELPUNKT caseends
## LR(1) items:
caseends -> caseends . KOMMA caseends [ TOOBTAIN KOMMA ]
step -> CASES formulalist DOPPELPUNKT caseends . TOOBTAIN nafo SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On TOOBTAIN shift to state 114
-- On KOMMA shift to state 118
## Reductions:

State 114:
## Known stack suffix:
## CASES formulalist DOPPELPUNKT caseends TOOBTAIN
## LR(1) items:
step -> CASES formulalist DOPPELPUNKT caseends TOOBTAIN . nafo SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 6
-- On nafo shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## CASES formulalist DOPPELPUNKT caseends TOOBTAIN nafo
## LR(1) items:
step -> CASES formulalist DOPPELPUNKT caseends TOOBTAIN nafo . SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On SEMIKOLON shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## CASES formulalist DOPPELPUNKT caseends TOOBTAIN nafo SEMIKOLON
## LR(1) items:
step -> CASES formulalist DOPPELPUNKT caseends TOOBTAIN nafo SEMIKOLON . step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## CASES formulalist DOPPELPUNKT caseends TOOBTAIN nafo SEMIKOLON step
## LR(1) items:
step -> CASES formulalist DOPPELPUNKT caseends TOOBTAIN nafo SEMIKOLON step . [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> CASES formulalist DOPPELPUNKT caseends TOOBTAIN nafo SEMIKOLON step

State 118:
## Known stack suffix:
## caseends KOMMA
## LR(1) items:
caseends -> caseends KOMMA . caseends [ TOOBTAIN KOMMA ]
## Transitions:
-- On CASE shift to state 59
-- On caseends shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## caseends KOMMA caseends
## LR(1) items:
caseends -> caseends . KOMMA caseends [ TOOBTAIN KOMMA ]
caseends -> caseends KOMMA caseends . [ TOOBTAIN KOMMA ]
## Transitions:
-- On KOMMA shift to state 118
## Reductions:
-- On TOOBTAIN
--   reduce production caseends -> caseends KOMMA caseends

State 120:
## Known stack suffix:
## formula
## LR(1) items:
formulalist -> formula . [ DOPPELPUNKT ]
formulalist -> formula . KOMMA formulalist [ DOPPELPUNKT ]
## Transitions:
-- On KOMMA shift to state 121
## Reductions:
-- On DOPPELPUNKT
--   reduce production formulalist -> formula

State 121:
## Known stack suffix:
## formula KOMMA
## LR(1) items:
formulalist -> formula KOMMA . formulalist [ DOPPELPUNKT ]
## Transitions:
-- On PUNKT shift to state 8
-- On LPARAN shift to state 9
-- On term shift to state 36
-- On formulalist shift to state 122
-- On formula shift to state 120
## Reductions:

State 122:
## Known stack suffix:
## formula KOMMA formulalist
## LR(1) items:
formulalist -> formula KOMMA formulalist . [ DOPPELPUNKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formulalist -> formula KOMMA formulalist

State 123:
## Known stack suffix:
## FACT nafo FROM reflist SEMIKOLON step
## LR(1) items:
step -> FACT nafo FROM reflist SEMIKOLON step . [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> FACT nafo FROM reflist SEMIKOLON step

State 124:
## Known stack suffix:
## step
## LR(1) items:
orsteps -> step . [ RPARAN ]
orsteps -> step . DOPPELSTRICH orsteps [ RPARAN ]
## Transitions:
-- On DOPPELSTRICH shift to state 125
## Reductions:
-- On RPARAN
--   reduce production orsteps -> step

State 125:
## Known stack suffix:
## step DOPPELSTRICH
## LR(1) items:
orsteps -> step DOPPELSTRICH . orsteps [ RPARAN ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 124
-- On orsteps shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## step DOPPELSTRICH orsteps
## LR(1) items:
orsteps -> step DOPPELSTRICH orsteps . [ RPARAN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production orsteps -> step DOPPELSTRICH orsteps

State 127:
## Known stack suffix:
## OR LPARAN orsteps
## LR(1) items:
step -> OR LPARAN orsteps . RPARAN SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On RPARAN shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## OR LPARAN orsteps RPARAN
## LR(1) items:
step -> OR LPARAN orsteps RPARAN . SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On SEMIKOLON shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## OR LPARAN orsteps RPARAN SEMIKOLON
## LR(1) items:
step -> OR LPARAN orsteps RPARAN SEMIKOLON . step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## OR LPARAN orsteps RPARAN SEMIKOLON step
## LR(1) items:
step -> OR LPARAN orsteps RPARAN SEMIKOLON step . [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> OR LPARAN orsteps RPARAN SEMIKOLON step

State 131:
## Known stack suffix:
## SUBGOALS nafos IN steplist
## LR(1) items:
step -> SUBGOALS nafos IN steplist . TOOBTAIN nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On TOOBTAIN shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## SUBGOALS nafos IN steplist TOOBTAIN
## LR(1) items:
step -> SUBGOALS nafos IN steplist TOOBTAIN . nafo BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 6
-- On nafo shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## SUBGOALS nafos IN steplist TOOBTAIN nafo
## LR(1) items:
step -> SUBGOALS nafos IN steplist TOOBTAIN nafo . BY reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On BY shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## SUBGOALS nafos IN steplist TOOBTAIN nafo BY
## LR(1) items:
step -> SUBGOALS nafos IN steplist TOOBTAIN nafo BY . reflist SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On LPARAN shift to state 45
-- On reflist shift to state 135
-- On ref shift to state 102
## Reductions:

State 135:
## Known stack suffix:
## SUBGOALS nafos IN steplist TOOBTAIN nafo BY reflist
## LR(1) items:
step -> SUBGOALS nafos IN steplist TOOBTAIN nafo BY reflist . SEMIKOLON step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On SEMIKOLON shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## SUBGOALS nafos IN steplist TOOBTAIN nafo BY reflist SEMIKOLON
## LR(1) items:
step -> SUBGOALS nafos IN steplist TOOBTAIN nafo BY reflist SEMIKOLON . step [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On step shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## SUBGOALS nafos IN steplist TOOBTAIN nafo BY reflist SEMIKOLON step
## LR(1) items:
step -> SUBGOALS nafos IN steplist TOOBTAIN nafo BY reflist SEMIKOLON step . [ TOOBTAIN RPARAN KOMMA EOF END DOPPELSTRICH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production step -> SUBGOALS nafos IN steplist TOOBTAIN nafo BY reflist SEMIKOLON step

State 138:
## Known stack suffix:
## step
## LR(1) items:
steplist -> step . [ TOOBTAIN ]
steplist -> step . KOMMA steplist [ TOOBTAIN ]
## Transitions:
-- On KOMMA shift to state 139
## Reductions:
-- On TOOBTAIN
--   reduce production steplist -> step

State 139:
## Known stack suffix:
## step KOMMA
## LR(1) items:
steplist -> step KOMMA . steplist [ TOOBTAIN ]
## Transitions:
-- On UNFINISHED shift to state 1
-- On TRIVIAL shift to state 2
-- On SUBGOALS shift to state 3
-- On OR shift to state 40
-- On FACT shift to state 42
-- On CASES shift to state 56
-- On ASSUME shift to state 64
-- On ASSIGN shift to state 76
-- On steplist shift to state 140
-- On step shift to state 138
## Reductions:

State 140:
## Known stack suffix:
## step KOMMA steplist
## LR(1) items:
steplist -> step KOMMA steplist . [ TOOBTAIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production steplist -> step KOMMA steplist

State 141:
## Known stack suffix:
## nafo
## LR(1) items:
nafos -> nafo . [ IN ]
nafos -> nafo . KOMMA nafo [ IN ]
## Transitions:
-- On KOMMA shift to state 142
## Reductions:
-- On IN
--   reduce production nafos -> nafo

State 142:
## Known stack suffix:
## nafo KOMMA
## LR(1) items:
nafos -> nafo KOMMA . nafo [ IN ]
## Transitions:
-- On PUNKT shift to state 4
-- On IDENT shift to state 5
-- On name shift to state 6
-- On nafo shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## nafo KOMMA nafo
## LR(1) items:
nafos -> nafo KOMMA nafo . [ IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nafos -> nafo KOMMA nafo

State 144:
## Known stack suffix:
## step
## LR(1) items:
main -> step . EOF [ # ]
## Transitions:
-- On EOF shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## step EOF
## LR(1) items:
main -> step EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> step EOF

State 146:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

