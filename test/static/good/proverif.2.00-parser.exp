Grammar has 26 nonterminal symbols, among which 2 start symbols.
Grammar has 35 terminal symbols.
Grammar has 85 productions.
nullable(ttermand) = false
nullable(trule) = false
nullable(treduc) = false
nullable(tfactformat) = false
nullable(tfact) = false
nullable(termseq) = true
nullable(termand) = false
nullable(term) = false
nullable(teqlist) = false
nullable(tall) = false
nullable(rule) = false
nullable(reduc) = false
nullable(options) = true
nullable(optint) = true
nullable(nevartype) = false
nullable(netermseq) = false
nullable(neidentseq) = false
nullable(neformatseq) = false
nullable(identseq) = true
nullable(formatseq) = true
nullable(format) = false
nullable(forallvartype) = true
nullable(factformat) = false
nullable(fact) = false
nullable(eqlist) = false
nullable(all) = false
first(ttermand) = LPAREN IDENT
first(trule) = LPAREN IDENT
first(treduc) = LPAREN IDENT FORALL
first(tfactformat) = IDENT
first(tfact) = LPAREN IDENT
first(termseq) = LPAREN IDENT
first(termand) = LPAREN IDENT
first(term) = LPAREN IDENT
first(teqlist) = LPAREN IDENT FORALL
first(tall) = TYPE SET QUERY PREDICATE NOUNIF NOT NAME FUN EQUATION ELIMTRUE CONST CLAUSES
first(rule) = LPAREN IDENT
first(reduc) = LPAREN IDENT
first(options) = LBRACKET
first(optint) = SLASH
first(nevartype) = IDENT
first(netermseq) = LPAREN IDENT
first(neidentseq) = IDENT
first(neformatseq) = STAR LPAREN IDENT
first(identseq) = IDENT
first(formatseq) = STAR LPAREN IDENT
first(format) = STAR LPAREN IDENT
first(forallvartype) = FORALL
first(factformat) = IDENT
first(fact) = LPAREN IDENT
first(eqlist) = LPAREN IDENT
first(all) = REDUCTION QUERY PREDICATE PARAM NOUNIF NOT FUN EQUATION ELIMTRUE DATA
minimal(ttermand) = (* 1 *) IDENT
minimal(trule) = (* 1 *) IDENT
minimal(treduc) = (* 2 *) IDENT DOT
minimal(tfactformat) = (* 3 *) IDENT LPAREN RPAREN
minimal(tfact) = (* 1 *) IDENT
minimal(termseq) = (* 0 *)
minimal(termand) = (* 2 *) IDENT COLON
minimal(term) = (* 1 *) IDENT
minimal(teqlist) = (* 3 *) IDENT EQUAL IDENT
minimal(tall) = (* 4 *) CLAUSES IDENT DOT EOF
minimal(rule) = (* 2 *) IDENT COLON
minimal(reduc) = (* 3 *) IDENT COLON DOT
minimal(options) = (* 0 *)
minimal(optint) = (* 0 *)
minimal(nevartype) = (* 3 *) IDENT COLON IDENT
minimal(netermseq) = (* 1 *) IDENT
minimal(neidentseq) = (* 1 *) IDENT
minimal(neformatseq) = (* 1 *) IDENT
minimal(identseq) = (* 0 *)
minimal(formatseq) = (* 0 *)
minimal(format) = (* 1 *) IDENT
minimal(forallvartype) = (* 0 *)
minimal(factformat) = (* 2 *) IDENT COLON
minimal(fact) = (* 2 *) IDENT COLON
minimal(eqlist) = (* 3 *) IDENT EQUAL IDENT
minimal(all) = (* 5 *) REDUCTION IDENT COLON DOT EOF
maximal(ttermand) = infinity
maximal(trule) = infinity
maximal(treduc) = infinity
maximal(tfactformat) = infinity
maximal(tfact) = infinity
maximal(termseq) = infinity
maximal(termand) = infinity
maximal(term) = infinity
maximal(teqlist) = infinity
maximal(tall) = infinity
maximal(rule) = infinity
maximal(reduc) = infinity
maximal(options) = infinity
maximal(optint) = 2
maximal(nevartype) = infinity
maximal(netermseq) = infinity
maximal(neidentseq) = infinity
maximal(neformatseq) = infinity
maximal(identseq) = infinity
maximal(formatseq) = infinity
maximal(format) = infinity
maximal(forallvartype) = infinity
maximal(factformat) = infinity
maximal(fact) = infinity
maximal(eqlist) = infinity
maximal(all) = infinity
follow(ttermand) = RED EQUIVEQ EQUIV
follow(trule) = SEMI DOT
follow(treduc) = EOF
follow(tfactformat) = SLASH DOT
follow(tfact) = WEDGE SEMI RED EQUIVEQ EQUIV DOT
follow(termseq) = WEDGE SEMI RPAREN RED RBRACKET EQUIVEQ EQUIV DOT
follow(termand) = RED EQUIVEQ EQUIV
follow(term) = WEDGE SEMI RPAREN RED RBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
follow(teqlist) = DOT
follow(tall) = #
follow(rule) = SEMI DOT
follow(reduc) = EOF
follow(options) = LPAREN IDENT FORALL DOT
follow(optint) = DOT
follow(nevartype) = SEMI
follow(netermseq) = WEDGE SEMI RPAREN RED RBRACKET EQUIVEQ EQUIV DOT
follow(neidentseq) = RPAREN RBRACKET DOT
follow(neformatseq) = SLASH RPAREN RBRACKET DOT
follow(identseq) = RPAREN DOT
follow(formatseq) = SLASH RPAREN RBRACKET DOT
follow(format) = SLASH RPAREN RBRACKET DOT COMMA
follow(forallvartype) = LPAREN IDENT
follow(factformat) = SLASH DOT
follow(fact) = WEDGE SEMI RED EQUIVEQ EQUIV DOT
follow(eqlist) = DOT
follow(all) = #
Built an LR(0) automaton with 260 states.
The grammar is not SLR(1) -- 4 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 260 states.
File "proverif.2.00-parser.mly", line 79, characters 0-5:
Warning: the precedence level assigned to DIFF is never useful.
File "proverif.2.00-parser.mly", line 80, characters 0-5:
Warning: the precedence level assigned to WEDGE is never useful.
67 out of 260 states have a default reduction.
The action table is 9360 entries; 654 non-zero; 509 compressed.
The action table occupies roughly 1112 bytes.
The goto table is 7280 entries; 155 non-zero; 415 compressed.
The goto table occupies roughly 920 bytes.
The error table occupies roughly 1208 bytes.
The default_reduction table occupies roughly 296 bytes.
The lhs table occupies roughly 120 bytes.
The trace table occupies roughly 8 bytes.
