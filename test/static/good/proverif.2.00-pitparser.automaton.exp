State 0:
## Known stack suffix:
##
## LR(1) items:
all' -> . all [ # ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 776
-- On all shift to state 784
## Reductions:
-- On PROCESS EQUIVALENCE
--   reduce production lib ->

State 1:
## Known stack suffix:
## WEAKSECRET
## LR(1) items:
lib -> WEAKSECRET . IDENT DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## WEAKSECRET IDENT
## LR(1) items:
lib -> WEAKSECRET IDENT . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## WEAKSECRET IDENT DOT
## LR(1) items:
lib -> WEAKSECRET IDENT DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 775
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 4:
## Known stack suffix:
## TYPE
## LR(1) items:
lib -> TYPE . IDENT options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## TYPE IDENT
## LR(1) items:
lib -> TYPE IDENT . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 12
## Reductions:
-- On DOT
--   reduce production options ->

State 6:
## Known stack suffix:
## LBRACKET
## LR(1) items:
options -> LBRACKET . neidentseq RBRACKET [ SEMI DOT ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 10
## Reductions:

State 7:
## Known stack suffix:
## IDENT
## LR(1) items:
neidentseq -> IDENT . COMMA neidentseq [ SEMI RBRACKET LBRACKET DOT COLON ]
neidentseq -> IDENT . [ SEMI RBRACKET LBRACKET DOT COLON ]
## Transitions:
-- On COMMA shift to state 8
## Reductions:
-- On SEMI RBRACKET LBRACKET DOT COLON
--   reduce production neidentseq -> IDENT

State 8:
## Known stack suffix:
## IDENT COMMA
## LR(1) items:
neidentseq -> IDENT COMMA . neidentseq [ SEMI RBRACKET LBRACKET DOT COLON ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## IDENT COMMA neidentseq
## LR(1) items:
neidentseq -> IDENT COMMA neidentseq . [ SEMI RBRACKET LBRACKET DOT COLON ]
## Transitions:
## Reductions:
-- On SEMI RBRACKET LBRACKET DOT COLON
--   reduce production neidentseq -> IDENT COMMA neidentseq

State 10:
## Known stack suffix:
## LBRACKET neidentseq
## LR(1) items:
options -> LBRACKET neidentseq . RBRACKET [ SEMI DOT ]
## Transitions:
-- On RBRACKET shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## LBRACKET neidentseq RBRACKET
## LR(1) items:
options -> LBRACKET neidentseq RBRACKET . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production options -> LBRACKET neidentseq RBRACKET

State 12:
## Known stack suffix:
## TYPE IDENT options
## LR(1) items:
lib -> TYPE IDENT options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## TYPE IDENT options DOT
## LR(1) items:
lib -> TYPE IDENT options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 774
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 14:
## Known stack suffix:
## TABLE
## LR(1) items:
lib -> TABLE . IDENT LPAREN typeidseq RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## TABLE IDENT
## LR(1) items:
lib -> TABLE IDENT . LPAREN typeidseq RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LPAREN shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## TABLE IDENT LPAREN
## LR(1) items:
lib -> TABLE IDENT LPAREN . typeidseq RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 19
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 17:
## Known stack suffix:
## IDENT
## LR(1) items:
typeid -> IDENT . [ YIELD SUCHTHAT SEMI RPAREN REPL REDUCTION PHASE OUT ORTEXT NEW LPAREN LET LEFTARROW LBRACKET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT COMMA BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD SUCHTHAT SEMI RPAREN REPL REDUCTION PHASE OUT ORTEXT NEW LPAREN LET LEFTARROW LBRACKET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT COMMA BARRIER BAR
--   reduce production typeid -> IDENT

State 18:
## Known stack suffix:
## CHANNEL
## LR(1) items:
typeid -> CHANNEL . [ YIELD SUCHTHAT SEMI RPAREN REPL REDUCTION PHASE OUT ORTEXT NEW LPAREN LET LEFTARROW LBRACKET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT COMMA BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD SUCHTHAT SEMI RPAREN REPL REDUCTION PHASE OUT ORTEXT NEW LPAREN LET LEFTARROW LBRACKET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT COMMA BARRIER BAR
--   reduce production typeid -> CHANNEL

State 19:
## Known stack suffix:
## TABLE IDENT LPAREN typeidseq
## LR(1) items:
lib -> TABLE IDENT LPAREN typeidseq . RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RPAREN shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## TABLE IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> TABLE IDENT LPAREN typeidseq RPAREN . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## TABLE IDENT LPAREN typeidseq RPAREN DOT
## LR(1) items:
lib -> TABLE IDENT LPAREN typeidseq RPAREN DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 773
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 22:
## Known stack suffix:
## SET
## LR(1) items:
lib -> SET . IDENT EQUAL IDENT DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> SET . IDENT EQUAL STRING DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> SET . IDENT EQUAL INT DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## SET IDENT
## LR(1) items:
lib -> SET IDENT . EQUAL IDENT DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> SET IDENT . EQUAL STRING DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> SET IDENT . EQUAL INT DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On EQUAL shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## SET IDENT EQUAL
## LR(1) items:
lib -> SET IDENT EQUAL . IDENT DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> SET IDENT EQUAL . STRING DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> SET IDENT EQUAL . INT DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On STRING shift to state 25
-- On INT shift to state 767
-- On IDENT shift to state 770
## Reductions:

State 25:
## Known stack suffix:
## SET IDENT EQUAL STRING
## LR(1) items:
lib -> SET IDENT EQUAL STRING . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## SET IDENT EQUAL STRING DOT
## LR(1) items:
lib -> SET IDENT EQUAL STRING DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 766
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 27:
## Known stack suffix:
## REDUCTION
## LR(1) items:
lib -> REDUCTION . treduc options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On FORALL shift to state 28
-- On treduc shift to state 36
-- On forallvartype shift to state 760
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallvartype ->

State 28:
## Known stack suffix:
## FORALL
## LR(1) items:
forallvartype -> FORALL . nevartype SEMI [ PROJECTION NOT LPAREN IDENT FAIL CHOICE ]
## Transitions:
-- On IDENT shift to state 29
-- On nevartype shift to state 34
## Reductions:

State 29:
## Known stack suffix:
## IDENT
## LR(1) items:
nevartype -> IDENT . COLON typeid COMMA nevartype [ SUCHTHAT SEMI ]
nevartype -> IDENT . COLON typeid [ SUCHTHAT SEMI ]
## Transitions:
-- On COLON shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
nevartype -> IDENT COLON . typeid COMMA nevartype [ SUCHTHAT SEMI ]
nevartype -> IDENT COLON . typeid [ SUCHTHAT SEMI ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## IDENT COLON typeid
## LR(1) items:
nevartype -> IDENT COLON typeid . COMMA nevartype [ SUCHTHAT SEMI ]
nevartype -> IDENT COLON typeid . [ SUCHTHAT SEMI ]
## Transitions:
-- On COMMA shift to state 32
## Reductions:
-- On SUCHTHAT SEMI
--   reduce production nevartype -> IDENT COLON typeid

State 32:
## Known stack suffix:
## IDENT COLON typeid COMMA
## LR(1) items:
nevartype -> IDENT COLON typeid COMMA . nevartype [ SUCHTHAT SEMI ]
## Transitions:
-- On IDENT shift to state 29
-- On nevartype shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## IDENT COLON typeid COMMA nevartype
## LR(1) items:
nevartype -> IDENT COLON typeid COMMA nevartype . [ SUCHTHAT SEMI ]
## Transitions:
## Reductions:
-- On SUCHTHAT SEMI
--   reduce production nevartype -> IDENT COLON typeid COMMA nevartype

State 34:
## Known stack suffix:
## FORALL nevartype
## LR(1) items:
forallvartype -> FORALL nevartype . SEMI [ PROJECTION NOT LPAREN IDENT FAIL CHOICE ]
## Transitions:
-- On SEMI shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## FORALL nevartype SEMI
## LR(1) items:
forallvartype -> FORALL nevartype SEMI . [ PROJECTION NOT LPAREN IDENT FAIL CHOICE ]
## Transitions:
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallvartype -> FORALL nevartype SEMI

State 36:
## Known stack suffix:
## REDUCTION treduc
## LR(1) items:
lib -> REDUCTION treduc . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 37
## Reductions:
-- On DOT
--   reduce production options ->

State 37:
## Known stack suffix:
## REDUCTION treduc options
## LR(1) items:
lib -> REDUCTION treduc options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## REDUCTION treduc options DOT
## LR(1) items:
lib -> REDUCTION treduc options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 759
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 39:
## Known stack suffix:
## QUERY
## LR(1) items:
lib -> QUERY . nevartype SEMI tqueryseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> QUERY . tqueryseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On TABLE shift to state 40
-- On SECRET shift to state 110
-- On PUTBEGIN shift to state 116
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 123
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On tqueryseq shift to state 124
-- On tquery shift to state 749
-- On nevartype shift to state 754
-- On gterm shift to state 752
## Reductions:

State 40:
## Known stack suffix:
## TABLE
## LR(1) items:
gterm -> TABLE . LPAREN gterm RPAREN PHASE INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> TABLE . LPAREN gterm RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On LPAREN shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## TABLE LPAREN
## LR(1) items:
gterm -> TABLE LPAREN . gterm RPAREN PHASE INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> TABLE LPAREN . gterm RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 106
## Reductions:

State 42:
## Known stack suffix:
## NOT
## LR(1) items:
gterm -> NOT . LPAREN gterm RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On LPAREN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## NOT LPAREN
## LR(1) items:
gterm -> NOT LPAREN . gterm RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 104
## Reductions:

State 44:
## Known stack suffix:
## NEW
## LR(1) items:
gterm -> NEW . IDENT LBRACKET bindingseq RBRACKET [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> NEW . IDENT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On IDENT shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
gterm -> NEW IDENT . LBRACKET bindingseq RBRACKET [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> NEW IDENT . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On LBRACKET shift to state 46
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> NEW IDENT

State 46:
## Known stack suffix:
## NEW IDENT LBRACKET
## LR(1) items:
gterm -> NEW IDENT LBRACKET . bindingseq RBRACKET [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On REPL shift to state 47
-- On IDENT shift to state 95
-- On nesbindingseq shift to state 101
-- On bindingseq shift to state 102
## Reductions:
-- On RBRACKET
--   reduce production bindingseq ->

State 47:
## Known stack suffix:
## REPL
## LR(1) items:
nesbindingseq -> REPL . INT EQUAL gterm SEMI nesbindingseq [ RBRACKET ]
nesbindingseq -> REPL . INT EQUAL gterm [ RBRACKET ]
## Transitions:
-- On INT shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## REPL INT
## LR(1) items:
nesbindingseq -> REPL INT . EQUAL gterm SEMI nesbindingseq [ RBRACKET ]
nesbindingseq -> REPL INT . EQUAL gterm [ RBRACKET ]
## Transitions:
-- On EQUAL shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## REPL INT EQUAL
## LR(1) items:
nesbindingseq -> REPL INT EQUAL . gterm SEMI nesbindingseq [ RBRACKET ]
nesbindingseq -> REPL INT EQUAL . gterm [ RBRACKET ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 93
## Reductions:

State 50:
## Known stack suffix:
## LPAREN
## LR(1) items:
gterm -> LPAREN . gtermseq RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On negtermseq shift to state 76
-- On gtermseq shift to state 91
-- On gterm shift to state 79
## Reductions:
-- On RPAREN
--   reduce production gtermseq ->

State 51:
## Known stack suffix:
## LET
## LR(1) items:
gterm -> LET . IDENT EQUAL gterm IN gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On IDENT shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## LET IDENT
## LR(1) items:
gterm -> LET IDENT . EQUAL gterm IN gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On EQUAL shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LET IDENT EQUAL
## LR(1) items:
gterm -> LET IDENT EQUAL . gterm IN gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 88
## Reductions:

State 54:
## Known stack suffix:
## INJEVENT
## LR(1) items:
gterm -> INJEVENT . LPAREN gtermseq RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On LPAREN shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## INJEVENT LPAREN
## LR(1) items:
gterm -> INJEVENT LPAREN . gtermseq RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On negtermseq shift to state 76
-- On gtermseq shift to state 86
-- On gterm shift to state 79
## Reductions:
-- On RPAREN
--   reduce production gtermseq ->

State 56:
## Known stack suffix:
## IDENT
## LR(1) items:
gterm -> IDENT . LPAREN gtermseq RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> IDENT . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> IDENT . LPAREN gtermseq RPAREN PHASE INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On LPAREN shift to state 57
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> IDENT

State 57:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
gterm -> IDENT LPAREN . gtermseq RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> IDENT LPAREN . gtermseq RPAREN PHASE INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On negtermseq shift to state 76
-- On gtermseq shift to state 82
-- On gterm shift to state 79
## Reductions:
-- On RPAREN
--   reduce production gtermseq ->

State 58:
## Known stack suffix:
## EVENT
## LR(1) items:
gterm -> EVENT . LPAREN gtermseq RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On LPAREN shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## EVENT LPAREN
## LR(1) items:
gterm -> EVENT LPAREN . gtermseq RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On negtermseq shift to state 76
-- On gtermseq shift to state 77
-- On gterm shift to state 79
## Reductions:
-- On RPAREN
--   reduce production gtermseq ->

State 60:
## Known stack suffix:
## CHOICE
## LR(1) items:
gterm -> CHOICE . LBRACKET gterm COMMA gterm RBRACKET [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On LBRACKET shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## CHOICE LBRACKET
## LR(1) items:
gterm -> CHOICE LBRACKET . gterm COMMA gterm RBRACKET [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## CHOICE LBRACKET gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE OR EQUAL DIFF COMMA BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE OR EQUAL DIFF COMMA BEFORE ]
gterm -> gterm . OR gterm [ WEDGE OR EQUAL DIFF COMMA BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE OR EQUAL DIFF COMMA BEFORE ]
gterm -> CHOICE LBRACKET gterm . COMMA gterm RBRACKET [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE OR EQUAL DIFF COMMA BEFORE ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On COMMA shift to state 71
-- On BEFORE shift to state 74
## Reductions:

State 63:
## Known stack suffix:
## gterm WEDGE
## LR(1) items:
gterm -> gterm WEDGE . gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## gterm WEDGE gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . OR gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm WEDGE gterm . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On WEDGE shift to state 63
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
## Reductions:
-- On SEMI RPAREN RBRACKET PUBLICVARS OR IN DOT COMMA BEFORE
--   reduce production gterm -> gterm WEDGE gterm

State 65:
## Known stack suffix:
## gterm EQUAL
## LR(1) items:
gterm -> gterm EQUAL . gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## gterm EQUAL gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm EQUAL gterm . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . OR gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On DIFF shift to state 67
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN DOT COMMA BEFORE
--   reduce production gterm -> gterm EQUAL gterm

State 67:
## Known stack suffix:
## gterm DIFF
## LR(1) items:
gterm -> gterm DIFF . gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## gterm DIFF gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm DIFF gterm . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . OR gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT COMMA BEFORE
--   reduce production gterm -> gterm DIFF gterm

State 69:
## Known stack suffix:
## gterm OR
## LR(1) items:
gterm -> gterm OR . gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## gterm OR gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . OR gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm OR gterm . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
## Reductions:
-- On SEMI RPAREN RBRACKET PUBLICVARS IN DOT COMMA BEFORE
--   reduce production gterm -> gterm OR gterm

State 71:
## Known stack suffix:
## CHOICE LBRACKET gterm COMMA
## LR(1) items:
gterm -> CHOICE LBRACKET gterm COMMA . gterm RBRACKET [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## CHOICE LBRACKET gterm COMMA gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> CHOICE LBRACKET gterm COMMA gterm . RBRACKET [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE RBRACKET OR EQUAL DIFF BEFORE ]
## Transitions:
-- On WEDGE shift to state 63
-- On RBRACKET shift to state 73
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:

State 73:
## Known stack suffix:
## CHOICE LBRACKET gterm COMMA gterm RBRACKET
## LR(1) items:
gterm -> CHOICE LBRACKET gterm COMMA gterm RBRACKET . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> CHOICE LBRACKET gterm COMMA gterm RBRACKET

State 74:
## Known stack suffix:
## gterm BEFORE
## LR(1) items:
gterm -> gterm BEFORE . gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## gterm BEFORE gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . OR gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm BEFORE gterm . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
## Reductions:
-- On SEMI RPAREN RBRACKET PUBLICVARS IN DOT COMMA
--   reduce production gterm -> gterm BEFORE gterm

State 76:
## Known stack suffix:
## negtermseq
## LR(1) items:
gtermseq -> negtermseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production gtermseq -> negtermseq

State 77:
## Known stack suffix:
## EVENT LPAREN gtermseq
## LR(1) items:
gterm -> EVENT LPAREN gtermseq . RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On RPAREN shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## EVENT LPAREN gtermseq RPAREN
## LR(1) items:
gterm -> EVENT LPAREN gtermseq RPAREN . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> EVENT LPAREN gtermseq RPAREN

State 79:
## Known stack suffix:
## gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE RPAREN OR EQUAL DIFF COMMA BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE RPAREN OR EQUAL DIFF COMMA BEFORE ]
gterm -> gterm . OR gterm [ WEDGE RPAREN OR EQUAL DIFF COMMA BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE RPAREN OR EQUAL DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE RPAREN OR EQUAL DIFF COMMA BEFORE ]
negtermseq -> gterm . COMMA negtermseq [ RPAREN ]
negtermseq -> gterm . [ RPAREN ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On COMMA shift to state 80
-- On BEFORE shift to state 74
## Reductions:
-- On RPAREN
--   reduce production negtermseq -> gterm

State 80:
## Known stack suffix:
## gterm COMMA
## LR(1) items:
negtermseq -> gterm COMMA . negtermseq [ RPAREN ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On negtermseq shift to state 81
-- On gterm shift to state 79
## Reductions:

State 81:
## Known stack suffix:
## gterm COMMA negtermseq
## LR(1) items:
negtermseq -> gterm COMMA negtermseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production negtermseq -> gterm COMMA negtermseq

State 82:
## Known stack suffix:
## IDENT LPAREN gtermseq
## LR(1) items:
gterm -> IDENT LPAREN gtermseq . RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> IDENT LPAREN gtermseq . RPAREN PHASE INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On RPAREN shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## IDENT LPAREN gtermseq RPAREN
## LR(1) items:
gterm -> IDENT LPAREN gtermseq RPAREN . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> IDENT LPAREN gtermseq RPAREN . PHASE INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On PHASE shift to state 84
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> IDENT LPAREN gtermseq RPAREN

State 84:
## Known stack suffix:
## IDENT LPAREN gtermseq RPAREN PHASE
## LR(1) items:
gterm -> IDENT LPAREN gtermseq RPAREN PHASE . INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On INT shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## IDENT LPAREN gtermseq RPAREN PHASE INT
## LR(1) items:
gterm -> IDENT LPAREN gtermseq RPAREN PHASE INT . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> IDENT LPAREN gtermseq RPAREN PHASE INT

State 86:
## Known stack suffix:
## INJEVENT LPAREN gtermseq
## LR(1) items:
gterm -> INJEVENT LPAREN gtermseq . RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On RPAREN shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## INJEVENT LPAREN gtermseq RPAREN
## LR(1) items:
gterm -> INJEVENT LPAREN gtermseq RPAREN . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> INJEVENT LPAREN gtermseq RPAREN

State 88:
## Known stack suffix:
## LET IDENT EQUAL gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE OR IN EQUAL DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE OR IN EQUAL DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE OR IN EQUAL DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE OR IN EQUAL DIFF BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE OR IN EQUAL DIFF BEFORE ]
gterm -> LET IDENT EQUAL gterm . IN gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On IN shift to state 89
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:

State 89:
## Known stack suffix:
## LET IDENT EQUAL gterm IN
## LR(1) items:
gterm -> LET IDENT EQUAL gterm IN . gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## LET IDENT EQUAL gterm IN gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . OR gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> LET IDENT EQUAL gterm IN gterm . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> LET IDENT EQUAL gterm IN gterm
** Conflict on WEDGE OR EQUAL DIFF BEFORE

State 91:
## Known stack suffix:
## LPAREN gtermseq
## LR(1) items:
gterm -> LPAREN gtermseq . RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On RPAREN shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## LPAREN gtermseq RPAREN
## LR(1) items:
gterm -> LPAREN gtermseq RPAREN . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> LPAREN gtermseq RPAREN

State 93:
## Known stack suffix:
## REPL INT EQUAL gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
nesbindingseq -> REPL INT EQUAL gterm . SEMI nesbindingseq [ RBRACKET ]
nesbindingseq -> REPL INT EQUAL gterm . [ RBRACKET ]
## Transitions:
-- On WEDGE shift to state 63
-- On SEMI shift to state 94
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:
-- On RBRACKET
--   reduce production nesbindingseq -> REPL INT EQUAL gterm

State 94:
## Known stack suffix:
## REPL INT EQUAL gterm SEMI
## LR(1) items:
nesbindingseq -> REPL INT EQUAL gterm SEMI . nesbindingseq [ RBRACKET ]
## Transitions:
-- On REPL shift to state 47
-- On IDENT shift to state 95
-- On nesbindingseq shift to state 100
## Reductions:

State 95:
## Known stack suffix:
## IDENT
## LR(1) items:
nesbindingseq -> IDENT . EQUAL gterm SEMI nesbindingseq [ RBRACKET ]
nesbindingseq -> IDENT . EQUAL gterm [ RBRACKET ]
## Transitions:
-- On EQUAL shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## IDENT EQUAL
## LR(1) items:
nesbindingseq -> IDENT EQUAL . gterm SEMI nesbindingseq [ RBRACKET ]
nesbindingseq -> IDENT EQUAL . gterm [ RBRACKET ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## IDENT EQUAL gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE SEMI RBRACKET OR EQUAL DIFF BEFORE ]
nesbindingseq -> IDENT EQUAL gterm . SEMI nesbindingseq [ RBRACKET ]
nesbindingseq -> IDENT EQUAL gterm . [ RBRACKET ]
## Transitions:
-- On WEDGE shift to state 63
-- On SEMI shift to state 98
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:
-- On RBRACKET
--   reduce production nesbindingseq -> IDENT EQUAL gterm

State 98:
## Known stack suffix:
## IDENT EQUAL gterm SEMI
## LR(1) items:
nesbindingseq -> IDENT EQUAL gterm SEMI . nesbindingseq [ RBRACKET ]
## Transitions:
-- On REPL shift to state 47
-- On IDENT shift to state 95
-- On nesbindingseq shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## IDENT EQUAL gterm SEMI nesbindingseq
## LR(1) items:
nesbindingseq -> IDENT EQUAL gterm SEMI nesbindingseq . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production nesbindingseq -> IDENT EQUAL gterm SEMI nesbindingseq

State 100:
## Known stack suffix:
## REPL INT EQUAL gterm SEMI nesbindingseq
## LR(1) items:
nesbindingseq -> REPL INT EQUAL gterm SEMI nesbindingseq . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production nesbindingseq -> REPL INT EQUAL gterm SEMI nesbindingseq

State 101:
## Known stack suffix:
## nesbindingseq
## LR(1) items:
bindingseq -> nesbindingseq . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production bindingseq -> nesbindingseq

State 102:
## Known stack suffix:
## NEW IDENT LBRACKET bindingseq
## LR(1) items:
gterm -> NEW IDENT LBRACKET bindingseq . RBRACKET [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On RBRACKET shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## NEW IDENT LBRACKET bindingseq RBRACKET
## LR(1) items:
gterm -> NEW IDENT LBRACKET bindingseq RBRACKET . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> NEW IDENT LBRACKET bindingseq RBRACKET

State 104:
## Known stack suffix:
## NOT LPAREN gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
gterm -> NOT LPAREN gterm . RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . OR gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
## Transitions:
-- On WEDGE shift to state 63
-- On RPAREN shift to state 105
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:

State 105:
## Known stack suffix:
## NOT LPAREN gterm RPAREN
## LR(1) items:
gterm -> NOT LPAREN gterm RPAREN . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> NOT LPAREN gterm RPAREN

State 106:
## Known stack suffix:
## TABLE LPAREN gterm
## LR(1) items:
gterm -> TABLE LPAREN gterm . RPAREN PHASE INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . EQUAL gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
gterm -> TABLE LPAREN gterm . RPAREN [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE RPAREN OR EQUAL DIFF BEFORE ]
## Transitions:
-- On WEDGE shift to state 63
-- On RPAREN shift to state 107
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:

State 107:
## Known stack suffix:
## TABLE LPAREN gterm RPAREN
## LR(1) items:
gterm -> TABLE LPAREN gterm RPAREN . PHASE INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
gterm -> TABLE LPAREN gterm RPAREN . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On PHASE shift to state 108
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> TABLE LPAREN gterm RPAREN

State 108:
## Known stack suffix:
## TABLE LPAREN gterm RPAREN PHASE
## LR(1) items:
gterm -> TABLE LPAREN gterm RPAREN PHASE . INT [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
-- On INT shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## TABLE LPAREN gterm RPAREN PHASE INT
## LR(1) items:
gterm -> TABLE LPAREN gterm RPAREN PHASE INT . [ WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RBRACKET PUBLICVARS OR IN EQUAL DOT DIFF COMMA BEFORE
--   reduce production gterm -> TABLE LPAREN gterm RPAREN PHASE INT

State 110:
## Known stack suffix:
## SECRET
## LR(1) items:
tquery -> SECRET . IDENT optpublicvars options [ SEMI DOT ]
## Transitions:
-- On IDENT shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## SECRET IDENT
## LR(1) items:
tquery -> SECRET IDENT . optpublicvars options [ SEMI DOT ]
## Transitions:
-- On PUBLICVARS shift to state 112
-- On optpublicvars shift to state 114
## Reductions:
-- On SEMI LBRACKET DOT
--   reduce production optpublicvars ->

State 112:
## Known stack suffix:
## PUBLICVARS
## LR(1) items:
optpublicvars -> PUBLICVARS . neidentseq [ SEMI LBRACKET DOT ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## PUBLICVARS neidentseq
## LR(1) items:
optpublicvars -> PUBLICVARS neidentseq . [ SEMI LBRACKET DOT ]
## Transitions:
## Reductions:
-- On SEMI LBRACKET DOT
--   reduce production optpublicvars -> PUBLICVARS neidentseq

State 114:
## Known stack suffix:
## SECRET IDENT optpublicvars
## LR(1) items:
tquery -> SECRET IDENT optpublicvars . options [ SEMI DOT ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 115
## Reductions:
-- On SEMI DOT
--   reduce production options ->

State 115:
## Known stack suffix:
## SECRET IDENT optpublicvars options
## LR(1) items:
tquery -> SECRET IDENT optpublicvars options . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production tquery -> SECRET IDENT optpublicvars options

State 116:
## Known stack suffix:
## PUTBEGIN
## LR(1) items:
tquery -> PUTBEGIN . EVENT COLON neidentseq [ SEMI DOT ]
tquery -> PUTBEGIN . INJEVENT COLON neidentseq [ SEMI DOT ]
## Transitions:
-- On INJEVENT shift to state 117
-- On EVENT shift to state 120
## Reductions:

State 117:
## Known stack suffix:
## PUTBEGIN INJEVENT
## LR(1) items:
tquery -> PUTBEGIN INJEVENT . COLON neidentseq [ SEMI DOT ]
## Transitions:
-- On COLON shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## PUTBEGIN INJEVENT COLON
## LR(1) items:
tquery -> PUTBEGIN INJEVENT COLON . neidentseq [ SEMI DOT ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## PUTBEGIN INJEVENT COLON neidentseq
## LR(1) items:
tquery -> PUTBEGIN INJEVENT COLON neidentseq . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production tquery -> PUTBEGIN INJEVENT COLON neidentseq

State 120:
## Known stack suffix:
## PUTBEGIN EVENT
## LR(1) items:
tquery -> PUTBEGIN EVENT . COLON neidentseq [ SEMI DOT ]
## Transitions:
-- On COLON shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## PUTBEGIN EVENT COLON
## LR(1) items:
tquery -> PUTBEGIN EVENT COLON . neidentseq [ SEMI DOT ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## PUTBEGIN EVENT COLON neidentseq
## LR(1) items:
tquery -> PUTBEGIN EVENT COLON neidentseq . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production tquery -> PUTBEGIN EVENT COLON neidentseq

State 123:
## Known stack suffix:
## IDENT
## LR(1) items:
gterm -> IDENT . LPAREN gtermseq RPAREN [ WEDGE SEMI PUBLICVARS OR EQUAL DOT DIFF BEFORE ]
gterm -> IDENT . [ WEDGE SEMI PUBLICVARS OR EQUAL DOT DIFF BEFORE ]
gterm -> IDENT . LPAREN gtermseq RPAREN PHASE INT [ WEDGE SEMI PUBLICVARS OR EQUAL DOT DIFF BEFORE ]
nevartype -> IDENT . COLON typeid COMMA nevartype [ SEMI ]
nevartype -> IDENT . COLON typeid [ SEMI ]
## Transitions:
-- On LPAREN shift to state 57
-- On COLON shift to state 30
## Reductions:
-- On WEDGE SEMI PUBLICVARS OR EQUAL DOT DIFF BEFORE
--   reduce production gterm -> IDENT

State 124:
## Known stack suffix:
## QUERY tqueryseq
## LR(1) items:
lib -> QUERY tqueryseq . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## QUERY tqueryseq DOT
## LR(1) items:
lib -> QUERY tqueryseq DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 748
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 126:
## Known stack suffix:
## PROOF
## LR(1) items:
lib -> PROOF . LBRACE proof RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACE shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## PROOF LBRACE
## LR(1) items:
lib -> PROOF LBRACE . proof RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On STRING shift to state 128
-- On STAR shift to state 129
-- On SET shift to state 130
-- On RPAREN shift to state 131
-- On LPAREN shift to state 132
-- On INT shift to state 133
-- On INSERT shift to state 134
-- On IDENT shift to state 135
-- On EQUAL shift to state 136
-- On DOT shift to state 137
-- On COMMA shift to state 138
-- On prooftoken shift to state 139
-- On proofcommand shift to state 141
-- On proof shift to state 144
## Reductions:

State 128:
## Known stack suffix:
## STRING
## LR(1) items:
prooftoken -> STRING . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> STRING

State 129:
## Known stack suffix:
## STAR
## LR(1) items:
prooftoken -> STAR . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> STAR

State 130:
## Known stack suffix:
## SET
## LR(1) items:
prooftoken -> SET . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> SET

State 131:
## Known stack suffix:
## RPAREN
## LR(1) items:
prooftoken -> RPAREN . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> RPAREN

State 132:
## Known stack suffix:
## LPAREN
## LR(1) items:
prooftoken -> LPAREN . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> LPAREN

State 133:
## Known stack suffix:
## INT
## LR(1) items:
prooftoken -> INT . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> INT

State 134:
## Known stack suffix:
## INSERT
## LR(1) items:
prooftoken -> INSERT . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> INSERT

State 135:
## Known stack suffix:
## IDENT
## LR(1) items:
prooftoken -> IDENT . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> IDENT

State 136:
## Known stack suffix:
## EQUAL
## LR(1) items:
prooftoken -> EQUAL . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> EQUAL

State 137:
## Known stack suffix:
## DOT
## LR(1) items:
prooftoken -> DOT . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> DOT

State 138:
## Known stack suffix:
## COMMA
## LR(1) items:
prooftoken -> COMMA . [ STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA ]
## Transitions:
## Reductions:
-- On STRING STAR SET SEMI RPAREN RBRACE LPAREN INT INSERT IDENT EQUAL DOT COMMA
--   reduce production prooftoken -> COMMA

State 139:
## Known stack suffix:
## prooftoken
## LR(1) items:
proofcommand -> prooftoken . [ SEMI RBRACE ]
proofcommand -> prooftoken . proofcommand [ SEMI RBRACE ]
## Transitions:
-- On STRING shift to state 128
-- On STAR shift to state 129
-- On SET shift to state 130
-- On RPAREN shift to state 131
-- On LPAREN shift to state 132
-- On INT shift to state 133
-- On INSERT shift to state 134
-- On IDENT shift to state 135
-- On EQUAL shift to state 136
-- On DOT shift to state 137
-- On COMMA shift to state 138
-- On prooftoken shift to state 139
-- On proofcommand shift to state 140
## Reductions:
-- On SEMI RBRACE
--   reduce production proofcommand -> prooftoken

State 140:
## Known stack suffix:
## prooftoken proofcommand
## LR(1) items:
proofcommand -> prooftoken proofcommand . [ SEMI RBRACE ]
## Transitions:
## Reductions:
-- On SEMI RBRACE
--   reduce production proofcommand -> prooftoken proofcommand

State 141:
## Known stack suffix:
## proofcommand
## LR(1) items:
proof -> proofcommand . [ RBRACE ]
proof -> proofcommand . SEMI proof [ RBRACE ]
## Transitions:
-- On SEMI shift to state 142
## Reductions:
-- On RBRACE
--   reduce production proof -> proofcommand

State 142:
## Known stack suffix:
## proofcommand SEMI
## LR(1) items:
proof -> proofcommand SEMI . proof [ RBRACE ]
## Transitions:
-- On STRING shift to state 128
-- On STAR shift to state 129
-- On SET shift to state 130
-- On RPAREN shift to state 131
-- On LPAREN shift to state 132
-- On INT shift to state 133
-- On INSERT shift to state 134
-- On IDENT shift to state 135
-- On EQUAL shift to state 136
-- On DOT shift to state 137
-- On COMMA shift to state 138
-- On prooftoken shift to state 139
-- On proofcommand shift to state 141
-- On proof shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## proofcommand SEMI proof
## LR(1) items:
proof -> proofcommand SEMI proof . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production proof -> proofcommand SEMI proof

State 144:
## Known stack suffix:
## PROOF LBRACE proof
## LR(1) items:
lib -> PROOF LBRACE proof . RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RBRACE shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## PROOF LBRACE proof RBRACE
## LR(1) items:
lib -> PROOF LBRACE proof RBRACE . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 747
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 146:
## Known stack suffix:
## PROBA
## LR(1) items:
lib -> PROBA . IDENT DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## PROBA IDENT
## LR(1) items:
lib -> PROBA IDENT . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## PROBA IDENT DOT
## LR(1) items:
lib -> PROBA IDENT DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 746
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 149:
## Known stack suffix:
## PREDICATE
## LR(1) items:
lib -> PREDICATE . IDENT LPAREN typeidseq RPAREN options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> PREDICATE . IDENT options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## PREDICATE IDENT
## LR(1) items:
lib -> PREDICATE IDENT . LPAREN typeidseq RPAREN options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> PREDICATE IDENT . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 6
-- On options shift to state 743
## Reductions:
-- On DOT
--   reduce production options ->

State 151:
## Known stack suffix:
## PREDICATE IDENT LPAREN
## LR(1) items:
lib -> PREDICATE IDENT LPAREN . typeidseq RPAREN options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 152
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 152:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq . RPAREN options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RPAREN shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq RPAREN . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 154
## Reductions:
-- On DOT
--   reduce production options ->

State 154:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq RPAREN options
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq RPAREN options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq RPAREN options DOT
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq RPAREN options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 742
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 156:
## Known stack suffix:
## PARAM
## LR(1) items:
lib -> PARAM . neidentseq options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## PARAM neidentseq
## LR(1) items:
lib -> PARAM neidentseq . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 158
## Reductions:
-- On DOT
--   reduce production options ->

State 158:
## Known stack suffix:
## PARAM neidentseq options
## LR(1) items:
lib -> PARAM neidentseq options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## PARAM neidentseq options DOT
## LR(1) items:
lib -> PARAM neidentseq options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 741
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 160:
## Known stack suffix:
## NOUNIF
## LR(1) items:
lib -> NOUNIF . nevartype SEMI tfnebindingseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> NOUNIF . tfnebindingseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On TABLE shift to state 161
-- On LET shift to state 213
-- On IDENT shift to state 226
-- On tfnebindingseq shift to state 227
-- On nevartype shift to state 736
## Reductions:

State 161:
## Known stack suffix:
## TABLE
## LR(1) items:
tfnebindingseq -> TABLE . LPAREN gformatseq RPAREN optphase optint [ DOT ]
## Transitions:
-- On LPAREN shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## TABLE LPAREN
## LR(1) items:
tfnebindingseq -> TABLE LPAREN . gformatseq RPAREN optphase optint [ DOT ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On negformatseq shift to state 183
-- On gformatseq shift to state 205
-- On gformat shift to state 186
## Reductions:
-- On RPAREN
--   reduce production gformatseq ->

State 163:
## Known stack suffix:
## STAR
## LR(1) items:
gformat -> STAR . IDENT [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On IDENT shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## STAR IDENT
## LR(1) items:
gformat -> STAR IDENT . [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
## Reductions:
-- On SEMI RPAREN RBRACKET IN COMMA
--   reduce production gformat -> STAR IDENT

State 165:
## Known stack suffix:
## NEW
## LR(1) items:
gformat -> NEW . IDENT LBRACKET fbindingseq RBRACKET [ SEMI RPAREN RBRACKET IN COMMA ]
gformat -> NEW . IDENT [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On IDENT shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
gformat -> NEW IDENT . LBRACKET fbindingseq RBRACKET [ SEMI RPAREN RBRACKET IN COMMA ]
gformat -> NEW IDENT . [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On LBRACKET shift to state 167
## Reductions:
-- On SEMI RPAREN RBRACKET IN COMMA
--   reduce production gformat -> NEW IDENT

State 167:
## Known stack suffix:
## NEW IDENT LBRACKET
## LR(1) items:
gformat -> NEW IDENT LBRACKET . fbindingseq RBRACKET [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On REPL shift to state 168
-- On IDENT shift to state 196
-- On fnesbindingseq shift to state 202
-- On fbindingseq shift to state 203
## Reductions:
-- On RBRACKET
--   reduce production fbindingseq ->

State 168:
## Known stack suffix:
## REPL
## LR(1) items:
fnesbindingseq -> REPL . INT EQUAL gformat SEMI fnesbindingseq [ RBRACKET ]
fnesbindingseq -> REPL . INT EQUAL gformat [ RBRACKET ]
## Transitions:
-- On INT shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## REPL INT
## LR(1) items:
fnesbindingseq -> REPL INT . EQUAL gformat SEMI fnesbindingseq [ RBRACKET ]
fnesbindingseq -> REPL INT . EQUAL gformat [ RBRACKET ]
## Transitions:
-- On EQUAL shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## REPL INT EQUAL
## LR(1) items:
fnesbindingseq -> REPL INT EQUAL . gformat SEMI fnesbindingseq [ RBRACKET ]
fnesbindingseq -> REPL INT EQUAL . gformat [ RBRACKET ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On gformat shift to state 194
## Reductions:

State 171:
## Known stack suffix:
## LPAREN
## LR(1) items:
gformat -> LPAREN . gformatseq RPAREN [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On negformatseq shift to state 183
-- On gformatseq shift to state 192
-- On gformat shift to state 186
## Reductions:
-- On RPAREN
--   reduce production gformatseq ->

State 172:
## Known stack suffix:
## LET
## LR(1) items:
gformat -> LET . IDENT EQUAL gformat IN gformat [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On IDENT shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## LET IDENT
## LR(1) items:
gformat -> LET IDENT . EQUAL gformat IN gformat [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On EQUAL shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## LET IDENT EQUAL
## LR(1) items:
gformat -> LET IDENT EQUAL . gformat IN gformat [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On gformat shift to state 189
## Reductions:

State 175:
## Known stack suffix:
## IDENT
## LR(1) items:
gformat -> IDENT . LPAREN gformatseq RPAREN [ SEMI RPAREN RBRACKET IN COMMA ]
gformat -> IDENT . [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On LPAREN shift to state 176
## Reductions:
-- On SEMI RPAREN RBRACKET IN COMMA
--   reduce production gformat -> IDENT

State 176:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
gformat -> IDENT LPAREN . gformatseq RPAREN [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On negformatseq shift to state 183
-- On gformatseq shift to state 184
-- On gformat shift to state 186
## Reductions:
-- On RPAREN
--   reduce production gformatseq ->

State 177:
## Known stack suffix:
## CHOICE
## LR(1) items:
gformat -> CHOICE . LBRACKET gformat COMMA gformat RBRACKET [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On LBRACKET shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## CHOICE LBRACKET
## LR(1) items:
gformat -> CHOICE LBRACKET . gformat COMMA gformat RBRACKET [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On gformat shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## CHOICE LBRACKET gformat
## LR(1) items:
gformat -> CHOICE LBRACKET gformat . COMMA gformat RBRACKET [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On COMMA shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## CHOICE LBRACKET gformat COMMA
## LR(1) items:
gformat -> CHOICE LBRACKET gformat COMMA . gformat RBRACKET [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On gformat shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## CHOICE LBRACKET gformat COMMA gformat
## LR(1) items:
gformat -> CHOICE LBRACKET gformat COMMA gformat . RBRACKET [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On RBRACKET shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## CHOICE LBRACKET gformat COMMA gformat RBRACKET
## LR(1) items:
gformat -> CHOICE LBRACKET gformat COMMA gformat RBRACKET . [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
## Reductions:
-- On SEMI RPAREN RBRACKET IN COMMA
--   reduce production gformat -> CHOICE LBRACKET gformat COMMA gformat RBRACKET

State 183:
## Known stack suffix:
## negformatseq
## LR(1) items:
gformatseq -> negformatseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production gformatseq -> negformatseq

State 184:
## Known stack suffix:
## IDENT LPAREN gformatseq
## LR(1) items:
gformat -> IDENT LPAREN gformatseq . RPAREN [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On RPAREN shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## IDENT LPAREN gformatseq RPAREN
## LR(1) items:
gformat -> IDENT LPAREN gformatseq RPAREN . [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
## Reductions:
-- On SEMI RPAREN RBRACKET IN COMMA
--   reduce production gformat -> IDENT LPAREN gformatseq RPAREN

State 186:
## Known stack suffix:
## gformat
## LR(1) items:
negformatseq -> gformat . COMMA negformatseq [ RPAREN ]
negformatseq -> gformat . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 187
## Reductions:
-- On RPAREN
--   reduce production negformatseq -> gformat

State 187:
## Known stack suffix:
## gformat COMMA
## LR(1) items:
negformatseq -> gformat COMMA . negformatseq [ RPAREN ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On negformatseq shift to state 188
-- On gformat shift to state 186
## Reductions:

State 188:
## Known stack suffix:
## gformat COMMA negformatseq
## LR(1) items:
negformatseq -> gformat COMMA negformatseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production negformatseq -> gformat COMMA negformatseq

State 189:
## Known stack suffix:
## LET IDENT EQUAL gformat
## LR(1) items:
gformat -> LET IDENT EQUAL gformat . IN gformat [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On IN shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## LET IDENT EQUAL gformat IN
## LR(1) items:
gformat -> LET IDENT EQUAL gformat IN . gformat [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On gformat shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## LET IDENT EQUAL gformat IN gformat
## LR(1) items:
gformat -> LET IDENT EQUAL gformat IN gformat . [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
## Reductions:
-- On SEMI RPAREN RBRACKET IN COMMA
--   reduce production gformat -> LET IDENT EQUAL gformat IN gformat

State 192:
## Known stack suffix:
## LPAREN gformatseq
## LR(1) items:
gformat -> LPAREN gformatseq . RPAREN [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On RPAREN shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## LPAREN gformatseq RPAREN
## LR(1) items:
gformat -> LPAREN gformatseq RPAREN . [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
## Reductions:
-- On SEMI RPAREN RBRACKET IN COMMA
--   reduce production gformat -> LPAREN gformatseq RPAREN

State 194:
## Known stack suffix:
## REPL INT EQUAL gformat
## LR(1) items:
fnesbindingseq -> REPL INT EQUAL gformat . SEMI fnesbindingseq [ RBRACKET ]
fnesbindingseq -> REPL INT EQUAL gformat . [ RBRACKET ]
## Transitions:
-- On SEMI shift to state 195
## Reductions:
-- On RBRACKET
--   reduce production fnesbindingseq -> REPL INT EQUAL gformat

State 195:
## Known stack suffix:
## REPL INT EQUAL gformat SEMI
## LR(1) items:
fnesbindingseq -> REPL INT EQUAL gformat SEMI . fnesbindingseq [ RBRACKET ]
## Transitions:
-- On REPL shift to state 168
-- On IDENT shift to state 196
-- On fnesbindingseq shift to state 201
## Reductions:

State 196:
## Known stack suffix:
## IDENT
## LR(1) items:
fnesbindingseq -> IDENT . EQUAL gformat SEMI fnesbindingseq [ RBRACKET ]
fnesbindingseq -> IDENT . EQUAL gformat [ RBRACKET ]
## Transitions:
-- On EQUAL shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## IDENT EQUAL
## LR(1) items:
fnesbindingseq -> IDENT EQUAL . gformat SEMI fnesbindingseq [ RBRACKET ]
fnesbindingseq -> IDENT EQUAL . gformat [ RBRACKET ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On gformat shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## IDENT EQUAL gformat
## LR(1) items:
fnesbindingseq -> IDENT EQUAL gformat . SEMI fnesbindingseq [ RBRACKET ]
fnesbindingseq -> IDENT EQUAL gformat . [ RBRACKET ]
## Transitions:
-- On SEMI shift to state 199
## Reductions:
-- On RBRACKET
--   reduce production fnesbindingseq -> IDENT EQUAL gformat

State 199:
## Known stack suffix:
## IDENT EQUAL gformat SEMI
## LR(1) items:
fnesbindingseq -> IDENT EQUAL gformat SEMI . fnesbindingseq [ RBRACKET ]
## Transitions:
-- On REPL shift to state 168
-- On IDENT shift to state 196
-- On fnesbindingseq shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## IDENT EQUAL gformat SEMI fnesbindingseq
## LR(1) items:
fnesbindingseq -> IDENT EQUAL gformat SEMI fnesbindingseq . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production fnesbindingseq -> IDENT EQUAL gformat SEMI fnesbindingseq

State 201:
## Known stack suffix:
## REPL INT EQUAL gformat SEMI fnesbindingseq
## LR(1) items:
fnesbindingseq -> REPL INT EQUAL gformat SEMI fnesbindingseq . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production fnesbindingseq -> REPL INT EQUAL gformat SEMI fnesbindingseq

State 202:
## Known stack suffix:
## fnesbindingseq
## LR(1) items:
fbindingseq -> fnesbindingseq . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production fbindingseq -> fnesbindingseq

State 203:
## Known stack suffix:
## NEW IDENT LBRACKET fbindingseq
## LR(1) items:
gformat -> NEW IDENT LBRACKET fbindingseq . RBRACKET [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
-- On RBRACKET shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## NEW IDENT LBRACKET fbindingseq RBRACKET
## LR(1) items:
gformat -> NEW IDENT LBRACKET fbindingseq RBRACKET . [ SEMI RPAREN RBRACKET IN COMMA ]
## Transitions:
## Reductions:
-- On SEMI RPAREN RBRACKET IN COMMA
--   reduce production gformat -> NEW IDENT LBRACKET fbindingseq RBRACKET

State 205:
## Known stack suffix:
## TABLE LPAREN gformatseq
## LR(1) items:
tfnebindingseq -> TABLE LPAREN gformatseq . RPAREN optphase optint [ DOT ]
## Transitions:
-- On RPAREN shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## TABLE LPAREN gformatseq RPAREN
## LR(1) items:
tfnebindingseq -> TABLE LPAREN gformatseq RPAREN . optphase optint [ DOT ]
## Transitions:
-- On PHASE shift to state 207
-- On optphase shift to state 209
## Reductions:
-- On SLASH DOT
--   reduce production optphase ->

State 207:
## Known stack suffix:
## PHASE
## LR(1) items:
optphase -> PHASE . INT [ SLASH DOT ]
## Transitions:
-- On INT shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## PHASE INT
## LR(1) items:
optphase -> PHASE INT . [ SLASH DOT ]
## Transitions:
## Reductions:
-- On SLASH DOT
--   reduce production optphase -> PHASE INT

State 209:
## Known stack suffix:
## TABLE LPAREN gformatseq RPAREN optphase
## LR(1) items:
tfnebindingseq -> TABLE LPAREN gformatseq RPAREN optphase . optint [ DOT ]
## Transitions:
-- On SLASH shift to state 210
-- On optint shift to state 212
## Reductions:
-- On DOT
--   reduce production optint ->

State 210:
## Known stack suffix:
## SLASH
## LR(1) items:
optint -> SLASH . INT [ DOT ]
## Transitions:
-- On INT shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## SLASH INT
## LR(1) items:
optint -> SLASH INT . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production optint -> SLASH INT

State 212:
## Known stack suffix:
## TABLE LPAREN gformatseq RPAREN optphase optint
## LR(1) items:
tfnebindingseq -> TABLE LPAREN gformatseq RPAREN optphase optint . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production tfnebindingseq -> TABLE LPAREN gformatseq RPAREN optphase optint

State 213:
## Known stack suffix:
## LET
## LR(1) items:
tfnebindingseq -> LET . IDENT EQUAL gformat IN tfnebindingseq [ DOT ]
## Transitions:
-- On IDENT shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## LET IDENT
## LR(1) items:
tfnebindingseq -> LET IDENT . EQUAL gformat IN tfnebindingseq [ DOT ]
## Transitions:
-- On EQUAL shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## LET IDENT EQUAL
## LR(1) items:
tfnebindingseq -> LET IDENT EQUAL . gformat IN tfnebindingseq [ DOT ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On gformat shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## LET IDENT EQUAL gformat
## LR(1) items:
tfnebindingseq -> LET IDENT EQUAL gformat . IN tfnebindingseq [ DOT ]
## Transitions:
-- On IN shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## LET IDENT EQUAL gformat IN
## LR(1) items:
tfnebindingseq -> LET IDENT EQUAL gformat IN . tfnebindingseq [ DOT ]
## Transitions:
-- On TABLE shift to state 161
-- On LET shift to state 213
-- On IDENT shift to state 218
-- On tfnebindingseq shift to state 225
## Reductions:

State 218:
## Known stack suffix:
## IDENT
## LR(1) items:
tfnebindingseq -> IDENT . LPAREN gformatseq RPAREN optphase optint [ DOT ]
tfnebindingseq -> IDENT . optint [ DOT ]
## Transitions:
-- On SLASH shift to state 210
-- On LPAREN shift to state 219
-- On optint shift to state 224
## Reductions:
-- On DOT
--   reduce production optint ->

State 219:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
tfnebindingseq -> IDENT LPAREN . gformatseq RPAREN optphase optint [ DOT ]
## Transitions:
-- On STAR shift to state 163
-- On NEW shift to state 165
-- On LPAREN shift to state 171
-- On LET shift to state 172
-- On IDENT shift to state 175
-- On CHOICE shift to state 177
-- On negformatseq shift to state 183
-- On gformatseq shift to state 220
-- On gformat shift to state 186
## Reductions:
-- On RPAREN
--   reduce production gformatseq ->

State 220:
## Known stack suffix:
## IDENT LPAREN gformatseq
## LR(1) items:
tfnebindingseq -> IDENT LPAREN gformatseq . RPAREN optphase optint [ DOT ]
## Transitions:
-- On RPAREN shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## IDENT LPAREN gformatseq RPAREN
## LR(1) items:
tfnebindingseq -> IDENT LPAREN gformatseq RPAREN . optphase optint [ DOT ]
## Transitions:
-- On PHASE shift to state 207
-- On optphase shift to state 222
## Reductions:
-- On SLASH DOT
--   reduce production optphase ->

State 222:
## Known stack suffix:
## IDENT LPAREN gformatseq RPAREN optphase
## LR(1) items:
tfnebindingseq -> IDENT LPAREN gformatseq RPAREN optphase . optint [ DOT ]
## Transitions:
-- On SLASH shift to state 210
-- On optint shift to state 223
## Reductions:
-- On DOT
--   reduce production optint ->

State 223:
## Known stack suffix:
## IDENT LPAREN gformatseq RPAREN optphase optint
## LR(1) items:
tfnebindingseq -> IDENT LPAREN gformatseq RPAREN optphase optint . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production tfnebindingseq -> IDENT LPAREN gformatseq RPAREN optphase optint

State 224:
## Known stack suffix:
## IDENT optint
## LR(1) items:
tfnebindingseq -> IDENT optint . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production tfnebindingseq -> IDENT optint

State 225:
## Known stack suffix:
## LET IDENT EQUAL gformat IN tfnebindingseq
## LR(1) items:
tfnebindingseq -> LET IDENT EQUAL gformat IN tfnebindingseq . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production tfnebindingseq -> LET IDENT EQUAL gformat IN tfnebindingseq

State 226:
## Known stack suffix:
## IDENT
## LR(1) items:
nevartype -> IDENT . COLON typeid COMMA nevartype [ SEMI ]
nevartype -> IDENT . COLON typeid [ SEMI ]
tfnebindingseq -> IDENT . LPAREN gformatseq RPAREN optphase optint [ DOT ]
tfnebindingseq -> IDENT . optint [ DOT ]
## Transitions:
-- On SLASH shift to state 210
-- On LPAREN shift to state 219
-- On COLON shift to state 30
-- On optint shift to state 224
## Reductions:
-- On DOT
--   reduce production optint ->

State 227:
## Known stack suffix:
## NOUNIF tfnebindingseq
## LR(1) items:
lib -> NOUNIF tfnebindingseq . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## NOUNIF tfnebindingseq DOT
## LR(1) items:
lib -> NOUNIF tfnebindingseq DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 735
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 229:
## Known stack suffix:
## NOT
## LR(1) items:
lib -> NOT . nevartype SEMI gterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> NOT . gterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 123
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On nevartype shift to state 230
-- On gterm shift to state 732
## Reductions:

State 230:
## Known stack suffix:
## NOT nevartype
## LR(1) items:
lib -> NOT nevartype . SEMI gterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On SEMI shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## NOT nevartype SEMI
## LR(1) items:
lib -> NOT nevartype SEMI . gterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## NOT nevartype SEMI gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
lib -> NOT nevartype SEMI gterm . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DOT shift to state 233
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:

State 233:
## Known stack suffix:
## NOT nevartype SEMI gterm DOT
## LR(1) items:
lib -> NOT nevartype SEMI gterm DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 731
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 234:
## Known stack suffix:
## NONINTERF
## LR(1) items:
lib -> NONINTERF . nevartype SEMI niseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> NONINTERF . niseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 235
-- On niseq shift to state 274
-- On ni shift to state 722
-- On nevartype shift to state 726
## Reductions:

State 235:
## Known stack suffix:
## IDENT
## LR(1) items:
nevartype -> IDENT . COLON typeid COMMA nevartype [ SEMI ]
nevartype -> IDENT . COLON typeid [ SEMI ]
ni -> IDENT . AMONG LPAREN netermseq RPAREN [ DOT COMMA ]
ni -> IDENT . [ DOT COMMA ]
## Transitions:
-- On COLON shift to state 30
-- On AMONG shift to state 236
## Reductions:
-- On DOT COMMA
--   reduce production ni -> IDENT

State 236:
## Known stack suffix:
## IDENT AMONG
## LR(1) items:
ni -> IDENT AMONG . LPAREN netermseq RPAREN [ DOT COMMA ]
## Transitions:
-- On LPAREN shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## IDENT AMONG LPAREN
## LR(1) items:
ni -> IDENT AMONG LPAREN . netermseq RPAREN [ DOT COMMA ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 262
-- On netermseq shift to state 272
## Reductions:

State 238:
## Known stack suffix:
## PROJECTION
## LR(1) items:
term -> PROJECTION . LPAREN term RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On LPAREN shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## PROJECTION LPAREN
## LR(1) items:
term -> PROJECTION LPAREN . term RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 270
## Reductions:

State 240:
## Known stack suffix:
## NOT
## LR(1) items:
term -> NOT . LPAREN term RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On LPAREN shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## NOT LPAREN
## LR(1) items:
term -> NOT LPAREN . term RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 268
## Reductions:

State 242:
## Known stack suffix:
## LPAREN
## LR(1) items:
term -> LPAREN . termseq RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On termseq shift to state 266
-- On term shift to state 262
-- On netermseq shift to state 265
## Reductions:
-- On RPAREN
--   reduce production termseq ->

State 243:
## Known stack suffix:
## IDENT
## LR(1) items:
term -> IDENT . LPAREN termseq RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> IDENT . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On LPAREN shift to state 244
## Reductions:
-- On WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA #
--   reduce production term -> IDENT
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LPAREN LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> IDENT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 244:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
term -> IDENT LPAREN . termseq RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On termseq shift to state 260
-- On term shift to state 262
-- On netermseq shift to state 265
## Reductions:
-- On RPAREN
--   reduce production termseq ->

State 245:
## Known stack suffix:
## FAIL
## LR(1) items:
term -> FAIL . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA #
--   reduce production term -> FAIL
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> FAIL
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 246:
## Known stack suffix:
## CHOICE
## LR(1) items:
term -> CHOICE . LBRACKET term COMMA term RBRACKET [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On LBRACKET shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## CHOICE LBRACKET
## LR(1) items:
term -> CHOICE LBRACKET . term COMMA term RBRACKET [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## CHOICE LBRACKET term
## LR(1) items:
term -> CHOICE LBRACKET term . COMMA term RBRACKET [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . EQUAL term [ WEDGE OR EQUAL DIFF COMMA ]
term -> term . DIFF term [ WEDGE OR EQUAL DIFF COMMA ]
term -> term . OR term [ WEDGE OR EQUAL DIFF COMMA ]
term -> term . WEDGE term [ WEDGE OR EQUAL DIFF COMMA ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
-- On COMMA shift to state 257
## Reductions:

State 249:
## Known stack suffix:
## term WEDGE
## LR(1) items:
term -> term WEDGE . term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## term WEDGE term
## LR(1) items:
term -> term . EQUAL term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . DIFF term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . OR term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . WEDGE term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term WEDGE term . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On WEDGE shift to state 249
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:
-- On SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV DOT COMMA #
--   reduce production term -> term WEDGE term
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> term WEDGE term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 251:
## Known stack suffix:
## term EQUAL
## LR(1) items:
term -> term EQUAL . term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## term EQUAL term
## LR(1) items:
term -> term . EQUAL term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term EQUAL term . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . DIFF term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . OR term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . WEDGE term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On DIFF shift to state 253
## Reductions:
-- On WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV DOT COMMA #
--   reduce production term -> term EQUAL term
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> term EQUAL term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 253:
## Known stack suffix:
## term DIFF
## LR(1) items:
term -> term DIFF . term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## term DIFF term
## LR(1) items:
term -> term . EQUAL term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . DIFF term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term DIFF term . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . OR term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . WEDGE term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT COMMA #
--   reduce production term -> term DIFF term
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT COMMA
**   There is a tension between
**   (1) reducing production term -> term DIFF term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 255:
## Known stack suffix:
## term OR
## LR(1) items:
term -> term OR . term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## term OR term
## LR(1) items:
term -> term . EQUAL term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . DIFF term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . OR term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term OR term . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . WEDGE term [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:
-- On SEMI RPAREN RED RBRACKET OTHERWISE LBRACKET EQUIVEQ EQUIV DOT COMMA #
--   reduce production term -> term OR term
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> term OR term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 257:
## Known stack suffix:
## CHOICE LBRACKET term COMMA
## LR(1) items:
term -> CHOICE LBRACKET term COMMA . term RBRACKET [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## CHOICE LBRACKET term COMMA term
## LR(1) items:
term -> CHOICE LBRACKET term COMMA term . RBRACKET [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . EQUAL term [ WEDGE RBRACKET OR EQUAL DIFF ]
term -> term . DIFF term [ WEDGE RBRACKET OR EQUAL DIFF ]
term -> term . OR term [ WEDGE RBRACKET OR EQUAL DIFF ]
term -> term . WEDGE term [ WEDGE RBRACKET OR EQUAL DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On RBRACKET shift to state 259
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:

State 259:
## Known stack suffix:
## CHOICE LBRACKET term COMMA term RBRACKET
## LR(1) items:
term -> CHOICE LBRACKET term COMMA term RBRACKET . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA #
--   reduce production term -> CHOICE LBRACKET term COMMA term RBRACKET
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> CHOICE LBRACKET term COMMA term RBRACKET
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 260:
## Known stack suffix:
## IDENT LPAREN termseq
## LR(1) items:
term -> IDENT LPAREN termseq . RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On RPAREN shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## IDENT LPAREN termseq RPAREN
## LR(1) items:
term -> IDENT LPAREN termseq RPAREN . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA #
--   reduce production term -> IDENT LPAREN termseq RPAREN
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> IDENT LPAREN termseq RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 262:
## Known stack suffix:
## term
## LR(1) items:
netermseq -> term . COMMA netermseq [ RPAREN ]
netermseq -> term . [ RPAREN ]
term -> term . EQUAL term [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
term -> term . DIFF term [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
term -> term . OR term [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
term -> term . WEDGE term [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
-- On COMMA shift to state 263
## Reductions:
-- On RPAREN
--   reduce production netermseq -> term

State 263:
## Known stack suffix:
## term COMMA
## LR(1) items:
netermseq -> term COMMA . netermseq [ RPAREN ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 262
-- On netermseq shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## term COMMA netermseq
## LR(1) items:
netermseq -> term COMMA netermseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production netermseq -> term COMMA netermseq

State 265:
## Known stack suffix:
## netermseq
## LR(1) items:
termseq -> netermseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production termseq -> netermseq

State 266:
## Known stack suffix:
## LPAREN termseq
## LR(1) items:
term -> LPAREN termseq . RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
-- On RPAREN shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## LPAREN termseq RPAREN
## LR(1) items:
term -> LPAREN termseq RPAREN . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA #
--   reduce production term -> LPAREN termseq RPAREN
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> LPAREN termseq RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 268:
## Known stack suffix:
## NOT LPAREN term
## LR(1) items:
term -> term . EQUAL term [ WEDGE RPAREN OR EQUAL DIFF ]
term -> term . DIFF term [ WEDGE RPAREN OR EQUAL DIFF ]
term -> NOT LPAREN term . RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . OR term [ WEDGE RPAREN OR EQUAL DIFF ]
term -> term . WEDGE term [ WEDGE RPAREN OR EQUAL DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On RPAREN shift to state 269
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:

State 269:
## Known stack suffix:
## NOT LPAREN term RPAREN
## LR(1) items:
term -> NOT LPAREN term RPAREN . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA #
--   reduce production term -> NOT LPAREN term RPAREN
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> NOT LPAREN term RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 270:
## Known stack suffix:
## PROJECTION LPAREN term
## LR(1) items:
term -> PROJECTION LPAREN term . RPAREN [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
term -> term . EQUAL term [ WEDGE RPAREN OR EQUAL DIFF ]
term -> term . DIFF term [ WEDGE RPAREN OR EQUAL DIFF ]
term -> term . OR term [ WEDGE RPAREN OR EQUAL DIFF ]
term -> term . WEDGE term [ WEDGE RPAREN OR EQUAL DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On RPAREN shift to state 271
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:

State 271:
## Known stack suffix:
## PROJECTION LPAREN term RPAREN
## LR(1) items:
term -> PROJECTION LPAREN term RPAREN . [ WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA # ]
## Transitions:
## Reductions:
-- On WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA #
--   reduce production term -> PROJECTION LPAREN term RPAREN
** End-of-stream conflict on WEDGE SEMI RPAREN RED RBRACKET OTHERWISE OR LBRACKET EQUIVEQ EQUIV EQUAL DOT DIFF COMMA
**   There is a tension between
**   (1) reducing production term -> PROJECTION LPAREN term RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 272:
## Known stack suffix:
## IDENT AMONG LPAREN netermseq
## LR(1) items:
ni -> IDENT AMONG LPAREN netermseq . RPAREN [ DOT COMMA ]
## Transitions:
-- On RPAREN shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## IDENT AMONG LPAREN netermseq RPAREN
## LR(1) items:
ni -> IDENT AMONG LPAREN netermseq RPAREN . [ DOT COMMA ]
## Transitions:
## Reductions:
-- On DOT COMMA
--   reduce production ni -> IDENT AMONG LPAREN netermseq RPAREN

State 274:
## Known stack suffix:
## NONINTERF niseq
## LR(1) items:
lib -> NONINTERF niseq . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## NONINTERF niseq DOT
## LR(1) items:
lib -> NONINTERF niseq DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 721
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 276:
## Known stack suffix:
## LETFUN
## LR(1) items:
lib -> LETFUN . IDENT EQUAL pterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> LETFUN . IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## LETFUN IDENT
## LR(1) items:
lib -> LETFUN IDENT . EQUAL pterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> LETFUN IDENT . LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LPAREN shift to state 278
-- On EQUAL shift to state 717
## Reductions:

State 278:
## Known stack suffix:
## LETFUN IDENT LPAREN
## LR(1) items:
lib -> LETFUN IDENT LPAREN . mayfailvartypeseq RPAREN EQUAL pterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 279
-- On nemayfailvartypeseq shift to state 284
-- On mayfailvartypeseq shift to state 285
-- On mayfailvartype shift to state 605
## Reductions:
-- On RPAREN
--   reduce production mayfailvartypeseq ->

State 279:
## Known stack suffix:
## IDENT
## LR(1) items:
mayfailvartype -> IDENT . COLON typeid [ SEMI RPAREN COMMA ]
mayfailvartype -> IDENT . COLON typeid ORTEXT FAIL [ SEMI RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
mayfailvartype -> IDENT COLON . typeid [ SEMI RPAREN COMMA ]
mayfailvartype -> IDENT COLON . typeid ORTEXT FAIL [ SEMI RPAREN COMMA ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## IDENT COLON typeid
## LR(1) items:
mayfailvartype -> IDENT COLON typeid . [ SEMI RPAREN COMMA ]
mayfailvartype -> IDENT COLON typeid . ORTEXT FAIL [ SEMI RPAREN COMMA ]
## Transitions:
-- On ORTEXT shift to state 282
## Reductions:
-- On SEMI RPAREN COMMA
--   reduce production mayfailvartype -> IDENT COLON typeid

State 282:
## Known stack suffix:
## IDENT COLON typeid ORTEXT
## LR(1) items:
mayfailvartype -> IDENT COLON typeid ORTEXT . FAIL [ SEMI RPAREN COMMA ]
## Transitions:
-- On FAIL shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## IDENT COLON typeid ORTEXT FAIL
## LR(1) items:
mayfailvartype -> IDENT COLON typeid ORTEXT FAIL . [ SEMI RPAREN COMMA ]
## Transitions:
## Reductions:
-- On SEMI RPAREN COMMA
--   reduce production mayfailvartype -> IDENT COLON typeid ORTEXT FAIL

State 284:
## Known stack suffix:
## nemayfailvartypeseq
## LR(1) items:
mayfailvartypeseq -> nemayfailvartypeseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production mayfailvartypeseq -> nemayfailvartypeseq

State 285:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq . RPAREN EQUAL pterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RPAREN shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN . EQUAL pterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On EQUAL shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL . pterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 410
-- On basicpattern shift to state 332
## Reductions:

State 288:
## Known stack suffix:
## NOT
## LR(1) items:
pterm -> NOT . LPAREN pterm RPAREN [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## NOT LPAREN
## LR(1) items:
pterm -> NOT LPAREN . pterm RPAREN [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 408
-- On basicpattern shift to state 332
## Reductions:

State 290:
## Known stack suffix:
## NEW
## LR(1) items:
pterm -> NEW . IDENT newarg COLON typeid SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
pterm -> NEW IDENT . newarg COLON typeid SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LBRACKET shift to state 292
-- On newarg shift to state 296
## Reductions:
-- On COLON
--   reduce production newarg ->

State 292:
## Known stack suffix:
## LBRACKET
## LR(1) items:
newarg -> LBRACKET . RBRACKET [ YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COLON BARRIER BAR ]
newarg -> LBRACKET . neidentseq RBRACKET [ YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COLON BARRIER BAR ]
## Transitions:
-- On RBRACKET shift to state 293
-- On IDENT shift to state 7
-- On neidentseq shift to state 294
## Reductions:

State 293:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
newarg -> LBRACKET RBRACKET . [ YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COLON BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COLON BARRIER BAR
--   reduce production newarg -> LBRACKET RBRACKET

State 294:
## Known stack suffix:
## LBRACKET neidentseq
## LR(1) items:
newarg -> LBRACKET neidentseq . RBRACKET [ YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COLON BARRIER BAR ]
## Transitions:
-- On RBRACKET shift to state 295
## Reductions:

State 295:
## Known stack suffix:
## LBRACKET neidentseq RBRACKET
## LR(1) items:
newarg -> LBRACKET neidentseq RBRACKET . [ YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COLON BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COLON BARRIER BAR
--   reduce production newarg -> LBRACKET neidentseq RBRACKET

State 296:
## Known stack suffix:
## NEW IDENT newarg
## LR(1) items:
pterm -> NEW IDENT newarg . COLON typeid SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On COLON shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## NEW IDENT newarg COLON
## LR(1) items:
pterm -> NEW IDENT newarg COLON . typeid SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 298
## Reductions:

State 298:
## Known stack suffix:
## NEW IDENT newarg COLON typeid
## LR(1) items:
pterm -> NEW IDENT newarg COLON typeid . SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 299
## Reductions:

State 299:
## Known stack suffix:
## NEW IDENT newarg COLON typeid SEMI
## LR(1) items:
pterm -> NEW IDENT newarg COLON typeid SEMI . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 407
-- On basicpattern shift to state 332
## Reductions:

State 300:
## Known stack suffix:
## LPAREN
## LR(1) items:
pterm -> LPAREN . ptermseq RPAREN [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On ptermseq shift to state 405
-- On pterm shift to state 347
-- On neptermseq shift to state 350
-- On basicpattern shift to state 332
## Reductions:
-- On RPAREN
--   reduce production ptermseq ->

State 301:
## Known stack suffix:
## LET
## LR(1) items:
pterm -> LET . tpattern EQUAL pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET . tpattern EQUAL pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET . nevartype SUCHTHAT pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET . nevartype SUCHTHAT pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 302
-- On IDENT shift to state 388
-- On EQUAL shift to state 305
-- On tpattern shift to state 391
-- On nevartype shift to state 398
-- On basicpattern shift to state 366
## Reductions:

State 302:
## Known stack suffix:
## LPAREN
## LR(1) items:
tpattern -> LPAREN . tpatternseq RPAREN [ RPAREN EQUAL COMMA ]
## Transitions:
-- On LPAREN shift to state 302
-- On IDENT shift to state 303
-- On EQUAL shift to state 305
-- On tpatternseq shift to state 386
-- On tpattern shift to state 363
-- On nepatternseq shift to state 367
-- On basicpattern shift to state 366
## Reductions:
-- On RPAREN
--   reduce production tpatternseq ->

State 303:
## Known stack suffix:
## IDENT
## LR(1) items:
basicpattern -> IDENT . [ RPAREN COMMA ]
basicpattern -> IDENT . COLON typeid [ RPAREN COMMA ]
tpattern -> IDENT . LPAREN tpatternseq RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 304
-- On COLON shift to state 372
## Reductions:
-- On RPAREN COMMA
--   reduce production basicpattern -> IDENT

State 304:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
tpattern -> IDENT LPAREN . tpatternseq RPAREN [ RPAREN EQUAL COMMA ]
## Transitions:
-- On LPAREN shift to state 302
-- On IDENT shift to state 303
-- On EQUAL shift to state 305
-- On tpatternseq shift to state 384
-- On tpattern shift to state 363
-- On nepatternseq shift to state 367
-- On basicpattern shift to state 366
## Reductions:
-- On RPAREN
--   reduce production tpatternseq ->

State 305:
## Known stack suffix:
## EQUAL
## LR(1) items:
tpattern -> EQUAL . pterm [ RPAREN EQUAL COMMA ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 383
-- On basicpattern shift to state 332
## Reductions:

State 306:
## Known stack suffix:
## INSERT
## LR(1) items:
pterm -> INSERT . IDENT LPAREN ptermseq RPAREN SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## INSERT IDENT
## LR(1) items:
pterm -> INSERT IDENT . LPAREN ptermseq RPAREN SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## INSERT IDENT LPAREN
## LR(1) items:
pterm -> INSERT IDENT LPAREN . ptermseq RPAREN SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On ptermseq shift to state 379
-- On pterm shift to state 347
-- On neptermseq shift to state 350
-- On basicpattern shift to state 332
## Reductions:
-- On RPAREN
--   reduce production ptermseq ->

State 309:
## Known stack suffix:
## IF
## LR(1) items:
pterm -> IF . pterm THEN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> IF . pterm THEN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 374
-- On basicpattern shift to state 332
## Reductions:

State 310:
## Known stack suffix:
## IDENT
## LR(1) items:
basicpattern -> IDENT . [ LEFTARROW ]
basicpattern -> IDENT . COLON typeid [ LEFTARROW ]
pterm -> IDENT . LPAREN ptermseq RPAREN [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> IDENT . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> IDENT . RANDOM typeid SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On RANDOM shift to state 311
-- On LPAREN shift to state 369
-- On COLON shift to state 372
## Reductions:
-- On LEFTARROW
--   reduce production basicpattern -> IDENT
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> IDENT
** Conflict on LPAREN

State 311:
## Known stack suffix:
## IDENT RANDOM
## LR(1) items:
pterm -> IDENT RANDOM . typeid SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 312
## Reductions:

State 312:
## Known stack suffix:
## IDENT RANDOM typeid
## LR(1) items:
pterm -> IDENT RANDOM typeid . SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## IDENT RANDOM typeid SEMI
## LR(1) items:
pterm -> IDENT RANDOM typeid SEMI . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 368
-- On basicpattern shift to state 332
## Reductions:

State 314:
## Known stack suffix:
## GET
## LR(1) items:
pterm -> GET . IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET . IDENT LPAREN tpatternseq RPAREN IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET . IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET . IDENT LPAREN tpatternseq RPAREN IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## GET IDENT
## LR(1) items:
pterm -> GET IDENT . LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT . LPAREN tpatternseq RPAREN IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT . LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT . LPAREN tpatternseq RPAREN IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## GET IDENT LPAREN
## LR(1) items:
pterm -> GET IDENT LPAREN . tpatternseq RPAREN SUCHTHAT pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN . tpatternseq RPAREN IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN . tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN . tpatternseq RPAREN IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 302
-- On IDENT shift to state 303
-- On EQUAL shift to state 305
-- On tpatternseq shift to state 317
-- On tpattern shift to state 363
-- On nepatternseq shift to state 367
-- On basicpattern shift to state 366
## Reductions:
-- On RPAREN
--   reduce production tpatternseq ->

State 317:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq
## LR(1) items:
pterm -> GET IDENT LPAREN tpatternseq . RPAREN SUCHTHAT pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq . RPAREN IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq . RPAREN SUCHTHAT pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq . RPAREN IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN
## LR(1) items:
pterm -> GET IDENT LPAREN tpatternseq RPAREN . SUCHTHAT pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN . IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN . SUCHTHAT pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN . IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On SUCHTHAT shift to state 319
-- On IN shift to state 359
## Reductions:

State 319:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT
## LR(1) items:
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT . pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT . pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 354
-- On basicpattern shift to state 332
## Reductions:

State 320:
## Known stack suffix:
## EVENT
## LR(1) items:
pterm -> EVENT . IDENT LPAREN ptermseq RPAREN newarg SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> EVENT . IDENT newarg SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## EVENT IDENT
## LR(1) items:
pterm -> EVENT IDENT . LPAREN ptermseq RPAREN newarg SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> EVENT IDENT . newarg SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 322
-- On LBRACKET shift to state 292
-- On newarg shift to state 351
## Reductions:
-- On SEMI
--   reduce production newarg ->

State 322:
## Known stack suffix:
## EVENT IDENT LPAREN
## LR(1) items:
pterm -> EVENT IDENT LPAREN . ptermseq RPAREN newarg SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On ptermseq shift to state 342
-- On pterm shift to state 347
-- On neptermseq shift to state 350
-- On basicpattern shift to state 332
## Reductions:
-- On RPAREN
--   reduce production ptermseq ->

State 323:
## Known stack suffix:
## CHOICE
## LR(1) items:
pterm -> CHOICE . LBRACKET pterm COMMA pterm RBRACKET [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LBRACKET shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## CHOICE LBRACKET
## LR(1) items:
pterm -> CHOICE LBRACKET . pterm COMMA pterm RBRACKET [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 325
-- On basicpattern shift to state 332
## Reductions:

State 325:
## Known stack suffix:
## CHOICE LBRACKET pterm
## LR(1) items:
pterm -> CHOICE LBRACKET pterm . COMMA pterm RBRACKET [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . EQUAL pterm [ WEDGE OR EQUAL DIFF COMMA ]
pterm -> pterm . DIFF pterm [ WEDGE OR EQUAL DIFF COMMA ]
pterm -> pterm . OR pterm [ WEDGE OR EQUAL DIFF COMMA ]
pterm -> pterm . WEDGE pterm [ WEDGE OR EQUAL DIFF COMMA ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
-- On COMMA shift to state 339
## Reductions:

State 326:
## Known stack suffix:
## pterm WEDGE
## LR(1) items:
pterm -> pterm WEDGE . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 327
-- On basicpattern shift to state 332
## Reductions:

State 327:
## Known stack suffix:
## pterm WEDGE pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm WEDGE pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COMMA BARRIER BAR
--   reduce production pterm -> pterm WEDGE pterm

State 328:
## Known stack suffix:
## pterm EQUAL
## LR(1) items:
pterm -> pterm EQUAL . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 329
-- On basicpattern shift to state 332
## Reductions:

State 329:
## Known stack suffix:
## pterm EQUAL pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm EQUAL pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COMMA BARRIER BAR
--   reduce production pterm -> pterm EQUAL pterm

State 330:
## Known stack suffix:
## pterm DIFF
## LR(1) items:
pterm -> pterm DIFF . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 331
-- On basicpattern shift to state 332
## Reductions:

State 331:
## Known stack suffix:
## pterm DIFF pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm DIFF pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT COMMA BARRIER BAR
--   reduce production pterm -> pterm DIFF pterm

State 332:
## Known stack suffix:
## basicpattern
## LR(1) items:
pterm -> basicpattern . LEFTARROW pterm SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LEFTARROW shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## basicpattern LEFTARROW
## LR(1) items:
pterm -> basicpattern LEFTARROW . pterm SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 334
-- On basicpattern shift to state 332
## Reductions:

State 334:
## Known stack suffix:
## basicpattern LEFTARROW pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE SEMI OR EQUAL DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE SEMI OR EQUAL DIFF ]
pterm -> pterm . OR pterm [ WEDGE SEMI OR EQUAL DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE SEMI OR EQUAL DIFF ]
pterm -> basicpattern LEFTARROW pterm . SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On SEMI shift to state 335
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:

State 335:
## Known stack suffix:
## basicpattern LEFTARROW pterm SEMI
## LR(1) items:
pterm -> basicpattern LEFTARROW pterm SEMI . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 336
-- On basicpattern shift to state 332
## Reductions:

State 336:
## Known stack suffix:
## basicpattern LEFTARROW pterm SEMI pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> basicpattern LEFTARROW pterm SEMI pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> basicpattern LEFTARROW pterm SEMI pterm
** Conflict on WEDGE OR EQUAL DIFF

State 337:
## Known stack suffix:
## pterm OR
## LR(1) items:
pterm -> pterm OR . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 338
-- On basicpattern shift to state 332
## Reductions:

State 338:
## Known stack suffix:
## pterm OR pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm OR pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD THEN SEMI RPAREN REPL RBRACKET PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT COMMA BARRIER BAR
--   reduce production pterm -> pterm OR pterm

State 339:
## Known stack suffix:
## CHOICE LBRACKET pterm COMMA
## LR(1) items:
pterm -> CHOICE LBRACKET pterm COMMA . pterm RBRACKET [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 340
-- On basicpattern shift to state 332
## Reductions:

State 340:
## Known stack suffix:
## CHOICE LBRACKET pterm COMMA pterm
## LR(1) items:
pterm -> CHOICE LBRACKET pterm COMMA pterm . RBRACKET [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . EQUAL pterm [ WEDGE RBRACKET OR EQUAL DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE RBRACKET OR EQUAL DIFF ]
pterm -> pterm . OR pterm [ WEDGE RBRACKET OR EQUAL DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE RBRACKET OR EQUAL DIFF ]
## Transitions:
-- On WEDGE shift to state 326
-- On RBRACKET shift to state 341
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:

State 341:
## Known stack suffix:
## CHOICE LBRACKET pterm COMMA pterm RBRACKET
## LR(1) items:
pterm -> CHOICE LBRACKET pterm COMMA pterm RBRACKET . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> CHOICE LBRACKET pterm COMMA pterm RBRACKET

State 342:
## Known stack suffix:
## EVENT IDENT LPAREN ptermseq
## LR(1) items:
pterm -> EVENT IDENT LPAREN ptermseq . RPAREN newarg SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## EVENT IDENT LPAREN ptermseq RPAREN
## LR(1) items:
pterm -> EVENT IDENT LPAREN ptermseq RPAREN . newarg SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On LBRACKET shift to state 292
-- On newarg shift to state 344
## Reductions:
-- On SEMI
--   reduce production newarg ->

State 344:
## Known stack suffix:
## EVENT IDENT LPAREN ptermseq RPAREN newarg
## LR(1) items:
pterm -> EVENT IDENT LPAREN ptermseq RPAREN newarg . SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## EVENT IDENT LPAREN ptermseq RPAREN newarg SEMI
## LR(1) items:
pterm -> EVENT IDENT LPAREN ptermseq RPAREN newarg SEMI . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 346
-- On basicpattern shift to state 332
## Reductions:

State 346:
## Known stack suffix:
## EVENT IDENT LPAREN ptermseq RPAREN newarg SEMI pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> EVENT IDENT LPAREN ptermseq RPAREN newarg SEMI pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> EVENT IDENT LPAREN ptermseq RPAREN newarg SEMI pterm
** Conflict on WEDGE OR EQUAL DIFF

State 347:
## Known stack suffix:
## pterm
## LR(1) items:
neptermseq -> pterm . COMMA neptermseq [ RPAREN ]
neptermseq -> pterm . [ RPAREN ]
pterm -> pterm . EQUAL pterm [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
pterm -> pterm . DIFF pterm [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
pterm -> pterm . OR pterm [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
pterm -> pterm . WEDGE pterm [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
-- On COMMA shift to state 348
## Reductions:
-- On RPAREN
--   reduce production neptermseq -> pterm

State 348:
## Known stack suffix:
## pterm COMMA
## LR(1) items:
neptermseq -> pterm COMMA . neptermseq [ RPAREN ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 347
-- On neptermseq shift to state 349
-- On basicpattern shift to state 332
## Reductions:

State 349:
## Known stack suffix:
## pterm COMMA neptermseq
## LR(1) items:
neptermseq -> pterm COMMA neptermseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production neptermseq -> pterm COMMA neptermseq

State 350:
## Known stack suffix:
## neptermseq
## LR(1) items:
ptermseq -> neptermseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production ptermseq -> neptermseq

State 351:
## Known stack suffix:
## EVENT IDENT newarg
## LR(1) items:
pterm -> EVENT IDENT newarg . SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## EVENT IDENT newarg SEMI
## LR(1) items:
pterm -> EVENT IDENT newarg SEMI . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 353
-- On basicpattern shift to state 332
## Reductions:

State 353:
## Known stack suffix:
## EVENT IDENT newarg SEMI pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> EVENT IDENT newarg SEMI pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> EVENT IDENT newarg SEMI pterm
** Conflict on WEDGE OR EQUAL DIFF

State 354:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> pterm . OR pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm . IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm . IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On IN shift to state 355
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:

State 355:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN
## LR(1) items:
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN . pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 356
-- On basicpattern shift to state 332
## Reductions:

State 356:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm . ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On ELSE shift to state 357
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm
** Conflict on WEDGE OR EQUAL ELSE DIFF

State 357:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE
## LR(1) items:
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 358
-- On basicpattern shift to state 332
## Reductions:

State 358:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm
** Conflict on WEDGE OR EQUAL DIFF

State 359:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN IN
## LR(1) items:
pterm -> GET IDENT LPAREN tpatternseq RPAREN IN . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN IN . pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 360
-- On basicpattern shift to state 332
## Reductions:

State 360:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN IN pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN IN pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN IN pterm . ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On ELSE shift to state 361
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> GET IDENT LPAREN tpatternseq RPAREN IN pterm
** Conflict on WEDGE OR EQUAL ELSE DIFF

State 361:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN IN pterm ELSE
## LR(1) items:
pterm -> GET IDENT LPAREN tpatternseq RPAREN IN pterm ELSE . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 362
-- On basicpattern shift to state 332
## Reductions:

State 362:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN IN pterm ELSE pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> GET IDENT LPAREN tpatternseq RPAREN IN pterm ELSE pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> GET IDENT LPAREN tpatternseq RPAREN IN pterm ELSE pterm
** Conflict on WEDGE OR EQUAL DIFF

State 363:
## Known stack suffix:
## tpattern
## LR(1) items:
nepatternseq -> tpattern . COMMA nepatternseq [ RPAREN ]
nepatternseq -> tpattern . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 364
## Reductions:
-- On RPAREN
--   reduce production nepatternseq -> tpattern

State 364:
## Known stack suffix:
## tpattern COMMA
## LR(1) items:
nepatternseq -> tpattern COMMA . nepatternseq [ RPAREN ]
## Transitions:
-- On LPAREN shift to state 302
-- On IDENT shift to state 303
-- On EQUAL shift to state 305
-- On tpattern shift to state 363
-- On nepatternseq shift to state 365
-- On basicpattern shift to state 366
## Reductions:

State 365:
## Known stack suffix:
## tpattern COMMA nepatternseq
## LR(1) items:
nepatternseq -> tpattern COMMA nepatternseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production nepatternseq -> tpattern COMMA nepatternseq

State 366:
## Known stack suffix:
## basicpattern
## LR(1) items:
tpattern -> basicpattern . [ RPAREN EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RPAREN EQUAL COMMA
--   reduce production tpattern -> basicpattern

State 367:
## Known stack suffix:
## nepatternseq
## LR(1) items:
tpatternseq -> nepatternseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production tpatternseq -> nepatternseq

State 368:
## Known stack suffix:
## IDENT RANDOM typeid SEMI pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> IDENT RANDOM typeid SEMI pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> IDENT RANDOM typeid SEMI pterm
** Conflict on WEDGE OR EQUAL DIFF

State 369:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
pterm -> IDENT LPAREN . ptermseq RPAREN [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On ptermseq shift to state 370
-- On pterm shift to state 347
-- On neptermseq shift to state 350
-- On basicpattern shift to state 332
## Reductions:
-- On RPAREN
--   reduce production ptermseq ->

State 370:
## Known stack suffix:
## IDENT LPAREN ptermseq
## LR(1) items:
pterm -> IDENT LPAREN ptermseq . RPAREN [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## IDENT LPAREN ptermseq RPAREN
## LR(1) items:
pterm -> IDENT LPAREN ptermseq RPAREN . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> IDENT LPAREN ptermseq RPAREN

State 372:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
basicpattern -> IDENT COLON . typeid [ RPAREN LEFTARROW COMMA ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 373
## Reductions:

State 373:
## Known stack suffix:
## IDENT COLON typeid
## LR(1) items:
basicpattern -> IDENT COLON typeid . [ RPAREN LEFTARROW COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LEFTARROW COMMA
--   reduce production basicpattern -> IDENT COLON typeid

State 374:
## Known stack suffix:
## IF pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE THEN OR EQUAL DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE THEN OR EQUAL DIFF ]
pterm -> pterm . OR pterm [ WEDGE THEN OR EQUAL DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE THEN OR EQUAL DIFF ]
pterm -> IF pterm . THEN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> IF pterm . THEN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On THEN shift to state 375
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:

State 375:
## Known stack suffix:
## IF pterm THEN
## LR(1) items:
pterm -> IF pterm THEN . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> IF pterm THEN . pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 376
-- On basicpattern shift to state 332
## Reductions:

State 376:
## Known stack suffix:
## IF pterm THEN pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> IF pterm THEN pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> IF pterm THEN pterm . ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On ELSE shift to state 377
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> IF pterm THEN pterm
** Conflict on WEDGE OR EQUAL ELSE DIFF

State 377:
## Known stack suffix:
## IF pterm THEN pterm ELSE
## LR(1) items:
pterm -> IF pterm THEN pterm ELSE . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 378
-- On basicpattern shift to state 332
## Reductions:

State 378:
## Known stack suffix:
## IF pterm THEN pterm ELSE pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> IF pterm THEN pterm ELSE pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> IF pterm THEN pterm ELSE pterm
** Conflict on WEDGE OR EQUAL DIFF

State 379:
## Known stack suffix:
## INSERT IDENT LPAREN ptermseq
## LR(1) items:
pterm -> INSERT IDENT LPAREN ptermseq . RPAREN SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## INSERT IDENT LPAREN ptermseq RPAREN
## LR(1) items:
pterm -> INSERT IDENT LPAREN ptermseq RPAREN . SEMI pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## INSERT IDENT LPAREN ptermseq RPAREN SEMI
## LR(1) items:
pterm -> INSERT IDENT LPAREN ptermseq RPAREN SEMI . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 382
-- On basicpattern shift to state 332
## Reductions:

State 382:
## Known stack suffix:
## INSERT IDENT LPAREN ptermseq RPAREN SEMI pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> INSERT IDENT LPAREN ptermseq RPAREN SEMI pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> INSERT IDENT LPAREN ptermseq RPAREN SEMI pterm
** Conflict on WEDGE OR EQUAL DIFF

State 383:
## Known stack suffix:
## EQUAL pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
pterm -> pterm . DIFF pterm [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
pterm -> pterm . OR pterm [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
pterm -> pterm . WEDGE pterm [ WEDGE RPAREN OR EQUAL DIFF COMMA ]
tpattern -> EQUAL pterm . [ RPAREN EQUAL COMMA ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On DIFF shift to state 330
## Reductions:
-- On RPAREN COMMA
--   reduce production tpattern -> EQUAL pterm

State 384:
## Known stack suffix:
## IDENT LPAREN tpatternseq
## LR(1) items:
tpattern -> IDENT LPAREN tpatternseq . RPAREN [ RPAREN EQUAL COMMA ]
## Transitions:
-- On RPAREN shift to state 385
## Reductions:

State 385:
## Known stack suffix:
## IDENT LPAREN tpatternseq RPAREN
## LR(1) items:
tpattern -> IDENT LPAREN tpatternseq RPAREN . [ RPAREN EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RPAREN EQUAL COMMA
--   reduce production tpattern -> IDENT LPAREN tpatternseq RPAREN

State 386:
## Known stack suffix:
## LPAREN tpatternseq
## LR(1) items:
tpattern -> LPAREN tpatternseq . RPAREN [ RPAREN EQUAL COMMA ]
## Transitions:
-- On RPAREN shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## LPAREN tpatternseq RPAREN
## LR(1) items:
tpattern -> LPAREN tpatternseq RPAREN . [ RPAREN EQUAL COMMA ]
## Transitions:
## Reductions:
-- On RPAREN EQUAL COMMA
--   reduce production tpattern -> LPAREN tpatternseq RPAREN

State 388:
## Known stack suffix:
## IDENT
## LR(1) items:
basicpattern -> IDENT . [ EQUAL ]
basicpattern -> IDENT . COLON typeid [ EQUAL ]
nevartype -> IDENT . COLON typeid COMMA nevartype [ SUCHTHAT ]
nevartype -> IDENT . COLON typeid [ SUCHTHAT ]
tpattern -> IDENT . LPAREN tpatternseq RPAREN [ EQUAL ]
## Transitions:
-- On LPAREN shift to state 304
-- On COLON shift to state 389
## Reductions:
-- On EQUAL
--   reduce production basicpattern -> IDENT

State 389:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
basicpattern -> IDENT COLON . typeid [ EQUAL ]
nevartype -> IDENT COLON . typeid COMMA nevartype [ SUCHTHAT ]
nevartype -> IDENT COLON . typeid [ SUCHTHAT ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 390
## Reductions:

State 390:
## Known stack suffix:
## IDENT COLON typeid
## LR(1) items:
basicpattern -> IDENT COLON typeid . [ EQUAL ]
nevartype -> IDENT COLON typeid . COMMA nevartype [ SUCHTHAT ]
nevartype -> IDENT COLON typeid . [ SUCHTHAT ]
## Transitions:
-- On COMMA shift to state 32
## Reductions:
-- On EQUAL
--   reduce production basicpattern -> IDENT COLON typeid
-- On SUCHTHAT
--   reduce production nevartype -> IDENT COLON typeid

State 391:
## Known stack suffix:
## LET tpattern
## LR(1) items:
pterm -> LET tpattern . EQUAL pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET tpattern . EQUAL pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On EQUAL shift to state 392
## Reductions:

State 392:
## Known stack suffix:
## LET tpattern EQUAL
## LR(1) items:
pterm -> LET tpattern EQUAL . pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET tpattern EQUAL . pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 393
-- On basicpattern shift to state 332
## Reductions:

State 393:
## Known stack suffix:
## LET tpattern EQUAL pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> pterm . OR pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> LET tpattern EQUAL pterm . IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET tpattern EQUAL pterm . IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On IN shift to state 394
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:

State 394:
## Known stack suffix:
## LET tpattern EQUAL pterm IN
## LR(1) items:
pterm -> LET tpattern EQUAL pterm IN . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET tpattern EQUAL pterm IN . pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 395
-- On basicpattern shift to state 332
## Reductions:

State 395:
## Known stack suffix:
## LET tpattern EQUAL pterm IN pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET tpattern EQUAL pterm IN pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET tpattern EQUAL pterm IN pterm . ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On ELSE shift to state 396
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> LET tpattern EQUAL pterm IN pterm
** Conflict on WEDGE OR EQUAL ELSE DIFF

State 396:
## Known stack suffix:
## LET tpattern EQUAL pterm IN pterm ELSE
## LR(1) items:
pterm -> LET tpattern EQUAL pterm IN pterm ELSE . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 397
-- On basicpattern shift to state 332
## Reductions:

State 397:
## Known stack suffix:
## LET tpattern EQUAL pterm IN pterm ELSE pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET tpattern EQUAL pterm IN pterm ELSE pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> LET tpattern EQUAL pterm IN pterm ELSE pterm
** Conflict on WEDGE OR EQUAL DIFF

State 398:
## Known stack suffix:
## LET nevartype
## LR(1) items:
pterm -> LET nevartype . SUCHTHAT pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET nevartype . SUCHTHAT pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On SUCHTHAT shift to state 399
## Reductions:

State 399:
## Known stack suffix:
## LET nevartype SUCHTHAT
## LR(1) items:
pterm -> LET nevartype SUCHTHAT . pterm IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET nevartype SUCHTHAT . pterm IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 400
-- On basicpattern shift to state 332
## Reductions:

State 400:
## Known stack suffix:
## LET nevartype SUCHTHAT pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> pterm . OR pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE OR IN EQUAL DIFF ]
pterm -> LET nevartype SUCHTHAT pterm . IN pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET nevartype SUCHTHAT pterm . IN pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On IN shift to state 401
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:

State 401:
## Known stack suffix:
## LET nevartype SUCHTHAT pterm IN
## LR(1) items:
pterm -> LET nevartype SUCHTHAT pterm IN . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET nevartype SUCHTHAT pterm IN . pterm ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 402
-- On basicpattern shift to state 332
## Reductions:

State 402:
## Known stack suffix:
## LET nevartype SUCHTHAT pterm IN pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET nevartype SUCHTHAT pterm IN pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET nevartype SUCHTHAT pterm IN pterm . ELSE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On ELSE shift to state 403
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> LET nevartype SUCHTHAT pterm IN pterm
** Conflict on WEDGE OR EQUAL ELSE DIFF

State 403:
## Known stack suffix:
## LET nevartype SUCHTHAT pterm IN pterm ELSE
## LR(1) items:
pterm -> LET nevartype SUCHTHAT pterm IN pterm ELSE . pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 404
-- On basicpattern shift to state 332
## Reductions:

State 404:
## Known stack suffix:
## LET nevartype SUCHTHAT pterm IN pterm ELSE pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> LET nevartype SUCHTHAT pterm IN pterm ELSE pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> LET nevartype SUCHTHAT pterm IN pterm ELSE pterm
** Conflict on WEDGE OR EQUAL DIFF

State 405:
## Known stack suffix:
## LPAREN ptermseq
## LR(1) items:
pterm -> LPAREN ptermseq . RPAREN [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## LPAREN ptermseq RPAREN
## LR(1) items:
pterm -> LPAREN ptermseq RPAREN . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> LPAREN ptermseq RPAREN

State 407:
## Known stack suffix:
## NEW IDENT newarg COLON typeid SEMI pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> NEW IDENT newarg COLON typeid SEMI pterm . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> NEW IDENT newarg COLON typeid SEMI pterm
** Conflict on WEDGE OR EQUAL DIFF

State 408:
## Known stack suffix:
## NOT LPAREN pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE RPAREN OR EQUAL DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE RPAREN OR EQUAL DIFF ]
pterm -> NOT LPAREN pterm . RPAREN [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
pterm -> pterm . OR pterm [ WEDGE RPAREN OR EQUAL DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE RPAREN OR EQUAL DIFF ]
## Transitions:
-- On WEDGE shift to state 326
-- On RPAREN shift to state 409
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:

State 409:
## Known stack suffix:
## NOT LPAREN pterm RPAREN
## LR(1) items:
pterm -> NOT LPAREN pterm RPAREN . [ YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD WEDGE THEN SEMI RPAREN REPL RBRACKET PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF COMMA BARRIER BAR
--   reduce production pterm -> NOT LPAREN pterm RPAREN

State 410:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
pterm -> pterm . EQUAL pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . OR pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DOT shift to state 411
-- On DIFF shift to state 330
## Reductions:

State 411:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 716
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 412:
## Known stack suffix:
## LET
## LR(1) items:
lib -> LET . IDENT EQUAL tprocess DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> LET . IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## LET IDENT
## LR(1) items:
lib -> LET IDENT . EQUAL tprocess DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> LET IDENT . LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LPAREN shift to state 414
-- On EQUAL shift to state 712
## Reductions:

State 414:
## Known stack suffix:
## LET IDENT LPAREN
## LR(1) items:
lib -> LET IDENT LPAREN . mayfailvartypeseq RPAREN EQUAL tprocess DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 279
-- On nemayfailvartypeseq shift to state 284
-- On mayfailvartypeseq shift to state 415
-- On mayfailvartype shift to state 605
## Reductions:
-- On RPAREN
--   reduce production mayfailvartypeseq ->

State 415:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq . RPAREN EQUAL tprocess DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RPAREN shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN . EQUAL tprocess DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On EQUAL shift to state 417
## Reductions:

State 417:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL . tprocess DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 545
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 418:
## Known stack suffix:
## YIELD
## LR(1) items:
tprocess -> YIELD . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> YIELD

State 419:
## Known stack suffix:
## REPL
## LR(1) items:
tprocess -> REPL . tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> REPL . IDENT LEQ IDENT tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 540
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 544
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 420:
## Known stack suffix:
## PHASE
## LR(1) items:
tprocess -> PHASE . INT opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On INT shift to state 421
## Reductions:

State 421:
## Known stack suffix:
## PHASE INT
## LR(1) items:
tprocess -> PHASE INT . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On opttprocess shift to state 539
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 422:
## Known stack suffix:
## SEMI
## LR(1) items:
opttprocess -> SEMI . tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 538
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 423:
## Known stack suffix:
## OUT
## LR(1) items:
tprocess -> OUT . LPAREN pterm COMMA pterm RPAREN progend opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 424
## Reductions:

State 424:
## Known stack suffix:
## OUT LPAREN
## LR(1) items:
tprocess -> OUT LPAREN . pterm COMMA pterm RPAREN progend opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 425
-- On basicpattern shift to state 332
## Reductions:

State 425:
## Known stack suffix:
## OUT LPAREN pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE OR EQUAL DIFF COMMA ]
pterm -> pterm . DIFF pterm [ WEDGE OR EQUAL DIFF COMMA ]
pterm -> pterm . OR pterm [ WEDGE OR EQUAL DIFF COMMA ]
pterm -> pterm . WEDGE pterm [ WEDGE OR EQUAL DIFF COMMA ]
tprocess -> OUT LPAREN pterm . COMMA pterm RPAREN progend opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
-- On COMMA shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## OUT LPAREN pterm COMMA
## LR(1) items:
tprocess -> OUT LPAREN pterm COMMA . pterm RPAREN progend opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 427
-- On basicpattern shift to state 332
## Reductions:

State 427:
## Known stack suffix:
## OUT LPAREN pterm COMMA pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE RPAREN OR EQUAL DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE RPAREN OR EQUAL DIFF ]
pterm -> pterm . OR pterm [ WEDGE RPAREN OR EQUAL DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE RPAREN OR EQUAL DIFF ]
tprocess -> OUT LPAREN pterm COMMA pterm . RPAREN progend opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On RPAREN shift to state 428
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:

State 428:
## Known stack suffix:
## OUT LPAREN pterm COMMA pterm RPAREN
## LR(1) items:
tprocess -> OUT LPAREN pterm COMMA pterm RPAREN . progend opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On RBRACE shift to state 429
-- On progend shift to state 430
## Reductions:
-- On YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production progend ->

State 429:
## Known stack suffix:
## RBRACE
## LR(1) items:
progend -> RBRACE . [ YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production progend -> RBRACE

State 430:
## Known stack suffix:
## OUT LPAREN pterm COMMA pterm RPAREN progend
## LR(1) items:
tprocess -> OUT LPAREN pterm COMMA pterm RPAREN progend . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On opttprocess shift to state 431
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 431:
## Known stack suffix:
## OUT LPAREN pterm COMMA pterm RPAREN progend opttprocess
## LR(1) items:
tprocess -> OUT LPAREN pterm COMMA pterm RPAREN progend opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> OUT LPAREN pterm COMMA pterm RPAREN progend opttprocess

State 432:
## Known stack suffix:
## NEW
## LR(1) items:
tprocess -> NEW . IDENT newarg COLON typeid opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 433
## Reductions:

State 433:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
tprocess -> NEW IDENT . newarg COLON typeid opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LBRACKET shift to state 292
-- On newarg shift to state 434
## Reductions:
-- On COLON
--   reduce production newarg ->

State 434:
## Known stack suffix:
## NEW IDENT newarg
## LR(1) items:
tprocess -> NEW IDENT newarg . COLON typeid opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On COLON shift to state 435
## Reductions:

State 435:
## Known stack suffix:
## NEW IDENT newarg COLON
## LR(1) items:
tprocess -> NEW IDENT newarg COLON . typeid opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## NEW IDENT newarg COLON typeid
## LR(1) items:
tprocess -> NEW IDENT newarg COLON typeid . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On opttprocess shift to state 437
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 437:
## Known stack suffix:
## NEW IDENT newarg COLON typeid opttprocess
## LR(1) items:
tprocess -> NEW IDENT newarg COLON typeid opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> NEW IDENT newarg COLON typeid opttprocess

State 438:
## Known stack suffix:
## LPAREN
## LR(1) items:
tprocess -> LPAREN . tprocess RPAREN [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 536
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 439:
## Known stack suffix:
## LET
## LR(1) items:
tprocess -> LET . tpattern EQUAL pterm [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> LET . tpattern EQUAL pterm IN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> LET . nevartype SUCHTHAT pterm [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> LET . nevartype SUCHTHAT pterm IN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 302
-- On IDENT shift to state 388
-- On EQUAL shift to state 305
-- On tpattern shift to state 440
-- On nevartype shift to state 530
-- On basicpattern shift to state 366
## Reductions:

State 440:
## Known stack suffix:
## LET tpattern
## LR(1) items:
tprocess -> LET tpattern . EQUAL pterm [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> LET tpattern . EQUAL pterm IN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On EQUAL shift to state 441
## Reductions:

State 441:
## Known stack suffix:
## LET tpattern EQUAL
## LR(1) items:
tprocess -> LET tpattern EQUAL . pterm [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> LET tpattern EQUAL . pterm IN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 442
-- On basicpattern shift to state 332
## Reductions:

State 442:
## Known stack suffix:
## LET tpattern EQUAL pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
tprocess -> LET tpattern EQUAL pterm . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> LET tpattern EQUAL pterm . IN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On IN shift to state 443
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> LET tpattern EQUAL pterm
** Conflict on IN

State 443:
## Known stack suffix:
## LET tpattern EQUAL pterm IN
## LR(1) items:
tprocess -> LET tpattern EQUAL pterm IN . tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 528
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 444:
## Known stack suffix:
## INT
## LR(1) items:
tprocess -> INT . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> INT

State 445:
## Known stack suffix:
## INSERT
## LR(1) items:
tprocess -> INSERT . IDENT LPAREN ptermseq RPAREN opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 446
## Reductions:

State 446:
## Known stack suffix:
## INSERT IDENT
## LR(1) items:
tprocess -> INSERT IDENT . LPAREN ptermseq RPAREN opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 447
## Reductions:

State 447:
## Known stack suffix:
## INSERT IDENT LPAREN
## LR(1) items:
tprocess -> INSERT IDENT LPAREN . ptermseq RPAREN opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On ptermseq shift to state 448
-- On pterm shift to state 347
-- On neptermseq shift to state 350
-- On basicpattern shift to state 332
## Reductions:
-- On RPAREN
--   reduce production ptermseq ->

State 448:
## Known stack suffix:
## INSERT IDENT LPAREN ptermseq
## LR(1) items:
tprocess -> INSERT IDENT LPAREN ptermseq . RPAREN opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 449
## Reductions:

State 449:
## Known stack suffix:
## INSERT IDENT LPAREN ptermseq RPAREN
## LR(1) items:
tprocess -> INSERT IDENT LPAREN ptermseq RPAREN . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On opttprocess shift to state 450
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 450:
## Known stack suffix:
## INSERT IDENT LPAREN ptermseq RPAREN opttprocess
## LR(1) items:
tprocess -> INSERT IDENT LPAREN ptermseq RPAREN opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> INSERT IDENT LPAREN ptermseq RPAREN opttprocess

State 451:
## Known stack suffix:
## IN
## LR(1) items:
tprocess -> IN . LPAREN pterm COMMA tpattern RPAREN opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 452
## Reductions:

State 452:
## Known stack suffix:
## IN LPAREN
## LR(1) items:
tprocess -> IN LPAREN . pterm COMMA tpattern RPAREN opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 453
-- On basicpattern shift to state 332
## Reductions:

State 453:
## Known stack suffix:
## IN LPAREN pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE OR EQUAL DIFF COMMA ]
pterm -> pterm . DIFF pterm [ WEDGE OR EQUAL DIFF COMMA ]
pterm -> pterm . OR pterm [ WEDGE OR EQUAL DIFF COMMA ]
pterm -> pterm . WEDGE pterm [ WEDGE OR EQUAL DIFF COMMA ]
tprocess -> IN LPAREN pterm . COMMA tpattern RPAREN opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
-- On COMMA shift to state 454
## Reductions:

State 454:
## Known stack suffix:
## IN LPAREN pterm COMMA
## LR(1) items:
tprocess -> IN LPAREN pterm COMMA . tpattern RPAREN opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 302
-- On IDENT shift to state 303
-- On EQUAL shift to state 305
-- On tpattern shift to state 455
-- On basicpattern shift to state 366
## Reductions:

State 455:
## Known stack suffix:
## IN LPAREN pterm COMMA tpattern
## LR(1) items:
tprocess -> IN LPAREN pterm COMMA tpattern . RPAREN opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 456
## Reductions:

State 456:
## Known stack suffix:
## IN LPAREN pterm COMMA tpattern RPAREN
## LR(1) items:
tprocess -> IN LPAREN pterm COMMA tpattern RPAREN . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On opttprocess shift to state 457
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 457:
## Known stack suffix:
## IN LPAREN pterm COMMA tpattern RPAREN opttprocess
## LR(1) items:
tprocess -> IN LPAREN pterm COMMA tpattern RPAREN opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> IN LPAREN pterm COMMA tpattern RPAREN opttprocess

State 458:
## Known stack suffix:
## IF
## LR(1) items:
tprocess -> IF . pterm THEN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 459
-- On basicpattern shift to state 332
## Reductions:

State 459:
## Known stack suffix:
## IF pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ WEDGE THEN OR EQUAL DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE THEN OR EQUAL DIFF ]
pterm -> pterm . OR pterm [ WEDGE THEN OR EQUAL DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE THEN OR EQUAL DIFF ]
tprocess -> IF pterm . THEN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On THEN shift to state 460
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:

State 460:
## Known stack suffix:
## IF pterm THEN
## LR(1) items:
tprocess -> IF pterm THEN . tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 526
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 461:
## Known stack suffix:
## IDENT
## LR(1) items:
basicpattern -> IDENT . [ LEFTARROW ]
basicpattern -> IDENT . COLON typeid [ LEFTARROW ]
progbegin -> IDENT . programoptions LBRACE [ YIELD REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT BARRIER ]
tprocess -> IDENT . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> IDENT . LPAREN ptermseq RPAREN [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> IDENT . RANDOM typeid opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On RANDOM shift to state 462
-- On LPAREN shift to state 465
-- On LBRACKET shift to state 468
-- On COLON shift to state 372
-- On programoptions shift to state 479
## Reductions:
-- On LEFTARROW
--   reduce production basicpattern -> IDENT
-- On LBRACE
--   reduce production programoptions ->
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> IDENT
** Conflict on LPAREN

State 462:
## Known stack suffix:
## IDENT RANDOM
## LR(1) items:
tprocess -> IDENT RANDOM . typeid opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 463
## Reductions:

State 463:
## Known stack suffix:
## IDENT RANDOM typeid
## LR(1) items:
tprocess -> IDENT RANDOM typeid . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On opttprocess shift to state 464
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 464:
## Known stack suffix:
## IDENT RANDOM typeid opttprocess
## LR(1) items:
tprocess -> IDENT RANDOM typeid opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> IDENT RANDOM typeid opttprocess

State 465:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
tprocess -> IDENT LPAREN . ptermseq RPAREN [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On ptermseq shift to state 466
-- On pterm shift to state 347
-- On neptermseq shift to state 350
-- On basicpattern shift to state 332
## Reductions:
-- On RPAREN
--   reduce production ptermseq ->

State 466:
## Known stack suffix:
## IDENT LPAREN ptermseq
## LR(1) items:
tprocess -> IDENT LPAREN ptermseq . RPAREN [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 467
## Reductions:

State 467:
## Known stack suffix:
## IDENT LPAREN ptermseq RPAREN
## LR(1) items:
tprocess -> IDENT LPAREN ptermseq RPAREN . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> IDENT LPAREN ptermseq RPAREN

State 468:
## Known stack suffix:
## LBRACKET
## LR(1) items:
programoptions -> LBRACKET . progoptlist RBRACKET [ LBRACE ]
## Transitions:
-- On IDENT shift to state 469
-- On progoptlist shift to state 474
-- On progopt shift to state 476
## Reductions:

State 469:
## Known stack suffix:
## IDENT
## LR(1) items:
progopt -> IDENT . GREATER IDENT [ RBRACKET COMMA ]
progopt -> IDENT . LESS IDENT [ RBRACKET COMMA ]
## Transitions:
-- On LESS shift to state 470
-- On GREATER shift to state 472
## Reductions:

State 470:
## Known stack suffix:
## IDENT LESS
## LR(1) items:
progopt -> IDENT LESS . IDENT [ RBRACKET COMMA ]
## Transitions:
-- On IDENT shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## IDENT LESS IDENT
## LR(1) items:
progopt -> IDENT LESS IDENT . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production progopt -> IDENT LESS IDENT

State 472:
## Known stack suffix:
## IDENT GREATER
## LR(1) items:
progopt -> IDENT GREATER . IDENT [ RBRACKET COMMA ]
## Transitions:
-- On IDENT shift to state 473
## Reductions:

State 473:
## Known stack suffix:
## IDENT GREATER IDENT
## LR(1) items:
progopt -> IDENT GREATER IDENT . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production progopt -> IDENT GREATER IDENT

State 474:
## Known stack suffix:
## LBRACKET progoptlist
## LR(1) items:
programoptions -> LBRACKET progoptlist . RBRACKET [ LBRACE ]
## Transitions:
-- On RBRACKET shift to state 475
## Reductions:

State 475:
## Known stack suffix:
## LBRACKET progoptlist RBRACKET
## LR(1) items:
programoptions -> LBRACKET progoptlist RBRACKET . [ LBRACE ]
## Transitions:
## Reductions:
-- On LBRACE
--   reduce production programoptions -> LBRACKET progoptlist RBRACKET

State 476:
## Known stack suffix:
## progopt
## LR(1) items:
progoptlist -> progopt . [ RBRACKET ]
progoptlist -> progopt . COMMA progoptlist [ RBRACKET ]
## Transitions:
-- On COMMA shift to state 477
## Reductions:
-- On RBRACKET
--   reduce production progoptlist -> progopt

State 477:
## Known stack suffix:
## progopt COMMA
## LR(1) items:
progoptlist -> progopt COMMA . progoptlist [ RBRACKET ]
## Transitions:
-- On IDENT shift to state 469
-- On progoptlist shift to state 478
-- On progopt shift to state 476
## Reductions:

State 478:
## Known stack suffix:
## progopt COMMA progoptlist
## LR(1) items:
progoptlist -> progopt COMMA progoptlist . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production progoptlist -> progopt COMMA progoptlist

State 479:
## Known stack suffix:
## IDENT programoptions
## LR(1) items:
progbegin -> IDENT programoptions . LBRACE [ YIELD REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT BARRIER ]
## Transitions:
-- On LBRACE shift to state 480
## Reductions:

State 480:
## Known stack suffix:
## IDENT programoptions LBRACE
## LR(1) items:
progbegin -> IDENT programoptions LBRACE . [ YIELD REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT BARRIER ]
## Transitions:
## Reductions:
-- On YIELD REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT BARRIER
--   reduce production progbegin -> IDENT programoptions LBRACE

State 481:
## Known stack suffix:
## GET
## LR(1) items:
tprocess -> GET . IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> GET . IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## GET IDENT
## LR(1) items:
tprocess -> GET IDENT . LPAREN tpatternseq RPAREN optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> GET IDENT . LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## GET IDENT LPAREN
## LR(1) items:
tprocess -> GET IDENT LPAREN . tpatternseq RPAREN optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> GET IDENT LPAREN . tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 302
-- On IDENT shift to state 303
-- On EQUAL shift to state 305
-- On tpatternseq shift to state 484
-- On tpattern shift to state 363
-- On nepatternseq shift to state 367
-- On basicpattern shift to state 366
## Reductions:
-- On RPAREN
--   reduce production tpatternseq ->

State 484:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq
## LR(1) items:
tprocess -> GET IDENT LPAREN tpatternseq . RPAREN optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> GET IDENT LPAREN tpatternseq . RPAREN SUCHTHAT pterm optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN
## LR(1) items:
tprocess -> GET IDENT LPAREN tpatternseq RPAREN . optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> GET IDENT LPAREN tpatternseq RPAREN . SUCHTHAT pterm optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SUCHTHAT shift to state 486
-- On IN shift to state 488
-- On optinprocess shift to state 524
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production optinprocess ->
** Conflict on IN

State 486:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT
## LR(1) items:
tprocess -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT . pterm optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 487
-- On basicpattern shift to state 332
## Reductions:

State 487:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
tprocess -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm . optinprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On IN shift to state 488
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
-- On optinprocess shift to state 520
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production optinprocess ->
** Conflict on IN

State 488:
## Known stack suffix:
## IN
## LR(1) items:
optinprocess -> IN . tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 519
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 489:
## Known stack suffix:
## FOREACH
## LR(1) items:
tprocess -> FOREACH . IDENT LEQ IDENT DO tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 490
## Reductions:

State 490:
## Known stack suffix:
## FOREACH IDENT
## LR(1) items:
tprocess -> FOREACH IDENT . LEQ IDENT DO tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LEQ shift to state 491
## Reductions:

State 491:
## Known stack suffix:
## FOREACH IDENT LEQ
## LR(1) items:
tprocess -> FOREACH IDENT LEQ . IDENT DO tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## FOREACH IDENT LEQ IDENT
## LR(1) items:
tprocess -> FOREACH IDENT LEQ IDENT . DO tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On DO shift to state 493
## Reductions:

State 493:
## Known stack suffix:
## FOREACH IDENT LEQ IDENT DO
## LR(1) items:
tprocess -> FOREACH IDENT LEQ IDENT DO . tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 510
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 494:
## Known stack suffix:
## EVENT
## LR(1) items:
tprocess -> EVENT . IDENT LPAREN ptermseq RPAREN newarg opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> EVENT . IDENT newarg opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 495
## Reductions:

State 495:
## Known stack suffix:
## EVENT IDENT
## LR(1) items:
tprocess -> EVENT IDENT . LPAREN ptermseq RPAREN newarg opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> EVENT IDENT . newarg opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LPAREN shift to state 496
-- On LBRACKET shift to state 292
-- On newarg shift to state 501
## Reductions:
-- On YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production newarg ->
** Conflict on LPAREN

State 496:
## Known stack suffix:
## EVENT IDENT LPAREN
## LR(1) items:
tprocess -> EVENT IDENT LPAREN . ptermseq RPAREN newarg opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On ptermseq shift to state 497
-- On pterm shift to state 347
-- On neptermseq shift to state 350
-- On basicpattern shift to state 332
## Reductions:
-- On RPAREN
--   reduce production ptermseq ->

State 497:
## Known stack suffix:
## EVENT IDENT LPAREN ptermseq
## LR(1) items:
tprocess -> EVENT IDENT LPAREN ptermseq . RPAREN newarg opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On RPAREN shift to state 498
## Reductions:

State 498:
## Known stack suffix:
## EVENT IDENT LPAREN ptermseq RPAREN
## LR(1) items:
tprocess -> EVENT IDENT LPAREN ptermseq RPAREN . newarg opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LBRACKET shift to state 292
-- On newarg shift to state 499
## Reductions:
-- On YIELD SEMI RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production newarg ->

State 499:
## Known stack suffix:
## EVENT IDENT LPAREN ptermseq RPAREN newarg
## LR(1) items:
tprocess -> EVENT IDENT LPAREN ptermseq RPAREN newarg . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On opttprocess shift to state 500
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 500:
## Known stack suffix:
## EVENT IDENT LPAREN ptermseq RPAREN newarg opttprocess
## LR(1) items:
tprocess -> EVENT IDENT LPAREN ptermseq RPAREN newarg opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> EVENT IDENT LPAREN ptermseq RPAREN newarg opttprocess

State 501:
## Known stack suffix:
## EVENT IDENT newarg
## LR(1) items:
tprocess -> EVENT IDENT newarg . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On opttprocess shift to state 502
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 502:
## Known stack suffix:
## EVENT IDENT newarg opttprocess
## LR(1) items:
tprocess -> EVENT IDENT newarg opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> EVENT IDENT newarg opttprocess

State 503:
## Known stack suffix:
## BARRIER
## LR(1) items:
tprocess -> BARRIER . INT opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> BARRIER . INT LBRACKET IDENT RBRACKET opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On INT shift to state 504
## Reductions:

State 504:
## Known stack suffix:
## BARRIER INT
## LR(1) items:
tprocess -> BARRIER INT . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> BARRIER INT . LBRACKET IDENT RBRACKET opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On LBRACKET shift to state 505
-- On opttprocess shift to state 509
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 505:
## Known stack suffix:
## BARRIER INT LBRACKET
## LR(1) items:
tprocess -> BARRIER INT LBRACKET . IDENT RBRACKET opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 506
## Reductions:

State 506:
## Known stack suffix:
## BARRIER INT LBRACKET IDENT
## LR(1) items:
tprocess -> BARRIER INT LBRACKET IDENT . RBRACKET opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On RBRACKET shift to state 507
## Reductions:

State 507:
## Known stack suffix:
## BARRIER INT LBRACKET IDENT RBRACKET
## LR(1) items:
tprocess -> BARRIER INT LBRACKET IDENT RBRACKET . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SEMI shift to state 422
-- On opttprocess shift to state 508
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 508:
## Known stack suffix:
## BARRIER INT LBRACKET IDENT RBRACKET opttprocess
## LR(1) items:
tprocess -> BARRIER INT LBRACKET IDENT RBRACKET opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> BARRIER INT LBRACKET IDENT RBRACKET opttprocess

State 509:
## Known stack suffix:
## BARRIER INT opttprocess
## LR(1) items:
tprocess -> BARRIER INT opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> BARRIER INT opttprocess

State 510:
## Known stack suffix:
## FOREACH IDENT LEQ IDENT DO tprocess
## LR(1) items:
tprocess -> FOREACH IDENT LEQ IDENT DO tprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> FOREACH IDENT LEQ IDENT DO tprocess

State 511:
## Known stack suffix:
## progbegin
## LR(1) items:
tprocess -> progbegin . tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 512
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 512:
## Known stack suffix:
## progbegin tprocess
## LR(1) items:
tprocess -> progbegin tprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On BAR shift to state 513
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> progbegin tprocess
** Conflict on BAR

State 513:
## Known stack suffix:
## tprocess BAR
## LR(1) items:
tprocess -> tprocess BAR . tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 514
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 514:
## Known stack suffix:
## tprocess BAR tprocess
## LR(1) items:
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess BAR tprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On BAR shift to state 513
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER
--   reduce production tprocess -> tprocess BAR tprocess

State 515:
## Known stack suffix:
## basicpattern
## LR(1) items:
tprocess -> basicpattern . LEFTARROW pterm opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On LEFTARROW shift to state 516
## Reductions:

State 516:
## Known stack suffix:
## basicpattern LEFTARROW
## LR(1) items:
tprocess -> basicpattern LEFTARROW . pterm opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 517
-- On basicpattern shift to state 332
## Reductions:

State 517:
## Known stack suffix:
## basicpattern LEFTARROW pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE SEMI RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE SEMI RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE SEMI RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE SEMI RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
tprocess -> basicpattern LEFTARROW pterm . opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On SEMI shift to state 422
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
-- On opttprocess shift to state 518
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess ->

State 518:
## Known stack suffix:
## basicpattern LEFTARROW pterm opttprocess
## LR(1) items:
tprocess -> basicpattern LEFTARROW pterm opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> basicpattern LEFTARROW pterm opttprocess

State 519:
## Known stack suffix:
## IN tprocess
## LR(1) items:
optinprocess -> IN tprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On BAR shift to state 513
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production optinprocess -> IN tprocess
** Conflict on BAR

State 520:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess
## LR(1) items:
tprocess -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess . optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On ELSE shift to state 521
-- On optelseprocess shift to state 523
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production optelseprocess ->
** Conflict on ELSE

State 521:
## Known stack suffix:
## ELSE
## LR(1) items:
optelseprocess -> ELSE . tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 522
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 522:
## Known stack suffix:
## ELSE tprocess
## LR(1) items:
optelseprocess -> ELSE tprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On BAR shift to state 513
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production optelseprocess -> ELSE tprocess
** Conflict on BAR

State 523:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess
## LR(1) items:
tprocess -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess

State 524:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN optinprocess
## LR(1) items:
tprocess -> GET IDENT LPAREN tpatternseq RPAREN optinprocess . optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On ELSE shift to state 521
-- On optelseprocess shift to state 525
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production optelseprocess ->
** Conflict on ELSE

State 525:
## Known stack suffix:
## GET IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess
## LR(1) items:
tprocess -> GET IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> GET IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess

State 526:
## Known stack suffix:
## IF pterm THEN tprocess
## LR(1) items:
tprocess -> IF pterm THEN tprocess . optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On ELSE shift to state 521
-- On BAR shift to state 513
-- On optelseprocess shift to state 527
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production optelseprocess ->
** Conflict on ELSE BAR

State 527:
## Known stack suffix:
## IF pterm THEN tprocess optelseprocess
## LR(1) items:
tprocess -> IF pterm THEN tprocess optelseprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> IF pterm THEN tprocess optelseprocess

State 528:
## Known stack suffix:
## LET tpattern EQUAL pterm IN tprocess
## LR(1) items:
tprocess -> LET tpattern EQUAL pterm IN tprocess . optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On ELSE shift to state 521
-- On BAR shift to state 513
-- On optelseprocess shift to state 529
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production optelseprocess ->
** Conflict on ELSE BAR

State 529:
## Known stack suffix:
## LET tpattern EQUAL pterm IN tprocess optelseprocess
## LR(1) items:
tprocess -> LET tpattern EQUAL pterm IN tprocess optelseprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> LET tpattern EQUAL pterm IN tprocess optelseprocess

State 530:
## Known stack suffix:
## LET nevartype
## LR(1) items:
tprocess -> LET nevartype . SUCHTHAT pterm [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> LET nevartype . SUCHTHAT pterm IN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On SUCHTHAT shift to state 531
## Reductions:

State 531:
## Known stack suffix:
## LET nevartype SUCHTHAT
## LR(1) items:
tprocess -> LET nevartype SUCHTHAT . pterm [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> LET nevartype SUCHTHAT . pterm IN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 532
-- On basicpattern shift to state 332
## Reductions:

State 532:
## Known stack suffix:
## LET nevartype SUCHTHAT pterm
## LR(1) items:
pterm -> pterm . EQUAL pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . DIFF pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . OR pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
pterm -> pterm . WEDGE pterm [ YIELD WEDGE RPAREN REPL PHASE OUT OR NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EQUAL EOF ELSE DOT DIFF BARRIER BAR ]
tprocess -> LET nevartype SUCHTHAT pterm . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> LET nevartype SUCHTHAT pterm . IN tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On IN shift to state 533
-- On EQUAL shift to state 328
-- On DIFF shift to state 330
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> LET nevartype SUCHTHAT pterm
** Conflict on IN

State 533:
## Known stack suffix:
## LET nevartype SUCHTHAT pterm IN
## LR(1) items:
tprocess -> LET nevartype SUCHTHAT pterm IN . tprocess optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 534
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 534:
## Known stack suffix:
## LET nevartype SUCHTHAT pterm IN tprocess
## LR(1) items:
tprocess -> LET nevartype SUCHTHAT pterm IN tprocess . optelseprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On ELSE shift to state 521
-- On BAR shift to state 513
-- On optelseprocess shift to state 535
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production optelseprocess ->
** Conflict on ELSE BAR

State 535:
## Known stack suffix:
## LET nevartype SUCHTHAT pterm IN tprocess optelseprocess
## LR(1) items:
tprocess -> LET nevartype SUCHTHAT pterm IN tprocess optelseprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> LET nevartype SUCHTHAT pterm IN tprocess optelseprocess

State 536:
## Known stack suffix:
## LPAREN tprocess
## LR(1) items:
tprocess -> LPAREN tprocess . RPAREN [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ RPAREN BAR ]
## Transitions:
-- On RPAREN shift to state 537
-- On BAR shift to state 513
## Reductions:

State 537:
## Known stack suffix:
## LPAREN tprocess RPAREN
## LR(1) items:
tprocess -> LPAREN tprocess RPAREN . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> LPAREN tprocess RPAREN

State 538:
## Known stack suffix:
## SEMI tprocess
## LR(1) items:
opttprocess -> SEMI tprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On BAR shift to state 513
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production opttprocess -> SEMI tprocess
** Conflict on BAR

State 539:
## Known stack suffix:
## PHASE INT opttprocess
## LR(1) items:
tprocess -> PHASE INT opttprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> PHASE INT opttprocess

State 540:
## Known stack suffix:
## REPL IDENT
## LR(1) items:
basicpattern -> IDENT . [ LEFTARROW ]
basicpattern -> IDENT . COLON typeid [ LEFTARROW ]
progbegin -> IDENT . programoptions LBRACE [ YIELD REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT BARRIER ]
tprocess -> IDENT . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> IDENT . LPAREN ptermseq RPAREN [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> REPL IDENT . LEQ IDENT tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> IDENT . RANDOM typeid opttprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On RANDOM shift to state 462
-- On LPAREN shift to state 465
-- On LEQ shift to state 541
-- On LBRACKET shift to state 468
-- On COLON shift to state 372
-- On programoptions shift to state 479
## Reductions:
-- On LEFTARROW
--   reduce production basicpattern -> IDENT
-- On LBRACE
--   reduce production programoptions ->
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> IDENT
** Conflict on LPAREN

State 541:
## Known stack suffix:
## REPL IDENT LEQ
## LR(1) items:
tprocess -> REPL IDENT LEQ . IDENT tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On IDENT shift to state 542
## Reductions:

State 542:
## Known stack suffix:
## REPL IDENT LEQ IDENT
## LR(1) items:
tprocess -> REPL IDENT LEQ IDENT . tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 543
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 543:
## Known stack suffix:
## REPL IDENT LEQ IDENT tprocess
## LR(1) items:
tprocess -> REPL IDENT LEQ IDENT tprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> REPL IDENT LEQ IDENT tprocess

State 544:
## Known stack suffix:
## REPL tprocess
## LR(1) items:
tprocess -> REPL tprocess . [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
tprocess -> tprocess . BAR tprocess [ YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR ]
## Transitions:
## Reductions:
-- On YIELD RPAREN REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT EOF ELSE DOT BARRIER BAR
--   reduce production tprocess -> REPL tprocess

State 545:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
tprocess -> tprocess . BAR tprocess [ DOT BAR ]
## Transitions:
-- On DOT shift to state 546
-- On BAR shift to state 513
## Reductions:

State 546:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 711
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 547:
## Known stack suffix:
## IMPLEMENTATION
## LR(1) items:
lib -> IMPLEMENTATION . impllist DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On TYPE shift to state 548
-- On TABLE shift to state 570
-- On FUN shift to state 574
-- On CONST shift to state 588
-- On impllist shift to state 592
-- On impl shift to state 708
## Reductions:

State 548:
## Known stack suffix:
## TYPE
## LR(1) items:
impl -> TYPE . IDENT EQUAL cvtypeid typeoptions [ SEMI DOT ]
## Transitions:
-- On IDENT shift to state 549
## Reductions:

State 549:
## Known stack suffix:
## TYPE IDENT
## LR(1) items:
impl -> TYPE IDENT . EQUAL cvtypeid typeoptions [ SEMI DOT ]
## Transitions:
-- On EQUAL shift to state 550
## Reductions:

State 550:
## Known stack suffix:
## TYPE IDENT EQUAL
## LR(1) items:
impl -> TYPE IDENT EQUAL . cvtypeid typeoptions [ SEMI DOT ]
## Transitions:
-- On STRING shift to state 551
-- On INT shift to state 552
-- On cvtypeid shift to state 553
## Reductions:

State 551:
## Known stack suffix:
## STRING
## LR(1) items:
cvtypeid -> STRING . [ SEMI LBRACKET DOT ]
## Transitions:
## Reductions:
-- On SEMI LBRACKET DOT
--   reduce production cvtypeid -> STRING

State 552:
## Known stack suffix:
## INT
## LR(1) items:
cvtypeid -> INT . [ SEMI LBRACKET DOT ]
## Transitions:
## Reductions:
-- On SEMI LBRACKET DOT
--   reduce production cvtypeid -> INT

State 553:
## Known stack suffix:
## TYPE IDENT EQUAL cvtypeid
## LR(1) items:
impl -> TYPE IDENT EQUAL cvtypeid . typeoptions [ SEMI DOT ]
## Transitions:
-- On LBRACKET shift to state 554
-- On typeoptions shift to state 569
## Reductions:
-- On SEMI DOT
--   reduce production typeoptions ->

State 554:
## Known stack suffix:
## LBRACKET
## LR(1) items:
typeoptions -> LBRACKET . typeoptlist RBRACKET [ SEMI DOT ]
## Transitions:
-- On PREDICATE shift to state 555
-- On IDENT shift to state 561
-- On typeoptlist shift to state 564
-- On typeopt shift to state 566
## Reductions:

State 555:
## Known stack suffix:
## PREDICATE
## LR(1) items:
typeopt -> PREDICATE . EQUAL stringlistne [ SEMI RBRACKET ]
## Transitions:
-- On EQUAL shift to state 556
## Reductions:

State 556:
## Known stack suffix:
## PREDICATE EQUAL
## LR(1) items:
typeopt -> PREDICATE EQUAL . stringlistne [ SEMI RBRACKET ]
## Transitions:
-- On STRING shift to state 557
-- On stringlistne shift to state 560
## Reductions:

State 557:
## Known stack suffix:
## STRING
## LR(1) items:
stringlistne -> STRING . [ SEMI RBRACKET ]
stringlistne -> STRING . COMMA stringlistne [ SEMI RBRACKET ]
## Transitions:
-- On COMMA shift to state 558
## Reductions:
-- On SEMI RBRACKET
--   reduce production stringlistne -> STRING

State 558:
## Known stack suffix:
## STRING COMMA
## LR(1) items:
stringlistne -> STRING COMMA . stringlistne [ SEMI RBRACKET ]
## Transitions:
-- On STRING shift to state 557
-- On stringlistne shift to state 559
## Reductions:

State 559:
## Known stack suffix:
## STRING COMMA stringlistne
## LR(1) items:
stringlistne -> STRING COMMA stringlistne . [ SEMI RBRACKET ]
## Transitions:
## Reductions:
-- On SEMI RBRACKET
--   reduce production stringlistne -> STRING COMMA stringlistne

State 560:
## Known stack suffix:
## PREDICATE EQUAL stringlistne
## LR(1) items:
typeopt -> PREDICATE EQUAL stringlistne . [ SEMI RBRACKET ]
## Transitions:
## Reductions:
-- On SEMI RBRACKET
--   reduce production typeopt -> PREDICATE EQUAL stringlistne

State 561:
## Known stack suffix:
## IDENT
## LR(1) items:
typeopt -> IDENT . EQUAL stringlistne [ SEMI RBRACKET ]
## Transitions:
-- On EQUAL shift to state 562
## Reductions:

State 562:
## Known stack suffix:
## IDENT EQUAL
## LR(1) items:
typeopt -> IDENT EQUAL . stringlistne [ SEMI RBRACKET ]
## Transitions:
-- On STRING shift to state 557
-- On stringlistne shift to state 563
## Reductions:

State 563:
## Known stack suffix:
## IDENT EQUAL stringlistne
## LR(1) items:
typeopt -> IDENT EQUAL stringlistne . [ SEMI RBRACKET ]
## Transitions:
## Reductions:
-- On SEMI RBRACKET
--   reduce production typeopt -> IDENT EQUAL stringlistne

State 564:
## Known stack suffix:
## LBRACKET typeoptlist
## LR(1) items:
typeoptions -> LBRACKET typeoptlist . RBRACKET [ SEMI DOT ]
## Transitions:
-- On RBRACKET shift to state 565
## Reductions:

State 565:
## Known stack suffix:
## LBRACKET typeoptlist RBRACKET
## LR(1) items:
typeoptions -> LBRACKET typeoptlist RBRACKET . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production typeoptions -> LBRACKET typeoptlist RBRACKET

State 566:
## Known stack suffix:
## typeopt
## LR(1) items:
typeoptlist -> typeopt . [ RBRACKET ]
typeoptlist -> typeopt . SEMI typeoptlist [ RBRACKET ]
## Transitions:
-- On SEMI shift to state 567
## Reductions:
-- On RBRACKET
--   reduce production typeoptlist -> typeopt

State 567:
## Known stack suffix:
## typeopt SEMI
## LR(1) items:
typeoptlist -> typeopt SEMI . typeoptlist [ RBRACKET ]
## Transitions:
-- On PREDICATE shift to state 555
-- On IDENT shift to state 561
-- On typeoptlist shift to state 568
-- On typeopt shift to state 566
## Reductions:

State 568:
## Known stack suffix:
## typeopt SEMI typeoptlist
## LR(1) items:
typeoptlist -> typeopt SEMI typeoptlist . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production typeoptlist -> typeopt SEMI typeoptlist

State 569:
## Known stack suffix:
## TYPE IDENT EQUAL cvtypeid typeoptions
## LR(1) items:
impl -> TYPE IDENT EQUAL cvtypeid typeoptions . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production impl -> TYPE IDENT EQUAL cvtypeid typeoptions

State 570:
## Known stack suffix:
## TABLE
## LR(1) items:
impl -> TABLE . IDENT EQUAL STRING [ SEMI DOT ]
## Transitions:
-- On IDENT shift to state 571
## Reductions:

State 571:
## Known stack suffix:
## TABLE IDENT
## LR(1) items:
impl -> TABLE IDENT . EQUAL STRING [ SEMI DOT ]
## Transitions:
-- On EQUAL shift to state 572
## Reductions:

State 572:
## Known stack suffix:
## TABLE IDENT EQUAL
## LR(1) items:
impl -> TABLE IDENT EQUAL . STRING [ SEMI DOT ]
## Transitions:
-- On STRING shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## TABLE IDENT EQUAL STRING
## LR(1) items:
impl -> TABLE IDENT EQUAL STRING . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production impl -> TABLE IDENT EQUAL STRING

State 574:
## Known stack suffix:
## FUN
## LR(1) items:
impl -> FUN . IDENT EQUAL STRING functionoptions [ SEMI DOT ]
## Transitions:
-- On IDENT shift to state 575
## Reductions:

State 575:
## Known stack suffix:
## FUN IDENT
## LR(1) items:
impl -> FUN IDENT . EQUAL STRING functionoptions [ SEMI DOT ]
## Transitions:
-- On EQUAL shift to state 576
## Reductions:

State 576:
## Known stack suffix:
## FUN IDENT EQUAL
## LR(1) items:
impl -> FUN IDENT EQUAL . STRING functionoptions [ SEMI DOT ]
## Transitions:
-- On STRING shift to state 577
## Reductions:

State 577:
## Known stack suffix:
## FUN IDENT EQUAL STRING
## LR(1) items:
impl -> FUN IDENT EQUAL STRING . functionoptions [ SEMI DOT ]
## Transitions:
-- On LBRACKET shift to state 578
-- On functionoptions shift to state 587
## Reductions:
-- On SEMI DOT
--   reduce production functionoptions ->

State 578:
## Known stack suffix:
## LBRACKET
## LR(1) items:
functionoptions -> LBRACKET . funoptlist RBRACKET [ SEMI DOT ]
## Transitions:
-- On IDENT shift to state 579
-- On funoptlist shift to state 582
-- On funopt shift to state 584
## Reductions:

State 579:
## Known stack suffix:
## IDENT
## LR(1) items:
funopt -> IDENT . EQUAL STRING [ SEMI RBRACKET ]
## Transitions:
-- On EQUAL shift to state 580
## Reductions:

State 580:
## Known stack suffix:
## IDENT EQUAL
## LR(1) items:
funopt -> IDENT EQUAL . STRING [ SEMI RBRACKET ]
## Transitions:
-- On STRING shift to state 581
## Reductions:

State 581:
## Known stack suffix:
## IDENT EQUAL STRING
## LR(1) items:
funopt -> IDENT EQUAL STRING . [ SEMI RBRACKET ]
## Transitions:
## Reductions:
-- On SEMI RBRACKET
--   reduce production funopt -> IDENT EQUAL STRING

State 582:
## Known stack suffix:
## LBRACKET funoptlist
## LR(1) items:
functionoptions -> LBRACKET funoptlist . RBRACKET [ SEMI DOT ]
## Transitions:
-- On RBRACKET shift to state 583
## Reductions:

State 583:
## Known stack suffix:
## LBRACKET funoptlist RBRACKET
## LR(1) items:
functionoptions -> LBRACKET funoptlist RBRACKET . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production functionoptions -> LBRACKET funoptlist RBRACKET

State 584:
## Known stack suffix:
## funopt
## LR(1) items:
funoptlist -> funopt . [ RBRACKET ]
funoptlist -> funopt . SEMI funoptlist [ RBRACKET ]
## Transitions:
-- On SEMI shift to state 585
## Reductions:
-- On RBRACKET
--   reduce production funoptlist -> funopt

State 585:
## Known stack suffix:
## funopt SEMI
## LR(1) items:
funoptlist -> funopt SEMI . funoptlist [ RBRACKET ]
## Transitions:
-- On IDENT shift to state 579
-- On funoptlist shift to state 586
-- On funopt shift to state 584
## Reductions:

State 586:
## Known stack suffix:
## funopt SEMI funoptlist
## LR(1) items:
funoptlist -> funopt SEMI funoptlist . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production funoptlist -> funopt SEMI funoptlist

State 587:
## Known stack suffix:
## FUN IDENT EQUAL STRING functionoptions
## LR(1) items:
impl -> FUN IDENT EQUAL STRING functionoptions . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production impl -> FUN IDENT EQUAL STRING functionoptions

State 588:
## Known stack suffix:
## CONST
## LR(1) items:
impl -> CONST . IDENT EQUAL STRING [ SEMI DOT ]
## Transitions:
-- On IDENT shift to state 589
## Reductions:

State 589:
## Known stack suffix:
## CONST IDENT
## LR(1) items:
impl -> CONST IDENT . EQUAL STRING [ SEMI DOT ]
## Transitions:
-- On EQUAL shift to state 590
## Reductions:

State 590:
## Known stack suffix:
## CONST IDENT EQUAL
## LR(1) items:
impl -> CONST IDENT EQUAL . STRING [ SEMI DOT ]
## Transitions:
-- On STRING shift to state 591
## Reductions:

State 591:
## Known stack suffix:
## CONST IDENT EQUAL STRING
## LR(1) items:
impl -> CONST IDENT EQUAL STRING . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production impl -> CONST IDENT EQUAL STRING

State 592:
## Known stack suffix:
## IMPLEMENTATION impllist
## LR(1) items:
lib -> IMPLEMENTATION impllist . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 593
## Reductions:

State 593:
## Known stack suffix:
## IMPLEMENTATION impllist DOT
## LR(1) items:
lib -> IMPLEMENTATION impllist DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 707
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 594:
## Known stack suffix:
## FUN
## LR(1) items:
lib -> FUN . IDENT LPAREN typeidseq RPAREN COLON typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> FUN . IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 595
## Reductions:

State 595:
## Known stack suffix:
## FUN IDENT
## LR(1) items:
lib -> FUN IDENT . LPAREN typeidseq RPAREN COLON typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> FUN IDENT . LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LPAREN shift to state 596
## Reductions:

State 596:
## Known stack suffix:
## FUN IDENT LPAREN
## LR(1) items:
lib -> FUN IDENT LPAREN . typeidseq RPAREN COLON typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> FUN IDENT LPAREN . typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 597
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 597:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq . RPAREN COLON typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> FUN IDENT LPAREN typeidseq . RPAREN COLON typeid REDUCTION treducmayfail options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RPAREN shift to state 598
## Reductions:

State 598:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN . COLON typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> FUN IDENT LPAREN typeidseq RPAREN . COLON typeid REDUCTION treducmayfail options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On COLON shift to state 599
## Reductions:

State 599:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON . typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON . typeid REDUCTION treducmayfail options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 600
## Reductions:

State 600:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid . REDUCTION treducmayfail options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On REDUCTION shift to state 601
-- On LBRACKET shift to state 6
-- On options shift to state 704
## Reductions:
-- On DOT
--   reduce production options ->

State 601:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION . treducmayfail options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On FORALL shift to state 602
-- On treducmayfail shift to state 608
-- On forallmayfailvartype shift to state 693
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallmayfailvartype ->

State 602:
## Known stack suffix:
## FORALL
## LR(1) items:
forallmayfailvartype -> FORALL . nemayfailvartypeseq SEMI [ PROJECTION NOT LPAREN IDENT FAIL CHOICE ]
## Transitions:
-- On IDENT shift to state 279
-- On nemayfailvartypeseq shift to state 603
-- On mayfailvartype shift to state 605
## Reductions:

State 603:
## Known stack suffix:
## FORALL nemayfailvartypeseq
## LR(1) items:
forallmayfailvartype -> FORALL nemayfailvartypeseq . SEMI [ PROJECTION NOT LPAREN IDENT FAIL CHOICE ]
## Transitions:
-- On SEMI shift to state 604
## Reductions:

State 604:
## Known stack suffix:
## FORALL nemayfailvartypeseq SEMI
## LR(1) items:
forallmayfailvartype -> FORALL nemayfailvartypeseq SEMI . [ PROJECTION NOT LPAREN IDENT FAIL CHOICE ]
## Transitions:
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallmayfailvartype -> FORALL nemayfailvartypeseq SEMI

State 605:
## Known stack suffix:
## mayfailvartype
## LR(1) items:
nemayfailvartypeseq -> mayfailvartype . COMMA nemayfailvartypeseq [ SEMI RPAREN ]
nemayfailvartypeseq -> mayfailvartype . [ SEMI RPAREN ]
## Transitions:
-- On COMMA shift to state 606
## Reductions:
-- On SEMI RPAREN
--   reduce production nemayfailvartypeseq -> mayfailvartype

State 606:
## Known stack suffix:
## mayfailvartype COMMA
## LR(1) items:
nemayfailvartypeseq -> mayfailvartype COMMA . nemayfailvartypeseq [ SEMI RPAREN ]
## Transitions:
-- On IDENT shift to state 279
-- On nemayfailvartypeseq shift to state 607
-- On mayfailvartype shift to state 605
## Reductions:

State 607:
## Known stack suffix:
## mayfailvartype COMMA nemayfailvartypeseq
## LR(1) items:
nemayfailvartypeseq -> mayfailvartype COMMA nemayfailvartypeseq . [ SEMI RPAREN ]
## Transitions:
## Reductions:
-- On SEMI RPAREN
--   reduce production nemayfailvartypeseq -> mayfailvartype COMMA nemayfailvartypeseq

State 608:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 609
## Reductions:
-- On DOT
--   reduce production options ->

State 609:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 610
## Reductions:

State 610:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 692
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 611:
## Known stack suffix:
## FREE
## LR(1) items:
lib -> FREE . neidentseq COLON typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 612
## Reductions:

State 612:
## Known stack suffix:
## FREE neidentseq
## LR(1) items:
lib -> FREE neidentseq . COLON typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On COLON shift to state 613
## Reductions:

State 613:
## Known stack suffix:
## FREE neidentseq COLON
## LR(1) items:
lib -> FREE neidentseq COLON . typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 614
## Reductions:

State 614:
## Known stack suffix:
## FREE neidentseq COLON typeid
## LR(1) items:
lib -> FREE neidentseq COLON typeid . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 615
## Reductions:
-- On DOT
--   reduce production options ->

State 615:
## Known stack suffix:
## FREE neidentseq COLON typeid options
## LR(1) items:
lib -> FREE neidentseq COLON typeid options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 616
## Reductions:

State 616:
## Known stack suffix:
## FREE neidentseq COLON typeid options DOT
## LR(1) items:
lib -> FREE neidentseq COLON typeid options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 691
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 617:
## Known stack suffix:
## EXPAND
## LR(1) items:
lib -> EXPAND . IDENT LPAREN typeidseq RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 618
## Reductions:

State 618:
## Known stack suffix:
## EXPAND IDENT
## LR(1) items:
lib -> EXPAND IDENT . LPAREN typeidseq RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LPAREN shift to state 619
## Reductions:

State 619:
## Known stack suffix:
## EXPAND IDENT LPAREN
## LR(1) items:
lib -> EXPAND IDENT LPAREN . typeidseq RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 620
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 620:
## Known stack suffix:
## EXPAND IDENT LPAREN typeidseq
## LR(1) items:
lib -> EXPAND IDENT LPAREN typeidseq . RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RPAREN shift to state 621
## Reductions:

State 621:
## Known stack suffix:
## EXPAND IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> EXPAND IDENT LPAREN typeidseq RPAREN . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 622
## Reductions:

State 622:
## Known stack suffix:
## EXPAND IDENT LPAREN typeidseq RPAREN DOT
## LR(1) items:
lib -> EXPAND IDENT LPAREN typeidseq RPAREN DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 690
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 623:
## Known stack suffix:
## EVENT
## LR(1) items:
lib -> EVENT . IDENT DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> EVENT . IDENT LPAREN typeidseq RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 624
## Reductions:

State 624:
## Known stack suffix:
## EVENT IDENT
## LR(1) items:
lib -> EVENT IDENT . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> EVENT IDENT . LPAREN typeidseq RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LPAREN shift to state 625
-- On DOT shift to state 688
## Reductions:

State 625:
## Known stack suffix:
## EVENT IDENT LPAREN
## LR(1) items:
lib -> EVENT IDENT LPAREN . typeidseq RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 626
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 626:
## Known stack suffix:
## EVENT IDENT LPAREN typeidseq
## LR(1) items:
lib -> EVENT IDENT LPAREN typeidseq . RPAREN DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RPAREN shift to state 627
## Reductions:

State 627:
## Known stack suffix:
## EVENT IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> EVENT IDENT LPAREN typeidseq RPAREN . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 628
## Reductions:

State 628:
## Known stack suffix:
## EVENT IDENT LPAREN typeidseq RPAREN DOT
## LR(1) items:
lib -> EVENT IDENT LPAREN typeidseq RPAREN DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 687
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 629:
## Known stack suffix:
## EQUATION
## LR(1) items:
lib -> EQUATION . eqlist options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On FORALL shift to state 28
-- On forallvartype shift to state 630
-- On eqlist shift to state 634
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallvartype ->

State 630:
## Known stack suffix:
## forallvartype
## LR(1) items:
eqlist -> forallvartype . term [ LBRACKET DOT ]
eqlist -> forallvartype . term SEMI eqlist [ LBRACKET DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 631
## Reductions:

State 631:
## Known stack suffix:
## forallvartype term
## LR(1) items:
eqlist -> forallvartype term . [ LBRACKET DOT ]
eqlist -> forallvartype term . SEMI eqlist [ LBRACKET DOT ]
term -> term . EQUAL term [ WEDGE SEMI OR LBRACKET EQUAL DOT DIFF ]
term -> term . DIFF term [ WEDGE SEMI OR LBRACKET EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE SEMI OR LBRACKET EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE SEMI OR LBRACKET EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On SEMI shift to state 632
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:
-- On LBRACKET DOT
--   reduce production eqlist -> forallvartype term

State 632:
## Known stack suffix:
## forallvartype term SEMI
## LR(1) items:
eqlist -> forallvartype term SEMI . eqlist [ LBRACKET DOT ]
## Transitions:
-- On FORALL shift to state 28
-- On forallvartype shift to state 630
-- On eqlist shift to state 633
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallvartype ->

State 633:
## Known stack suffix:
## forallvartype term SEMI eqlist
## LR(1) items:
eqlist -> forallvartype term SEMI eqlist . [ LBRACKET DOT ]
## Transitions:
## Reductions:
-- On LBRACKET DOT
--   reduce production eqlist -> forallvartype term SEMI eqlist

State 634:
## Known stack suffix:
## EQUATION eqlist
## LR(1) items:
lib -> EQUATION eqlist . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 635
## Reductions:
-- On DOT
--   reduce production options ->

State 635:
## Known stack suffix:
## EQUATION eqlist options
## LR(1) items:
lib -> EQUATION eqlist options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 636
## Reductions:

State 636:
## Known stack suffix:
## EQUATION eqlist options DOT
## LR(1) items:
lib -> EQUATION eqlist options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 686
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 637:
## Known stack suffix:
## ELIMTRUE
## LR(1) items:
lib -> ELIMTRUE . nemayfailvartypeseq SEMI term DOT lib [ RBRACE PROCESS EQUIVALENCE ]
lib -> ELIMTRUE . term DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 638
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 639
-- On nemayfailvartypeseq shift to state 681
-- On mayfailvartype shift to state 605
## Reductions:

State 638:
## Known stack suffix:
## IDENT
## LR(1) items:
mayfailvartype -> IDENT . COLON typeid [ SEMI COMMA ]
mayfailvartype -> IDENT . COLON typeid ORTEXT FAIL [ SEMI COMMA ]
term -> IDENT . LPAREN termseq RPAREN [ WEDGE OR EQUAL DOT DIFF ]
term -> IDENT . [ WEDGE OR EQUAL DOT DIFF ]
## Transitions:
-- On LPAREN shift to state 244
-- On COLON shift to state 280
## Reductions:
-- On WEDGE OR EQUAL DOT DIFF
--   reduce production term -> IDENT

State 639:
## Known stack suffix:
## ELIMTRUE term
## LR(1) items:
lib -> ELIMTRUE term . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
term -> term . EQUAL term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . DIFF term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DOT shift to state 640
-- On DIFF shift to state 253
## Reductions:

State 640:
## Known stack suffix:
## ELIMTRUE term DOT
## LR(1) items:
lib -> ELIMTRUE term DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 680
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 641:
## Known stack suffix:
## DEFINE
## LR(1) items:
lib -> DEFINE . IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 642
## Reductions:

State 642:
## Known stack suffix:
## DEFINE IDENT
## LR(1) items:
lib -> DEFINE IDENT . LPAREN typeidseq RPAREN LBRACE lib RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LPAREN shift to state 643
## Reductions:

State 643:
## Known stack suffix:
## DEFINE IDENT LPAREN
## LR(1) items:
lib -> DEFINE IDENT LPAREN . typeidseq RPAREN LBRACE lib RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 644
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 644:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq . RPAREN LBRACE lib RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RPAREN shift to state 645
## Reductions:

State 645:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN . LBRACE lib RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACE shift to state 646
## Reductions:

State 646:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN LBRACE
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE . lib RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 673
## Reductions:
-- On RBRACE
--   reduce production lib ->

State 647:
## Known stack suffix:
## CONST
## LR(1) items:
lib -> CONST . neidentseq COLON typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 648
## Reductions:

State 648:
## Known stack suffix:
## CONST neidentseq
## LR(1) items:
lib -> CONST neidentseq . COLON typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On COLON shift to state 649
## Reductions:

State 649:
## Known stack suffix:
## CONST neidentseq COLON
## LR(1) items:
lib -> CONST neidentseq COLON . typeid options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 650
## Reductions:

State 650:
## Known stack suffix:
## CONST neidentseq COLON typeid
## LR(1) items:
lib -> CONST neidentseq COLON typeid . options DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 651
## Reductions:
-- On DOT
--   reduce production options ->

State 651:
## Known stack suffix:
## CONST neidentseq COLON typeid options
## LR(1) items:
lib -> CONST neidentseq COLON typeid options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 652
## Reductions:

State 652:
## Known stack suffix:
## CONST neidentseq COLON typeid options DOT
## LR(1) items:
lib -> CONST neidentseq COLON typeid options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 672
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 653:
## Known stack suffix:
## CLAUSES
## LR(1) items:
lib -> CLAUSES . tclauses lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On FORALL shift to state 602
-- On tclauses shift to state 654
-- On forallmayfailvartype shift to state 660
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallmayfailvartype ->

State 654:
## Known stack suffix:
## CLAUSES tclauses
## LR(1) items:
lib -> CLAUSES tclauses . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 659
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 655:
## Known stack suffix:
## CHANNEL
## LR(1) items:
lib -> CHANNEL . neidentseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 656
## Reductions:

State 656:
## Known stack suffix:
## CHANNEL neidentseq
## LR(1) items:
lib -> CHANNEL neidentseq . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 657
## Reductions:

State 657:
## Known stack suffix:
## CHANNEL neidentseq DOT
## LR(1) items:
lib -> CHANNEL neidentseq DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 658
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 658:
## Known stack suffix:
## CHANNEL neidentseq DOT lib
## LR(1) items:
lib -> CHANNEL neidentseq DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> CHANNEL neidentseq DOT lib

State 659:
## Known stack suffix:
## CLAUSES tclauses lib
## LR(1) items:
lib -> CLAUSES tclauses lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> CLAUSES tclauses lib

State 660:
## Known stack suffix:
## forallmayfailvartype
## LR(1) items:
tclauses -> forallmayfailvartype . tclause SEMI tclauses [ WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL # ]
tclauses -> forallmayfailvartype . tclause DOT [ WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 661
-- On tclause shift to state 668
## Reductions:

State 661:
## Known stack suffix:
## term
## LR(1) items:
tclause -> term . RED term [ SEMI DOT ]
tclause -> term . [ SEMI DOT ]
tclause -> term . EQUIV term [ SEMI DOT ]
tclause -> term . EQUIVEQ term [ SEMI DOT ]
term -> term . EQUAL term [ WEDGE SEMI RED OR EQUIVEQ EQUIV EQUAL DOT DIFF ]
term -> term . DIFF term [ WEDGE SEMI RED OR EQUIVEQ EQUIV EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE SEMI RED OR EQUIVEQ EQUIV EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE SEMI RED OR EQUIVEQ EQUIV EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On RED shift to state 662
-- On OR shift to state 255
-- On EQUIVEQ shift to state 664
-- On EQUIV shift to state 666
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:
-- On SEMI DOT
--   reduce production tclause -> term

State 662:
## Known stack suffix:
## term RED
## LR(1) items:
tclause -> term RED . term [ SEMI DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 663
## Reductions:

State 663:
## Known stack suffix:
## term RED term
## LR(1) items:
tclause -> term RED term . [ SEMI DOT ]
term -> term . EQUAL term [ WEDGE SEMI OR EQUAL DOT DIFF ]
term -> term . DIFF term [ WEDGE SEMI OR EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE SEMI OR EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE SEMI OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:
-- On SEMI DOT
--   reduce production tclause -> term RED term

State 664:
## Known stack suffix:
## term EQUIVEQ
## LR(1) items:
tclause -> term EQUIVEQ . term [ SEMI DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 665
## Reductions:

State 665:
## Known stack suffix:
## term EQUIVEQ term
## LR(1) items:
tclause -> term EQUIVEQ term . [ SEMI DOT ]
term -> term . EQUAL term [ WEDGE SEMI OR EQUAL DOT DIFF ]
term -> term . DIFF term [ WEDGE SEMI OR EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE SEMI OR EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE SEMI OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:
-- On SEMI DOT
--   reduce production tclause -> term EQUIVEQ term

State 666:
## Known stack suffix:
## term EQUIV
## LR(1) items:
tclause -> term EQUIV . term [ SEMI DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 667
## Reductions:

State 667:
## Known stack suffix:
## term EQUIV term
## LR(1) items:
tclause -> term EQUIV term . [ SEMI DOT ]
term -> term . EQUAL term [ WEDGE SEMI OR EQUAL DOT DIFF ]
term -> term . DIFF term [ WEDGE SEMI OR EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE SEMI OR EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE SEMI OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:
-- On SEMI DOT
--   reduce production tclause -> term EQUIV term

State 668:
## Known stack suffix:
## forallmayfailvartype tclause
## LR(1) items:
tclauses -> forallmayfailvartype tclause . SEMI tclauses [ WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL # ]
tclauses -> forallmayfailvartype tclause . DOT [ WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL # ]
## Transitions:
-- On SEMI shift to state 669
-- On DOT shift to state 671
## Reductions:

State 669:
## Known stack suffix:
## forallmayfailvartype tclause SEMI
## LR(1) items:
tclauses -> forallmayfailvartype tclause SEMI . tclauses [ WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL # ]
## Transitions:
-- On FORALL shift to state 602
-- On tclauses shift to state 670
-- On forallmayfailvartype shift to state 660
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallmayfailvartype ->

State 670:
## Known stack suffix:
## forallmayfailvartype tclause SEMI tclauses
## LR(1) items:
tclauses -> forallmayfailvartype tclause SEMI tclauses . [ WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL # ]
## Transitions:
## Reductions:
-- On WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL #
--   reduce production tclauses -> forallmayfailvartype tclause SEMI tclauses
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production tclauses -> forallmayfailvartype tclause SEMI tclauses
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 671:
## Known stack suffix:
## forallmayfailvartype tclause DOT
## LR(1) items:
tclauses -> forallmayfailvartype tclause DOT . [ WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL # ]
## Transitions:
## Reductions:
-- On WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL #
--   reduce production tclauses -> forallmayfailvartype tclause DOT
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION RBRACE QUERY PROOF PROCESS PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUIVALENCE EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production tclauses -> forallmayfailvartype tclause DOT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 672:
## Known stack suffix:
## CONST neidentseq COLON typeid options DOT lib
## LR(1) items:
lib -> CONST neidentseq COLON typeid options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> CONST neidentseq COLON typeid options DOT lib

State 673:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib . RBRACE lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On RBRACE shift to state 674
## Reductions:

State 674:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 675
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 675:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE lib
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE lib

State 676:
## Known stack suffix:
## typeid
## LR(1) items:
netypeidseq -> typeid . COMMA netypeidseq [ RPAREN ]
netypeidseq -> typeid . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 677
## Reductions:
-- On RPAREN
--   reduce production netypeidseq -> typeid

State 677:
## Known stack suffix:
## typeid COMMA
## LR(1) items:
netypeidseq -> typeid COMMA . netypeidseq [ RPAREN ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 676
-- On netypeidseq shift to state 678
## Reductions:

State 678:
## Known stack suffix:
## typeid COMMA netypeidseq
## LR(1) items:
netypeidseq -> typeid COMMA netypeidseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production netypeidseq -> typeid COMMA netypeidseq

State 679:
## Known stack suffix:
## netypeidseq
## LR(1) items:
typeidseq -> netypeidseq . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production typeidseq -> netypeidseq

State 680:
## Known stack suffix:
## ELIMTRUE term DOT lib
## LR(1) items:
lib -> ELIMTRUE term DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> ELIMTRUE term DOT lib

State 681:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq . SEMI term DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On SEMI shift to state 682
## Reductions:

State 682:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq SEMI
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq SEMI . term DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 683
## Reductions:

State 683:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq SEMI term
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq SEMI term . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
term -> term . EQUAL term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . DIFF term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DOT shift to state 684
-- On DIFF shift to state 253
## Reductions:

State 684:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq SEMI term DOT
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq SEMI term DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 685
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 685:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq SEMI term DOT lib
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq SEMI term DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> ELIMTRUE nemayfailvartypeseq SEMI term DOT lib

State 686:
## Known stack suffix:
## EQUATION eqlist options DOT lib
## LR(1) items:
lib -> EQUATION eqlist options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> EQUATION eqlist options DOT lib

State 687:
## Known stack suffix:
## EVENT IDENT LPAREN typeidseq RPAREN DOT lib
## LR(1) items:
lib -> EVENT IDENT LPAREN typeidseq RPAREN DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> EVENT IDENT LPAREN typeidseq RPAREN DOT lib

State 688:
## Known stack suffix:
## EVENT IDENT DOT
## LR(1) items:
lib -> EVENT IDENT DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 689
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 689:
## Known stack suffix:
## EVENT IDENT DOT lib
## LR(1) items:
lib -> EVENT IDENT DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> EVENT IDENT DOT lib

State 690:
## Known stack suffix:
## EXPAND IDENT LPAREN typeidseq RPAREN DOT lib
## LR(1) items:
lib -> EXPAND IDENT LPAREN typeidseq RPAREN DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> EXPAND IDENT LPAREN typeidseq RPAREN DOT lib

State 691:
## Known stack suffix:
## FREE neidentseq COLON typeid options DOT lib
## LR(1) items:
lib -> FREE neidentseq COLON typeid options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> FREE neidentseq COLON typeid options DOT lib

State 692:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib

State 693:
## Known stack suffix:
## forallmayfailvartype
## LR(1) items:
treducmayfail -> forallmayfailvartype . term EQUAL term treducotherwise [ LBRACKET DOT ]
treducmayfail -> forallmayfailvartype . term EQUAL term [ LBRACKET DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 694
## Reductions:

State 694:
## Known stack suffix:
## forallmayfailvartype term
## LR(1) items:
term -> term . EQUAL term [ WEDGE OR EQUAL DIFF ]
term -> term . DIFF term [ WEDGE OR EQUAL DIFF ]
term -> term . OR term [ WEDGE OR EQUAL DIFF ]
term -> term . WEDGE term [ WEDGE OR EQUAL DIFF ]
treducmayfail -> forallmayfailvartype term . EQUAL term treducotherwise [ LBRACKET DOT ]
treducmayfail -> forallmayfailvartype term . EQUAL term [ LBRACKET DOT ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 695
-- On DIFF shift to state 253
## Reductions:

State 695:
## Known stack suffix:
## forallmayfailvartype term EQUAL
## LR(1) items:
term -> term EQUAL . term [ WEDGE OR EQUAL DIFF ]
treducmayfail -> forallmayfailvartype term EQUAL . term treducotherwise [ LBRACKET DOT ]
treducmayfail -> forallmayfailvartype term EQUAL . term [ LBRACKET DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 696
## Reductions:

State 696:
## Known stack suffix:
## forallmayfailvartype term EQUAL term
## LR(1) items:
term -> term . EQUAL term [ WEDGE OTHERWISE OR LBRACKET EQUAL DOT DIFF ]
term -> term EQUAL term . [ WEDGE OR EQUAL DIFF ]
term -> term . DIFF term [ WEDGE OTHERWISE OR LBRACKET EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE OTHERWISE OR LBRACKET EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE OTHERWISE OR LBRACKET EQUAL DOT DIFF ]
treducmayfail -> forallmayfailvartype term EQUAL term . treducotherwise [ LBRACKET DOT ]
treducmayfail -> forallmayfailvartype term EQUAL term . [ LBRACKET DOT ]
## Transitions:
-- On OTHERWISE shift to state 697
-- On DIFF shift to state 253
-- On treducotherwise shift to state 703
## Reductions:
-- On WEDGE OR
--   reduce production term -> term EQUAL term
-- On LBRACKET DOT
--   reduce production treducmayfail -> forallmayfailvartype term EQUAL term

State 697:
## Known stack suffix:
## OTHERWISE
## LR(1) items:
treducotherwise -> OTHERWISE . forallmayfailvartype term EQUAL term treducotherwise [ LBRACKET DOT ]
treducotherwise -> OTHERWISE . forallmayfailvartype term EQUAL term [ LBRACKET DOT ]
## Transitions:
-- On FORALL shift to state 602
-- On forallmayfailvartype shift to state 698
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallmayfailvartype ->

State 698:
## Known stack suffix:
## OTHERWISE forallmayfailvartype
## LR(1) items:
treducotherwise -> OTHERWISE forallmayfailvartype . term EQUAL term treducotherwise [ LBRACKET DOT ]
treducotherwise -> OTHERWISE forallmayfailvartype . term EQUAL term [ LBRACKET DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 699
## Reductions:

State 699:
## Known stack suffix:
## OTHERWISE forallmayfailvartype term
## LR(1) items:
term -> term . EQUAL term [ WEDGE OR EQUAL DIFF ]
term -> term . DIFF term [ WEDGE OR EQUAL DIFF ]
term -> term . OR term [ WEDGE OR EQUAL DIFF ]
term -> term . WEDGE term [ WEDGE OR EQUAL DIFF ]
treducotherwise -> OTHERWISE forallmayfailvartype term . EQUAL term treducotherwise [ LBRACKET DOT ]
treducotherwise -> OTHERWISE forallmayfailvartype term . EQUAL term [ LBRACKET DOT ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 700
-- On DIFF shift to state 253
## Reductions:

State 700:
## Known stack suffix:
## OTHERWISE forallmayfailvartype term EQUAL
## LR(1) items:
term -> term EQUAL . term [ WEDGE OR EQUAL DIFF ]
treducotherwise -> OTHERWISE forallmayfailvartype term EQUAL . term treducotherwise [ LBRACKET DOT ]
treducotherwise -> OTHERWISE forallmayfailvartype term EQUAL . term [ LBRACKET DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 701
## Reductions:

State 701:
## Known stack suffix:
## OTHERWISE forallmayfailvartype term EQUAL term
## LR(1) items:
term -> term . EQUAL term [ WEDGE OTHERWISE OR LBRACKET EQUAL DOT DIFF ]
term -> term EQUAL term . [ WEDGE OR EQUAL DIFF ]
term -> term . DIFF term [ WEDGE OTHERWISE OR LBRACKET EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE OTHERWISE OR LBRACKET EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE OTHERWISE OR LBRACKET EQUAL DOT DIFF ]
treducotherwise -> OTHERWISE forallmayfailvartype term EQUAL term . treducotherwise [ LBRACKET DOT ]
treducotherwise -> OTHERWISE forallmayfailvartype term EQUAL term . [ LBRACKET DOT ]
## Transitions:
-- On OTHERWISE shift to state 697
-- On DIFF shift to state 253
-- On treducotherwise shift to state 702
## Reductions:
-- On WEDGE OR
--   reduce production term -> term EQUAL term
-- On LBRACKET DOT
--   reduce production treducotherwise -> OTHERWISE forallmayfailvartype term EQUAL term

State 702:
## Known stack suffix:
## OTHERWISE forallmayfailvartype term EQUAL term treducotherwise
## LR(1) items:
treducotherwise -> OTHERWISE forallmayfailvartype term EQUAL term treducotherwise . [ LBRACKET DOT ]
## Transitions:
## Reductions:
-- On LBRACKET DOT
--   reduce production treducotherwise -> OTHERWISE forallmayfailvartype term EQUAL term treducotherwise

State 703:
## Known stack suffix:
## forallmayfailvartype term EQUAL term treducotherwise
## LR(1) items:
treducmayfail -> forallmayfailvartype term EQUAL term treducotherwise . [ LBRACKET DOT ]
## Transitions:
## Reductions:
-- On LBRACKET DOT
--   reduce production treducmayfail -> forallmayfailvartype term EQUAL term treducotherwise

State 704:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid options
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 705
## Reductions:

State 705:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 706
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 706:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT lib
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT lib

State 707:
## Known stack suffix:
## IMPLEMENTATION impllist DOT lib
## LR(1) items:
lib -> IMPLEMENTATION impllist DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> IMPLEMENTATION impllist DOT lib

State 708:
## Known stack suffix:
## impl
## LR(1) items:
impllist -> impl . [ DOT ]
impllist -> impl . SEMI impllist [ DOT ]
## Transitions:
-- On SEMI shift to state 709
## Reductions:
-- On DOT
--   reduce production impllist -> impl

State 709:
## Known stack suffix:
## impl SEMI
## LR(1) items:
impllist -> impl SEMI . impllist [ DOT ]
## Transitions:
-- On TYPE shift to state 548
-- On TABLE shift to state 570
-- On FUN shift to state 574
-- On CONST shift to state 588
-- On impllist shift to state 710
-- On impl shift to state 708
## Reductions:

State 710:
## Known stack suffix:
## impl SEMI impllist
## LR(1) items:
impllist -> impl SEMI impllist . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production impllist -> impl SEMI impllist

State 711:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib

State 712:
## Known stack suffix:
## LET IDENT EQUAL
## LR(1) items:
lib -> LET IDENT EQUAL . tprocess DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 713
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 713:
## Known stack suffix:
## LET IDENT EQUAL tprocess
## LR(1) items:
lib -> LET IDENT EQUAL tprocess . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
tprocess -> tprocess . BAR tprocess [ DOT BAR ]
## Transitions:
-- On DOT shift to state 714
-- On BAR shift to state 513
## Reductions:

State 714:
## Known stack suffix:
## LET IDENT EQUAL tprocess DOT
## LR(1) items:
lib -> LET IDENT EQUAL tprocess DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 715
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 715:
## Known stack suffix:
## LET IDENT EQUAL tprocess DOT lib
## LR(1) items:
lib -> LET IDENT EQUAL tprocess DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> LET IDENT EQUAL tprocess DOT lib

State 716:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib

State 717:
## Known stack suffix:
## LETFUN IDENT EQUAL
## LR(1) items:
lib -> LETFUN IDENT EQUAL . pterm DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 718
-- On basicpattern shift to state 332
## Reductions:

State 718:
## Known stack suffix:
## LETFUN IDENT EQUAL pterm
## LR(1) items:
lib -> LETFUN IDENT EQUAL pterm . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
pterm -> pterm . EQUAL pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . OR pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DOT shift to state 719
-- On DIFF shift to state 330
## Reductions:

State 719:
## Known stack suffix:
## LETFUN IDENT EQUAL pterm DOT
## LR(1) items:
lib -> LETFUN IDENT EQUAL pterm DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 720
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 720:
## Known stack suffix:
## LETFUN IDENT EQUAL pterm DOT lib
## LR(1) items:
lib -> LETFUN IDENT EQUAL pterm DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> LETFUN IDENT EQUAL pterm DOT lib

State 721:
## Known stack suffix:
## NONINTERF niseq DOT lib
## LR(1) items:
lib -> NONINTERF niseq DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> NONINTERF niseq DOT lib

State 722:
## Known stack suffix:
## ni
## LR(1) items:
niseq -> ni . COMMA niseq [ DOT ]
niseq -> ni . [ DOT ]
## Transitions:
-- On COMMA shift to state 723
## Reductions:
-- On DOT
--   reduce production niseq -> ni

State 723:
## Known stack suffix:
## ni COMMA
## LR(1) items:
niseq -> ni COMMA . niseq [ DOT ]
## Transitions:
-- On IDENT shift to state 724
-- On niseq shift to state 725
-- On ni shift to state 722
## Reductions:

State 724:
## Known stack suffix:
## IDENT
## LR(1) items:
ni -> IDENT . AMONG LPAREN netermseq RPAREN [ DOT COMMA ]
ni -> IDENT . [ DOT COMMA ]
## Transitions:
-- On AMONG shift to state 236
## Reductions:
-- On DOT COMMA
--   reduce production ni -> IDENT

State 725:
## Known stack suffix:
## ni COMMA niseq
## LR(1) items:
niseq -> ni COMMA niseq . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production niseq -> ni COMMA niseq

State 726:
## Known stack suffix:
## NONINTERF nevartype
## LR(1) items:
lib -> NONINTERF nevartype . SEMI niseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On SEMI shift to state 727
## Reductions:

State 727:
## Known stack suffix:
## NONINTERF nevartype SEMI
## LR(1) items:
lib -> NONINTERF nevartype SEMI . niseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On IDENT shift to state 724
-- On niseq shift to state 728
-- On ni shift to state 722
## Reductions:

State 728:
## Known stack suffix:
## NONINTERF nevartype SEMI niseq
## LR(1) items:
lib -> NONINTERF nevartype SEMI niseq . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 729
## Reductions:

State 729:
## Known stack suffix:
## NONINTERF nevartype SEMI niseq DOT
## LR(1) items:
lib -> NONINTERF nevartype SEMI niseq DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 730
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 730:
## Known stack suffix:
## NONINTERF nevartype SEMI niseq DOT lib
## LR(1) items:
lib -> NONINTERF nevartype SEMI niseq DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> NONINTERF nevartype SEMI niseq DOT lib

State 731:
## Known stack suffix:
## NOT nevartype SEMI gterm DOT lib
## LR(1) items:
lib -> NOT nevartype SEMI gterm DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> NOT nevartype SEMI gterm DOT lib

State 732:
## Known stack suffix:
## NOT gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
lib -> NOT gterm . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DOT shift to state 733
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:

State 733:
## Known stack suffix:
## NOT gterm DOT
## LR(1) items:
lib -> NOT gterm DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 734
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 734:
## Known stack suffix:
## NOT gterm DOT lib
## LR(1) items:
lib -> NOT gterm DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> NOT gterm DOT lib

State 735:
## Known stack suffix:
## NOUNIF tfnebindingseq DOT lib
## LR(1) items:
lib -> NOUNIF tfnebindingseq DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> NOUNIF tfnebindingseq DOT lib

State 736:
## Known stack suffix:
## NOUNIF nevartype
## LR(1) items:
lib -> NOUNIF nevartype . SEMI tfnebindingseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On SEMI shift to state 737
## Reductions:

State 737:
## Known stack suffix:
## NOUNIF nevartype SEMI
## LR(1) items:
lib -> NOUNIF nevartype SEMI . tfnebindingseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On TABLE shift to state 161
-- On LET shift to state 213
-- On IDENT shift to state 218
-- On tfnebindingseq shift to state 738
## Reductions:

State 738:
## Known stack suffix:
## NOUNIF nevartype SEMI tfnebindingseq
## LR(1) items:
lib -> NOUNIF nevartype SEMI tfnebindingseq . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 739
## Reductions:

State 739:
## Known stack suffix:
## NOUNIF nevartype SEMI tfnebindingseq DOT
## LR(1) items:
lib -> NOUNIF nevartype SEMI tfnebindingseq DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 740
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 740:
## Known stack suffix:
## NOUNIF nevartype SEMI tfnebindingseq DOT lib
## LR(1) items:
lib -> NOUNIF nevartype SEMI tfnebindingseq DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> NOUNIF nevartype SEMI tfnebindingseq DOT lib

State 741:
## Known stack suffix:
## PARAM neidentseq options DOT lib
## LR(1) items:
lib -> PARAM neidentseq options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> PARAM neidentseq options DOT lib

State 742:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq RPAREN options DOT lib
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq RPAREN options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> PREDICATE IDENT LPAREN typeidseq RPAREN options DOT lib

State 743:
## Known stack suffix:
## PREDICATE IDENT options
## LR(1) items:
lib -> PREDICATE IDENT options . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 744
## Reductions:

State 744:
## Known stack suffix:
## PREDICATE IDENT options DOT
## LR(1) items:
lib -> PREDICATE IDENT options DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 745
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 745:
## Known stack suffix:
## PREDICATE IDENT options DOT lib
## LR(1) items:
lib -> PREDICATE IDENT options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> PREDICATE IDENT options DOT lib

State 746:
## Known stack suffix:
## PROBA IDENT DOT lib
## LR(1) items:
lib -> PROBA IDENT DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> PROBA IDENT DOT lib

State 747:
## Known stack suffix:
## PROOF LBRACE proof RBRACE lib
## LR(1) items:
lib -> PROOF LBRACE proof RBRACE lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> PROOF LBRACE proof RBRACE lib

State 748:
## Known stack suffix:
## QUERY tqueryseq DOT lib
## LR(1) items:
lib -> QUERY tqueryseq DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> QUERY tqueryseq DOT lib

State 749:
## Known stack suffix:
## tquery
## LR(1) items:
tqueryseq -> tquery . SEMI tqueryseq [ DOT ]
tqueryseq -> tquery . [ DOT ]
## Transitions:
-- On SEMI shift to state 750
## Reductions:
-- On DOT
--   reduce production tqueryseq -> tquery

State 750:
## Known stack suffix:
## tquery SEMI
## LR(1) items:
tqueryseq -> tquery SEMI . tqueryseq [ DOT ]
## Transitions:
-- On TABLE shift to state 40
-- On SECRET shift to state 110
-- On PUTBEGIN shift to state 116
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On tqueryseq shift to state 751
-- On tquery shift to state 749
-- On gterm shift to state 752
## Reductions:

State 751:
## Known stack suffix:
## tquery SEMI tqueryseq
## LR(1) items:
tqueryseq -> tquery SEMI tqueryseq . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production tqueryseq -> tquery SEMI tqueryseq

State 752:
## Known stack suffix:
## gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE SEMI PUBLICVARS OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE SEMI PUBLICVARS OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE SEMI PUBLICVARS OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE SEMI PUBLICVARS OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE SEMI PUBLICVARS OR EQUAL DOT DIFF BEFORE ]
tquery -> gterm . optpublicvars [ SEMI DOT ]
## Transitions:
-- On WEDGE shift to state 63
-- On PUBLICVARS shift to state 112
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
-- On optpublicvars shift to state 753
## Reductions:
-- On SEMI DOT
--   reduce production optpublicvars ->

State 753:
## Known stack suffix:
## gterm optpublicvars
## LR(1) items:
tquery -> gterm optpublicvars . [ SEMI DOT ]
## Transitions:
## Reductions:
-- On SEMI DOT
--   reduce production tquery -> gterm optpublicvars

State 754:
## Known stack suffix:
## QUERY nevartype
## LR(1) items:
lib -> QUERY nevartype . SEMI tqueryseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On SEMI shift to state 755
## Reductions:

State 755:
## Known stack suffix:
## QUERY nevartype SEMI
## LR(1) items:
lib -> QUERY nevartype SEMI . tqueryseq DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On TABLE shift to state 40
-- On SECRET shift to state 110
-- On PUTBEGIN shift to state 116
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On tqueryseq shift to state 756
-- On tquery shift to state 749
-- On gterm shift to state 752
## Reductions:

State 756:
## Known stack suffix:
## QUERY nevartype SEMI tqueryseq
## LR(1) items:
lib -> QUERY nevartype SEMI tqueryseq . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 757
## Reductions:

State 757:
## Known stack suffix:
## QUERY nevartype SEMI tqueryseq DOT
## LR(1) items:
lib -> QUERY nevartype SEMI tqueryseq DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 758
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 758:
## Known stack suffix:
## QUERY nevartype SEMI tqueryseq DOT lib
## LR(1) items:
lib -> QUERY nevartype SEMI tqueryseq DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> QUERY nevartype SEMI tqueryseq DOT lib

State 759:
## Known stack suffix:
## REDUCTION treduc options DOT lib
## LR(1) items:
lib -> REDUCTION treduc options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> REDUCTION treduc options DOT lib

State 760:
## Known stack suffix:
## forallvartype
## LR(1) items:
treduc -> forallvartype . term EQUAL term SEMI treduc [ LBRACKET DOT ]
treduc -> forallvartype . term EQUAL term [ LBRACKET DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 761
## Reductions:

State 761:
## Known stack suffix:
## forallvartype term
## LR(1) items:
term -> term . EQUAL term [ WEDGE OR EQUAL DIFF ]
term -> term . DIFF term [ WEDGE OR EQUAL DIFF ]
term -> term . OR term [ WEDGE OR EQUAL DIFF ]
term -> term . WEDGE term [ WEDGE OR EQUAL DIFF ]
treduc -> forallvartype term . EQUAL term SEMI treduc [ LBRACKET DOT ]
treduc -> forallvartype term . EQUAL term [ LBRACKET DOT ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 762
-- On DIFF shift to state 253
## Reductions:

State 762:
## Known stack suffix:
## forallvartype term EQUAL
## LR(1) items:
term -> term EQUAL . term [ WEDGE OR EQUAL DIFF ]
treduc -> forallvartype term EQUAL . term SEMI treduc [ LBRACKET DOT ]
treduc -> forallvartype term EQUAL . term [ LBRACKET DOT ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 763
## Reductions:

State 763:
## Known stack suffix:
## forallvartype term EQUAL term
## LR(1) items:
term -> term . EQUAL term [ WEDGE SEMI OR LBRACKET EQUAL DOT DIFF ]
term -> term EQUAL term . [ WEDGE OR EQUAL DIFF ]
term -> term . DIFF term [ WEDGE SEMI OR LBRACKET EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE SEMI OR LBRACKET EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE SEMI OR LBRACKET EQUAL DOT DIFF ]
treduc -> forallvartype term EQUAL term . SEMI treduc [ LBRACKET DOT ]
treduc -> forallvartype term EQUAL term . [ LBRACKET DOT ]
## Transitions:
-- On SEMI shift to state 764
-- On DIFF shift to state 253
## Reductions:
-- On WEDGE OR
--   reduce production term -> term EQUAL term
-- On LBRACKET DOT
--   reduce production treduc -> forallvartype term EQUAL term

State 764:
## Known stack suffix:
## forallvartype term EQUAL term SEMI
## LR(1) items:
treduc -> forallvartype term EQUAL term SEMI . treduc [ LBRACKET DOT ]
## Transitions:
-- On FORALL shift to state 28
-- On treduc shift to state 765
-- On forallvartype shift to state 760
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallvartype ->

State 765:
## Known stack suffix:
## forallvartype term EQUAL term SEMI treduc
## LR(1) items:
treduc -> forallvartype term EQUAL term SEMI treduc . [ LBRACKET DOT ]
## Transitions:
## Reductions:
-- On LBRACKET DOT
--   reduce production treduc -> forallvartype term EQUAL term SEMI treduc

State 766:
## Known stack suffix:
## SET IDENT EQUAL STRING DOT lib
## LR(1) items:
lib -> SET IDENT EQUAL STRING DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> SET IDENT EQUAL STRING DOT lib

State 767:
## Known stack suffix:
## SET IDENT EQUAL INT
## LR(1) items:
lib -> SET IDENT EQUAL INT . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 768
## Reductions:

State 768:
## Known stack suffix:
## SET IDENT EQUAL INT DOT
## LR(1) items:
lib -> SET IDENT EQUAL INT DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 769
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 769:
## Known stack suffix:
## SET IDENT EQUAL INT DOT lib
## LR(1) items:
lib -> SET IDENT EQUAL INT DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> SET IDENT EQUAL INT DOT lib

State 770:
## Known stack suffix:
## SET IDENT EQUAL IDENT
## LR(1) items:
lib -> SET IDENT EQUAL IDENT . DOT lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On DOT shift to state 771
## Reductions:

State 771:
## Known stack suffix:
## SET IDENT EQUAL IDENT DOT
## LR(1) items:
lib -> SET IDENT EQUAL IDENT DOT . lib [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 772
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib ->

State 772:
## Known stack suffix:
## SET IDENT EQUAL IDENT DOT lib
## LR(1) items:
lib -> SET IDENT EQUAL IDENT DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> SET IDENT EQUAL IDENT DOT lib

State 773:
## Known stack suffix:
## TABLE IDENT LPAREN typeidseq RPAREN DOT lib
## LR(1) items:
lib -> TABLE IDENT LPAREN typeidseq RPAREN DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> TABLE IDENT LPAREN typeidseq RPAREN DOT lib

State 774:
## Known stack suffix:
## TYPE IDENT options DOT lib
## LR(1) items:
lib -> TYPE IDENT options DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> TYPE IDENT options DOT lib

State 775:
## Known stack suffix:
## WEAKSECRET IDENT DOT lib
## LR(1) items:
lib -> WEAKSECRET IDENT DOT lib . [ RBRACE PROCESS EQUIVALENCE ]
## Transitions:
## Reductions:
-- On RBRACE PROCESS EQUIVALENCE
--   reduce production lib -> WEAKSECRET IDENT DOT lib

State 776:
## Known stack suffix:
## lib
## LR(1) items:
all -> lib . PROCESS tprocess EOF [ # ]
all -> lib . EQUIVALENCE tprocess tprocess EOF [ # ]
## Transitions:
-- On PROCESS shift to state 777
-- On EQUIVALENCE shift to state 780
## Reductions:

State 777:
## Known stack suffix:
## lib PROCESS
## LR(1) items:
all -> lib PROCESS . tprocess EOF [ # ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 778
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 778:
## Known stack suffix:
## lib PROCESS tprocess
## LR(1) items:
all -> lib PROCESS tprocess . EOF [ # ]
tprocess -> tprocess . BAR tprocess [ EOF BAR ]
## Transitions:
-- On EOF shift to state 779
-- On BAR shift to state 513
## Reductions:

State 779:
## Known stack suffix:
## lib PROCESS tprocess EOF
## LR(1) items:
all -> lib PROCESS tprocess EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production all -> lib PROCESS tprocess EOF

State 780:
## Known stack suffix:
## lib EQUIVALENCE
## LR(1) items:
all -> lib EQUIVALENCE . tprocess tprocess EOF [ # ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 781
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 781:
## Known stack suffix:
## lib EQUIVALENCE tprocess
## LR(1) items:
all -> lib EQUIVALENCE tprocess . tprocess EOF [ # ]
tprocess -> tprocess . BAR tprocess [ YIELD REPL PHASE OUT NEW LPAREN LET INT INSERT IN IF IDENT GET FOREACH EVENT BARRIER BAR ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On BAR shift to state 513
-- On tprocess shift to state 782
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 782:
## Known stack suffix:
## lib EQUIVALENCE tprocess tprocess
## LR(1) items:
all -> lib EQUIVALENCE tprocess tprocess . EOF [ # ]
tprocess -> tprocess . BAR tprocess [ EOF BAR ]
## Transitions:
-- On EOF shift to state 783
-- On BAR shift to state 513
## Reductions:

State 783:
## Known stack suffix:
## lib EQUIVALENCE tprocess tprocess EOF
## LR(1) items:
all -> lib EQUIVALENCE tprocess tprocess EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production all -> lib EQUIVALENCE tprocess tprocess EOF

State 784:
## Known stack suffix:
## all
## LR(1) items:
all' -> all . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept all

State 785:
## Known stack suffix:
##
## LR(1) items:
lib' -> . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 985
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 786:
## Known stack suffix:
## WEAKSECRET
## LR(1) items:
lib -> WEAKSECRET . IDENT DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 787
## Reductions:

State 787:
## Known stack suffix:
## WEAKSECRET IDENT
## LR(1) items:
lib -> WEAKSECRET IDENT . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 788
## Reductions:

State 788:
## Known stack suffix:
## WEAKSECRET IDENT DOT
## LR(1) items:
lib -> WEAKSECRET IDENT DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 984
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 789:
## Known stack suffix:
## TYPE
## LR(1) items:
lib -> TYPE . IDENT options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 790
## Reductions:

State 790:
## Known stack suffix:
## TYPE IDENT
## LR(1) items:
lib -> TYPE IDENT . options DOT lib [ # ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 791
## Reductions:
-- On DOT
--   reduce production options ->

State 791:
## Known stack suffix:
## TYPE IDENT options
## LR(1) items:
lib -> TYPE IDENT options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 792
## Reductions:

State 792:
## Known stack suffix:
## TYPE IDENT options DOT
## LR(1) items:
lib -> TYPE IDENT options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 983
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 793:
## Known stack suffix:
## TABLE
## LR(1) items:
lib -> TABLE . IDENT LPAREN typeidseq RPAREN DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 794
## Reductions:

State 794:
## Known stack suffix:
## TABLE IDENT
## LR(1) items:
lib -> TABLE IDENT . LPAREN typeidseq RPAREN DOT lib [ # ]
## Transitions:
-- On LPAREN shift to state 795
## Reductions:

State 795:
## Known stack suffix:
## TABLE IDENT LPAREN
## LR(1) items:
lib -> TABLE IDENT LPAREN . typeidseq RPAREN DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 796
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 796:
## Known stack suffix:
## TABLE IDENT LPAREN typeidseq
## LR(1) items:
lib -> TABLE IDENT LPAREN typeidseq . RPAREN DOT lib [ # ]
## Transitions:
-- On RPAREN shift to state 797
## Reductions:

State 797:
## Known stack suffix:
## TABLE IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> TABLE IDENT LPAREN typeidseq RPAREN . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 798
## Reductions:

State 798:
## Known stack suffix:
## TABLE IDENT LPAREN typeidseq RPAREN DOT
## LR(1) items:
lib -> TABLE IDENT LPAREN typeidseq RPAREN DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 982
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 799:
## Known stack suffix:
## SET
## LR(1) items:
lib -> SET . IDENT EQUAL IDENT DOT lib [ # ]
lib -> SET . IDENT EQUAL STRING DOT lib [ # ]
lib -> SET . IDENT EQUAL INT DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 800
## Reductions:

State 800:
## Known stack suffix:
## SET IDENT
## LR(1) items:
lib -> SET IDENT . EQUAL IDENT DOT lib [ # ]
lib -> SET IDENT . EQUAL STRING DOT lib [ # ]
lib -> SET IDENT . EQUAL INT DOT lib [ # ]
## Transitions:
-- On EQUAL shift to state 801
## Reductions:

State 801:
## Known stack suffix:
## SET IDENT EQUAL
## LR(1) items:
lib -> SET IDENT EQUAL . IDENT DOT lib [ # ]
lib -> SET IDENT EQUAL . STRING DOT lib [ # ]
lib -> SET IDENT EQUAL . INT DOT lib [ # ]
## Transitions:
-- On STRING shift to state 802
-- On INT shift to state 976
-- On IDENT shift to state 979
## Reductions:

State 802:
## Known stack suffix:
## SET IDENT EQUAL STRING
## LR(1) items:
lib -> SET IDENT EQUAL STRING . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 803
## Reductions:

State 803:
## Known stack suffix:
## SET IDENT EQUAL STRING DOT
## LR(1) items:
lib -> SET IDENT EQUAL STRING DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 975
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 804:
## Known stack suffix:
## REDUCTION
## LR(1) items:
lib -> REDUCTION . treduc options DOT lib [ # ]
## Transitions:
-- On FORALL shift to state 28
-- On treduc shift to state 805
-- On forallvartype shift to state 760
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallvartype ->

State 805:
## Known stack suffix:
## REDUCTION treduc
## LR(1) items:
lib -> REDUCTION treduc . options DOT lib [ # ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 806
## Reductions:
-- On DOT
--   reduce production options ->

State 806:
## Known stack suffix:
## REDUCTION treduc options
## LR(1) items:
lib -> REDUCTION treduc options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 807
## Reductions:

State 807:
## Known stack suffix:
## REDUCTION treduc options DOT
## LR(1) items:
lib -> REDUCTION treduc options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 974
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 808:
## Known stack suffix:
## QUERY
## LR(1) items:
lib -> QUERY . nevartype SEMI tqueryseq DOT lib [ # ]
lib -> QUERY . tqueryseq DOT lib [ # ]
## Transitions:
-- On TABLE shift to state 40
-- On SECRET shift to state 110
-- On PUTBEGIN shift to state 116
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 123
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On tqueryseq shift to state 809
-- On tquery shift to state 749
-- On nevartype shift to state 969
-- On gterm shift to state 752
## Reductions:

State 809:
## Known stack suffix:
## QUERY tqueryseq
## LR(1) items:
lib -> QUERY tqueryseq . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 810
## Reductions:

State 810:
## Known stack suffix:
## QUERY tqueryseq DOT
## LR(1) items:
lib -> QUERY tqueryseq DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 968
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 811:
## Known stack suffix:
## PROOF
## LR(1) items:
lib -> PROOF . LBRACE proof RBRACE lib [ # ]
## Transitions:
-- On LBRACE shift to state 812
## Reductions:

State 812:
## Known stack suffix:
## PROOF LBRACE
## LR(1) items:
lib -> PROOF LBRACE . proof RBRACE lib [ # ]
## Transitions:
-- On STRING shift to state 128
-- On STAR shift to state 129
-- On SET shift to state 130
-- On RPAREN shift to state 131
-- On LPAREN shift to state 132
-- On INT shift to state 133
-- On INSERT shift to state 134
-- On IDENT shift to state 135
-- On EQUAL shift to state 136
-- On DOT shift to state 137
-- On COMMA shift to state 138
-- On prooftoken shift to state 139
-- On proofcommand shift to state 141
-- On proof shift to state 813
## Reductions:

State 813:
## Known stack suffix:
## PROOF LBRACE proof
## LR(1) items:
lib -> PROOF LBRACE proof . RBRACE lib [ # ]
## Transitions:
-- On RBRACE shift to state 814
## Reductions:

State 814:
## Known stack suffix:
## PROOF LBRACE proof RBRACE
## LR(1) items:
lib -> PROOF LBRACE proof RBRACE . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 967
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 815:
## Known stack suffix:
## PROBA
## LR(1) items:
lib -> PROBA . IDENT DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 816
## Reductions:

State 816:
## Known stack suffix:
## PROBA IDENT
## LR(1) items:
lib -> PROBA IDENT . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 817
## Reductions:

State 817:
## Known stack suffix:
## PROBA IDENT DOT
## LR(1) items:
lib -> PROBA IDENT DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 966
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 818:
## Known stack suffix:
## PREDICATE
## LR(1) items:
lib -> PREDICATE . IDENT LPAREN typeidseq RPAREN options DOT lib [ # ]
lib -> PREDICATE . IDENT options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 819
## Reductions:

State 819:
## Known stack suffix:
## PREDICATE IDENT
## LR(1) items:
lib -> PREDICATE IDENT . LPAREN typeidseq RPAREN options DOT lib [ # ]
lib -> PREDICATE IDENT . options DOT lib [ # ]
## Transitions:
-- On LPAREN shift to state 820
-- On LBRACKET shift to state 6
-- On options shift to state 963
## Reductions:
-- On DOT
--   reduce production options ->

State 820:
## Known stack suffix:
## PREDICATE IDENT LPAREN
## LR(1) items:
lib -> PREDICATE IDENT LPAREN . typeidseq RPAREN options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 821
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 821:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq . RPAREN options DOT lib [ # ]
## Transitions:
-- On RPAREN shift to state 822
## Reductions:

State 822:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq RPAREN . options DOT lib [ # ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 823
## Reductions:
-- On DOT
--   reduce production options ->

State 823:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq RPAREN options
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq RPAREN options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 824
## Reductions:

State 824:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq RPAREN options DOT
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq RPAREN options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 962
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 825:
## Known stack suffix:
## PARAM
## LR(1) items:
lib -> PARAM . neidentseq options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 826
## Reductions:

State 826:
## Known stack suffix:
## PARAM neidentseq
## LR(1) items:
lib -> PARAM neidentseq . options DOT lib [ # ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 827
## Reductions:
-- On DOT
--   reduce production options ->

State 827:
## Known stack suffix:
## PARAM neidentseq options
## LR(1) items:
lib -> PARAM neidentseq options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 828
## Reductions:

State 828:
## Known stack suffix:
## PARAM neidentseq options DOT
## LR(1) items:
lib -> PARAM neidentseq options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 961
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 829:
## Known stack suffix:
## NOUNIF
## LR(1) items:
lib -> NOUNIF . nevartype SEMI tfnebindingseq DOT lib [ # ]
lib -> NOUNIF . tfnebindingseq DOT lib [ # ]
## Transitions:
-- On TABLE shift to state 161
-- On LET shift to state 213
-- On IDENT shift to state 226
-- On tfnebindingseq shift to state 830
-- On nevartype shift to state 956
## Reductions:

State 830:
## Known stack suffix:
## NOUNIF tfnebindingseq
## LR(1) items:
lib -> NOUNIF tfnebindingseq . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 831
## Reductions:

State 831:
## Known stack suffix:
## NOUNIF tfnebindingseq DOT
## LR(1) items:
lib -> NOUNIF tfnebindingseq DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 955
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 832:
## Known stack suffix:
## NOT
## LR(1) items:
lib -> NOT . nevartype SEMI gterm DOT lib [ # ]
lib -> NOT . gterm DOT lib [ # ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 123
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On nevartype shift to state 833
-- On gterm shift to state 952
## Reductions:

State 833:
## Known stack suffix:
## NOT nevartype
## LR(1) items:
lib -> NOT nevartype . SEMI gterm DOT lib [ # ]
## Transitions:
-- On SEMI shift to state 834
## Reductions:

State 834:
## Known stack suffix:
## NOT nevartype SEMI
## LR(1) items:
lib -> NOT nevartype SEMI . gterm DOT lib [ # ]
## Transitions:
-- On TABLE shift to state 40
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On gterm shift to state 835
## Reductions:

State 835:
## Known stack suffix:
## NOT nevartype SEMI gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
lib -> NOT nevartype SEMI gterm . DOT lib [ # ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DOT shift to state 836
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:

State 836:
## Known stack suffix:
## NOT nevartype SEMI gterm DOT
## LR(1) items:
lib -> NOT nevartype SEMI gterm DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 951
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 837:
## Known stack suffix:
## NONINTERF
## LR(1) items:
lib -> NONINTERF . nevartype SEMI niseq DOT lib [ # ]
lib -> NONINTERF . niseq DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 235
-- On niseq shift to state 838
-- On ni shift to state 722
-- On nevartype shift to state 946
## Reductions:

State 838:
## Known stack suffix:
## NONINTERF niseq
## LR(1) items:
lib -> NONINTERF niseq . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 839
## Reductions:

State 839:
## Known stack suffix:
## NONINTERF niseq DOT
## LR(1) items:
lib -> NONINTERF niseq DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 945
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 840:
## Known stack suffix:
## LETFUN
## LR(1) items:
lib -> LETFUN . IDENT EQUAL pterm DOT lib [ # ]
lib -> LETFUN . IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 841
## Reductions:

State 841:
## Known stack suffix:
## LETFUN IDENT
## LR(1) items:
lib -> LETFUN IDENT . EQUAL pterm DOT lib [ # ]
lib -> LETFUN IDENT . LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib [ # ]
## Transitions:
-- On LPAREN shift to state 842
-- On EQUAL shift to state 941
## Reductions:

State 842:
## Known stack suffix:
## LETFUN IDENT LPAREN
## LR(1) items:
lib -> LETFUN IDENT LPAREN . mayfailvartypeseq RPAREN EQUAL pterm DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 279
-- On nemayfailvartypeseq shift to state 284
-- On mayfailvartypeseq shift to state 843
-- On mayfailvartype shift to state 605
## Reductions:
-- On RPAREN
--   reduce production mayfailvartypeseq ->

State 843:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq . RPAREN EQUAL pterm DOT lib [ # ]
## Transitions:
-- On RPAREN shift to state 844
## Reductions:

State 844:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN . EQUAL pterm DOT lib [ # ]
## Transitions:
-- On EQUAL shift to state 845
## Reductions:

State 845:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL . pterm DOT lib [ # ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 846
-- On basicpattern shift to state 332
## Reductions:

State 846:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm . DOT lib [ # ]
pterm -> pterm . EQUAL pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . OR pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DOT shift to state 847
-- On DIFF shift to state 330
## Reductions:

State 847:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 940
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 848:
## Known stack suffix:
## LET
## LR(1) items:
lib -> LET . IDENT EQUAL tprocess DOT lib [ # ]
lib -> LET . IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 849
## Reductions:

State 849:
## Known stack suffix:
## LET IDENT
## LR(1) items:
lib -> LET IDENT . EQUAL tprocess DOT lib [ # ]
lib -> LET IDENT . LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib [ # ]
## Transitions:
-- On LPAREN shift to state 850
-- On EQUAL shift to state 936
## Reductions:

State 850:
## Known stack suffix:
## LET IDENT LPAREN
## LR(1) items:
lib -> LET IDENT LPAREN . mayfailvartypeseq RPAREN EQUAL tprocess DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 279
-- On nemayfailvartypeseq shift to state 284
-- On mayfailvartypeseq shift to state 851
-- On mayfailvartype shift to state 605
## Reductions:
-- On RPAREN
--   reduce production mayfailvartypeseq ->

State 851:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq . RPAREN EQUAL tprocess DOT lib [ # ]
## Transitions:
-- On RPAREN shift to state 852
## Reductions:

State 852:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN . EQUAL tprocess DOT lib [ # ]
## Transitions:
-- On EQUAL shift to state 853
## Reductions:

State 853:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL . tprocess DOT lib [ # ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 854
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 854:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess . DOT lib [ # ]
tprocess -> tprocess . BAR tprocess [ DOT BAR ]
## Transitions:
-- On DOT shift to state 855
-- On BAR shift to state 513
## Reductions:

State 855:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 935
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 856:
## Known stack suffix:
## IMPLEMENTATION
## LR(1) items:
lib -> IMPLEMENTATION . impllist DOT lib [ # ]
## Transitions:
-- On TYPE shift to state 548
-- On TABLE shift to state 570
-- On FUN shift to state 574
-- On CONST shift to state 588
-- On impllist shift to state 857
-- On impl shift to state 708
## Reductions:

State 857:
## Known stack suffix:
## IMPLEMENTATION impllist
## LR(1) items:
lib -> IMPLEMENTATION impllist . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 858
## Reductions:

State 858:
## Known stack suffix:
## IMPLEMENTATION impllist DOT
## LR(1) items:
lib -> IMPLEMENTATION impllist DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 934
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 859:
## Known stack suffix:
## FUN
## LR(1) items:
lib -> FUN . IDENT LPAREN typeidseq RPAREN COLON typeid options DOT lib [ # ]
lib -> FUN . IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 860
## Reductions:

State 860:
## Known stack suffix:
## FUN IDENT
## LR(1) items:
lib -> FUN IDENT . LPAREN typeidseq RPAREN COLON typeid options DOT lib [ # ]
lib -> FUN IDENT . LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib [ # ]
## Transitions:
-- On LPAREN shift to state 861
## Reductions:

State 861:
## Known stack suffix:
## FUN IDENT LPAREN
## LR(1) items:
lib -> FUN IDENT LPAREN . typeidseq RPAREN COLON typeid options DOT lib [ # ]
lib -> FUN IDENT LPAREN . typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 862
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 862:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq . RPAREN COLON typeid options DOT lib [ # ]
lib -> FUN IDENT LPAREN typeidseq . RPAREN COLON typeid REDUCTION treducmayfail options DOT lib [ # ]
## Transitions:
-- On RPAREN shift to state 863
## Reductions:

State 863:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN . COLON typeid options DOT lib [ # ]
lib -> FUN IDENT LPAREN typeidseq RPAREN . COLON typeid REDUCTION treducmayfail options DOT lib [ # ]
## Transitions:
-- On COLON shift to state 864
## Reductions:

State 864:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON . typeid options DOT lib [ # ]
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON . typeid REDUCTION treducmayfail options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 865
## Reductions:

State 865:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid . options DOT lib [ # ]
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid . REDUCTION treducmayfail options DOT lib [ # ]
## Transitions:
-- On REDUCTION shift to state 866
-- On LBRACKET shift to state 6
-- On options shift to state 931
## Reductions:
-- On DOT
--   reduce production options ->

State 866:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION . treducmayfail options DOT lib [ # ]
## Transitions:
-- On FORALL shift to state 602
-- On treducmayfail shift to state 867
-- On forallmayfailvartype shift to state 693
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallmayfailvartype ->

State 867:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail . options DOT lib [ # ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 868
## Reductions:
-- On DOT
--   reduce production options ->

State 868:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 869
## Reductions:

State 869:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 930
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 870:
## Known stack suffix:
## FREE
## LR(1) items:
lib -> FREE . neidentseq COLON typeid options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 871
## Reductions:

State 871:
## Known stack suffix:
## FREE neidentseq
## LR(1) items:
lib -> FREE neidentseq . COLON typeid options DOT lib [ # ]
## Transitions:
-- On COLON shift to state 872
## Reductions:

State 872:
## Known stack suffix:
## FREE neidentseq COLON
## LR(1) items:
lib -> FREE neidentseq COLON . typeid options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 873
## Reductions:

State 873:
## Known stack suffix:
## FREE neidentseq COLON typeid
## LR(1) items:
lib -> FREE neidentseq COLON typeid . options DOT lib [ # ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 874
## Reductions:
-- On DOT
--   reduce production options ->

State 874:
## Known stack suffix:
## FREE neidentseq COLON typeid options
## LR(1) items:
lib -> FREE neidentseq COLON typeid options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 875
## Reductions:

State 875:
## Known stack suffix:
## FREE neidentseq COLON typeid options DOT
## LR(1) items:
lib -> FREE neidentseq COLON typeid options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 929
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 876:
## Known stack suffix:
## EXPAND
## LR(1) items:
lib -> EXPAND . IDENT LPAREN typeidseq RPAREN DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 877
## Reductions:

State 877:
## Known stack suffix:
## EXPAND IDENT
## LR(1) items:
lib -> EXPAND IDENT . LPAREN typeidseq RPAREN DOT lib [ # ]
## Transitions:
-- On LPAREN shift to state 878
## Reductions:

State 878:
## Known stack suffix:
## EXPAND IDENT LPAREN
## LR(1) items:
lib -> EXPAND IDENT LPAREN . typeidseq RPAREN DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 879
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 879:
## Known stack suffix:
## EXPAND IDENT LPAREN typeidseq
## LR(1) items:
lib -> EXPAND IDENT LPAREN typeidseq . RPAREN DOT lib [ # ]
## Transitions:
-- On RPAREN shift to state 880
## Reductions:

State 880:
## Known stack suffix:
## EXPAND IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> EXPAND IDENT LPAREN typeidseq RPAREN . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 881
## Reductions:

State 881:
## Known stack suffix:
## EXPAND IDENT LPAREN typeidseq RPAREN DOT
## LR(1) items:
lib -> EXPAND IDENT LPAREN typeidseq RPAREN DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 928
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 882:
## Known stack suffix:
## EVENT
## LR(1) items:
lib -> EVENT . IDENT DOT lib [ # ]
lib -> EVENT . IDENT LPAREN typeidseq RPAREN DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 883
## Reductions:

State 883:
## Known stack suffix:
## EVENT IDENT
## LR(1) items:
lib -> EVENT IDENT . DOT lib [ # ]
lib -> EVENT IDENT . LPAREN typeidseq RPAREN DOT lib [ # ]
## Transitions:
-- On LPAREN shift to state 884
-- On DOT shift to state 926
## Reductions:

State 884:
## Known stack suffix:
## EVENT IDENT LPAREN
## LR(1) items:
lib -> EVENT IDENT LPAREN . typeidseq RPAREN DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 885
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 885:
## Known stack suffix:
## EVENT IDENT LPAREN typeidseq
## LR(1) items:
lib -> EVENT IDENT LPAREN typeidseq . RPAREN DOT lib [ # ]
## Transitions:
-- On RPAREN shift to state 886
## Reductions:

State 886:
## Known stack suffix:
## EVENT IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> EVENT IDENT LPAREN typeidseq RPAREN . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 887
## Reductions:

State 887:
## Known stack suffix:
## EVENT IDENT LPAREN typeidseq RPAREN DOT
## LR(1) items:
lib -> EVENT IDENT LPAREN typeidseq RPAREN DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 925
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 888:
## Known stack suffix:
## EQUATION
## LR(1) items:
lib -> EQUATION . eqlist options DOT lib [ # ]
## Transitions:
-- On FORALL shift to state 28
-- On forallvartype shift to state 630
-- On eqlist shift to state 889
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallvartype ->

State 889:
## Known stack suffix:
## EQUATION eqlist
## LR(1) items:
lib -> EQUATION eqlist . options DOT lib [ # ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 890
## Reductions:
-- On DOT
--   reduce production options ->

State 890:
## Known stack suffix:
## EQUATION eqlist options
## LR(1) items:
lib -> EQUATION eqlist options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 891
## Reductions:

State 891:
## Known stack suffix:
## EQUATION eqlist options DOT
## LR(1) items:
lib -> EQUATION eqlist options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 924
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 892:
## Known stack suffix:
## ELIMTRUE
## LR(1) items:
lib -> ELIMTRUE . nemayfailvartypeseq SEMI term DOT lib [ # ]
lib -> ELIMTRUE . term DOT lib [ # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 638
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 893
-- On nemayfailvartypeseq shift to state 919
-- On mayfailvartype shift to state 605
## Reductions:

State 893:
## Known stack suffix:
## ELIMTRUE term
## LR(1) items:
lib -> ELIMTRUE term . DOT lib [ # ]
term -> term . EQUAL term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . DIFF term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DOT shift to state 894
-- On DIFF shift to state 253
## Reductions:

State 894:
## Known stack suffix:
## ELIMTRUE term DOT
## LR(1) items:
lib -> ELIMTRUE term DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 918
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 895:
## Known stack suffix:
## DEFINE
## LR(1) items:
lib -> DEFINE . IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE lib [ # ]
## Transitions:
-- On IDENT shift to state 896
## Reductions:

State 896:
## Known stack suffix:
## DEFINE IDENT
## LR(1) items:
lib -> DEFINE IDENT . LPAREN typeidseq RPAREN LBRACE lib RBRACE lib [ # ]
## Transitions:
-- On LPAREN shift to state 897
## Reductions:

State 897:
## Known stack suffix:
## DEFINE IDENT LPAREN
## LR(1) items:
lib -> DEFINE IDENT LPAREN . typeidseq RPAREN LBRACE lib RBRACE lib [ # ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeidseq shift to state 898
-- On typeid shift to state 676
-- On netypeidseq shift to state 679
## Reductions:
-- On RPAREN
--   reduce production typeidseq ->

State 898:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq . RPAREN LBRACE lib RBRACE lib [ # ]
## Transitions:
-- On RPAREN shift to state 899
## Reductions:

State 899:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN . LBRACE lib RBRACE lib [ # ]
## Transitions:
-- On LBRACE shift to state 900
## Reductions:

State 900:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN LBRACE
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE . lib RBRACE lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 1
-- On TYPE shift to state 4
-- On TABLE shift to state 14
-- On SET shift to state 22
-- On REDUCTION shift to state 27
-- On QUERY shift to state 39
-- On PROOF shift to state 126
-- On PROBA shift to state 146
-- On PREDICATE shift to state 149
-- On PARAM shift to state 156
-- On NOUNIF shift to state 160
-- On NOT shift to state 229
-- On NONINTERF shift to state 234
-- On LETFUN shift to state 276
-- On LET shift to state 412
-- On IMPLEMENTATION shift to state 547
-- On FUN shift to state 594
-- On FREE shift to state 611
-- On EXPAND shift to state 617
-- On EVENT shift to state 623
-- On EQUATION shift to state 629
-- On ELIMTRUE shift to state 637
-- On DEFINE shift to state 641
-- On CONST shift to state 647
-- On CLAUSES shift to state 653
-- On CHANNEL shift to state 655
-- On lib shift to state 901
## Reductions:
-- On RBRACE
--   reduce production lib ->

State 901:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib . RBRACE lib [ # ]
## Transitions:
-- On RBRACE shift to state 902
## Reductions:

State 902:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 917
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 903:
## Known stack suffix:
## CONST
## LR(1) items:
lib -> CONST . neidentseq COLON typeid options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 904
## Reductions:

State 904:
## Known stack suffix:
## CONST neidentseq
## LR(1) items:
lib -> CONST neidentseq . COLON typeid options DOT lib [ # ]
## Transitions:
-- On COLON shift to state 905
## Reductions:

State 905:
## Known stack suffix:
## CONST neidentseq COLON
## LR(1) items:
lib -> CONST neidentseq COLON . typeid options DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 17
-- On CHANNEL shift to state 18
-- On typeid shift to state 906
## Reductions:

State 906:
## Known stack suffix:
## CONST neidentseq COLON typeid
## LR(1) items:
lib -> CONST neidentseq COLON typeid . options DOT lib [ # ]
## Transitions:
-- On LBRACKET shift to state 6
-- On options shift to state 907
## Reductions:
-- On DOT
--   reduce production options ->

State 907:
## Known stack suffix:
## CONST neidentseq COLON typeid options
## LR(1) items:
lib -> CONST neidentseq COLON typeid options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 908
## Reductions:

State 908:
## Known stack suffix:
## CONST neidentseq COLON typeid options DOT
## LR(1) items:
lib -> CONST neidentseq COLON typeid options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 916
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 909:
## Known stack suffix:
## CLAUSES
## LR(1) items:
lib -> CLAUSES . tclauses lib [ # ]
## Transitions:
-- On FORALL shift to state 602
-- On tclauses shift to state 910
-- On forallmayfailvartype shift to state 660
## Reductions:
-- On PROJECTION NOT LPAREN IDENT FAIL CHOICE
--   reduce production forallmayfailvartype ->

State 910:
## Known stack suffix:
## CLAUSES tclauses
## LR(1) items:
lib -> CLAUSES tclauses . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 915
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 911:
## Known stack suffix:
## CHANNEL
## LR(1) items:
lib -> CHANNEL . neidentseq DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 7
-- On neidentseq shift to state 912
## Reductions:

State 912:
## Known stack suffix:
## CHANNEL neidentseq
## LR(1) items:
lib -> CHANNEL neidentseq . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 913
## Reductions:

State 913:
## Known stack suffix:
## CHANNEL neidentseq DOT
## LR(1) items:
lib -> CHANNEL neidentseq DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 914
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 914:
## Known stack suffix:
## CHANNEL neidentseq DOT lib
## LR(1) items:
lib -> CHANNEL neidentseq DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> CHANNEL neidentseq DOT lib

State 915:
## Known stack suffix:
## CLAUSES tclauses lib
## LR(1) items:
lib -> CLAUSES tclauses lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> CLAUSES tclauses lib

State 916:
## Known stack suffix:
## CONST neidentseq COLON typeid options DOT lib
## LR(1) items:
lib -> CONST neidentseq COLON typeid options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> CONST neidentseq COLON typeid options DOT lib

State 917:
## Known stack suffix:
## DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE lib
## LR(1) items:
lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> DEFINE IDENT LPAREN typeidseq RPAREN LBRACE lib RBRACE lib

State 918:
## Known stack suffix:
## ELIMTRUE term DOT lib
## LR(1) items:
lib -> ELIMTRUE term DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> ELIMTRUE term DOT lib

State 919:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq . SEMI term DOT lib [ # ]
## Transitions:
-- On SEMI shift to state 920
## Reductions:

State 920:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq SEMI
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq SEMI . term DOT lib [ # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 921
## Reductions:

State 921:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq SEMI term
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq SEMI term . DOT lib [ # ]
term -> term . EQUAL term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . DIFF term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . OR term [ WEDGE OR EQUAL DOT DIFF ]
term -> term . WEDGE term [ WEDGE OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DOT shift to state 922
-- On DIFF shift to state 253
## Reductions:

State 922:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq SEMI term DOT
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq SEMI term DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 923
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 923:
## Known stack suffix:
## ELIMTRUE nemayfailvartypeseq SEMI term DOT lib
## LR(1) items:
lib -> ELIMTRUE nemayfailvartypeseq SEMI term DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> ELIMTRUE nemayfailvartypeseq SEMI term DOT lib

State 924:
## Known stack suffix:
## EQUATION eqlist options DOT lib
## LR(1) items:
lib -> EQUATION eqlist options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> EQUATION eqlist options DOT lib

State 925:
## Known stack suffix:
## EVENT IDENT LPAREN typeidseq RPAREN DOT lib
## LR(1) items:
lib -> EVENT IDENT LPAREN typeidseq RPAREN DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> EVENT IDENT LPAREN typeidseq RPAREN DOT lib

State 926:
## Known stack suffix:
## EVENT IDENT DOT
## LR(1) items:
lib -> EVENT IDENT DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 927
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 927:
## Known stack suffix:
## EVENT IDENT DOT lib
## LR(1) items:
lib -> EVENT IDENT DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> EVENT IDENT DOT lib

State 928:
## Known stack suffix:
## EXPAND IDENT LPAREN typeidseq RPAREN DOT lib
## LR(1) items:
lib -> EXPAND IDENT LPAREN typeidseq RPAREN DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> EXPAND IDENT LPAREN typeidseq RPAREN DOT lib

State 929:
## Known stack suffix:
## FREE neidentseq COLON typeid options DOT lib
## LR(1) items:
lib -> FREE neidentseq COLON typeid options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> FREE neidentseq COLON typeid options DOT lib

State 930:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid REDUCTION treducmayfail options DOT lib

State 931:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid options
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 932
## Reductions:

State 932:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 933
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 933:
## Known stack suffix:
## FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT lib
## LR(1) items:
lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> FUN IDENT LPAREN typeidseq RPAREN COLON typeid options DOT lib

State 934:
## Known stack suffix:
## IMPLEMENTATION impllist DOT lib
## LR(1) items:
lib -> IMPLEMENTATION impllist DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> IMPLEMENTATION impllist DOT lib

State 935:
## Known stack suffix:
## LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib
## LR(1) items:
lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> LET IDENT LPAREN mayfailvartypeseq RPAREN EQUAL tprocess DOT lib

State 936:
## Known stack suffix:
## LET IDENT EQUAL
## LR(1) items:
lib -> LET IDENT EQUAL . tprocess DOT lib [ # ]
## Transitions:
-- On YIELD shift to state 418
-- On REPL shift to state 419
-- On PHASE shift to state 420
-- On OUT shift to state 423
-- On NEW shift to state 432
-- On LPAREN shift to state 438
-- On LET shift to state 439
-- On INT shift to state 444
-- On INSERT shift to state 445
-- On IN shift to state 451
-- On IF shift to state 458
-- On IDENT shift to state 461
-- On GET shift to state 481
-- On FOREACH shift to state 489
-- On EVENT shift to state 494
-- On BARRIER shift to state 503
-- On tprocess shift to state 937
-- On progbegin shift to state 511
-- On basicpattern shift to state 515
## Reductions:

State 937:
## Known stack suffix:
## LET IDENT EQUAL tprocess
## LR(1) items:
lib -> LET IDENT EQUAL tprocess . DOT lib [ # ]
tprocess -> tprocess . BAR tprocess [ DOT BAR ]
## Transitions:
-- On DOT shift to state 938
-- On BAR shift to state 513
## Reductions:

State 938:
## Known stack suffix:
## LET IDENT EQUAL tprocess DOT
## LR(1) items:
lib -> LET IDENT EQUAL tprocess DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 939
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 939:
## Known stack suffix:
## LET IDENT EQUAL tprocess DOT lib
## LR(1) items:
lib -> LET IDENT EQUAL tprocess DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> LET IDENT EQUAL tprocess DOT lib

State 940:
## Known stack suffix:
## LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib
## LR(1) items:
lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> LETFUN IDENT LPAREN mayfailvartypeseq RPAREN EQUAL pterm DOT lib

State 941:
## Known stack suffix:
## LETFUN IDENT EQUAL
## LR(1) items:
lib -> LETFUN IDENT EQUAL . pterm DOT lib [ # ]
## Transitions:
-- On NOT shift to state 288
-- On NEW shift to state 290
-- On LPAREN shift to state 300
-- On LET shift to state 301
-- On INSERT shift to state 306
-- On IF shift to state 309
-- On IDENT shift to state 310
-- On GET shift to state 314
-- On EVENT shift to state 320
-- On CHOICE shift to state 323
-- On pterm shift to state 942
-- On basicpattern shift to state 332
## Reductions:

State 942:
## Known stack suffix:
## LETFUN IDENT EQUAL pterm
## LR(1) items:
lib -> LETFUN IDENT EQUAL pterm . DOT lib [ # ]
pterm -> pterm . EQUAL pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . DIFF pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . OR pterm [ WEDGE OR EQUAL DOT DIFF ]
pterm -> pterm . WEDGE pterm [ WEDGE OR EQUAL DOT DIFF ]
## Transitions:
-- On WEDGE shift to state 326
-- On OR shift to state 337
-- On EQUAL shift to state 328
-- On DOT shift to state 943
-- On DIFF shift to state 330
## Reductions:

State 943:
## Known stack suffix:
## LETFUN IDENT EQUAL pterm DOT
## LR(1) items:
lib -> LETFUN IDENT EQUAL pterm DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 944
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 944:
## Known stack suffix:
## LETFUN IDENT EQUAL pterm DOT lib
## LR(1) items:
lib -> LETFUN IDENT EQUAL pterm DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> LETFUN IDENT EQUAL pterm DOT lib

State 945:
## Known stack suffix:
## NONINTERF niseq DOT lib
## LR(1) items:
lib -> NONINTERF niseq DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> NONINTERF niseq DOT lib

State 946:
## Known stack suffix:
## NONINTERF nevartype
## LR(1) items:
lib -> NONINTERF nevartype . SEMI niseq DOT lib [ # ]
## Transitions:
-- On SEMI shift to state 947
## Reductions:

State 947:
## Known stack suffix:
## NONINTERF nevartype SEMI
## LR(1) items:
lib -> NONINTERF nevartype SEMI . niseq DOT lib [ # ]
## Transitions:
-- On IDENT shift to state 724
-- On niseq shift to state 948
-- On ni shift to state 722
## Reductions:

State 948:
## Known stack suffix:
## NONINTERF nevartype SEMI niseq
## LR(1) items:
lib -> NONINTERF nevartype SEMI niseq . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 949
## Reductions:

State 949:
## Known stack suffix:
## NONINTERF nevartype SEMI niseq DOT
## LR(1) items:
lib -> NONINTERF nevartype SEMI niseq DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 950
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 950:
## Known stack suffix:
## NONINTERF nevartype SEMI niseq DOT lib
## LR(1) items:
lib -> NONINTERF nevartype SEMI niseq DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> NONINTERF nevartype SEMI niseq DOT lib

State 951:
## Known stack suffix:
## NOT nevartype SEMI gterm DOT lib
## LR(1) items:
lib -> NOT nevartype SEMI gterm DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> NOT nevartype SEMI gterm DOT lib

State 952:
## Known stack suffix:
## NOT gterm
## LR(1) items:
gterm -> gterm . EQUAL gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . DIFF gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . OR gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . WEDGE gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
gterm -> gterm . BEFORE gterm [ WEDGE OR EQUAL DOT DIFF BEFORE ]
lib -> NOT gterm . DOT lib [ # ]
## Transitions:
-- On WEDGE shift to state 63
-- On OR shift to state 69
-- On EQUAL shift to state 65
-- On DOT shift to state 953
-- On DIFF shift to state 67
-- On BEFORE shift to state 74
## Reductions:

State 953:
## Known stack suffix:
## NOT gterm DOT
## LR(1) items:
lib -> NOT gterm DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 954
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 954:
## Known stack suffix:
## NOT gterm DOT lib
## LR(1) items:
lib -> NOT gterm DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> NOT gterm DOT lib

State 955:
## Known stack suffix:
## NOUNIF tfnebindingseq DOT lib
## LR(1) items:
lib -> NOUNIF tfnebindingseq DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> NOUNIF tfnebindingseq DOT lib

State 956:
## Known stack suffix:
## NOUNIF nevartype
## LR(1) items:
lib -> NOUNIF nevartype . SEMI tfnebindingseq DOT lib [ # ]
## Transitions:
-- On SEMI shift to state 957
## Reductions:

State 957:
## Known stack suffix:
## NOUNIF nevartype SEMI
## LR(1) items:
lib -> NOUNIF nevartype SEMI . tfnebindingseq DOT lib [ # ]
## Transitions:
-- On TABLE shift to state 161
-- On LET shift to state 213
-- On IDENT shift to state 218
-- On tfnebindingseq shift to state 958
## Reductions:

State 958:
## Known stack suffix:
## NOUNIF nevartype SEMI tfnebindingseq
## LR(1) items:
lib -> NOUNIF nevartype SEMI tfnebindingseq . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 959
## Reductions:

State 959:
## Known stack suffix:
## NOUNIF nevartype SEMI tfnebindingseq DOT
## LR(1) items:
lib -> NOUNIF nevartype SEMI tfnebindingseq DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 960
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 960:
## Known stack suffix:
## NOUNIF nevartype SEMI tfnebindingseq DOT lib
## LR(1) items:
lib -> NOUNIF nevartype SEMI tfnebindingseq DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> NOUNIF nevartype SEMI tfnebindingseq DOT lib

State 961:
## Known stack suffix:
## PARAM neidentseq options DOT lib
## LR(1) items:
lib -> PARAM neidentseq options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> PARAM neidentseq options DOT lib

State 962:
## Known stack suffix:
## PREDICATE IDENT LPAREN typeidseq RPAREN options DOT lib
## LR(1) items:
lib -> PREDICATE IDENT LPAREN typeidseq RPAREN options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> PREDICATE IDENT LPAREN typeidseq RPAREN options DOT lib

State 963:
## Known stack suffix:
## PREDICATE IDENT options
## LR(1) items:
lib -> PREDICATE IDENT options . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 964
## Reductions:

State 964:
## Known stack suffix:
## PREDICATE IDENT options DOT
## LR(1) items:
lib -> PREDICATE IDENT options DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 965
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 965:
## Known stack suffix:
## PREDICATE IDENT options DOT lib
## LR(1) items:
lib -> PREDICATE IDENT options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> PREDICATE IDENT options DOT lib

State 966:
## Known stack suffix:
## PROBA IDENT DOT lib
## LR(1) items:
lib -> PROBA IDENT DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> PROBA IDENT DOT lib

State 967:
## Known stack suffix:
## PROOF LBRACE proof RBRACE lib
## LR(1) items:
lib -> PROOF LBRACE proof RBRACE lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> PROOF LBRACE proof RBRACE lib

State 968:
## Known stack suffix:
## QUERY tqueryseq DOT lib
## LR(1) items:
lib -> QUERY tqueryseq DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> QUERY tqueryseq DOT lib

State 969:
## Known stack suffix:
## QUERY nevartype
## LR(1) items:
lib -> QUERY nevartype . SEMI tqueryseq DOT lib [ # ]
## Transitions:
-- On SEMI shift to state 970
## Reductions:

State 970:
## Known stack suffix:
## QUERY nevartype SEMI
## LR(1) items:
lib -> QUERY nevartype SEMI . tqueryseq DOT lib [ # ]
## Transitions:
-- On TABLE shift to state 40
-- On SECRET shift to state 110
-- On PUTBEGIN shift to state 116
-- On NOT shift to state 42
-- On NEW shift to state 44
-- On LPAREN shift to state 50
-- On LET shift to state 51
-- On INJEVENT shift to state 54
-- On IDENT shift to state 56
-- On EVENT shift to state 58
-- On CHOICE shift to state 60
-- On tqueryseq shift to state 971
-- On tquery shift to state 749
-- On gterm shift to state 752
## Reductions:

State 971:
## Known stack suffix:
## QUERY nevartype SEMI tqueryseq
## LR(1) items:
lib -> QUERY nevartype SEMI tqueryseq . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 972
## Reductions:

State 972:
## Known stack suffix:
## QUERY nevartype SEMI tqueryseq DOT
## LR(1) items:
lib -> QUERY nevartype SEMI tqueryseq DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 973
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 973:
## Known stack suffix:
## QUERY nevartype SEMI tqueryseq DOT lib
## LR(1) items:
lib -> QUERY nevartype SEMI tqueryseq DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> QUERY nevartype SEMI tqueryseq DOT lib

State 974:
## Known stack suffix:
## REDUCTION treduc options DOT lib
## LR(1) items:
lib -> REDUCTION treduc options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> REDUCTION treduc options DOT lib

State 975:
## Known stack suffix:
## SET IDENT EQUAL STRING DOT lib
## LR(1) items:
lib -> SET IDENT EQUAL STRING DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> SET IDENT EQUAL STRING DOT lib

State 976:
## Known stack suffix:
## SET IDENT EQUAL INT
## LR(1) items:
lib -> SET IDENT EQUAL INT . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 977
## Reductions:

State 977:
## Known stack suffix:
## SET IDENT EQUAL INT DOT
## LR(1) items:
lib -> SET IDENT EQUAL INT DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 978
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 978:
## Known stack suffix:
## SET IDENT EQUAL INT DOT lib
## LR(1) items:
lib -> SET IDENT EQUAL INT DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> SET IDENT EQUAL INT DOT lib

State 979:
## Known stack suffix:
## SET IDENT EQUAL IDENT
## LR(1) items:
lib -> SET IDENT EQUAL IDENT . DOT lib [ # ]
## Transitions:
-- On DOT shift to state 980
## Reductions:

State 980:
## Known stack suffix:
## SET IDENT EQUAL IDENT DOT
## LR(1) items:
lib -> SET IDENT EQUAL IDENT DOT . lib [ # ]
## Transitions:
-- On WEAKSECRET shift to state 786
-- On TYPE shift to state 789
-- On TABLE shift to state 793
-- On SET shift to state 799
-- On REDUCTION shift to state 804
-- On QUERY shift to state 808
-- On PROOF shift to state 811
-- On PROBA shift to state 815
-- On PREDICATE shift to state 818
-- On PARAM shift to state 825
-- On NOUNIF shift to state 829
-- On NOT shift to state 832
-- On NONINTERF shift to state 837
-- On LETFUN shift to state 840
-- On LET shift to state 848
-- On IMPLEMENTATION shift to state 856
-- On FUN shift to state 859
-- On FREE shift to state 870
-- On EXPAND shift to state 876
-- On EVENT shift to state 882
-- On EQUATION shift to state 888
-- On ELIMTRUE shift to state 892
-- On DEFINE shift to state 895
-- On CONST shift to state 903
-- On CLAUSES shift to state 909
-- On CHANNEL shift to state 911
-- On lib shift to state 981
## Reductions:
-- On #
--   reduce production lib ->
** End-of-stream conflict on WEAKSECRET TYPE TABLE SET REDUCTION QUERY PROOF PROBA PREDICATE PARAM NOUNIF NOT NONINTERF LETFUN LET IMPLEMENTATION FUN FREE EXPAND EVENT EQUATION ELIMTRUE DEFINE CONST CLAUSES CHANNEL
**   There is a tension between
**   (1) reducing production lib ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 981:
## Known stack suffix:
## SET IDENT EQUAL IDENT DOT lib
## LR(1) items:
lib -> SET IDENT EQUAL IDENT DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> SET IDENT EQUAL IDENT DOT lib

State 982:
## Known stack suffix:
## TABLE IDENT LPAREN typeidseq RPAREN DOT lib
## LR(1) items:
lib -> TABLE IDENT LPAREN typeidseq RPAREN DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> TABLE IDENT LPAREN typeidseq RPAREN DOT lib

State 983:
## Known stack suffix:
## TYPE IDENT options DOT lib
## LR(1) items:
lib -> TYPE IDENT options DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> TYPE IDENT options DOT lib

State 984:
## Known stack suffix:
## WEAKSECRET IDENT DOT lib
## LR(1) items:
lib -> WEAKSECRET IDENT DOT lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production lib -> WEAKSECRET IDENT DOT lib

State 985:
## Known stack suffix:
## lib
## LR(1) items:
lib' -> lib . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept lib

State 986:
## Known stack suffix:
##
## LR(1) items:
order' -> . order [ # ]
## Transitions:
-- On IDENT shift to state 987
-- On order shift to state 990
## Reductions:

State 987:
## Known stack suffix:
## IDENT
## LR(1) items:
order -> IDENT . GREATER order [ # ]
order -> IDENT . [ # ]
## Transitions:
-- On GREATER shift to state 988
## Reductions:
-- On #
--   reduce production order -> IDENT
** End-of-stream conflict on GREATER
**   There is a tension between
**   (1) reducing production order -> IDENT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 988:
## Known stack suffix:
## IDENT GREATER
## LR(1) items:
order -> IDENT GREATER . order [ # ]
## Transitions:
-- On IDENT shift to state 987
-- On order shift to state 989
## Reductions:

State 989:
## Known stack suffix:
## IDENT GREATER order
## LR(1) items:
order -> IDENT GREATER order . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production order -> IDENT GREATER order

State 990:
## Known stack suffix:
## order
## LR(1) items:
order' -> order . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept order

State 991:
## Known stack suffix:
##
## LR(1) items:
permut' -> . permut [ # ]
## Transitions:
-- On IDENT shift to state 992
-- On ATIDENT shift to state 993
-- On tag shift to state 994
-- On permut shift to state 998
-- On onepermut shift to state 999
## Reductions:
-- On #
--   reduce production permut ->
** End-of-stream conflict on IDENT ATIDENT
**   There is a tension between
**   (1) reducing production permut ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 992:
## Known stack suffix:
## IDENT
## LR(1) items:
tag -> IDENT . [ SEMI RED # ]
## Transitions:
## Reductions:
-- On SEMI RED #
--   reduce production tag -> IDENT
** End-of-stream conflict on SEMI RED
**   There is a tension between
**   (1) reducing production tag -> IDENT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 993:
## Known stack suffix:
## ATIDENT
## LR(1) items:
tag -> ATIDENT . [ SEMI RED # ]
## Transitions:
## Reductions:
-- On SEMI RED #
--   reduce production tag -> ATIDENT
** End-of-stream conflict on SEMI RED
**   There is a tension between
**   (1) reducing production tag -> ATIDENT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 994:
## Known stack suffix:
## tag
## LR(1) items:
onepermut -> tag . RED tag [ SEMI # ]
onepermut -> tag . RED onepermut [ SEMI # ]
## Transitions:
-- On RED shift to state 995
## Reductions:

State 995:
## Known stack suffix:
## tag RED
## LR(1) items:
onepermut -> tag RED . tag [ SEMI # ]
onepermut -> tag RED . onepermut [ SEMI # ]
## Transitions:
-- On IDENT shift to state 992
-- On ATIDENT shift to state 993
-- On tag shift to state 996
-- On onepermut shift to state 997
## Reductions:

State 996:
## Known stack suffix:
## tag RED tag
## LR(1) items:
onepermut -> tag . RED tag [ SEMI # ]
onepermut -> tag RED tag . [ SEMI # ]
onepermut -> tag . RED onepermut [ SEMI # ]
## Transitions:
-- On RED shift to state 995
## Reductions:
-- On SEMI #
--   reduce production onepermut -> tag RED tag
** End-of-stream conflict on SEMI RED
**   There is a tension between
**   (1) reducing production onepermut -> tag RED tag
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 997:
## Known stack suffix:
## tag RED onepermut
## LR(1) items:
onepermut -> tag RED onepermut . [ SEMI # ]
## Transitions:
## Reductions:
-- On SEMI #
--   reduce production onepermut -> tag RED onepermut
** End-of-stream conflict on SEMI
**   There is a tension between
**   (1) reducing production onepermut -> tag RED onepermut
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 998:
## Known stack suffix:
## permut
## LR(1) items:
permut' -> permut . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept permut

State 999:
## Known stack suffix:
## onepermut
## LR(1) items:
permut -> onepermut . [ # ]
permut -> onepermut . SEMI permut [ # ]
## Transitions:
-- On SEMI shift to state 1000
## Reductions:
-- On #
--   reduce production permut -> onepermut
** End-of-stream conflict on SEMI
**   There is a tension between
**   (1) reducing production permut -> onepermut
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1000:
## Known stack suffix:
## onepermut SEMI
## LR(1) items:
permut -> onepermut SEMI . permut [ # ]
## Transitions:
-- On IDENT shift to state 992
-- On ATIDENT shift to state 993
-- On tag shift to state 994
-- On permut shift to state 1001
-- On onepermut shift to state 999
## Reductions:
-- On #
--   reduce production permut ->
** End-of-stream conflict on IDENT ATIDENT
**   There is a tension between
**   (1) reducing production permut ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1001:
## Known stack suffix:
## onepermut SEMI permut
## LR(1) items:
permut -> onepermut SEMI permut . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production permut -> onepermut SEMI permut

State 1002:
## Known stack suffix:
##
## LR(1) items:
term' -> . term [ # ]
## Transitions:
-- On PROJECTION shift to state 238
-- On NOT shift to state 240
-- On LPAREN shift to state 242
-- On IDENT shift to state 243
-- On FAIL shift to state 245
-- On CHOICE shift to state 246
-- On term shift to state 1003
## Reductions:

State 1003:
## Known stack suffix:
## term
## LR(1) items:
term' -> term . [ # ]
term -> term . EQUAL term [ WEDGE OR EQUAL DIFF # ]
term -> term . DIFF term [ WEDGE OR EQUAL DIFF # ]
term -> term . OR term [ WEDGE OR EQUAL DIFF # ]
term -> term . WEDGE term [ WEDGE OR EQUAL DIFF # ]
## Transitions:
-- On WEDGE shift to state 249
-- On OR shift to state 255
-- On EQUAL shift to state 251
-- On DIFF shift to state 253
## Reductions:
-- On #
--   accept term
** End-of-stream conflict on WEDGE OR EQUAL DIFF
**   There is a tension between
**   (1) accepting term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

