
** Conflict (shift/reduce) in state 540.
** Token involved: LPAREN
** This state is reached from all after reading:

lib EQUIVALENCE REPL IDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
(?)

** In state 540, looking ahead at LPAREN, reducing production
** tprocess -> IDENT
** is permitted because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF // lookahead token appears because tprocess can begin with LPAREN
                REPL tprocess // lookahead token is inherited
                     IDENT . 

** In state 540, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF 
                REPL tprocess 
                     IDENT . LPAREN ptermseq RPAREN 

** Conflict (shift/reduce) in state 538.
** Token involved: BAR
** This state is reached from all after reading:

lib PROCESS PHASE INT SEMI tprocess

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
            (?)

** In state 538, looking ahead at BAR, reducing production
** opttprocess -> SEMI tprocess
** is permitted because of the following sub-derivation:

tprocess BAR tprocess // lookahead token appears
PHASE INT opttprocess // lookahead token is inherited
          SEMI tprocess . 

** In state 538, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

PHASE INT opttprocess 
          SEMI tprocess 
               tprocess . BAR tprocess 

** Conflict (shift/reduce) in state 534.
** Tokens involved: ELSE BAR
** The following explanations concentrate on token BAR.
** This state is reached from all after reading:

lib PROCESS LET nevartype SUCHTHAT pterm IN tprocess

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
            (?)

** In state 534, looking ahead at BAR, reducing production
** optelseprocess -> 
** is permitted because of the following sub-derivation:

tprocess BAR tprocess // lookahead token appears
LET nevartype SUCHTHAT pterm IN tprocess optelseprocess // lookahead token is inherited
                                         . 

** In state 534, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

LET nevartype SUCHTHAT pterm IN tprocess optelseprocess 
                                tprocess . BAR tprocess 

** Conflict (shift/reduce) in state 532.
** Token involved: IN
** This state is reached from all after reading:

lib EQUIVALENCE LET nevartype SUCHTHAT pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
(?)

** In state 532, looking ahead at IN, reducing production
** tprocess -> LET nevartype SUCHTHAT pterm
** is permitted because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF // lookahead token appears because tprocess can begin with IN
                LET nevartype SUCHTHAT pterm . 

** In state 532, looking ahead at IN, shifting is permitted
** because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF 
                LET nevartype SUCHTHAT pterm . IN tprocess optelseprocess 

** Conflict (shift/reduce) in state 528.
** Tokens involved: ELSE BAR
** The following explanations concentrate on token BAR.
** This state is reached from all after reading:

lib PROCESS LET tpattern EQUAL pterm IN tprocess

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
            (?)

** In state 528, looking ahead at BAR, reducing production
** optelseprocess -> 
** is permitted because of the following sub-derivation:

tprocess BAR tprocess // lookahead token appears
LET tpattern EQUAL pterm IN tprocess optelseprocess // lookahead token is inherited
                                     . 

** In state 528, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

LET tpattern EQUAL pterm IN tprocess optelseprocess 
                            tprocess . BAR tprocess 

** Conflict (shift/reduce) in state 526.
** Tokens involved: ELSE BAR
** The following explanations concentrate on token BAR.
** This state is reached from all after reading:

lib PROCESS IF pterm THEN tprocess

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
            (?)

** In state 526, looking ahead at BAR, reducing production
** optelseprocess -> 
** is permitted because of the following sub-derivation:

tprocess BAR tprocess // lookahead token appears
IF pterm THEN tprocess optelseprocess // lookahead token is inherited
                       . 

** In state 526, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

IF pterm THEN tprocess optelseprocess 
              tprocess . BAR tprocess 

** Conflict (shift/reduce) in state 524.
** Token involved: ELSE
** This state is reached from all after reading:

lib PROCESS IF pterm THEN GET IDENT LPAREN tpatternseq RPAREN optinprocess

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
            (?)

** In state 524, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF pterm THEN tprocess optelseprocess 
              GET IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess 
                                                               . ELSE tprocess 

** In state 524, looking ahead at ELSE, reducing production
** optelseprocess -> 
** is permitted because of the following sub-derivation:

IF pterm THEN tprocess optelseprocess // lookahead token appears because optelseprocess can begin with ELSE
              GET IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess // lookahead token is inherited
                                                               . 

** Conflict (shift/reduce) in state 522.
** Token involved: BAR
** This state is reached from all after reading:

lib PROCESS IF pterm THEN tprocess ELSE tprocess

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
            (?)

** In state 522, looking ahead at BAR, reducing production
** optelseprocess -> ELSE tprocess
** is permitted because of the following sub-derivation:

tprocess BAR tprocess // lookahead token appears
IF pterm THEN tprocess optelseprocess // lookahead token is inherited
                       ELSE tprocess . 

** In state 522, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

IF pterm THEN tprocess optelseprocess 
                       ELSE tprocess 
                            tprocess . BAR tprocess 

** Conflict (shift/reduce) in state 520.
** Token involved: ELSE
** This state is reached from all after reading:

lib PROCESS IF pterm THEN GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
            (?)

** In state 520, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF pterm THEN tprocess optelseprocess 
              GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess 
                                                                              . ELSE tprocess 

** In state 520, looking ahead at ELSE, reducing production
** optelseprocess -> 
** is permitted because of the following sub-derivation:

IF pterm THEN tprocess optelseprocess // lookahead token appears because optelseprocess can begin with ELSE
              GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess // lookahead token is inherited
                                                                              . 

** Conflict (shift/reduce) in state 519.
** Token involved: BAR
** This state is reached from all after reading:

lib PROCESS GET IDENT LPAREN tpatternseq RPAREN IN tprocess

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
            (?)

** In state 519, looking ahead at BAR, reducing production
** optinprocess -> IN tprocess
** is permitted because of the following sub-derivation:

tprocess BAR tprocess // lookahead token appears
GET IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess // lookahead token is inherited because optelseprocess can vanish
                                    IN tprocess . 

** In state 519, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

GET IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess 
                                    IN tprocess 
                                       tprocess . BAR tprocess 

** Conflict (shift/reduce) in state 512.
** Token involved: BAR
** This state is reached from all after reading:

lib PROCESS progbegin tprocess

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
            (?)

** In state 512, looking ahead at BAR, reducing production
** tprocess -> progbegin tprocess
** is permitted because of the following sub-derivation:

tprocess BAR tprocess // lookahead token appears
progbegin tprocess . 

** In state 512, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

progbegin tprocess 
          tprocess . BAR tprocess 

** Conflict (shift/reduce) in state 495.
** Token involved: LPAREN
** This state is reached from all after reading:

lib EQUIVALENCE EVENT IDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
(?)

** In state 495, looking ahead at LPAREN, reducing production
** newarg -> 
** is permitted because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF // lookahead token appears because tprocess can begin with LPAREN
                EVENT IDENT newarg opttprocess // lookahead token is inherited because opttprocess can vanish
                            . 

** In state 495, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF 
                EVENT IDENT . LPAREN ptermseq RPAREN newarg opttprocess 

** Conflict (shift/reduce) in state 487.
** Token involved: IN
** This state is reached from all after reading:

lib EQUIVALENCE GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
(?)

** In state 487, looking ahead at IN, shifting is permitted
** because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF 
                GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess 
                                                                   . IN tprocess 

** In state 487, looking ahead at IN, reducing production
** optinprocess -> 
** is permitted because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF // lookahead token appears because tprocess can begin with IN
                GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm optinprocess optelseprocess // lookahead token is inherited because optelseprocess can vanish
                                                                   . 

** Conflict (shift/reduce) in state 485.
** Token involved: IN
** This state is reached from all after reading:

lib EQUIVALENCE GET IDENT LPAREN tpatternseq RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
(?)

** In state 485, looking ahead at IN, shifting is permitted
** because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF 
                GET IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess 
                                                    . IN tprocess 

** In state 485, looking ahead at IN, reducing production
** optinprocess -> 
** is permitted because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF // lookahead token appears because tprocess can begin with IN
                GET IDENT LPAREN tpatternseq RPAREN optinprocess optelseprocess // lookahead token is inherited because optelseprocess can vanish
                                                    . 

** Conflict (shift/reduce) in state 461.
** Token involved: LPAREN
** This state is reached from all after reading:

lib EQUIVALENCE IDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
(?)

** In state 461, looking ahead at LPAREN, reducing production
** tprocess -> IDENT
** is permitted because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF // lookahead token appears because tprocess can begin with LPAREN
                IDENT . 

** In state 461, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF 
                IDENT . LPAREN ptermseq RPAREN 

** Conflict (shift/reduce) in state 442.
** Token involved: IN
** This state is reached from all after reading:

lib EQUIVALENCE LET tpattern EQUAL pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
(?)

** In state 442, looking ahead at IN, reducing production
** tprocess -> LET tpattern EQUAL pterm
** is permitted because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF // lookahead token appears because tprocess can begin with IN
                LET tpattern EQUAL pterm . 

** In state 442, looking ahead at IN, shifting is permitted
** because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF 
                LET tpattern EQUAL pterm . IN tprocess optelseprocess 

** Conflict (shift/reduce) in state 407.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL NEW IDENT newarg COLON typeid SEMI pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 407, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

NEW IDENT newarg COLON typeid SEMI pterm 
                                   pterm . WEDGE pterm 

** In state 407, looking ahead at WEDGE, reducing production
** pterm -> NEW IDENT newarg COLON typeid SEMI pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
NEW IDENT newarg COLON typeid SEMI pterm . 

** Conflict (shift/reduce) in state 404.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL LET nevartype SUCHTHAT pterm IN pterm ELSE pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 404, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

LET nevartype SUCHTHAT pterm IN pterm ELSE pterm 
                                           pterm . WEDGE pterm 

** In state 404, looking ahead at WEDGE, reducing production
** pterm -> LET nevartype SUCHTHAT pterm IN pterm ELSE pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
LET nevartype SUCHTHAT pterm IN pterm ELSE pterm . 

** Conflict (shift/reduce) in state 402.
** Tokens involved: WEDGE OR EQUAL ELSE DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL LET nevartype SUCHTHAT pterm IN pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 402, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

LET nevartype SUCHTHAT pterm IN pterm 
                                pterm . WEDGE pterm 

** In state 402, looking ahead at WEDGE, reducing production
** pterm -> LET nevartype SUCHTHAT pterm IN pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
LET nevartype SUCHTHAT pterm IN pterm . 

** Conflict (shift/reduce) in state 397.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL LET tpattern EQUAL pterm IN pterm ELSE pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 397, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

LET tpattern EQUAL pterm IN pterm ELSE pterm 
                                       pterm . WEDGE pterm 

** In state 397, looking ahead at WEDGE, reducing production
** pterm -> LET tpattern EQUAL pterm IN pterm ELSE pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
LET tpattern EQUAL pterm IN pterm ELSE pterm . 

** Conflict (shift/reduce) in state 395.
** Tokens involved: WEDGE OR EQUAL ELSE DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL LET tpattern EQUAL pterm IN pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 395, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

LET tpattern EQUAL pterm IN pterm 
                            pterm . WEDGE pterm 

** In state 395, looking ahead at WEDGE, reducing production
** pterm -> LET tpattern EQUAL pterm IN pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
LET tpattern EQUAL pterm IN pterm . 

** Conflict (shift/reduce) in state 382.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL INSERT IDENT LPAREN ptermseq RPAREN SEMI pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 382, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

INSERT IDENT LPAREN ptermseq RPAREN SEMI pterm 
                                         pterm . WEDGE pterm 

** In state 382, looking ahead at WEDGE, reducing production
** pterm -> INSERT IDENT LPAREN ptermseq RPAREN SEMI pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
INSERT IDENT LPAREN ptermseq RPAREN SEMI pterm . 

** Conflict (shift/reduce) in state 378.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL IF pterm THEN pterm ELSE pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 378, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

IF pterm THEN pterm ELSE pterm 
                         pterm . WEDGE pterm 

** In state 378, looking ahead at WEDGE, reducing production
** pterm -> IF pterm THEN pterm ELSE pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
IF pterm THEN pterm ELSE pterm . 

** Conflict (shift/reduce) in state 376.
** Tokens involved: WEDGE OR EQUAL ELSE DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL IF pterm THEN pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 376, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

IF pterm THEN pterm 
              pterm . WEDGE pterm 

** In state 376, looking ahead at WEDGE, reducing production
** pterm -> IF pterm THEN pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
IF pterm THEN pterm . 

** Conflict (shift/reduce) in state 368.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL IDENT RANDOM typeid SEMI pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 368, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

IDENT RANDOM typeid SEMI pterm 
                         pterm . WEDGE pterm 

** In state 368, looking ahead at WEDGE, reducing production
** pterm -> IDENT RANDOM typeid SEMI pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
IDENT RANDOM typeid SEMI pterm . 

** Conflict (shift/reduce) in state 362.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL GET IDENT LPAREN tpatternseq RPAREN IN pterm ELSE pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 362, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

GET IDENT LPAREN tpatternseq RPAREN IN pterm ELSE pterm 
                                                  pterm . WEDGE pterm 

** In state 362, looking ahead at WEDGE, reducing production
** pterm -> GET IDENT LPAREN tpatternseq RPAREN IN pterm ELSE pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
GET IDENT LPAREN tpatternseq RPAREN IN pterm ELSE pterm . 

** Conflict (shift/reduce) in state 360.
** Tokens involved: WEDGE OR EQUAL ELSE DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL GET IDENT LPAREN tpatternseq RPAREN IN pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 360, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

GET IDENT LPAREN tpatternseq RPAREN IN pterm 
                                       pterm . WEDGE pterm 

** In state 360, looking ahead at WEDGE, reducing production
** pterm -> GET IDENT LPAREN tpatternseq RPAREN IN pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
GET IDENT LPAREN tpatternseq RPAREN IN pterm . 

** Conflict (shift/reduce) in state 358.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 358, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm 
                                                                 pterm . WEDGE pterm 

** In state 358, looking ahead at WEDGE, reducing production
** pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm ELSE pterm . 

** Conflict (shift/reduce) in state 356.
** Tokens involved: WEDGE OR EQUAL ELSE DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 356, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm 
                                                      pterm . WEDGE pterm 

** In state 356, looking ahead at WEDGE, reducing production
** pterm -> GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
GET IDENT LPAREN tpatternseq RPAREN SUCHTHAT pterm IN pterm . 

** Conflict (shift/reduce) in state 353.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL EVENT IDENT newarg SEMI pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 353, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

EVENT IDENT newarg SEMI pterm 
                        pterm . WEDGE pterm 

** In state 353, looking ahead at WEDGE, reducing production
** pterm -> EVENT IDENT newarg SEMI pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
EVENT IDENT newarg SEMI pterm . 

** Conflict (shift/reduce) in state 346.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL EVENT IDENT LPAREN ptermseq RPAREN newarg SEMI pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 346, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

EVENT IDENT LPAREN ptermseq RPAREN newarg SEMI pterm 
                                               pterm . WEDGE pterm 

** In state 346, looking ahead at WEDGE, reducing production
** pterm -> EVENT IDENT LPAREN ptermseq RPAREN newarg SEMI pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
EVENT IDENT LPAREN ptermseq RPAREN newarg SEMI pterm . 

** Conflict (shift/reduce) in state 336.
** Tokens involved: WEDGE OR EQUAL DIFF
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

LETFUN IDENT EQUAL basicpattern LEFTARROW pterm SEMI pterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
LETFUN IDENT EQUAL pterm DOT lib 
                   (?)

** In state 336, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

basicpattern LEFTARROW pterm SEMI pterm 
                                  pterm . WEDGE pterm 

** In state 336, looking ahead at WEDGE, reducing production
** pterm -> basicpattern LEFTARROW pterm SEMI pterm
** is permitted because of the following sub-derivation:

pterm WEDGE pterm // lookahead token appears
basicpattern LEFTARROW pterm SEMI pterm . 

** Conflict (shift/reduce) in state 310.
** Token involved: LPAREN
** This state is reached from all after reading:

lib EQUIVALENCE basicpattern LEFTARROW IDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
(?)

** In state 310, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF 
                basicpattern LEFTARROW pterm opttprocess 
                                       IDENT . LPAREN ptermseq RPAREN 

** In state 310, looking ahead at LPAREN, reducing production
** pterm -> IDENT
** is permitted because of the following sub-derivation:

lib EQUIVALENCE tprocess tprocess EOF // lookahead token appears because tprocess can begin with LPAREN
                basicpattern LEFTARROW pterm opttprocess // lookahead token is inherited because opttprocess can vanish
                                       IDENT . 

** Conflict (shift/reduce) in state 90.
** Tokens involved: WEDGE OR EQUAL DIFF BEFORE
** The following explanations concentrate on token WEDGE.
** This state is reached from all after reading:

QUERY LET IDENT EQUAL gterm IN gterm

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

all 
lib PROCESS tprocess EOF 
QUERY tqueryseq DOT lib 
      tquery SEMI tqueryseq 
      gterm optpublicvars 
      (?)

** In state 90, looking ahead at WEDGE, shifting is permitted
** because of the following sub-derivation:

LET IDENT EQUAL gterm IN gterm 
                         gterm . WEDGE gterm 

** In state 90, looking ahead at WEDGE, reducing production
** gterm -> LET IDENT EQUAL gterm IN gterm
** is permitted because of the following sub-derivation:

gterm WEDGE gterm // lookahead token appears
LET IDENT EQUAL gterm IN gterm . 
