%{
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2018                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
%}
%{

open Parsing_helper
open Ptree
open Pitptree
exception Syntax

%}
%start all
%start lib
%start order
%start permut
%start term
%token AMONG
%token <Pitptree.ident> ATIDENT
%token BAR
%token BARRIER
%token BEFORE
%token CHANNEL
%token CHOICE
%token CLAUSES
%token COLON
%token COMMA
%token CONST
%token DEFINE
%token DIFF
%token DO
%token DOT
%token ELIMTRUE
%token ELSE
%token EOF
%token EQUAL
%token EQUATION
%token EQUIV
%token EQUIVALENCE
%token EQUIVEQ
%token EVENT
%token EXPAND
%token FAIL
%token FORALL
%token FOREACH
%token FREE
%token FUN
%token GET
%token GREATER
%token <Pitptree.ident> IDENT
%token IF
%token IMPLEMENTATION
%token IN
%token INJEVENT
%token INSERT
%token <int> INT
%token LBRACE
%token LBRACKET
%token LEFTARROW
%token LEQ
%token LESS
%token LET
%token LETFUN
%token LPAREN
%token NEW
%token NONINTERF
%token NOT
%token NOUNIF
%token OR
%token ORTEXT
%token OTHERWISE
%token OUT
%token PARAM
%token PHASE
%token PREDICATE
%token PROBA
%token PROCESS
%token <Pitptree.ident> PROJECTION
%token PROOF
%token PUBLICVARS
%token PUTBEGIN
%token QUERY
%token RANDOM
%token RBRACE
%token RBRACKET
%token RED
%token REDUCTION
%token REPL
%token RPAREN
%token SECRET
%token SEMI
%token SET
%token SLASH
%token STAR
%token <Pitptree.ident> STRING
%token SUCHTHAT
%token TABLE
%token THEN
%token TYPE
%token WEAKSECRET
%token WEDGE
%token YIELD
%nonassoc BEFORE
%right BAR
%right OR
%right WEDGE
%nonassoc EQUAL
%nonassoc DIFF
%nonassoc REPL
%type <Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option> all
%type <Pitptree.tdecl list> lib
%type <Pitptree.ident list> order
%type <Pitptree.ident list list> permut
%type <Pitptree.term_e> term
%%

lib:
  _1 = TYPE _2 = IDENT _3 = options _4 = DOT _5 = lib
    {        ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )}
| _1 = FUN _2 = IDENT _3 = LPAREN _4 = typeidseq _5 = RPAREN _6 = COLON _7 = typeid _8 = options _9 = DOT _10 = lib
    { ( (TFunDecl(_2, _4, _7, _8)) :: _10 )}
| _1 = FUN _2 = IDENT _3 = LPAREN _4 = typeidseq _5 = RPAREN _6 = COLON _7 = typeid _8 = REDUCTION _9 = treducmayfail _10 = options _11 = DOT _12 = lib
    { ( (TReducFail(_2,_4,_7,_9, _10)) :: _12 )}
| _1 = REDUCTION _2 = treduc _3 = options _4 = DOT _5 = lib
    { ( (TReduc(_2,_3)) :: _5 )}
| _1 = CONST _2 = neidentseq _3 = COLON _4 = typeid _5 = options _6 = DOT _7 = lib
    {        ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )}
| _1 = EQUATION _2 = eqlist _3 = options _4 = DOT _5 = lib
    { ( (TEquation(_2, _3)) :: _5 )}
| _1 = EVENT _2 = IDENT _3 = DOT _4 = lib
    {        ( (TEventDecl(_2, [])) :: _4 )}
| _1 = EVENT _2 = IDENT _3 = LPAREN _4 = typeidseq _5 = RPAREN _6 = DOT _7 = lib
    {        ( (TEventDecl(_2, _4)) :: _7 )}
| _1 = PREDICATE _2 = IDENT _3 = LPAREN _4 = typeidseq _5 = RPAREN _6 = options _7 = DOT _8 = lib
    {        ( (TPredDecl(_2, _4, _6)) :: _8 )}
| _1 = PREDICATE _2 = IDENT _3 = options _4 = DOT _5 = lib
    {        ( (TPredDecl(_2, [], _3)) :: _5 )}
| _1 = TABLE _2 = IDENT _3 = LPAREN _4 = typeidseq _5 = RPAREN _6 = DOT _7 = lib
    {        ( (TTableDecl(_2, _4)) :: _7 )}
| _1 = LET _2 = IDENT _3 = EQUAL _4 = tprocess _5 = DOT _6 = lib
    { ( (TPDef(_2,[],_4)) :: _6 )}
| _1 = LET _2 = IDENT _3 = LPAREN _4 = mayfailvartypeseq _5 = RPAREN _6 = EQUAL _7 = tprocess _8 = DOT _9 = lib
    {        ( (TPDef(_2,_4,_7)) :: _9 )}
| _1 = LETFUN _2 = IDENT _3 = EQUAL _4 = pterm _5 = DOT _6 = lib
    {        ( (TLetFun(_2,[],_4)) :: _6 )}
| _1 = LETFUN _2 = IDENT _3 = LPAREN _4 = mayfailvartypeseq _5 = RPAREN _6 = EQUAL _7 = pterm _8 = DOT _9 = lib
    {        ( (TLetFun(_2,_4,_7)) :: _9 )}
| _1 = SET _2 = IDENT _3 = EQUAL _4 = IDENT _5 = DOT _6 = lib
    {        ( (TSet(_2,S _4)) :: _6 )}
| _1 = SET _2 = IDENT _3 = EQUAL _4 = STRING _5 = DOT _6 = lib
    {        ( (TSet(_2,S _4)) :: _6 )}
| _1 = SET _2 = IDENT _3 = EQUAL _4 = INT _5 = DOT _6 = lib
    {        ( (TSet(_2,I _4)) :: _6 )}
| _1 = NOUNIF _2 = nevartype _3 = SEMI _4 = tfnebindingseq _5 = DOT _6 = lib
    {        ( (TNoUnif (_2, _4)) :: _6 )}
| _1 = NOUNIF _2 = tfnebindingseq _3 = DOT _4 = lib
    {        ( (TNoUnif ([], _2)) :: _4 )}
| _1 = QUERY _2 = nevartype _3 = SEMI _4 = tqueryseq _5 = DOT _6 = lib
    {        ( (TQuery(_2,_4)) :: _6 )}
| _1 = QUERY _2 = tqueryseq _3 = DOT _4 = lib
    {        ( (TQuery([],_2)) :: _4 )}
| _1 = NONINTERF _2 = nevartype _3 = SEMI _4 = niseq _5 = DOT _6 = lib
    {        ( (TNoninterf(_2, _4)) :: _6 )}
| _1 = NONINTERF _2 = niseq _3 = DOT _4 = lib
    {        ( (TNoninterf([], _2)) :: _4 )}
| _1 = WEAKSECRET _2 = IDENT _3 = DOT _4 = lib
    {        ( (TWeaksecret(_2)) :: _4 )}
| _1 = NOT _2 = nevartype _3 = SEMI _4 = gterm _5 = DOT _6 = lib
    { ( (TNot(_2, _4)) :: _6 )}
| _1 = NOT _2 = gterm _3 = DOT _4 = lib
    { ( (TNot([], _2)) :: _4 )}
| _1 = PARAM _2 = neidentseq _3 = options _4 = DOT _5 = lib
    {        ( (* Supported for compatility with CryptoVerif only *)
          _5 )}
| _1 = PROBA _2 = IDENT _3 = DOT _4 = lib
    {        ( (* Supported for compatility with CryptoVerif only *)
          _4 )}
| _1 = PROOF _2 = LBRACE _3 = proof _4 = RBRACE _5 = lib
    {        ( (* Supported for compatility with CryptoVerif only *)
          _5 )}
| _1 = IMPLEMENTATION _2 = impllist _3 = DOT _4 = lib
    {        ( (* Supported for compatility with CryptoVerif only *)
          _4 )}
| _1 = ELIMTRUE _2 = nemayfailvartypeseq _3 = SEMI _4 = term _5 = DOT _6 = lib
    {        ( (TElimtrue (_2,_4)) :: _6 )}
| _1 = ELIMTRUE _2 = term _3 = DOT _4 = lib
    {        ( (TElimtrue ([],_2)) :: _4 )}
| _1 = CHANNEL _2 = neidentseq _3 = DOT _4 = lib
    {        ( (* For compatibility with CryptoVerif, allow 
               channel c1...cn. 
             as a synonym for 
               free c1...cn:channel. *)
          (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )}
| _1 = FREE _2 = neidentseq _3 = COLON _4 = typeid _5 = options _6 = DOT _7 = lib
    {        ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )}
| _1 = CLAUSES _2 = tclauses _3 = lib
    {        ( (TClauses(_2)) :: _3 )}
| _1 = DEFINE _2 = IDENT _3 = LPAREN _4 = typeidseq _5 = RPAREN _6 = LBRACE _7 = lib _8 = RBRACE _9 = lib
    {        ( (TDefine(_2, _4, _7)) :: _9 )}
| _1 = EXPAND _2 = IDENT _3 = LPAREN _4 = typeidseq _5 = RPAREN _6 = DOT _7 = lib
    {        ( (TExpand(_2, _4)) :: _7 )}
| 
    {        ( [] )}

all:
  _1 = lib _2 = PROCESS _3 = tprocess _4 = EOF
    { ( _1, _3, None )}
| _1 = lib _2 = EQUIVALENCE _3 = tprocess _4 = tprocess _5 = EOF
    { ( _1, _3, Some _4 )}

prooftoken:
  _1 = IDENT
    {        ( _1 )}
| _1 = STRING
    {        ( _1 )}
| _1 = INT
    {        ( string_of_int _1, parse_extent() )}
| _1 = STAR
    {        ( "*", parse_extent() )}
| _1 = DOT
    {        ( ".", parse_extent() )}
| _1 = SET
    {        ( "set", parse_extent() )}
| _1 = INSERT
    {        ( "insert", parse_extent() )}
| _1 = EQUAL
    {        ( "=", parse_extent() )}
| _1 = COMMA
    {        ( ",", parse_extent() )}
| _1 = LPAREN
    {        ( "(", parse_extent() )}
| _1 = RPAREN
    {        ( ")", parse_extent() )}

proofcommand:
  _1 = prooftoken
    {        ( [_1] )}
| _1 = prooftoken _2 = proofcommand
    {        ( _1 :: _2 )}

proof:
  _1 = proofcommand
    { ( [_1] )}
| _1 = proofcommand _2 = SEMI _3 = proof
    {        ( _1 :: _3 )}

impllist:
  _1 = impl
    {        ( [_1] )}
| _1 = impl _2 = SEMI _3 = impllist
    {        ( _1 :: _3 )}

impl:
  _1 = TYPE _2 = IDENT _3 = EQUAL _4 = cvtypeid _5 = typeoptions
    {        ( () )}
| _1 = FUN _2 = IDENT _3 = EQUAL _4 = STRING _5 = functionoptions
    {        ( () )}
| _1 = TABLE _2 = IDENT _3 = EQUAL _4 = STRING
    {        ( () )}
| _1 = CONST _2 = IDENT _3 = EQUAL _4 = STRING
    {        ( () )}

cvtypeid:
  _1 = INT
    {        ( () )}
| _1 = STRING
    {        ( () )}

stringlistne:
  _1 = STRING
    {        ( [_1] )}
| _1 = STRING _2 = COMMA _3 = stringlistne
    {        ( _1::_3 )}

typeopt:
  _1 = IDENT _2 = EQUAL _3 = stringlistne
    {        ( _1,_3 )}
| _1 = PREDICATE _2 = EQUAL _3 = stringlistne
    {        ( ("pred",parse_extent()),_3 )}

typeoptlist:
  _1 = typeopt
    {        ( [_1] )}
| _1 = typeopt _2 = SEMI _3 = typeoptlist
    {        ( _1::_3 )}

typeoptions:
  _1 = LBRACKET _2 = typeoptlist _3 = RBRACKET
    {        ( _2 )}
| 
    {        ( [] )}

funopt:
  _1 = IDENT _2 = EQUAL _3 = STRING
    {        ( _1,_3 )}

funoptlist:
  _1 = funopt
    {        ( [_1] )}
| _1 = funopt _2 = SEMI _3 = funoptlist
    {        ( _1::_3 )}

functionoptions:
  _1 = LBRACKET _2 = funoptlist _3 = RBRACKET
    {        ( _2 )}
| 
    {        ( [] )}

options:
  _1 = LBRACKET _2 = neidentseq _3 = RBRACKET
    {        ( _2 )}
| 
    {        ( [] )}

neidentseq:
  _1 = IDENT _2 = COMMA _3 = neidentseq
    {    ( _1 :: _3 )}
| _1 = IDENT
    {    ( [_1] )}

newarg:
  
    {    ( None )}
| _1 = LBRACKET _2 = RBRACKET
    {    ( Some [] )}
| _1 = LBRACKET _2 = neidentseq _3 = RBRACKET
    {    ( Some (_2) )}

nevartype:
  _1 = IDENT _2 = COLON _3 = typeid _4 = COMMA _5 = nevartype
    {        ( (_1,_3)::_5 )}
| _1 = IDENT _2 = COLON _3 = typeid
    {        ( [(_1,_3)] )}

forallvartype:
  _1 = FORALL _2 = nevartype _3 = SEMI
    {        ( _2 )}
| 
    {        ( [] )}

typeid:
  _1 = IDENT
    {        ( _1 )}
| _1 = CHANNEL
    {        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )}

typeidseq:
  _1 = netypeidseq
    {        ( _1 )}
| 
    {        ( [] )}

netypeidseq:
  _1 = typeid _2 = COMMA _3 = netypeidseq
    {    ( _1 :: _3 )}
| _1 = typeid
    {    ( [_1] )}

term:
  _1 = FAIL
    { ( PFail, parse_extent () )}
| _1 = IDENT _2 = LPAREN _3 = termseq _4 = RPAREN
    {        ( PFunApp (_1, _3), parse_extent() )}
| _1 = PROJECTION _2 = LPAREN _3 = term _4 = RPAREN
    {        ( PProj (_1,_3), parse_extent() )}
| _1 = CHOICE _2 = LBRACKET _3 = term _4 = COMMA _5 = term _6 = RBRACKET
    {        ( Param.has_choice := true; 
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )}
| _1 = IDENT
    { ( PIdent (_1), parse_extent() )}
| _1 = term _2 = EQUAL _3 = term
    {        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = term _2 = DIFF _3 = term
    {        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = NOT _2 = LPAREN _3 = term _4 = RPAREN
    {        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )}
| _1 = term _2 = OR _3 = term
    {        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = term _2 = WEDGE _3 = term
    {        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = LPAREN _2 = termseq _3 = RPAREN
    { ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )}

netermseq:
  _1 = term _2 = COMMA _3 = netermseq
    { ( _1 :: _3 )}
| _1 = term
    { ( [_1] )}

termseq:
  _1 = netermseq
    {        ( _1 )}
| 
    {        ( [] )}

ni:
  _1 = IDENT _2 = AMONG _3 = LPAREN _4 = netermseq _5 = RPAREN
    {    ( (_1, Some _4) )}
| _1 = IDENT
    {    ( (_1, None) )}

niseq:
  _1 = ni _2 = COMMA _3 = niseq
    {    ( _1 :: _3 )}
| _1 = ni
    {    ( [_1] )}

tqueryseq:
  _1 = tquery _2 = SEMI _3 = tqueryseq
    {    ( _1 :: _3 )}
| _1 = tquery
    {    ( [_1] )}

tquery:
  _1 = gterm _2 = optpublicvars
    {    ( PRealQuery(_1,_2) )}
| _1 = SECRET _2 = IDENT _3 = optpublicvars _4 = options
    {    ( PQSecret (_2,_3,_4) )}
| _1 = PUTBEGIN _2 = EVENT _3 = COLON _4 = neidentseq
    {    ( PPutBegin(false, _4) )}
| _1 = PUTBEGIN _2 = INJEVENT _3 = COLON _4 = neidentseq
    {    ( PPutBegin(true, _4) )}

optpublicvars:
  
    {    ( [] )}
| _1 = PUBLICVARS _2 = neidentseq
    {    ( _2 )}

gterm:
  _1 = IDENT _2 = LPAREN _3 = gtermseq _4 = RPAREN
    { ( PGFunApp (_1, _3), parse_extent() )}
| _1 = IDENT
    { ( PGIdent (_1), parse_extent() )}
| _1 = IDENT _2 = LPAREN _3 = gtermseq _4 = RPAREN _5 = PHASE _6 = INT
    {        ( PGPhase(_1, _3, _6), parse_extent() )}
| _1 = TABLE _2 = LPAREN _3 = gterm _4 = RPAREN _5 = PHASE _6 = INT
    {        ( PGPhase(("table", parse_extent()), [_3], _6), parse_extent() )}
| _1 = gterm _2 = EQUAL _3 = gterm
    {        ( PGFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = gterm _2 = DIFF _3 = gterm
    {        ( PGFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = NOT _2 = LPAREN _3 = gterm _4 = RPAREN
    {        ( PGFunApp(("not", parse_extent()), [_3]), parse_extent() )}
| _1 = gterm _2 = OR _3 = gterm
    {        ( PGFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = gterm _2 = WEDGE _3 = gterm
    {        ( PGFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = CHOICE _2 = LBRACKET _3 = gterm _4 = COMMA _5 = gterm _6 = RBRACKET
    {        ( PGFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )}
| _1 = EVENT _2 = LPAREN _3 = gtermseq _4 = RPAREN
    {        ( PGFunApp(("event",parse_extent()), _3), parse_extent() )}
| _1 = INJEVENT _2 = LPAREN _3 = gtermseq _4 = RPAREN
    {        ( PGFunApp(("inj-event",parse_extent()), _3), parse_extent() )}
| _1 = TABLE _2 = LPAREN _3 = gterm _4 = RPAREN
    {        ( PGFunApp(("table",parse_extent()), [_3]), parse_extent() )}
| _1 = gterm _2 = BEFORE _3 = gterm
    {        ( PGFunApp(("==>", parse_extent()), [_1;_3]), parse_extent() )}
| _1 = LPAREN _2 = gtermseq _3 = RPAREN
    { ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )}
| _1 = NEW _2 = IDENT _3 = LBRACKET _4 = bindingseq _5 = RBRACKET
    {        ( PGName (_2, _4), parse_extent() )}
| _1 = NEW _2 = IDENT
    {        ( PGName (_2, []), parse_extent() )}
| _1 = LET _2 = IDENT _3 = EQUAL _4 = gterm _5 = IN _6 = gterm
    {        ( PGLet(_2, _4, _6), parse_extent() )}

negtermseq:
  _1 = gterm _2 = COMMA _3 = negtermseq
    { ( _1 :: _3 )}
| _1 = gterm
    { ( [_1] )}

gtermseq:
  _1 = negtermseq
    {        ( _1 )}
| 
    {        ( [] )}

nesbindingseq:
  _1 = REPL _2 = INT _3 = EQUAL _4 = gterm _5 = SEMI _6 = nesbindingseq
    {        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )}
| _1 = REPL _2 = INT _3 = EQUAL _4 = gterm
    {        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )}
| _1 = IDENT _2 = EQUAL _3 = gterm _4 = SEMI _5 = nesbindingseq
    {        ( (_1, _3) :: _5 )}
| _1 = IDENT _2 = EQUAL _3 = gterm
    {        ( [(_1, _3)] )}

bindingseq:
  _1 = nesbindingseq
    {        ( _1 )}
| 
    {        ( [] )}

tfnebindingseq:
  _1 = LET _2 = IDENT _3 = EQUAL _4 = gformat _5 = IN _6 = tfnebindingseq
    {        ( BFLet(_2, _4, _6) )}
| _1 = IDENT _2 = LPAREN _3 = gformatseq _4 = RPAREN _5 = optphase _6 = optint
    {        ( BFNoUnif((_1,_3,_5), _6) )}
| _1 = IDENT _2 = optint
    {        ( BFNoUnif((_1,[],-1),_2) )}
| _1 = TABLE _2 = LPAREN _3 = gformatseq _4 = RPAREN _5 = optphase _6 = optint
    {        ( BFNoUnif((("table", parse_extent()),_3,_5), _6) )}

optphase:
  _1 = PHASE _2 = INT
    {    ( _2 )}
| 
    {    ( -1 )}

optint:
  _1 = SLASH _2 = INT
    {    ( _2 )}
| 
    {    ( -1 )}

gformat:
  _1 = IDENT _2 = LPAREN _3 = gformatseq _4 = RPAREN
    { ( PFGFunApp (_1, _3), parse_extent() )}
| _1 = CHOICE _2 = LBRACKET _3 = gformat _4 = COMMA _5 = gformat _6 = RBRACKET
    { ( PFGFunApp (("choice", parse_extent()), [_3; _5]), parse_extent() )}
| _1 = IDENT
    { ( PFGIdent (_1), parse_extent() )}
| _1 = LPAREN _2 = gformatseq _3 = RPAREN
    { ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )}
| _1 = NEW _2 = IDENT _3 = LBRACKET _4 = fbindingseq _5 = RBRACKET
    {        ( PFGName (_2, _4), parse_extent() )}
| _1 = NEW _2 = IDENT
    {        ( PFGName (_2, []), parse_extent() )}
| _1 = STAR _2 = IDENT
    {        ( PFGAny (_2), parse_extent() )}
| _1 = LET _2 = IDENT _3 = EQUAL _4 = gformat _5 = IN _6 = gformat
    {        ( PFGLet(_2, _4, _6), parse_extent() )}

negformatseq:
  _1 = gformat _2 = COMMA _3 = negformatseq
    { ( _1 :: _3 )}
| _1 = gformat
    { ( [_1] )}

gformatseq:
  _1 = negformatseq
    {        ( _1 )}
| 
    {        ( [] )}

fnesbindingseq:
  _1 = REPL _2 = INT _3 = EQUAL _4 = gformat _5 = SEMI _6 = fnesbindingseq
    {        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )}
| _1 = REPL _2 = INT _3 = EQUAL _4 = gformat
    {        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )}
| _1 = IDENT _2 = EQUAL _3 = gformat _4 = SEMI _5 = fnesbindingseq
    {        ( (_1, _3) :: _5 )}
| _1 = IDENT _2 = EQUAL _3 = gformat
    {        ( [(_1, _3)] )}

fbindingseq:
  _1 = fnesbindingseq
    {        ( _1 )}
| 
    {        ( [] )}

mayfailvartype:
  _1 = IDENT _2 = COLON _3 = typeid
    { ( (_1,_3, false) )}
| _1 = IDENT _2 = COLON _3 = typeid _4 = ORTEXT _5 = FAIL
    { ( (_1,_3, true) )}

nemayfailvartypeseq:
  _1 = mayfailvartype _2 = COMMA _3 = nemayfailvartypeseq
    { ( _1::_3 )}
| _1 = mayfailvartype
    { ( [_1] )}

mayfailvartypeseq:
  _1 = nemayfailvartypeseq
    {        ( _1 )}
| 
    {        ( [] )}

forallmayfailvartype:
  _1 = FORALL _2 = nemayfailvartypeseq _3 = SEMI
    { ( _2 )}
| 
    { ( [] )}

treducotherwise:
  _1 = OTHERWISE _2 = forallmayfailvartype _3 = term _4 = EQUAL _5 = term _6 = treducotherwise
    { ( (_2,_3,_5) :: _6 )}
| _1 = OTHERWISE _2 = forallmayfailvartype _3 = term _4 = EQUAL _5 = term
    { ( [_2,_3,_5] )}

treducmayfail:
  _1 = forallmayfailvartype _2 = term _3 = EQUAL _4 = term _5 = treducotherwise
    { ( (_1,_2,_4) :: _5 )}
| _1 = forallmayfailvartype _2 = term _3 = EQUAL _4 = term
    { ( [_1,_2,_4] )}

treduc:
  _1 = forallvartype _2 = term _3 = EQUAL _4 = term _5 = SEMI _6 = treduc
    { ( (_1,_2,_4) :: _6 )}
| _1 = forallvartype _2 = term _3 = EQUAL _4 = term
    { ( [_1,_2,_4] )}

eqlist:
  _1 = forallvartype _2 = term
    {    ( [(_1, _2)] )}
| _1 = forallvartype _2 = term _3 = SEMI _4 = eqlist
    {    ( (_1, _2)::_4 )}

tclause:
  _1 = term _2 = RED _3 = term
    {        ( PClause(_1,_3) )}
| _1 = term
    {        ( PFact(_1) )}
| _1 = term _2 = EQUIV _3 = term
    {        ( PEquiv(_1,_3,true) )}
| _1 = term _2 = EQUIVEQ _3 = term
    {        ( PEquiv(_1,_3,false) )}

tclauses:
  _1 = forallmayfailvartype _2 = tclause _3 = SEMI _4 = tclauses
    { ( (_1,_2) :: _4 )}
| _1 = forallmayfailvartype _2 = tclause _3 = DOT
    { ( [_1,_2] )}

programoptions:
  _1 = LBRACKET _2 = progoptlist _3 = RBRACKET
    {        ( _2 )}
| 
    {        ( [] )}

progoptlist:
  _1 = progopt
    {        ( [_1] )}
| _1 = progopt _2 = COMMA _3 = progoptlist
    {        ( _1 :: _3 )}

progopt:
  _1 = IDENT _2 = GREATER _3 = IDENT
    {        ( ("Write", _1,_3) )}
| _1 = IDENT _2 = LESS _3 = IDENT
    {        ( ("Read", _1,_3) )}

progbegin:
  _1 = IDENT _2 = programoptions _3 = LBRACE
    {        ((_1,_2))}

progend:
  _1 = RBRACE
    {        (true)}
| 
    {        (false)}

tprocess:
  _1 = progbegin _2 = tprocess
    {        ( _2 (* CryptoVerif implementation annotations ignored *) )}
| _1 = LPAREN _2 = tprocess _3 = RPAREN
    { ( _2 )}
| _1 = IDENT
    { ( PLetDef (_1,[]) )}
| _1 = IDENT _2 = LPAREN _3 = ptermseq _4 = RPAREN
    {        ( PLetDef (_1, _3) )}
| _1 = REPL _2 = tprocess %prec REPL
    { ( PRepl _2 )}
| _1 = REPL _2 = IDENT _3 = LEQ _4 = IDENT _5 = tprocess %prec REPL
    { ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
          PRepl _5 )}
| _1 = FOREACH _2 = IDENT _3 = LEQ _4 = IDENT _5 = DO _6 = tprocess %prec REPL
    {        ( (* For convergence with CryptoVerif, we allow "foreach i<=N do P"
             as a synonym for !P *)
          PRepl _6 )}
| _1 = INT
    { ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )}
| _1 = YIELD
    {        ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
          PNil )}
| _1 = NEW _2 = IDENT _3 = newarg _4 = COLON _5 = typeid _6 = opttprocess
    {        ( PRestr(_2, _3, _5, _6) )}
| _1 = IDENT _2 = RANDOM _3 = typeid _4 = opttprocess
    {        ( (* For convergence with CryptoVerif, we allow x <-R T 
	     as a synonym for new x: T *)
          PRestr(_1, None, _3, _4) )}
| _1 = IF _2 = pterm _3 = THEN _4 = tprocess _5 = optelseprocess
    { ( PTest(_2,_4,_5) )}
| _1 = IN _2 = LPAREN _3 = pterm _4 = COMMA _5 = tpattern _6 = RPAREN _7 = opttprocess
    { ( PInput(_3,_5,_7) )}
| _1 = OUT _2 = LPAREN _3 = pterm _4 = COMMA _5 = pterm _6 = RPAREN _7 = progend _8 = opttprocess
    { ( POutput(_3,_5,_8) )}
| _1 = LET _2 = tpattern _3 = EQUAL _4 = pterm
    { ( PLet(_2,_4,PNil,PNil) )}
| _1 = LET _2 = tpattern _3 = EQUAL _4 = pterm _5 = IN _6 = tprocess _7 = optelseprocess
    { ( PLet(_2,_4,_6,_7) )}
| _1 = basicpattern _2 = LEFTARROW _3 = pterm _4 = opttprocess
    {        ( (* For convergence with CryptoVerif, we allow x[:T] <- M; P
	     as a synonym for let x[:T] = M in P *)
          PLet(_1,_3,_4,PNil) )}
| _1 = LET _2 = nevartype _3 = SUCHTHAT _4 = pterm
    {        ( PLetFilter(_2,_4,PNil,PNil) )}
| _1 = LET _2 = nevartype _3 = SUCHTHAT _4 = pterm _5 = IN _6 = tprocess _7 = optelseprocess
    {        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_7) )}
| _1 = INSERT _2 = IDENT _3 = LPAREN _4 = ptermseq _5 = RPAREN _6 = opttprocess
    {        ( PInsert(_2, _4, _6) )}
| _1 = GET _2 = IDENT _3 = LPAREN _4 = tpatternseq _5 = RPAREN _6 = optinprocess _7 = optelseprocess
    {        ( PGet(_2, _4, None, _6, _7) )}
| _1 = GET _2 = IDENT _3 = LPAREN _4 = tpatternseq _5 = RPAREN _6 = SUCHTHAT _7 = pterm _8 = optinprocess _9 = optelseprocess
    {        ( PGet(_2, _4, Some _7, _8, _9) )}
| _1 = tprocess _2 = BAR _3 = tprocess
    { ( PPar(_1,_3) )}
| _1 = EVENT _2 = IDENT _3 = LPAREN _4 = ptermseq _5 = RPAREN _6 = newarg _7 = opttprocess
    {        ( PEvent(_2, _4, _6, _7) )}
| _1 = EVENT _2 = IDENT _3 = newarg _4 = opttprocess
    {        ( PEvent(_2, [], _3, _4) )}
| _1 = PHASE _2 = INT _3 = opttprocess
    {        ( if (_2) <= 0 then
	    input_error "Phases should be positive integers in processes" (parse_extent());
          PPhase(_2, _3) )}
| _1 = BARRIER _2 = INT _3 = opttprocess
    {        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, None, _3) )}
| _1 = BARRIER _2 = INT _3 = LBRACKET _4 = IDENT _5 = RBRACKET _6 = opttprocess
    {        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, Some _4, _6) )}

opttprocess:
  _1 = SEMI _2 = tprocess
    {        ( _2 )}
| 
    {        ( PNil )}

optinprocess:
  _1 = IN _2 = tprocess
    {        ( _2 )}
| 
    {        ( PNil )}

optelseprocess:
  _1 = ELSE _2 = tprocess
    {        ( _2 )}
| 
    {        ( PNil )}

basicpattern:
  _1 = IDENT
    {    ( PPatVar(_1,None) )}
| _1 = IDENT _2 = COLON _3 = typeid
    {    ( PPatVar(_1, Some _3) )}

tpattern:
  _1 = basicpattern
    {    ( _1 )}
| _1 = LPAREN _2 = tpatternseq _3 = RPAREN
    {    ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPatTuple(_2) )}
| _1 = IDENT _2 = LPAREN _3 = tpatternseq _4 = RPAREN
    {    ( PPatFunApp(_1,_3) )}
| _1 = EQUAL _2 = pterm
    {    ( PPatEqual(_2) )}

nepatternseq:
  _1 = tpattern _2 = COMMA _3 = nepatternseq
    {    ( _1 :: _3 )}
| _1 = tpattern
    {    ( [_1] )}

tpatternseq:
  _1 = nepatternseq
    {    ( _1 )}
| 
    {    ( [] )}

pterm:
  _1 = IDENT _2 = LPAREN _3 = ptermseq _4 = RPAREN
    { ( PPFunApp (_1, _3), parse_extent() )}
| _1 = CHOICE _2 = LBRACKET _3 = pterm _4 = COMMA _5 = pterm _6 = RBRACKET
    {        ( Param.has_choice := true; 
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )}
| _1 = IDENT
    { ( PPIdent (_1), parse_extent() )}
| _1 = pterm _2 = EQUAL _3 = pterm
    {        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = pterm _2 = DIFF _3 = pterm
    {        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = NOT _2 = LPAREN _3 = pterm _4 = RPAREN
    {        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )}
| _1 = pterm _2 = OR _3 = pterm
    {        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = pterm _2 = WEDGE _3 = pterm
    {        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )}
| _1 = NEW _2 = IDENT _3 = newarg _4 = COLON _5 = typeid _6 = SEMI _7 = pterm
    {        ( PPRestr(_2, _3, _5, _7), parse_extent() )}
| _1 = IDENT _2 = RANDOM _3 = typeid _4 = SEMI _5 = pterm
    {        ( PPRestr(_1, None, _3, _5), parse_extent() )}
| _1 = IF _2 = pterm _3 = THEN _4 = pterm
    { ( PPTest(_2,_4,None), parse_extent() )}
| _1 = IF _2 = pterm _3 = THEN _4 = pterm _5 = ELSE _6 = pterm
    { ( PPTest(_2,_4,Some _6), parse_extent() )}
| _1 = LET _2 = tpattern _3 = EQUAL _4 = pterm _5 = IN _6 = pterm
    { ( PPLet(_2,_4,_6,None), parse_extent() )}
| _1 = LET _2 = tpattern _3 = EQUAL _4 = pterm _5 = IN _6 = pterm _7 = ELSE _8 = pterm
    { ( PPLet(_2,_4,_6,Some _8), parse_extent() )}
| _1 = basicpattern _2 = LEFTARROW _3 = pterm _4 = SEMI _5 = pterm
    {        ( PPLet(_1,_3,_5,None), parse_extent() )}
| _1 = LET _2 = nevartype _3 = SUCHTHAT _4 = pterm _5 = IN _6 = pterm
    {        ( PPLetFilter(_2,_4,_6,None), parse_extent() )}
| _1 = LET _2 = nevartype _3 = SUCHTHAT _4 = pterm _5 = IN _6 = pterm _7 = ELSE _8 = pterm
    {        ( PPLetFilter(_2,_4,_6,Some _8), parse_extent() )}
| _1 = EVENT _2 = IDENT _3 = LPAREN _4 = ptermseq _5 = RPAREN _6 = newarg _7 = SEMI _8 = pterm
    {        ( PPEvent(_2, _4, _6, _8), parse_extent() )}
| _1 = EVENT _2 = IDENT _3 = newarg _4 = SEMI _5 = pterm
    {        ( PPEvent(_2, [], _3, _5), parse_extent() )}
| _1 = INSERT _2 = IDENT _3 = LPAREN _4 = ptermseq _5 = RPAREN _6 = SEMI _7 = pterm
    {        ( PPInsert(_2,_4,_7), parse_extent() )}
| _1 = GET _2 = IDENT _3 = LPAREN _4 = tpatternseq _5 = RPAREN _6 = SUCHTHAT _7 = pterm _8 = IN _9 = pterm
    {        ( PPGet(_2,_4,Some _7,_9,None), parse_extent() )}
| _1 = GET _2 = IDENT _3 = LPAREN _4 = tpatternseq _5 = RPAREN _6 = IN _7 = pterm
    {        ( PPGet(_2,_4,None,_7,None), parse_extent() )}
| _1 = GET _2 = IDENT _3 = LPAREN _4 = tpatternseq _5 = RPAREN _6 = SUCHTHAT _7 = pterm _8 = IN _9 = pterm _10 = ELSE _11 = pterm
    {        ( PPGet(_2,_4,Some _7,_9,Some _11), parse_extent() )}
| _1 = GET _2 = IDENT _3 = LPAREN _4 = tpatternseq _5 = RPAREN _6 = IN _7 = pterm _8 = ELSE _9 = pterm
    {        ( PPGet(_2,_4,None,_7,Some _9), parse_extent() )}
| _1 = LPAREN _2 = ptermseq _3 = RPAREN
    { ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )}

neptermseq:
  _1 = pterm _2 = COMMA _3 = neptermseq
    { ( _1 :: _3 )}
| _1 = pterm
    { ( [_1] )}

ptermseq:
  _1 = neptermseq
    {        ( _1 )}
| 
    {        ( [] )}

tag:
  _1 = IDENT
    {    ( _1 )}
| _1 = ATIDENT
    {    ( _1 )}

onepermut:
  _1 = tag _2 = RED _3 = tag
    {    ( [_1;_3] )}
| _1 = tag _2 = RED _3 = onepermut
    {    ( _1 :: _3 )}

permut:
  
    {    ( [] )}
| _1 = onepermut
    {    ( [_1] )}
| _1 = onepermut _2 = SEMI _3 = permut
    {    ( _1 :: _3 )}

order:
  _1 = IDENT _2 = GREATER _3 = order
    {    ( _1 :: _3 )}
| _1 = IDENT
    {    ( [_1] )}

%%
