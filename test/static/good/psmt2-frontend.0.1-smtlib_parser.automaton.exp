State 0:
## Known stack suffix:
##
## LR(1) items:
commands' -> . commands [ # ]
## Transitions:
-- On LP shift to state 1
-- On EOF shift to state 364
-- On commands shift to state 365
-- On command shift to state 366
## Reductions:

State 1:
## Known stack suffix:
## LP
## LR(1) items:
command -> LP . ASSERT assert_dec RP [ LP EOF ]
command -> LP . CHECKSAT RP [ LP EOF ]
command -> LP . CHECKSATASSUMING LP list(prop_literal) RP RP [ LP EOF ]
command -> LP . CHECKENTAILMENT assert_dec RP [ LP EOF ]
command -> LP . DECLARECONST symbol const_dec RP [ LP EOF ]
command -> LP . DECLAREDATATYPE symbol datatype_dec RP [ LP EOF ]
command -> LP . DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec) RP RP [ LP EOF ]
command -> LP . DECLAREFUN symbol fun_dec RP [ LP EOF ]
command -> LP . DECLARESORT symbol NUMERAL RP [ LP EOF ]
command -> LP . DEFINEFUN fun_def term RP [ LP EOF ]
command -> LP . DEFINEFUNREC fun_def term RP [ LP EOF ]
command -> LP . DEFINEFUNSREC LP list(fun_defs) RP LP nonempty_list(term) RP RP [ LP EOF ]
command -> LP . DEFINESORT symbol LP list(symbol) RP sort RP [ LP EOF ]
command -> LP . ECHO symbol RP [ LP EOF ]
command -> LP . EXIT RP [ LP EOF ]
command -> LP . GETASSERT RP [ LP EOF ]
command -> LP . GETASSIGN RP [ LP EOF ]
command -> LP . GETINFO key_info RP [ LP EOF ]
command -> LP . GETMODEL RP [ LP EOF ]
command -> LP . GETOPTION keyword RP [ LP EOF ]
command -> LP . GETPROOF RP [ LP EOF ]
command -> LP . GETUNSATASSUMPTIONS RP [ LP EOF ]
command -> LP . GETUNSATCORE RP [ LP EOF ]
command -> LP . GETVALUE LP nonempty_list(term) RP RP [ LP EOF ]
command -> LP . PUSH NUMERAL RP [ LP EOF ]
command -> LP . POP NUMERAL RP [ LP EOF ]
command -> LP . RESET RP [ LP EOF ]
command -> LP . RESETASSERTIONS RP [ LP EOF ]
command -> LP . SETINFO attribute RP [ LP EOF ]
command -> LP . SETLOGIC symbol RP [ LP EOF ]
command -> LP . SETOPTION psmt2_frontend_0_1_smtlib_parser_option RP [ LP EOF ]
## Transitions:
-- On SETOPTION shift to state 2
-- On SETLOGIC shift to state 75
-- On SETINFO shift to state 78
-- On RESETASSERTIONS shift to state 81
-- On RESET shift to state 83
-- On PUSH shift to state 85
-- On POP shift to state 88
-- On GETVALUE shift to state 91
-- On GETUNSATCORE shift to state 189
-- On GETUNSATASSUMPTIONS shift to state 191
-- On GETPROOF shift to state 193
-- On GETOPTION shift to state 195
-- On GETMODEL shift to state 198
-- On GETINFO shift to state 200
-- On GETASSIGN shift to state 203
-- On GETASSERT shift to state 205
-- On EXIT shift to state 207
-- On ECHO shift to state 209
-- On DEFINESORT shift to state 212
-- On DEFINEFUNSREC shift to state 221
-- On DEFINEFUNREC shift to state 250
-- On DEFINEFUN shift to state 254
-- On DECLARESORT shift to state 258
-- On DECLAREFUN shift to state 262
-- On DECLAREDATATYPES shift to state 281
-- On DECLAREDATATYPE shift to state 320
-- On DECLARECONST shift to state 324
-- On CHECKSATASSUMING shift to state 336
-- On CHECKSAT shift to state 348
-- On CHECKENTAILMENT shift to state 350
-- On ASSERT shift to state 361
## Reductions:

State 2:
## Known stack suffix:
## LP SETOPTION
## LR(1) items:
command -> LP SETOPTION . psmt2_frontend_0_1_smtlib_parser_option RP [ LP EOF ]
## Transitions:
-- On VERSION shift to state 3
-- On VERBOSITY shift to state 4
-- On VALUES shift to state 5
-- On THEORIES shift to state 6
-- On STATUTS shift to state 7
-- On SOURCE shift to state 11
-- On SORTSDESCRIPTION shift to state 12
-- On SORTS shift to state 13
-- On SMTLIBVERSION shift to state 14
-- On SERIES shift to state 15
-- On RESSOURCELIMIT shift to state 16
-- On REGULAROUTPUTCHAN shift to state 17
-- On REASONUNKNOWN shift to state 18
-- On RANDOMSEED shift to state 19
-- On PRODUCEUNSATCORES shift to state 20
-- On PRODUCEUNSATASSUMPTIONS shift to state 21
-- On PRODUCEPROOFS shift to state 22
-- On PRODUCEMODELS shift to state 23
-- On PRODUCEASSIGNEMENT shift to state 24
-- On PRODUCEASSERTIONS shift to state 25
-- On PRINTSUCCESS shift to state 26
-- On NOTES shift to state 27
-- On NAME shift to state 28
-- On LICENSE shift to state 29
-- On LANGUAGE shift to state 30
-- On INTERACTIVE shift to state 31
-- On INSTANCE shift to state 32
-- On GLOBALDECLARATIONS shift to state 33
-- On FUNSDESCRIPT shift to state 34
-- On FUNS shift to state 35
-- On EXTENSIONS shift to state 36
-- On ERRORBEHAV shift to state 37
-- On DIFFICULTY shift to state 38
-- On DIAGNOOUTPUTCHAN shift to state 39
-- On DEFINITIO shift to state 40
-- On CATEGORY shift to state 41
-- On AXIOMS shift to state 42
-- On AUTHORS shift to state 43
-- On AUTHOR shift to state 44
-- On ASSERTIONSTACKLVL shift to state 45
-- On ALLSTATS shift to state 46
-- On psmt2_frontend_0_1_smtlib_parser_option shift to state 47
-- On keyword shift to state 49
-- On key_option shift to state 50
-- On key_info shift to state 54
-- On attribute shift to state 74
## Reductions:

State 3:
## Known stack suffix:
## VERSION
## LR(1) items:
key_info -> VERSION . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> VERSION

State 4:
## Known stack suffix:
## VERBOSITY
## LR(1) items:
key_option -> VERBOSITY . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> VERBOSITY

State 5:
## Known stack suffix:
## VALUES
## LR(1) items:
keyword -> VALUES . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> VALUES

State 6:
## Known stack suffix:
## THEORIES
## LR(1) items:
keyword -> THEORIES . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> THEORIES

State 7:
## Known stack suffix:
## STATUTS
## LR(1) items:
keyword -> STATUTS . symbol [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 10
## Reductions:

State 8:
## Known stack suffix:
## SYMBOL
## LR(1) items:
symbol -> SYMBOL . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR # ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR #
--   reduce production symbol -> SYMBOL
** End-of-stream conflict on VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
**   There is a tension between
**   (1) reducing production symbol -> SYMBOL
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 9:
## Known stack suffix:
## ASCIIWOR
## LR(1) items:
symbol -> ASCIIWOR . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR # ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR #
--   reduce production symbol -> ASCIIWOR
** End-of-stream conflict on VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
**   There is a tension between
**   (1) reducing production symbol -> ASCIIWOR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 10:
## Known stack suffix:
## STATUTS symbol
## LR(1) items:
keyword -> STATUTS symbol . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> STATUTS symbol

State 11:
## Known stack suffix:
## SOURCE
## LR(1) items:
keyword -> SOURCE . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> SOURCE

State 12:
## Known stack suffix:
## SORTSDESCRIPTION
## LR(1) items:
keyword -> SORTSDESCRIPTION . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> SORTSDESCRIPTION

State 13:
## Known stack suffix:
## SORTS
## LR(1) items:
keyword -> SORTS . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> SORTS

State 14:
## Known stack suffix:
## SMTLIBVERSION
## LR(1) items:
keyword -> SMTLIBVERSION . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> SMTLIBVERSION

State 15:
## Known stack suffix:
## SERIES
## LR(1) items:
key_info -> SERIES . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> SERIES

State 16:
## Known stack suffix:
## RESSOURCELIMIT
## LR(1) items:
key_option -> RESSOURCELIMIT . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> RESSOURCELIMIT

State 17:
## Known stack suffix:
## REGULAROUTPUTCHAN
## LR(1) items:
key_option -> REGULAROUTPUTCHAN . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> REGULAROUTPUTCHAN

State 18:
## Known stack suffix:
## REASONUNKNOWN
## LR(1) items:
key_info -> REASONUNKNOWN . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> REASONUNKNOWN

State 19:
## Known stack suffix:
## RANDOMSEED
## LR(1) items:
key_option -> RANDOMSEED . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> RANDOMSEED

State 20:
## Known stack suffix:
## PRODUCEUNSATCORES
## LR(1) items:
key_option -> PRODUCEUNSATCORES . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> PRODUCEUNSATCORES

State 21:
## Known stack suffix:
## PRODUCEUNSATASSUMPTIONS
## LR(1) items:
key_option -> PRODUCEUNSATASSUMPTIONS . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> PRODUCEUNSATASSUMPTIONS

State 22:
## Known stack suffix:
## PRODUCEPROOFS
## LR(1) items:
key_option -> PRODUCEPROOFS . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> PRODUCEPROOFS

State 23:
## Known stack suffix:
## PRODUCEMODELS
## LR(1) items:
key_option -> PRODUCEMODELS . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> PRODUCEMODELS

State 24:
## Known stack suffix:
## PRODUCEASSIGNEMENT
## LR(1) items:
key_option -> PRODUCEASSIGNEMENT . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> PRODUCEASSIGNEMENT

State 25:
## Known stack suffix:
## PRODUCEASSERTIONS
## LR(1) items:
key_option -> PRODUCEASSERTIONS . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> PRODUCEASSERTIONS

State 26:
## Known stack suffix:
## PRINTSUCCESS
## LR(1) items:
key_option -> PRINTSUCCESS . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> PRINTSUCCESS

State 27:
## Known stack suffix:
## NOTES
## LR(1) items:
keyword -> NOTES . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> NOTES

State 28:
## Known stack suffix:
## NAME
## LR(1) items:
key_info -> NAME . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> NAME

State 29:
## Known stack suffix:
## LICENSE
## LR(1) items:
keyword -> LICENSE . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> LICENSE

State 30:
## Known stack suffix:
## LANGUAGE
## LR(1) items:
keyword -> LANGUAGE . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> LANGUAGE

State 31:
## Known stack suffix:
## INTERACTIVE
## LR(1) items:
key_option -> INTERACTIVE . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> INTERACTIVE

State 32:
## Known stack suffix:
## INSTANCE
## LR(1) items:
key_info -> INSTANCE . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> INSTANCE

State 33:
## Known stack suffix:
## GLOBALDECLARATIONS
## LR(1) items:
key_option -> GLOBALDECLARATIONS . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> GLOBALDECLARATIONS

State 34:
## Known stack suffix:
## FUNSDESCRIPT
## LR(1) items:
keyword -> FUNSDESCRIPT . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> FUNSDESCRIPT

State 35:
## Known stack suffix:
## FUNS
## LR(1) items:
keyword -> FUNS . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> FUNS

State 36:
## Known stack suffix:
## EXTENSIONS
## LR(1) items:
keyword -> EXTENSIONS . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> EXTENSIONS

State 37:
## Known stack suffix:
## ERRORBEHAV
## LR(1) items:
key_info -> ERRORBEHAV . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> ERRORBEHAV

State 38:
## Known stack suffix:
## DIFFICULTY
## LR(1) items:
key_info -> DIFFICULTY . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> DIFFICULTY

State 39:
## Known stack suffix:
## DIAGNOOUTPUTCHAN
## LR(1) items:
key_option -> DIAGNOOUTPUTCHAN . [ SYMBOL NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL NUMERAL ASCIIWOR
--   reduce production key_option -> DIAGNOOUTPUTCHAN

State 40:
## Known stack suffix:
## DEFINITIO
## LR(1) items:
keyword -> DEFINITIO . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> DEFINITIO

State 41:
## Known stack suffix:
## CATEGORY
## LR(1) items:
keyword -> CATEGORY . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> CATEGORY

State 42:
## Known stack suffix:
## AXIOMS
## LR(1) items:
keyword -> AXIOMS . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production keyword -> AXIOMS

State 43:
## Known stack suffix:
## AUTHORS
## LR(1) items:
key_info -> AUTHORS . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> AUTHORS

State 44:
## Known stack suffix:
## AUTHOR
## LR(1) items:
key_info -> AUTHOR . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> AUTHOR

State 45:
## Known stack suffix:
## ASSERTIONSTACKLVL
## LR(1) items:
key_info -> ASSERTIONSTACKLVL . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> ASSERTIONSTACKLVL

State 46:
## Known stack suffix:
## ALLSTATS
## LR(1) items:
key_info -> ALLSTATS . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> ALLSTATS

State 47:
## Known stack suffix:
## LP SETOPTION psmt2_frontend_0_1_smtlib_parser_option
## LR(1) items:
command -> LP SETOPTION psmt2_frontend_0_1_smtlib_parser_option . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## LP SETOPTION psmt2_frontend_0_1_smtlib_parser_option RP
## LR(1) items:
command -> LP SETOPTION psmt2_frontend_0_1_smtlib_parser_option RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP SETOPTION psmt2_frontend_0_1_smtlib_parser_option RP

State 49:
## Known stack suffix:
## keyword
## LR(1) items:
key_info -> keyword . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production key_info -> keyword

State 50:
## Known stack suffix:
## key_option
## LR(1) items:
psmt2_frontend_0_1_smtlib_parser_option -> key_option . index [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On NUMERAL shift to state 51
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 52
-- On index shift to state 53
## Reductions:

State 51:
## Known stack suffix:
## NUMERAL
## LR(1) items:
index -> NUMERAL . [ SYMBOL RP NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL RP NUMERAL ASCIIWOR
--   reduce production index -> NUMERAL

State 52:
## Known stack suffix:
## symbol
## LR(1) items:
index -> symbol . [ SYMBOL RP NUMERAL ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL RP NUMERAL ASCIIWOR
--   reduce production index -> symbol

State 53:
## Known stack suffix:
## key_option index
## LR(1) items:
psmt2_frontend_0_1_smtlib_parser_option -> key_option index . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production psmt2_frontend_0_1_smtlib_parser_option -> key_option index

State 54:
## Known stack suffix:
## key_info
## LR(1) items:
attribute -> key_info . [ RP ]
attribute -> key_info . attribute_value [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 57
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 71
-- On constant shift to state 72
-- On attribute_value shift to state 73
## Reductions:
-- On RP
--   reduce production attribute -> key_info

State 55:
## Known stack suffix:
## STRINGLIT
## LR(1) items:
constant -> STRINGLIT . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR # ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR #
--   reduce production constant -> STRINGLIT
** End-of-stream conflict on VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
**   There is a tension between
**   (1) reducing production constant -> STRINGLIT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 56:
## Known stack suffix:
## NUMERAL
## LR(1) items:
constant -> NUMERAL . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR # ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR #
--   reduce production constant -> NUMERAL
** End-of-stream conflict on VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
**   There is a tension between
**   (1) reducing production constant -> NUMERAL
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 57:
## Known stack suffix:
## LP
## LR(1) items:
attribute_value -> LP . list(sexpr) RP [ RP ]
## Transitions:
-- On VALUES shift to state 5
-- On THEORIES shift to state 6
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On STATUTS shift to state 7
-- On SOURCE shift to state 11
-- On SORTSDESCRIPTION shift to state 12
-- On SORTS shift to state 13
-- On SMTLIBVERSION shift to state 14
-- On NUMERAL shift to state 56
-- On NOTES shift to state 27
-- On LP shift to state 58
-- On LICENSE shift to state 29
-- On LANGUAGE shift to state 30
-- On HEXADECIMAL shift to state 59
-- On FUNSDESCRIPT shift to state 34
-- On FUNS shift to state 35
-- On EXTENSIONS shift to state 36
-- On DEFINITIO shift to state 40
-- On DECIMAL shift to state 60
-- On CATEGORY shift to state 41
-- On BINARY shift to state 61
-- On AXIOMS shift to state 42
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 62
-- On sexpr shift to state 63
-- On list(sexpr) shift to state 69
-- On keyword shift to state 65
-- On constant shift to state 66
## Reductions:
-- On RP
--   reduce production list(sexpr) ->

State 58:
## Known stack suffix:
## LP
## LR(1) items:
sexpr -> LP . list(sexpr) RP [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
-- On VALUES shift to state 5
-- On THEORIES shift to state 6
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On STATUTS shift to state 7
-- On SOURCE shift to state 11
-- On SORTSDESCRIPTION shift to state 12
-- On SORTS shift to state 13
-- On SMTLIBVERSION shift to state 14
-- On NUMERAL shift to state 56
-- On NOTES shift to state 27
-- On LP shift to state 58
-- On LICENSE shift to state 29
-- On LANGUAGE shift to state 30
-- On HEXADECIMAL shift to state 59
-- On FUNSDESCRIPT shift to state 34
-- On FUNS shift to state 35
-- On EXTENSIONS shift to state 36
-- On DEFINITIO shift to state 40
-- On DECIMAL shift to state 60
-- On CATEGORY shift to state 41
-- On BINARY shift to state 61
-- On AXIOMS shift to state 42
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 62
-- On sexpr shift to state 63
-- On list(sexpr) shift to state 67
-- On keyword shift to state 65
-- On constant shift to state 66
## Reductions:
-- On RP
--   reduce production list(sexpr) ->

State 59:
## Known stack suffix:
## HEXADECIMAL
## LR(1) items:
constant -> HEXADECIMAL . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR # ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR #
--   reduce production constant -> HEXADECIMAL
** End-of-stream conflict on VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
**   There is a tension between
**   (1) reducing production constant -> HEXADECIMAL
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 60:
## Known stack suffix:
## DECIMAL
## LR(1) items:
constant -> DECIMAL . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR # ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR #
--   reduce production constant -> DECIMAL
** End-of-stream conflict on VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
**   There is a tension between
**   (1) reducing production constant -> DECIMAL
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 61:
## Known stack suffix:
## BINARY
## LR(1) items:
constant -> BINARY . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR # ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR #
--   reduce production constant -> BINARY
** End-of-stream conflict on VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP PATTERN NUMERAL NOTES NAMED LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
**   There is a tension between
**   (1) reducing production constant -> BINARY
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 62:
## Known stack suffix:
## symbol
## LR(1) items:
sexpr -> symbol . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production sexpr -> symbol

State 63:
## Known stack suffix:
## sexpr
## LR(1) items:
list(sexpr) -> sexpr . list(sexpr) [ RP ]
## Transitions:
-- On VALUES shift to state 5
-- On THEORIES shift to state 6
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On STATUTS shift to state 7
-- On SOURCE shift to state 11
-- On SORTSDESCRIPTION shift to state 12
-- On SORTS shift to state 13
-- On SMTLIBVERSION shift to state 14
-- On NUMERAL shift to state 56
-- On NOTES shift to state 27
-- On LP shift to state 58
-- On LICENSE shift to state 29
-- On LANGUAGE shift to state 30
-- On HEXADECIMAL shift to state 59
-- On FUNSDESCRIPT shift to state 34
-- On FUNS shift to state 35
-- On EXTENSIONS shift to state 36
-- On DEFINITIO shift to state 40
-- On DECIMAL shift to state 60
-- On CATEGORY shift to state 41
-- On BINARY shift to state 61
-- On AXIOMS shift to state 42
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 62
-- On sexpr shift to state 63
-- On list(sexpr) shift to state 64
-- On keyword shift to state 65
-- On constant shift to state 66
## Reductions:
-- On RP
--   reduce production list(sexpr) ->

State 64:
## Known stack suffix:
## sexpr list(sexpr)
## LR(1) items:
list(sexpr) -> sexpr list(sexpr) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production list(sexpr) -> sexpr list(sexpr)

State 65:
## Known stack suffix:
## keyword
## LR(1) items:
sexpr -> keyword . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production sexpr -> keyword

State 66:
## Known stack suffix:
## constant
## LR(1) items:
sexpr -> constant . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production sexpr -> constant

State 67:
## Known stack suffix:
## LP list(sexpr)
## LR(1) items:
sexpr -> LP list(sexpr) . RP [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
-- On RP shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## LP list(sexpr) RP
## LR(1) items:
sexpr -> LP list(sexpr) RP . [ VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR ]
## Transitions:
## Reductions:
-- On VALUES THEORIES SYMBOL STRINGLIT STATUTS SOURCE SORTSDESCRIPTION SORTS SMTLIBVERSION RP NUMERAL NOTES LP LICENSE LANGUAGE HEXADECIMAL FUNSDESCRIPT FUNS EXTENSIONS DEFINITIO DECIMAL CATEGORY BINARY AXIOMS ASCIIWOR
--   reduce production sexpr -> LP list(sexpr) RP

State 69:
## Known stack suffix:
## LP list(sexpr)
## LR(1) items:
attribute_value -> LP list(sexpr) . RP [ RP ]
## Transitions:
-- On RP shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## LP list(sexpr) RP
## LR(1) items:
attribute_value -> LP list(sexpr) RP . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production attribute_value -> LP list(sexpr) RP

State 71:
## Known stack suffix:
## symbol
## LR(1) items:
attribute_value -> symbol . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production attribute_value -> symbol

State 72:
## Known stack suffix:
## constant
## LR(1) items:
attribute_value -> constant . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production attribute_value -> constant

State 73:
## Known stack suffix:
## key_info attribute_value
## LR(1) items:
attribute -> key_info attribute_value . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production attribute -> key_info attribute_value

State 74:
## Known stack suffix:
## attribute
## LR(1) items:
psmt2_frontend_0_1_smtlib_parser_option -> attribute . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production psmt2_frontend_0_1_smtlib_parser_option -> attribute

State 75:
## Known stack suffix:
## LP SETLOGIC
## LR(1) items:
command -> LP SETLOGIC . symbol RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## LP SETLOGIC symbol
## LR(1) items:
command -> LP SETLOGIC symbol . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## LP SETLOGIC symbol RP
## LR(1) items:
command -> LP SETLOGIC symbol RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP SETLOGIC symbol RP

State 78:
## Known stack suffix:
## LP SETINFO
## LR(1) items:
command -> LP SETINFO . attribute RP [ LP EOF ]
## Transitions:
-- On VERSION shift to state 3
-- On VALUES shift to state 5
-- On THEORIES shift to state 6
-- On STATUTS shift to state 7
-- On SOURCE shift to state 11
-- On SORTSDESCRIPTION shift to state 12
-- On SORTS shift to state 13
-- On SMTLIBVERSION shift to state 14
-- On SERIES shift to state 15
-- On REASONUNKNOWN shift to state 18
-- On NOTES shift to state 27
-- On NAME shift to state 28
-- On LICENSE shift to state 29
-- On LANGUAGE shift to state 30
-- On INSTANCE shift to state 32
-- On FUNSDESCRIPT shift to state 34
-- On FUNS shift to state 35
-- On EXTENSIONS shift to state 36
-- On ERRORBEHAV shift to state 37
-- On DIFFICULTY shift to state 38
-- On DEFINITIO shift to state 40
-- On CATEGORY shift to state 41
-- On AXIOMS shift to state 42
-- On AUTHORS shift to state 43
-- On AUTHOR shift to state 44
-- On ASSERTIONSTACKLVL shift to state 45
-- On ALLSTATS shift to state 46
-- On keyword shift to state 49
-- On key_info shift to state 54
-- On attribute shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## LP SETINFO attribute
## LR(1) items:
command -> LP SETINFO attribute . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## LP SETINFO attribute RP
## LR(1) items:
command -> LP SETINFO attribute RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP SETINFO attribute RP

State 81:
## Known stack suffix:
## LP RESETASSERTIONS
## LR(1) items:
command -> LP RESETASSERTIONS . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## LP RESETASSERTIONS RP
## LR(1) items:
command -> LP RESETASSERTIONS RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP RESETASSERTIONS RP

State 83:
## Known stack suffix:
## LP RESET
## LR(1) items:
command -> LP RESET . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## LP RESET RP
## LR(1) items:
command -> LP RESET RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP RESET RP

State 85:
## Known stack suffix:
## LP PUSH
## LR(1) items:
command -> LP PUSH . NUMERAL RP [ LP EOF ]
## Transitions:
-- On NUMERAL shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## LP PUSH NUMERAL
## LR(1) items:
command -> LP PUSH NUMERAL . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## LP PUSH NUMERAL RP
## LR(1) items:
command -> LP PUSH NUMERAL RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP PUSH NUMERAL RP

State 88:
## Known stack suffix:
## LP POP
## LR(1) items:
command -> LP POP . NUMERAL RP [ LP EOF ]
## Transitions:
-- On NUMERAL shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## LP POP NUMERAL
## LR(1) items:
command -> LP POP NUMERAL . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## LP POP NUMERAL RP
## LR(1) items:
command -> LP POP NUMERAL RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP POP NUMERAL RP

State 91:
## Known stack suffix:
## LP GETVALUE
## LR(1) items:
command -> LP GETVALUE . LP nonempty_list(term) RP RP [ LP EOF ]
## Transitions:
-- On LP shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## LP GETVALUE LP
## LR(1) items:
command -> LP GETVALUE LP . nonempty_list(term) RP RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 173
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On nonempty_list(term) shift to state 186
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 93:
## Known stack suffix:
## LP
## LR(1) items:
identifier -> LP . UNDERSCORE symbol nonempty_list(index) RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
qualidentifier -> LP . AS identifier sort RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
term -> LP . qualidentifier nonempty_list(term) RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
term -> LP . LET LP nonempty_list(varbinding) RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
term -> LP . LET LP RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
term -> LP . FORALL LP nonempty_list(sorted_var) RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
term -> LP . EXISTS LP nonempty_list(sorted_var) RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
term -> LP . MATCH term LP nonempty_list(match_case) RP RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
term -> LP . EXCLIMATIONPT term list(key_term) RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On UNDERSCORE shift to state 94
-- On SYMBOL shift to state 8
-- On MATCH shift to state 100
-- On LP shift to state 123
-- On LET shift to state 136
-- On FORALL shift to state 151
-- On EXISTS shift to state 163
-- On EXCLIMATIONPT shift to state 169
-- On ASCIIWOR shift to state 9
-- On AS shift to state 124
-- On symbol shift to state 114
-- On qualidentifier shift to state 183
-- On identifier shift to state 116
## Reductions:

State 94:
## Known stack suffix:
## LP UNDERSCORE
## LR(1) items:
identifier -> LP UNDERSCORE . symbol nonempty_list(index) RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## LP UNDERSCORE symbol
## LR(1) items:
identifier -> LP UNDERSCORE symbol . nonempty_list(index) RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On NUMERAL shift to state 51
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 52
-- On nonempty_list(index) shift to state 96
-- On index shift to state 98
## Reductions:

State 96:
## Known stack suffix:
## LP UNDERSCORE symbol nonempty_list(index)
## LR(1) items:
identifier -> LP UNDERSCORE symbol nonempty_list(index) . RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## LP UNDERSCORE symbol nonempty_list(index) RP
## LR(1) items:
identifier -> LP UNDERSCORE symbol nonempty_list(index) RP . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production identifier -> LP UNDERSCORE symbol nonempty_list(index) RP
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production identifier -> LP UNDERSCORE symbol nonempty_list(index) RP
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 98:
## Known stack suffix:
## index
## LR(1) items:
nonempty_list(index) -> index . [ RP ]
nonempty_list(index) -> index . nonempty_list(index) [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On NUMERAL shift to state 51
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 52
-- On nonempty_list(index) shift to state 99
-- On index shift to state 98
## Reductions:
-- On RP
--   reduce production nonempty_list(index) -> index

State 99:
## Known stack suffix:
## index nonempty_list(index)
## LR(1) items:
nonempty_list(index) -> index nonempty_list(index) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(index) -> index nonempty_list(index)

State 100:
## Known stack suffix:
## LP MATCH
## LR(1) items:
term -> LP MATCH . term LP nonempty_list(match_case) RP RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 101
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 101:
## Known stack suffix:
## LP MATCH term
## LR(1) items:
term -> LP MATCH term . LP nonempty_list(match_case) RP RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On LP shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## LP MATCH term LP
## LR(1) items:
term -> LP MATCH term LP . nonempty_list(match_case) RP RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On LP shift to state 103
-- On nonempty_list(match_case) shift to state 118
-- On match_case shift to state 121
## Reductions:

State 103:
## Known stack suffix:
## LP
## LR(1) items:
match_case -> LP . pattern term RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 104
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 110
-- On pattern shift to state 111
## Reductions:

State 104:
## Known stack suffix:
## LP
## LR(1) items:
pattern -> LP . symbol nonempty_list(symbol) RP [ SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## LP symbol
## LR(1) items:
pattern -> LP symbol . nonempty_list(symbol) RP [ SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 106
-- On nonempty_list(symbol) shift to state 108
## Reductions:

State 106:
## Known stack suffix:
## symbol
## LR(1) items:
nonempty_list(symbol) -> symbol . [ RP ]
nonempty_list(symbol) -> symbol . nonempty_list(symbol) [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 106
-- On nonempty_list(symbol) shift to state 107
## Reductions:
-- On RP
--   reduce production nonempty_list(symbol) -> symbol

State 107:
## Known stack suffix:
## symbol nonempty_list(symbol)
## LR(1) items:
nonempty_list(symbol) -> symbol nonempty_list(symbol) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(symbol) -> symbol nonempty_list(symbol)

State 108:
## Known stack suffix:
## LP symbol nonempty_list(symbol)
## LR(1) items:
pattern -> LP symbol nonempty_list(symbol) . RP [ SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On RP shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## LP symbol nonempty_list(symbol) RP
## LR(1) items:
pattern -> LP symbol nonempty_list(symbol) RP . [ SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production pattern -> LP symbol nonempty_list(symbol) RP

State 110:
## Known stack suffix:
## symbol
## LR(1) items:
pattern -> symbol . [ SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production pattern -> symbol

State 111:
## Known stack suffix:
## LP pattern
## LR(1) items:
match_case -> LP pattern . term RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 112
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 112:
## Known stack suffix:
## LP pattern term
## LR(1) items:
match_case -> LP pattern term . RP [ RP LP ]
## Transitions:
-- On RP shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## LP pattern term RP
## LR(1) items:
match_case -> LP pattern term RP . [ RP LP ]
## Transitions:
## Reductions:
-- On RP LP
--   reduce production match_case -> LP pattern term RP

State 114:
## Known stack suffix:
## symbol
## LR(1) items:
identifier -> symbol . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production identifier -> symbol
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production identifier -> symbol
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 115:
## Known stack suffix:
## qualidentifier
## LR(1) items:
term -> qualidentifier . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production term -> qualidentifier
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production term -> qualidentifier
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 116:
## Known stack suffix:
## identifier
## LR(1) items:
qualidentifier -> identifier . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production qualidentifier -> identifier
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production qualidentifier -> identifier
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 117:
## Known stack suffix:
## constant
## LR(1) items:
term -> constant . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production term -> constant
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production term -> constant
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 118:
## Known stack suffix:
## LP MATCH term LP nonempty_list(match_case)
## LR(1) items:
term -> LP MATCH term LP nonempty_list(match_case) . RP RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## LP MATCH term LP nonempty_list(match_case) RP
## LR(1) items:
term -> LP MATCH term LP nonempty_list(match_case) RP . RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## LP MATCH term LP nonempty_list(match_case) RP RP
## LR(1) items:
term -> LP MATCH term LP nonempty_list(match_case) RP RP . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production term -> LP MATCH term LP nonempty_list(match_case) RP RP
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production term -> LP MATCH term LP nonempty_list(match_case) RP RP
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 121:
## Known stack suffix:
## match_case
## LR(1) items:
nonempty_list(match_case) -> match_case . [ RP ]
nonempty_list(match_case) -> match_case . nonempty_list(match_case) [ RP ]
## Transitions:
-- On LP shift to state 103
-- On nonempty_list(match_case) shift to state 122
-- On match_case shift to state 121
## Reductions:
-- On RP
--   reduce production nonempty_list(match_case) -> match_case

State 122:
## Known stack suffix:
## match_case nonempty_list(match_case)
## LR(1) items:
nonempty_list(match_case) -> match_case nonempty_list(match_case) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(match_case) -> match_case nonempty_list(match_case)

State 123:
## Known stack suffix:
## LP
## LR(1) items:
identifier -> LP . UNDERSCORE symbol nonempty_list(index) RP [ SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
qualidentifier -> LP . AS identifier sort RP [ SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On UNDERSCORE shift to state 94
-- On AS shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## LP AS
## LR(1) items:
qualidentifier -> LP AS . identifier sort RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 125
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On identifier shift to state 126
## Reductions:

State 125:
## Known stack suffix:
## LP
## LR(1) items:
identifier -> LP . UNDERSCORE symbol nonempty_list(index) RP [ SYMBOL LP ASCIIWOR ]
## Transitions:
-- On UNDERSCORE shift to state 94
## Reductions:

State 126:
## Known stack suffix:
## LP AS identifier
## LR(1) items:
qualidentifier -> LP AS identifier . sort RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 134
-- On identifier shift to state 131
## Reductions:

State 127:
## Known stack suffix:
## LP
## LR(1) items:
identifier -> LP . UNDERSCORE symbol nonempty_list(index) RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
sort -> LP . identifier nonempty_list(sort) RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On UNDERSCORE shift to state 94
-- On SYMBOL shift to state 8
-- On LP shift to state 125
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On identifier shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## LP identifier
## LR(1) items:
sort -> LP identifier . nonempty_list(sort) RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 129
-- On nonempty_list(sort) shift to state 132
-- On identifier shift to state 131
## Reductions:

State 129:
## Known stack suffix:
## sort
## LR(1) items:
nonempty_list(sort) -> sort . [ RP ]
nonempty_list(sort) -> sort . nonempty_list(sort) [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 129
-- On nonempty_list(sort) shift to state 130
-- On identifier shift to state 131
## Reductions:
-- On RP
--   reduce production nonempty_list(sort) -> sort

State 130:
## Known stack suffix:
## sort nonempty_list(sort)
## LR(1) items:
nonempty_list(sort) -> sort nonempty_list(sort) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(sort) -> sort nonempty_list(sort)

State 131:
## Known stack suffix:
## identifier
## LR(1) items:
sort -> identifier . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production sort -> identifier

State 132:
## Known stack suffix:
## LP identifier nonempty_list(sort)
## LR(1) items:
sort -> LP identifier nonempty_list(sort) . RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On RP shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## LP identifier nonempty_list(sort) RP
## LR(1) items:
sort -> LP identifier nonempty_list(sort) RP . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production sort -> LP identifier nonempty_list(sort) RP

State 134:
## Known stack suffix:
## LP AS identifier sort
## LR(1) items:
qualidentifier -> LP AS identifier sort . RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## LP AS identifier sort RP
## LR(1) items:
qualidentifier -> LP AS identifier sort RP . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production qualidentifier -> LP AS identifier sort RP
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production qualidentifier -> LP AS identifier sort RP
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 136:
## Known stack suffix:
## LP LET
## LR(1) items:
term -> LP LET . LP nonempty_list(varbinding) RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
term -> LP LET . LP RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On LP shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## LP LET LP
## LR(1) items:
term -> LP LET LP . nonempty_list(varbinding) RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
term -> LP LET LP . RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 138
-- On LP shift to state 141
-- On varbinding shift to state 145
-- On nonempty_list(varbinding) shift to state 147
## Reductions:

State 138:
## Known stack suffix:
## LP LET LP RP
## LR(1) items:
term -> LP LET LP RP . term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 139
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 139:
## Known stack suffix:
## LP LET LP RP term
## LR(1) items:
term -> LP LET LP RP term . RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## LP LET LP RP term RP
## LR(1) items:
term -> LP LET LP RP term RP . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production term -> LP LET LP RP term RP
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production term -> LP LET LP RP term RP
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 141:
## Known stack suffix:
## LP
## LR(1) items:
varbinding -> LP . symbol term RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## LP symbol
## LR(1) items:
varbinding -> LP symbol . term RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 143
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 143:
## Known stack suffix:
## LP symbol term
## LR(1) items:
varbinding -> LP symbol term . RP [ RP LP ]
## Transitions:
-- On RP shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## LP symbol term RP
## LR(1) items:
varbinding -> LP symbol term RP . [ RP LP ]
## Transitions:
## Reductions:
-- On RP LP
--   reduce production varbinding -> LP symbol term RP

State 145:
## Known stack suffix:
## varbinding
## LR(1) items:
nonempty_list(varbinding) -> varbinding . [ RP ]
nonempty_list(varbinding) -> varbinding . nonempty_list(varbinding) [ RP ]
## Transitions:
-- On LP shift to state 141
-- On varbinding shift to state 145
-- On nonempty_list(varbinding) shift to state 146
## Reductions:
-- On RP
--   reduce production nonempty_list(varbinding) -> varbinding

State 146:
## Known stack suffix:
## varbinding nonempty_list(varbinding)
## LR(1) items:
nonempty_list(varbinding) -> varbinding nonempty_list(varbinding) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(varbinding) -> varbinding nonempty_list(varbinding)

State 147:
## Known stack suffix:
## LP LET LP nonempty_list(varbinding)
## LR(1) items:
term -> LP LET LP nonempty_list(varbinding) . RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## LP LET LP nonempty_list(varbinding) RP
## LR(1) items:
term -> LP LET LP nonempty_list(varbinding) RP . term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 149
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 149:
## Known stack suffix:
## LP LET LP nonempty_list(varbinding) RP term
## LR(1) items:
term -> LP LET LP nonempty_list(varbinding) RP term . RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## LP LET LP nonempty_list(varbinding) RP term RP
## LR(1) items:
term -> LP LET LP nonempty_list(varbinding) RP term RP . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production term -> LP LET LP nonempty_list(varbinding) RP term RP
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production term -> LP LET LP nonempty_list(varbinding) RP term RP
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 151:
## Known stack suffix:
## LP FORALL
## LR(1) items:
term -> LP FORALL . LP nonempty_list(sorted_var) RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On LP shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## LP FORALL LP
## LR(1) items:
term -> LP FORALL LP . nonempty_list(sorted_var) RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On LP shift to state 153
-- On sorted_var shift to state 157
-- On nonempty_list(sorted_var) shift to state 159
## Reductions:

State 153:
## Known stack suffix:
## LP
## LR(1) items:
sorted_var -> LP . symbol sort RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## LP symbol
## LR(1) items:
sorted_var -> LP symbol . sort RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 155
-- On identifier shift to state 131
## Reductions:

State 155:
## Known stack suffix:
## LP symbol sort
## LR(1) items:
sorted_var -> LP symbol sort . RP [ RP LP ]
## Transitions:
-- On RP shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## LP symbol sort RP
## LR(1) items:
sorted_var -> LP symbol sort RP . [ RP LP ]
## Transitions:
## Reductions:
-- On RP LP
--   reduce production sorted_var -> LP symbol sort RP

State 157:
## Known stack suffix:
## sorted_var
## LR(1) items:
nonempty_list(sorted_var) -> sorted_var . [ RP ]
nonempty_list(sorted_var) -> sorted_var . nonempty_list(sorted_var) [ RP ]
## Transitions:
-- On LP shift to state 153
-- On sorted_var shift to state 157
-- On nonempty_list(sorted_var) shift to state 158
## Reductions:
-- On RP
--   reduce production nonempty_list(sorted_var) -> sorted_var

State 158:
## Known stack suffix:
## sorted_var nonempty_list(sorted_var)
## LR(1) items:
nonempty_list(sorted_var) -> sorted_var nonempty_list(sorted_var) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(sorted_var) -> sorted_var nonempty_list(sorted_var)

State 159:
## Known stack suffix:
## LP FORALL LP nonempty_list(sorted_var)
## LR(1) items:
term -> LP FORALL LP nonempty_list(sorted_var) . RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## LP FORALL LP nonempty_list(sorted_var) RP
## LR(1) items:
term -> LP FORALL LP nonempty_list(sorted_var) RP . term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 161
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 161:
## Known stack suffix:
## LP FORALL LP nonempty_list(sorted_var) RP term
## LR(1) items:
term -> LP FORALL LP nonempty_list(sorted_var) RP term . RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## LP FORALL LP nonempty_list(sorted_var) RP term RP
## LR(1) items:
term -> LP FORALL LP nonempty_list(sorted_var) RP term RP . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production term -> LP FORALL LP nonempty_list(sorted_var) RP term RP
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production term -> LP FORALL LP nonempty_list(sorted_var) RP term RP
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 163:
## Known stack suffix:
## LP EXISTS
## LR(1) items:
term -> LP EXISTS . LP nonempty_list(sorted_var) RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On LP shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## LP EXISTS LP
## LR(1) items:
term -> LP EXISTS LP . nonempty_list(sorted_var) RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On LP shift to state 153
-- On sorted_var shift to state 157
-- On nonempty_list(sorted_var) shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## LP EXISTS LP nonempty_list(sorted_var)
## LR(1) items:
term -> LP EXISTS LP nonempty_list(sorted_var) . RP term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## LP EXISTS LP nonempty_list(sorted_var) RP
## LR(1) items:
term -> LP EXISTS LP nonempty_list(sorted_var) RP . term RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 167
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 167:
## Known stack suffix:
## LP EXISTS LP nonempty_list(sorted_var) RP term
## LR(1) items:
term -> LP EXISTS LP nonempty_list(sorted_var) RP term . RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## LP EXISTS LP nonempty_list(sorted_var) RP term RP
## LR(1) items:
term -> LP EXISTS LP nonempty_list(sorted_var) RP term RP . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production term -> LP EXISTS LP nonempty_list(sorted_var) RP term RP
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production term -> LP EXISTS LP nonempty_list(sorted_var) RP term RP
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 169:
## Known stack suffix:
## LP EXCLIMATIONPT
## LR(1) items:
term -> LP EXCLIMATIONPT . term list(key_term) RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 170
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 170:
## Known stack suffix:
## LP EXCLIMATIONPT term
## LR(1) items:
term -> LP EXCLIMATIONPT term . list(key_term) RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On PATTERN shift to state 171
-- On NAMED shift to state 177
-- On list(key_term) shift to state 179
-- On key_term shift to state 181
## Reductions:
-- On RP
--   reduce production list(key_term) ->

State 171:
## Known stack suffix:
## PATTERN
## LR(1) items:
key_term -> PATTERN . LP nonempty_list(term) RP [ RP PATTERN NAMED ]
## Transitions:
-- On LP shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## PATTERN LP
## LR(1) items:
key_term -> PATTERN LP . nonempty_list(term) RP [ RP PATTERN NAMED ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 173
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On nonempty_list(term) shift to state 175
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 173:
## Known stack suffix:
## term
## LR(1) items:
nonempty_list(term) -> term . [ RP ]
nonempty_list(term) -> term . nonempty_list(term) [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 173
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On nonempty_list(term) shift to state 174
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:
-- On RP
--   reduce production nonempty_list(term) -> term

State 174:
## Known stack suffix:
## term nonempty_list(term)
## LR(1) items:
nonempty_list(term) -> term nonempty_list(term) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(term) -> term nonempty_list(term)

State 175:
## Known stack suffix:
## PATTERN LP nonempty_list(term)
## LR(1) items:
key_term -> PATTERN LP nonempty_list(term) . RP [ RP PATTERN NAMED ]
## Transitions:
-- On RP shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## PATTERN LP nonempty_list(term) RP
## LR(1) items:
key_term -> PATTERN LP nonempty_list(term) RP . [ RP PATTERN NAMED ]
## Transitions:
## Reductions:
-- On RP PATTERN NAMED
--   reduce production key_term -> PATTERN LP nonempty_list(term) RP

State 177:
## Known stack suffix:
## NAMED
## LR(1) items:
key_term -> NAMED . symbol [ RP PATTERN NAMED ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## NAMED symbol
## LR(1) items:
key_term -> NAMED symbol . [ RP PATTERN NAMED ]
## Transitions:
## Reductions:
-- On RP PATTERN NAMED
--   reduce production key_term -> NAMED symbol

State 179:
## Known stack suffix:
## LP EXCLIMATIONPT term list(key_term)
## LR(1) items:
term -> LP EXCLIMATIONPT term list(key_term) . RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## LP EXCLIMATIONPT term list(key_term) RP
## LR(1) items:
term -> LP EXCLIMATIONPT term list(key_term) RP . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production term -> LP EXCLIMATIONPT term list(key_term) RP
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production term -> LP EXCLIMATIONPT term list(key_term) RP
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 181:
## Known stack suffix:
## key_term
## LR(1) items:
list(key_term) -> key_term . list(key_term) [ RP ]
## Transitions:
-- On PATTERN shift to state 171
-- On NAMED shift to state 177
-- On list(key_term) shift to state 182
-- On key_term shift to state 181
## Reductions:
-- On RP
--   reduce production list(key_term) ->

State 182:
## Known stack suffix:
## key_term list(key_term)
## LR(1) items:
list(key_term) -> key_term list(key_term) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production list(key_term) -> key_term list(key_term)

State 183:
## Known stack suffix:
## LP qualidentifier
## LR(1) items:
term -> LP qualidentifier . nonempty_list(term) RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 173
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On nonempty_list(term) shift to state 184
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 184:
## Known stack suffix:
## LP qualidentifier nonempty_list(term)
## LR(1) items:
term -> LP qualidentifier nonempty_list(term) . RP [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
-- On RP shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## LP qualidentifier nonempty_list(term) RP
## LR(1) items:
term -> LP qualidentifier nonempty_list(term) RP . [ SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR # ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR #
--   reduce production term -> LP qualidentifier nonempty_list(term) RP
** End-of-stream conflict on SYMBOL STRINGLIT RP PATTERN NUMERAL NAMED LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production term -> LP qualidentifier nonempty_list(term) RP
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 186:
## Known stack suffix:
## LP GETVALUE LP nonempty_list(term)
## LR(1) items:
command -> LP GETVALUE LP nonempty_list(term) . RP RP [ LP EOF ]
## Transitions:
-- On RP shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## LP GETVALUE LP nonempty_list(term) RP
## LR(1) items:
command -> LP GETVALUE LP nonempty_list(term) RP . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## LP GETVALUE LP nonempty_list(term) RP RP
## LR(1) items:
command -> LP GETVALUE LP nonempty_list(term) RP RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP GETVALUE LP nonempty_list(term) RP RP

State 189:
## Known stack suffix:
## LP GETUNSATCORE
## LR(1) items:
command -> LP GETUNSATCORE . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## LP GETUNSATCORE RP
## LR(1) items:
command -> LP GETUNSATCORE RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP GETUNSATCORE RP

State 191:
## Known stack suffix:
## LP GETUNSATASSUMPTIONS
## LR(1) items:
command -> LP GETUNSATASSUMPTIONS . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## LP GETUNSATASSUMPTIONS RP
## LR(1) items:
command -> LP GETUNSATASSUMPTIONS RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP GETUNSATASSUMPTIONS RP

State 193:
## Known stack suffix:
## LP GETPROOF
## LR(1) items:
command -> LP GETPROOF . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## LP GETPROOF RP
## LR(1) items:
command -> LP GETPROOF RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP GETPROOF RP

State 195:
## Known stack suffix:
## LP GETOPTION
## LR(1) items:
command -> LP GETOPTION . keyword RP [ LP EOF ]
## Transitions:
-- On VALUES shift to state 5
-- On THEORIES shift to state 6
-- On STATUTS shift to state 7
-- On SOURCE shift to state 11
-- On SORTSDESCRIPTION shift to state 12
-- On SORTS shift to state 13
-- On SMTLIBVERSION shift to state 14
-- On NOTES shift to state 27
-- On LICENSE shift to state 29
-- On LANGUAGE shift to state 30
-- On FUNSDESCRIPT shift to state 34
-- On FUNS shift to state 35
-- On EXTENSIONS shift to state 36
-- On DEFINITIO shift to state 40
-- On CATEGORY shift to state 41
-- On AXIOMS shift to state 42
-- On keyword shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## LP GETOPTION keyword
## LR(1) items:
command -> LP GETOPTION keyword . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## LP GETOPTION keyword RP
## LR(1) items:
command -> LP GETOPTION keyword RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP GETOPTION keyword RP

State 198:
## Known stack suffix:
## LP GETMODEL
## LR(1) items:
command -> LP GETMODEL . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 199
## Reductions:

State 199:
## Known stack suffix:
## LP GETMODEL RP
## LR(1) items:
command -> LP GETMODEL RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP GETMODEL RP

State 200:
## Known stack suffix:
## LP GETINFO
## LR(1) items:
command -> LP GETINFO . key_info RP [ LP EOF ]
## Transitions:
-- On VERSION shift to state 3
-- On VALUES shift to state 5
-- On THEORIES shift to state 6
-- On STATUTS shift to state 7
-- On SOURCE shift to state 11
-- On SORTSDESCRIPTION shift to state 12
-- On SORTS shift to state 13
-- On SMTLIBVERSION shift to state 14
-- On SERIES shift to state 15
-- On REASONUNKNOWN shift to state 18
-- On NOTES shift to state 27
-- On NAME shift to state 28
-- On LICENSE shift to state 29
-- On LANGUAGE shift to state 30
-- On INSTANCE shift to state 32
-- On FUNSDESCRIPT shift to state 34
-- On FUNS shift to state 35
-- On EXTENSIONS shift to state 36
-- On ERRORBEHAV shift to state 37
-- On DIFFICULTY shift to state 38
-- On DEFINITIO shift to state 40
-- On CATEGORY shift to state 41
-- On AXIOMS shift to state 42
-- On AUTHORS shift to state 43
-- On AUTHOR shift to state 44
-- On ASSERTIONSTACKLVL shift to state 45
-- On ALLSTATS shift to state 46
-- On keyword shift to state 49
-- On key_info shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## LP GETINFO key_info
## LR(1) items:
command -> LP GETINFO key_info . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## LP GETINFO key_info RP
## LR(1) items:
command -> LP GETINFO key_info RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP GETINFO key_info RP

State 203:
## Known stack suffix:
## LP GETASSIGN
## LR(1) items:
command -> LP GETASSIGN . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## LP GETASSIGN RP
## LR(1) items:
command -> LP GETASSIGN RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP GETASSIGN RP

State 205:
## Known stack suffix:
## LP GETASSERT
## LR(1) items:
command -> LP GETASSERT . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## LP GETASSERT RP
## LR(1) items:
command -> LP GETASSERT RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP GETASSERT RP

State 207:
## Known stack suffix:
## LP EXIT
## LR(1) items:
command -> LP EXIT . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## LP EXIT RP
## LR(1) items:
command -> LP EXIT RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP EXIT RP

State 209:
## Known stack suffix:
## LP ECHO
## LR(1) items:
command -> LP ECHO . symbol RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## LP ECHO symbol
## LR(1) items:
command -> LP ECHO symbol . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## LP ECHO symbol RP
## LR(1) items:
command -> LP ECHO symbol RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP ECHO symbol RP

State 212:
## Known stack suffix:
## LP DEFINESORT
## LR(1) items:
command -> LP DEFINESORT . symbol LP list(symbol) RP sort RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## LP DEFINESORT symbol
## LR(1) items:
command -> LP DEFINESORT symbol . LP list(symbol) RP sort RP [ LP EOF ]
## Transitions:
-- On LP shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## LP DEFINESORT symbol LP
## LR(1) items:
command -> LP DEFINESORT symbol LP . list(symbol) RP sort RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 215
-- On list(symbol) shift to state 217
## Reductions:
-- On RP
--   reduce production list(symbol) ->

State 215:
## Known stack suffix:
## symbol
## LR(1) items:
list(symbol) -> symbol . list(symbol) [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 215
-- On list(symbol) shift to state 216
## Reductions:
-- On RP
--   reduce production list(symbol) ->

State 216:
## Known stack suffix:
## symbol list(symbol)
## LR(1) items:
list(symbol) -> symbol list(symbol) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production list(symbol) -> symbol list(symbol)

State 217:
## Known stack suffix:
## LP DEFINESORT symbol LP list(symbol)
## LR(1) items:
command -> LP DEFINESORT symbol LP list(symbol) . RP sort RP [ LP EOF ]
## Transitions:
-- On RP shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## LP DEFINESORT symbol LP list(symbol) RP
## LR(1) items:
command -> LP DEFINESORT symbol LP list(symbol) RP . sort RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 219
-- On identifier shift to state 131
## Reductions:

State 219:
## Known stack suffix:
## LP DEFINESORT symbol LP list(symbol) RP sort
## LR(1) items:
command -> LP DEFINESORT symbol LP list(symbol) RP sort . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## LP DEFINESORT symbol LP list(symbol) RP sort RP
## LR(1) items:
command -> LP DEFINESORT symbol LP list(symbol) RP sort RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP DEFINESORT symbol LP list(symbol) RP sort RP

State 221:
## Known stack suffix:
## LP DEFINEFUNSREC
## LR(1) items:
command -> LP DEFINEFUNSREC . LP list(fun_defs) RP LP nonempty_list(term) RP RP [ LP EOF ]
## Transitions:
-- On LP shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## LP DEFINEFUNSREC LP
## LR(1) items:
command -> LP DEFINEFUNSREC LP . list(fun_defs) RP LP nonempty_list(term) RP RP [ LP EOF ]
## Transitions:
-- On LP shift to state 223
-- On list(fun_defs) shift to state 242
-- On fun_defs shift to state 248
## Reductions:
-- On RP
--   reduce production list(fun_defs) ->

State 223:
## Known stack suffix:
## LP
## LR(1) items:
fun_defs -> LP . fun_def RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 224
-- On fun_def shift to state 240
## Reductions:

State 224:
## Known stack suffix:
## symbol
## LR(1) items:
fun_def -> symbol . LP list(sorted_var) RP sort [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
fun_def -> symbol . LP PAR LP nonempty_list(symbol) RP LP list(sorted_var) RP sort RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On LP shift to state 225
## Reductions:

State 225:
## Known stack suffix:
## symbol LP
## LR(1) items:
fun_def -> symbol LP . list(sorted_var) RP sort [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
fun_def -> symbol LP . PAR LP nonempty_list(symbol) RP LP list(sorted_var) RP sort RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On PAR shift to state 226
-- On LP shift to state 153
-- On sorted_var shift to state 231
-- On list(sorted_var) shift to state 237
## Reductions:
-- On RP
--   reduce production list(sorted_var) ->

State 226:
## Known stack suffix:
## symbol LP PAR
## LR(1) items:
fun_def -> symbol LP PAR . LP nonempty_list(symbol) RP LP list(sorted_var) RP sort RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On LP shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## symbol LP PAR LP
## LR(1) items:
fun_def -> symbol LP PAR LP . nonempty_list(symbol) RP LP list(sorted_var) RP sort RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 106
-- On nonempty_list(symbol) shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## symbol LP PAR LP nonempty_list(symbol)
## LR(1) items:
fun_def -> symbol LP PAR LP nonempty_list(symbol) . RP LP list(sorted_var) RP sort RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On RP shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## symbol LP PAR LP nonempty_list(symbol) RP
## LR(1) items:
fun_def -> symbol LP PAR LP nonempty_list(symbol) RP . LP list(sorted_var) RP sort RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On LP shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## symbol LP PAR LP nonempty_list(symbol) RP LP
## LR(1) items:
fun_def -> symbol LP PAR LP nonempty_list(symbol) RP LP . list(sorted_var) RP sort RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On LP shift to state 153
-- On sorted_var shift to state 231
-- On list(sorted_var) shift to state 233
## Reductions:
-- On RP
--   reduce production list(sorted_var) ->

State 231:
## Known stack suffix:
## sorted_var
## LR(1) items:
list(sorted_var) -> sorted_var . list(sorted_var) [ RP ]
## Transitions:
-- On LP shift to state 153
-- On sorted_var shift to state 231
-- On list(sorted_var) shift to state 232
## Reductions:
-- On RP
--   reduce production list(sorted_var) ->

State 232:
## Known stack suffix:
## sorted_var list(sorted_var)
## LR(1) items:
list(sorted_var) -> sorted_var list(sorted_var) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production list(sorted_var) -> sorted_var list(sorted_var)

State 233:
## Known stack suffix:
## symbol LP PAR LP nonempty_list(symbol) RP LP list(sorted_var)
## LR(1) items:
fun_def -> symbol LP PAR LP nonempty_list(symbol) RP LP list(sorted_var) . RP sort RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On RP shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## symbol LP PAR LP nonempty_list(symbol) RP LP list(sorted_var) RP
## LR(1) items:
fun_def -> symbol LP PAR LP nonempty_list(symbol) RP LP list(sorted_var) RP . sort RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 235
-- On identifier shift to state 131
## Reductions:

State 235:
## Known stack suffix:
## symbol LP PAR LP nonempty_list(symbol) RP LP list(sorted_var) RP sort
## LR(1) items:
fun_def -> symbol LP PAR LP nonempty_list(symbol) RP LP list(sorted_var) RP sort . RP [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On RP shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## symbol LP PAR LP nonempty_list(symbol) RP LP list(sorted_var) RP sort RP
## LR(1) items:
fun_def -> symbol LP PAR LP nonempty_list(symbol) RP LP list(sorted_var) RP sort RP . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production fun_def -> symbol LP PAR LP nonempty_list(symbol) RP LP list(sorted_var) RP sort RP

State 237:
## Known stack suffix:
## symbol LP list(sorted_var)
## LR(1) items:
fun_def -> symbol LP list(sorted_var) . RP sort [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On RP shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## symbol LP list(sorted_var) RP
## LR(1) items:
fun_def -> symbol LP list(sorted_var) RP . sort [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 239
-- On identifier shift to state 131
## Reductions:

State 239:
## Known stack suffix:
## symbol LP list(sorted_var) RP sort
## LR(1) items:
fun_def -> symbol LP list(sorted_var) RP sort . [ SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL STRINGLIT RP NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
--   reduce production fun_def -> symbol LP list(sorted_var) RP sort

State 240:
## Known stack suffix:
## LP fun_def
## LR(1) items:
fun_defs -> LP fun_def . RP [ RP LP ]
## Transitions:
-- On RP shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## LP fun_def RP
## LR(1) items:
fun_defs -> LP fun_def RP . [ RP LP ]
## Transitions:
## Reductions:
-- On RP LP
--   reduce production fun_defs -> LP fun_def RP

State 242:
## Known stack suffix:
## LP DEFINEFUNSREC LP list(fun_defs)
## LR(1) items:
command -> LP DEFINEFUNSREC LP list(fun_defs) . RP LP nonempty_list(term) RP RP [ LP EOF ]
## Transitions:
-- On RP shift to state 243
## Reductions:

State 243:
## Known stack suffix:
## LP DEFINEFUNSREC LP list(fun_defs) RP
## LR(1) items:
command -> LP DEFINEFUNSREC LP list(fun_defs) RP . LP nonempty_list(term) RP RP [ LP EOF ]
## Transitions:
-- On LP shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## LP DEFINEFUNSREC LP list(fun_defs) RP LP
## LR(1) items:
command -> LP DEFINEFUNSREC LP list(fun_defs) RP LP . nonempty_list(term) RP RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 173
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On nonempty_list(term) shift to state 245
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 245:
## Known stack suffix:
## LP DEFINEFUNSREC LP list(fun_defs) RP LP nonempty_list(term)
## LR(1) items:
command -> LP DEFINEFUNSREC LP list(fun_defs) RP LP nonempty_list(term) . RP RP [ LP EOF ]
## Transitions:
-- On RP shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## LP DEFINEFUNSREC LP list(fun_defs) RP LP nonempty_list(term) RP
## LR(1) items:
command -> LP DEFINEFUNSREC LP list(fun_defs) RP LP nonempty_list(term) RP . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## LP DEFINEFUNSREC LP list(fun_defs) RP LP nonempty_list(term) RP RP
## LR(1) items:
command -> LP DEFINEFUNSREC LP list(fun_defs) RP LP nonempty_list(term) RP RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP DEFINEFUNSREC LP list(fun_defs) RP LP nonempty_list(term) RP RP

State 248:
## Known stack suffix:
## fun_defs
## LR(1) items:
list(fun_defs) -> fun_defs . list(fun_defs) [ RP ]
## Transitions:
-- On LP shift to state 223
-- On list(fun_defs) shift to state 249
-- On fun_defs shift to state 248
## Reductions:
-- On RP
--   reduce production list(fun_defs) ->

State 249:
## Known stack suffix:
## fun_defs list(fun_defs)
## LR(1) items:
list(fun_defs) -> fun_defs list(fun_defs) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production list(fun_defs) -> fun_defs list(fun_defs)

State 250:
## Known stack suffix:
## LP DEFINEFUNREC
## LR(1) items:
command -> LP DEFINEFUNREC . fun_def term RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 224
-- On fun_def shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## LP DEFINEFUNREC fun_def
## LR(1) items:
command -> LP DEFINEFUNREC fun_def . term RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 252
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 252:
## Known stack suffix:
## LP DEFINEFUNREC fun_def term
## LR(1) items:
command -> LP DEFINEFUNREC fun_def term . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## LP DEFINEFUNREC fun_def term RP
## LR(1) items:
command -> LP DEFINEFUNREC fun_def term RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP DEFINEFUNREC fun_def term RP

State 254:
## Known stack suffix:
## LP DEFINEFUN
## LR(1) items:
command -> LP DEFINEFUN . fun_def term RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 224
-- On fun_def shift to state 255
## Reductions:

State 255:
## Known stack suffix:
## LP DEFINEFUN fun_def
## LR(1) items:
command -> LP DEFINEFUN fun_def . term RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 256
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 256:
## Known stack suffix:
## LP DEFINEFUN fun_def term
## LR(1) items:
command -> LP DEFINEFUN fun_def term . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## LP DEFINEFUN fun_def term RP
## LR(1) items:
command -> LP DEFINEFUN fun_def term RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP DEFINEFUN fun_def term RP

State 258:
## Known stack suffix:
## LP DECLARESORT
## LR(1) items:
command -> LP DECLARESORT . symbol NUMERAL RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 259
## Reductions:

State 259:
## Known stack suffix:
## LP DECLARESORT symbol
## LR(1) items:
command -> LP DECLARESORT symbol . NUMERAL RP [ LP EOF ]
## Transitions:
-- On NUMERAL shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## LP DECLARESORT symbol NUMERAL
## LR(1) items:
command -> LP DECLARESORT symbol NUMERAL . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## LP DECLARESORT symbol NUMERAL RP
## LR(1) items:
command -> LP DECLARESORT symbol NUMERAL RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP DECLARESORT symbol NUMERAL RP

State 262:
## Known stack suffix:
## LP DECLAREFUN
## LR(1) items:
command -> LP DECLAREFUN . symbol fun_dec RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## LP DECLAREFUN symbol
## LR(1) items:
command -> LP DECLAREFUN symbol . fun_dec RP [ LP EOF ]
## Transitions:
-- On LP shift to state 264
-- On fun_dec shift to state 279
## Reductions:

State 264:
## Known stack suffix:
## LP
## LR(1) items:
fun_dec -> LP . list(sort) RP sort [ RP ]
fun_dec -> LP . PAR LP nonempty_list(symbol) RP LP list(sort) RP sort RP [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On PAR shift to state 265
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 270
-- On list(sort) shift to state 276
-- On identifier shift to state 131
## Reductions:
-- On RP
--   reduce production list(sort) ->

State 265:
## Known stack suffix:
## LP PAR
## LR(1) items:
fun_dec -> LP PAR . LP nonempty_list(symbol) RP LP list(sort) RP sort RP [ RP ]
## Transitions:
-- On LP shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## LP PAR LP
## LR(1) items:
fun_dec -> LP PAR LP . nonempty_list(symbol) RP LP list(sort) RP sort RP [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 106
-- On nonempty_list(symbol) shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol)
## LR(1) items:
fun_dec -> LP PAR LP nonempty_list(symbol) . RP LP list(sort) RP sort RP [ RP ]
## Transitions:
-- On RP shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP
## LR(1) items:
fun_dec -> LP PAR LP nonempty_list(symbol) RP . LP list(sort) RP sort RP [ RP ]
## Transitions:
-- On LP shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP LP
## LR(1) items:
fun_dec -> LP PAR LP nonempty_list(symbol) RP LP . list(sort) RP sort RP [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 270
-- On list(sort) shift to state 272
-- On identifier shift to state 131
## Reductions:
-- On RP
--   reduce production list(sort) ->

State 270:
## Known stack suffix:
## sort
## LR(1) items:
list(sort) -> sort . list(sort) [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 270
-- On list(sort) shift to state 271
-- On identifier shift to state 131
## Reductions:
-- On RP
--   reduce production list(sort) ->

State 271:
## Known stack suffix:
## sort list(sort)
## LR(1) items:
list(sort) -> sort list(sort) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production list(sort) -> sort list(sort)

State 272:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP LP list(sort)
## LR(1) items:
fun_dec -> LP PAR LP nonempty_list(symbol) RP LP list(sort) . RP sort RP [ RP ]
## Transitions:
-- On RP shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP LP list(sort) RP
## LR(1) items:
fun_dec -> LP PAR LP nonempty_list(symbol) RP LP list(sort) RP . sort RP [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 274
-- On identifier shift to state 131
## Reductions:

State 274:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP LP list(sort) RP sort
## LR(1) items:
fun_dec -> LP PAR LP nonempty_list(symbol) RP LP list(sort) RP sort . RP [ RP ]
## Transitions:
-- On RP shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP LP list(sort) RP sort RP
## LR(1) items:
fun_dec -> LP PAR LP nonempty_list(symbol) RP LP list(sort) RP sort RP . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production fun_dec -> LP PAR LP nonempty_list(symbol) RP LP list(sort) RP sort RP

State 276:
## Known stack suffix:
## LP list(sort)
## LR(1) items:
fun_dec -> LP list(sort) . RP sort [ RP ]
## Transitions:
-- On RP shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## LP list(sort) RP
## LR(1) items:
fun_dec -> LP list(sort) RP . sort [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 278
-- On identifier shift to state 131
## Reductions:

State 278:
## Known stack suffix:
## LP list(sort) RP sort
## LR(1) items:
fun_dec -> LP list(sort) RP sort . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production fun_dec -> LP list(sort) RP sort

State 279:
## Known stack suffix:
## LP DECLAREFUN symbol fun_dec
## LR(1) items:
command -> LP DECLAREFUN symbol fun_dec . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## LP DECLAREFUN symbol fun_dec RP
## LR(1) items:
command -> LP DECLAREFUN symbol fun_dec RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP DECLAREFUN symbol fun_dec RP

State 281:
## Known stack suffix:
## LP DECLAREDATATYPES
## LR(1) items:
command -> LP DECLAREDATATYPES . LP nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec) RP RP [ LP EOF ]
## Transitions:
-- On LP shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## LP DECLAREDATATYPES LP
## LR(1) items:
command -> LP DECLAREDATATYPES LP . nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec) RP RP [ LP EOF ]
## Transitions:
-- On LP shift to state 283
-- On sort_dec shift to state 287
-- On nonempty_list(sort_dec) shift to state 289
## Reductions:

State 283:
## Known stack suffix:
## LP
## LR(1) items:
sort_dec -> LP . symbol NUMERAL RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## LP symbol
## LR(1) items:
sort_dec -> LP symbol . NUMERAL RP [ RP LP ]
## Transitions:
-- On NUMERAL shift to state 285
## Reductions:

State 285:
## Known stack suffix:
## LP symbol NUMERAL
## LR(1) items:
sort_dec -> LP symbol NUMERAL . RP [ RP LP ]
## Transitions:
-- On RP shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## LP symbol NUMERAL RP
## LR(1) items:
sort_dec -> LP symbol NUMERAL RP . [ RP LP ]
## Transitions:
## Reductions:
-- On RP LP
--   reduce production sort_dec -> LP symbol NUMERAL RP

State 287:
## Known stack suffix:
## sort_dec
## LR(1) items:
nonempty_list(sort_dec) -> sort_dec . [ RP ]
nonempty_list(sort_dec) -> sort_dec . nonempty_list(sort_dec) [ RP ]
## Transitions:
-- On LP shift to state 283
-- On sort_dec shift to state 287
-- On nonempty_list(sort_dec) shift to state 288
## Reductions:
-- On RP
--   reduce production nonempty_list(sort_dec) -> sort_dec

State 288:
## Known stack suffix:
## sort_dec nonempty_list(sort_dec)
## LR(1) items:
nonempty_list(sort_dec) -> sort_dec nonempty_list(sort_dec) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(sort_dec) -> sort_dec nonempty_list(sort_dec)

State 289:
## Known stack suffix:
## LP DECLAREDATATYPES LP nonempty_list(sort_dec)
## LR(1) items:
command -> LP DECLAREDATATYPES LP nonempty_list(sort_dec) . RP LP nonempty_list(datatype_dec) RP RP [ LP EOF ]
## Transitions:
-- On RP shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP
## LR(1) items:
command -> LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP . LP nonempty_list(datatype_dec) RP RP [ LP EOF ]
## Transitions:
-- On LP shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP
## LR(1) items:
command -> LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP . nonempty_list(datatype_dec) RP RP [ LP EOF ]
## Transitions:
-- On LP shift to state 292
-- On nonempty_list(datatype_dec) shift to state 315
-- On datatype_dec shift to state 318
## Reductions:

State 292:
## Known stack suffix:
## LP
## LR(1) items:
datatype_dec -> LP . nonempty_list(constructor_dec) RP [ RP LP ]
datatype_dec -> LP . PAR LP nonempty_list(symbol) RP LP nonempty_list(constructor_dec) RP RP [ RP LP ]
## Transitions:
-- On PAR shift to state 293
-- On LP shift to state 298
-- On nonempty_list(constructor_dec) shift to state 313
-- On constructor_dec shift to state 311
## Reductions:

State 293:
## Known stack suffix:
## LP PAR
## LR(1) items:
datatype_dec -> LP PAR . LP nonempty_list(symbol) RP LP nonempty_list(constructor_dec) RP RP [ RP LP ]
## Transitions:
-- On LP shift to state 294
## Reductions:

State 294:
## Known stack suffix:
## LP PAR LP
## LR(1) items:
datatype_dec -> LP PAR LP . nonempty_list(symbol) RP LP nonempty_list(constructor_dec) RP RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 106
-- On nonempty_list(symbol) shift to state 295
## Reductions:

State 295:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol)
## LR(1) items:
datatype_dec -> LP PAR LP nonempty_list(symbol) . RP LP nonempty_list(constructor_dec) RP RP [ RP LP ]
## Transitions:
-- On RP shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP
## LR(1) items:
datatype_dec -> LP PAR LP nonempty_list(symbol) RP . LP nonempty_list(constructor_dec) RP RP [ RP LP ]
## Transitions:
-- On LP shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP LP
## LR(1) items:
datatype_dec -> LP PAR LP nonempty_list(symbol) RP LP . nonempty_list(constructor_dec) RP RP [ RP LP ]
## Transitions:
-- On LP shift to state 298
-- On nonempty_list(constructor_dec) shift to state 308
-- On constructor_dec shift to state 311
## Reductions:

State 298:
## Known stack suffix:
## LP
## LR(1) items:
constructor_dec -> LP . symbol list(selector_dec) RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 299
## Reductions:

State 299:
## Known stack suffix:
## LP symbol
## LR(1) items:
constructor_dec -> LP symbol . list(selector_dec) RP [ RP LP ]
## Transitions:
-- On LP shift to state 300
-- On selector_dec shift to state 304
-- On list(selector_dec) shift to state 306
## Reductions:
-- On RP
--   reduce production list(selector_dec) ->

State 300:
## Known stack suffix:
## LP
## LR(1) items:
selector_dec -> LP . symbol sort RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## LP symbol
## LR(1) items:
selector_dec -> LP symbol . sort RP [ RP LP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 302
-- On identifier shift to state 131
## Reductions:

State 302:
## Known stack suffix:
## LP symbol sort
## LR(1) items:
selector_dec -> LP symbol sort . RP [ RP LP ]
## Transitions:
-- On RP shift to state 303
## Reductions:

State 303:
## Known stack suffix:
## LP symbol sort RP
## LR(1) items:
selector_dec -> LP symbol sort RP . [ RP LP ]
## Transitions:
## Reductions:
-- On RP LP
--   reduce production selector_dec -> LP symbol sort RP

State 304:
## Known stack suffix:
## selector_dec
## LR(1) items:
list(selector_dec) -> selector_dec . list(selector_dec) [ RP ]
## Transitions:
-- On LP shift to state 300
-- On selector_dec shift to state 304
-- On list(selector_dec) shift to state 305
## Reductions:
-- On RP
--   reduce production list(selector_dec) ->

State 305:
## Known stack suffix:
## selector_dec list(selector_dec)
## LR(1) items:
list(selector_dec) -> selector_dec list(selector_dec) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production list(selector_dec) -> selector_dec list(selector_dec)

State 306:
## Known stack suffix:
## LP symbol list(selector_dec)
## LR(1) items:
constructor_dec -> LP symbol list(selector_dec) . RP [ RP LP ]
## Transitions:
-- On RP shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## LP symbol list(selector_dec) RP
## LR(1) items:
constructor_dec -> LP symbol list(selector_dec) RP . [ RP LP ]
## Transitions:
## Reductions:
-- On RP LP
--   reduce production constructor_dec -> LP symbol list(selector_dec) RP

State 308:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP LP nonempty_list(constructor_dec)
## LR(1) items:
datatype_dec -> LP PAR LP nonempty_list(symbol) RP LP nonempty_list(constructor_dec) . RP RP [ RP LP ]
## Transitions:
-- On RP shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP LP nonempty_list(constructor_dec) RP
## LR(1) items:
datatype_dec -> LP PAR LP nonempty_list(symbol) RP LP nonempty_list(constructor_dec) RP . RP [ RP LP ]
## Transitions:
-- On RP shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP LP nonempty_list(constructor_dec) RP RP
## LR(1) items:
datatype_dec -> LP PAR LP nonempty_list(symbol) RP LP nonempty_list(constructor_dec) RP RP . [ RP LP ]
## Transitions:
## Reductions:
-- On RP LP
--   reduce production datatype_dec -> LP PAR LP nonempty_list(symbol) RP LP nonempty_list(constructor_dec) RP RP

State 311:
## Known stack suffix:
## constructor_dec
## LR(1) items:
nonempty_list(constructor_dec) -> constructor_dec . [ RP ]
nonempty_list(constructor_dec) -> constructor_dec . nonempty_list(constructor_dec) [ RP ]
## Transitions:
-- On LP shift to state 298
-- On nonempty_list(constructor_dec) shift to state 312
-- On constructor_dec shift to state 311
## Reductions:
-- On RP
--   reduce production nonempty_list(constructor_dec) -> constructor_dec

State 312:
## Known stack suffix:
## constructor_dec nonempty_list(constructor_dec)
## LR(1) items:
nonempty_list(constructor_dec) -> constructor_dec nonempty_list(constructor_dec) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(constructor_dec) -> constructor_dec nonempty_list(constructor_dec)

State 313:
## Known stack suffix:
## LP nonempty_list(constructor_dec)
## LR(1) items:
datatype_dec -> LP nonempty_list(constructor_dec) . RP [ RP LP ]
## Transitions:
-- On RP shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## LP nonempty_list(constructor_dec) RP
## LR(1) items:
datatype_dec -> LP nonempty_list(constructor_dec) RP . [ RP LP ]
## Transitions:
## Reductions:
-- On RP LP
--   reduce production datatype_dec -> LP nonempty_list(constructor_dec) RP

State 315:
## Known stack suffix:
## LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec)
## LR(1) items:
command -> LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec) . RP RP [ LP EOF ]
## Transitions:
-- On RP shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec) RP
## LR(1) items:
command -> LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec) RP . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec) RP RP
## LR(1) items:
command -> LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec) RP RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP DECLAREDATATYPES LP nonempty_list(sort_dec) RP LP nonempty_list(datatype_dec) RP RP

State 318:
## Known stack suffix:
## datatype_dec
## LR(1) items:
nonempty_list(datatype_dec) -> datatype_dec . [ RP ]
nonempty_list(datatype_dec) -> datatype_dec . nonempty_list(datatype_dec) [ RP ]
## Transitions:
-- On LP shift to state 292
-- On nonempty_list(datatype_dec) shift to state 319
-- On datatype_dec shift to state 318
## Reductions:
-- On RP
--   reduce production nonempty_list(datatype_dec) -> datatype_dec

State 319:
## Known stack suffix:
## datatype_dec nonempty_list(datatype_dec)
## LR(1) items:
nonempty_list(datatype_dec) -> datatype_dec nonempty_list(datatype_dec) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production nonempty_list(datatype_dec) -> datatype_dec nonempty_list(datatype_dec)

State 320:
## Known stack suffix:
## LP DECLAREDATATYPE
## LR(1) items:
command -> LP DECLAREDATATYPE . symbol datatype_dec RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## LP DECLAREDATATYPE symbol
## LR(1) items:
command -> LP DECLAREDATATYPE symbol . datatype_dec RP [ LP EOF ]
## Transitions:
-- On LP shift to state 292
-- On datatype_dec shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## LP DECLAREDATATYPE symbol datatype_dec
## LR(1) items:
command -> LP DECLAREDATATYPE symbol datatype_dec . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 323
## Reductions:

State 323:
## Known stack suffix:
## LP DECLAREDATATYPE symbol datatype_dec RP
## LR(1) items:
command -> LP DECLAREDATATYPE symbol datatype_dec RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP DECLAREDATATYPE symbol datatype_dec RP

State 324:
## Known stack suffix:
## LP DECLARECONST
## LR(1) items:
command -> LP DECLARECONST . symbol const_dec RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## LP DECLARECONST symbol
## LR(1) items:
command -> LP DECLARECONST symbol . const_dec RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 326
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 333
-- On identifier shift to state 131
-- On const_dec shift to state 334
## Reductions:

State 326:
## Known stack suffix:
## LP
## LR(1) items:
const_dec -> LP . PAR LP nonempty_list(symbol) RP sort RP [ RP ]
identifier -> LP . UNDERSCORE symbol nonempty_list(index) RP [ RP ]
sort -> LP . identifier nonempty_list(sort) RP [ RP ]
## Transitions:
-- On UNDERSCORE shift to state 94
-- On SYMBOL shift to state 8
-- On PAR shift to state 327
-- On LP shift to state 125
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On identifier shift to state 128
## Reductions:

State 327:
## Known stack suffix:
## LP PAR
## LR(1) items:
const_dec -> LP PAR . LP nonempty_list(symbol) RP sort RP [ RP ]
## Transitions:
-- On LP shift to state 328
## Reductions:

State 328:
## Known stack suffix:
## LP PAR LP
## LR(1) items:
const_dec -> LP PAR LP . nonempty_list(symbol) RP sort RP [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 106
-- On nonempty_list(symbol) shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol)
## LR(1) items:
const_dec -> LP PAR LP nonempty_list(symbol) . RP sort RP [ RP ]
## Transitions:
-- On RP shift to state 330
## Reductions:

State 330:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP
## LR(1) items:
const_dec -> LP PAR LP nonempty_list(symbol) RP . sort RP [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 127
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 114
-- On sort shift to state 331
-- On identifier shift to state 131
## Reductions:

State 331:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP sort
## LR(1) items:
const_dec -> LP PAR LP nonempty_list(symbol) RP sort . RP [ RP ]
## Transitions:
-- On RP shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP sort RP
## LR(1) items:
const_dec -> LP PAR LP nonempty_list(symbol) RP sort RP . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production const_dec -> LP PAR LP nonempty_list(symbol) RP sort RP

State 333:
## Known stack suffix:
## sort
## LR(1) items:
const_dec -> sort . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production const_dec -> sort

State 334:
## Known stack suffix:
## LP DECLARECONST symbol const_dec
## LR(1) items:
command -> LP DECLARECONST symbol const_dec . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 335
## Reductions:

State 335:
## Known stack suffix:
## LP DECLARECONST symbol const_dec RP
## LR(1) items:
command -> LP DECLARECONST symbol const_dec RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP DECLARECONST symbol const_dec RP

State 336:
## Known stack suffix:
## LP CHECKSATASSUMING
## LR(1) items:
command -> LP CHECKSATASSUMING . LP list(prop_literal) RP RP [ LP EOF ]
## Transitions:
-- On LP shift to state 337
## Reductions:

State 337:
## Known stack suffix:
## LP CHECKSATASSUMING LP
## LR(1) items:
command -> LP CHECKSATASSUMING LP . list(prop_literal) RP RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 338
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 342
-- On prop_literal shift to state 343
-- On list(prop_literal) shift to state 345
## Reductions:
-- On RP
--   reduce production list(prop_literal) ->

State 338:
## Known stack suffix:
## LP
## LR(1) items:
prop_literal -> LP . symbol symbol RP [ SYMBOL RP LP ASCIIWOR ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## LP symbol
## LR(1) items:
prop_literal -> LP symbol . symbol RP [ SYMBOL RP LP ASCIIWOR ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 340
## Reductions:

State 340:
## Known stack suffix:
## LP symbol symbol
## LR(1) items:
prop_literal -> LP symbol symbol . RP [ SYMBOL RP LP ASCIIWOR ]
## Transitions:
-- On RP shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## LP symbol symbol RP
## LR(1) items:
prop_literal -> LP symbol symbol RP . [ SYMBOL RP LP ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL RP LP ASCIIWOR
--   reduce production prop_literal -> LP symbol symbol RP

State 342:
## Known stack suffix:
## symbol
## LR(1) items:
prop_literal -> symbol . [ SYMBOL RP LP ASCIIWOR ]
## Transitions:
## Reductions:
-- On SYMBOL RP LP ASCIIWOR
--   reduce production prop_literal -> symbol

State 343:
## Known stack suffix:
## prop_literal
## LR(1) items:
list(prop_literal) -> prop_literal . list(prop_literal) [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On LP shift to state 338
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 342
-- On prop_literal shift to state 343
-- On list(prop_literal) shift to state 344
## Reductions:
-- On RP
--   reduce production list(prop_literal) ->

State 344:
## Known stack suffix:
## prop_literal list(prop_literal)
## LR(1) items:
list(prop_literal) -> prop_literal list(prop_literal) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production list(prop_literal) -> prop_literal list(prop_literal)

State 345:
## Known stack suffix:
## LP CHECKSATASSUMING LP list(prop_literal)
## LR(1) items:
command -> LP CHECKSATASSUMING LP list(prop_literal) . RP RP [ LP EOF ]
## Transitions:
-- On RP shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## LP CHECKSATASSUMING LP list(prop_literal) RP
## LR(1) items:
command -> LP CHECKSATASSUMING LP list(prop_literal) RP . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 347
## Reductions:

State 347:
## Known stack suffix:
## LP CHECKSATASSUMING LP list(prop_literal) RP RP
## LR(1) items:
command -> LP CHECKSATASSUMING LP list(prop_literal) RP RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP CHECKSATASSUMING LP list(prop_literal) RP RP

State 348:
## Known stack suffix:
## LP CHECKSAT
## LR(1) items:
command -> LP CHECKSAT . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 349
## Reductions:

State 349:
## Known stack suffix:
## LP CHECKSAT RP
## LR(1) items:
command -> LP CHECKSAT RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP CHECKSAT RP

State 350:
## Known stack suffix:
## LP CHECKENTAILMENT
## LR(1) items:
command -> LP CHECKENTAILMENT . assert_dec RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 351
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 358
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
-- On assert_dec shift to state 359
## Reductions:

State 351:
## Known stack suffix:
## LP
## LR(1) items:
assert_dec -> LP . PAR LP nonempty_list(symbol) RP term RP [ RP ]
identifier -> LP . UNDERSCORE symbol nonempty_list(index) RP [ RP ]
qualidentifier -> LP . AS identifier sort RP [ RP ]
term -> LP . qualidentifier nonempty_list(term) RP [ RP ]
term -> LP . LET LP nonempty_list(varbinding) RP term RP [ RP ]
term -> LP . LET LP RP term RP [ RP ]
term -> LP . FORALL LP nonempty_list(sorted_var) RP term RP [ RP ]
term -> LP . EXISTS LP nonempty_list(sorted_var) RP term RP [ RP ]
term -> LP . MATCH term LP nonempty_list(match_case) RP RP [ RP ]
term -> LP . EXCLIMATIONPT term list(key_term) RP [ RP ]
## Transitions:
-- On UNDERSCORE shift to state 94
-- On SYMBOL shift to state 8
-- On PAR shift to state 352
-- On MATCH shift to state 100
-- On LP shift to state 123
-- On LET shift to state 136
-- On FORALL shift to state 151
-- On EXISTS shift to state 163
-- On EXCLIMATIONPT shift to state 169
-- On ASCIIWOR shift to state 9
-- On AS shift to state 124
-- On symbol shift to state 114
-- On qualidentifier shift to state 183
-- On identifier shift to state 116
## Reductions:

State 352:
## Known stack suffix:
## LP PAR
## LR(1) items:
assert_dec -> LP PAR . LP nonempty_list(symbol) RP term RP [ RP ]
## Transitions:
-- On LP shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## LP PAR LP
## LR(1) items:
assert_dec -> LP PAR LP . nonempty_list(symbol) RP term RP [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On ASCIIWOR shift to state 9
-- On symbol shift to state 106
-- On nonempty_list(symbol) shift to state 354
## Reductions:

State 354:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol)
## LR(1) items:
assert_dec -> LP PAR LP nonempty_list(symbol) . RP term RP [ RP ]
## Transitions:
-- On RP shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP
## LR(1) items:
assert_dec -> LP PAR LP nonempty_list(symbol) RP . term RP [ RP ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 356
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 356:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP term
## LR(1) items:
assert_dec -> LP PAR LP nonempty_list(symbol) RP term . RP [ RP ]
## Transitions:
-- On RP shift to state 357
## Reductions:

State 357:
## Known stack suffix:
## LP PAR LP nonempty_list(symbol) RP term RP
## LR(1) items:
assert_dec -> LP PAR LP nonempty_list(symbol) RP term RP . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production assert_dec -> LP PAR LP nonempty_list(symbol) RP term RP

State 358:
## Known stack suffix:
## term
## LR(1) items:
assert_dec -> term . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production assert_dec -> term

State 359:
## Known stack suffix:
## LP CHECKENTAILMENT assert_dec
## LR(1) items:
command -> LP CHECKENTAILMENT assert_dec . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## LP CHECKENTAILMENT assert_dec RP
## LR(1) items:
command -> LP CHECKENTAILMENT assert_dec RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP CHECKENTAILMENT assert_dec RP

State 361:
## Known stack suffix:
## LP ASSERT
## LR(1) items:
command -> LP ASSERT . assert_dec RP [ LP EOF ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 351
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 358
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
-- On assert_dec shift to state 362
## Reductions:

State 362:
## Known stack suffix:
## LP ASSERT assert_dec
## LR(1) items:
command -> LP ASSERT assert_dec . RP [ LP EOF ]
## Transitions:
-- On RP shift to state 363
## Reductions:

State 363:
## Known stack suffix:
## LP ASSERT assert_dec RP
## LR(1) items:
command -> LP ASSERT assert_dec RP . [ LP EOF ]
## Transitions:
## Reductions:
-- On LP EOF
--   reduce production command -> LP ASSERT assert_dec RP

State 364:
## Known stack suffix:
## EOF
## LR(1) items:
commands -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production commands -> EOF

State 365:
## Known stack suffix:
## commands
## LR(1) items:
commands' -> commands . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept commands

State 366:
## Known stack suffix:
## command
## LR(1) items:
commands -> command . commands [ # ]
## Transitions:
-- On LP shift to state 1
-- On EOF shift to state 364
-- On commands shift to state 367
-- On command shift to state 366
## Reductions:

State 367:
## Known stack suffix:
## command commands
## LR(1) items:
commands -> command commands . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production commands -> command commands

State 368:
## Known stack suffix:
##
## LR(1) items:
term' -> . term [ # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 369
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:

State 369:
## Known stack suffix:
## term
## LR(1) items:
term' -> term . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept term

State 370:
## Known stack suffix:
##
## LR(1) items:
term_list' -> . term_list [ # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term_list shift to state 371
-- On term shift to state 372
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On list(term) shift to state 374
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:
-- On #
--   reduce production list(term) ->
** End-of-stream conflict on SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production list(term) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 371:
## Known stack suffix:
## term_list
## LR(1) items:
term_list' -> term_list . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept term_list

State 372:
## Known stack suffix:
## term
## LR(1) items:
list(term) -> term . list(term) [ # ]
## Transitions:
-- On SYMBOL shift to state 8
-- On STRINGLIT shift to state 55
-- On NUMERAL shift to state 56
-- On LP shift to state 93
-- On HEXADECIMAL shift to state 59
-- On DECIMAL shift to state 60
-- On BINARY shift to state 61
-- On ASCIIWOR shift to state 9
-- On term shift to state 372
-- On symbol shift to state 114
-- On qualidentifier shift to state 115
-- On list(term) shift to state 373
-- On identifier shift to state 116
-- On constant shift to state 117
## Reductions:
-- On #
--   reduce production list(term) ->
** End-of-stream conflict on SYMBOL STRINGLIT NUMERAL LP HEXADECIMAL DECIMAL BINARY ASCIIWOR
**   There is a tension between
**   (1) reducing production list(term) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 373:
## Known stack suffix:
## term list(term)
## LR(1) items:
list(term) -> term list(term) . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production list(term) -> term list(term)

State 374:
## Known stack suffix:
## list(term)
## LR(1) items:
term_list -> list(term) . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production term_list -> list(term)

