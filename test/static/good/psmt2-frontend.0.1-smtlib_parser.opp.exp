%{
   open Smtlib_syntax

   let mk_data p c =
       {p;c;ty= Smtlib_ty.new_type Smtlib_ty.TDummy;is_quantif=false}
%}
%start commands
%start term
%start term_list
%token ALLSTATS
%token AS
%token <string> ASCIIWOR
%token ASSERT
%token ASSERTIONSTACKLVL
%token AUTHOR
%token AUTHORS
%token AXIOMS
%token <string> BINARY
%token CATEGORY
%token CHECKENTAILMENT
%token CHECKSAT
%token CHECKSATASSUMING
%token <string> DECIMAL
%token DECLARECONST
%token DECLAREDATATYPE
%token DECLAREDATATYPES
%token DECLAREFUN
%token DECLARESORT
%token DEFINEFUN
%token DEFINEFUNREC
%token DEFINEFUNSREC
%token DEFINESORT
%token DEFINITIO
%token DIAGNOOUTPUTCHAN
%token DIFFICULTY
%token ECHO
%token EOF
%token ERRORBEHAV
%token EXCLIMATIONPT
%token EXISTS
%token EXIT
%token EXTENSIONS
%token FORALL
%token FUNS
%token FUNSDESCRIPT
%token GETASSERT
%token GETASSIGN
%token GETINFO
%token GETMODEL
%token GETOPTION
%token GETPROOF
%token GETUNSATASSUMPTIONS
%token GETUNSATCORE
%token GETVALUE
%token GLOBALDECLARATIONS
%token <string> HEXADECIMAL
%token INSTANCE
%token INTERACTIVE
%token LANGUAGE
%token LET
%token LICENSE
%token LP
%token MATCH
%token NAME
%token NAMED
%token NOTES
%token <string> NUMERAL
%token PAR
%token PATTERN
%token POP
%token PRINTSUCCESS
%token PRODUCEASSERTIONS
%token PRODUCEASSIGNEMENT
%token PRODUCEMODELS
%token PRODUCEPROOFS
%token PRODUCEUNSATASSUMPTIONS
%token PRODUCEUNSATCORES
%token PUSH
%token RANDOMSEED
%token REASONUNKNOWN
%token REGULAROUTPUTCHAN
%token RESET
%token RESETASSERTIONS
%token RESSOURCELIMIT
%token RP
%token SERIES
%token SETINFO
%token SETLOGIC
%token SETOPTION
%token SMTLIBVERSION
%token SORTS
%token SORTSDESCRIPTION
%token SOURCE
%token STATUTS
%token <string> STRINGLIT
%token <string> SYMBOL
%token THEORIES
%token UNDERSCORE
%token VALUES
%token VERBOSITY
%token VERSION
%type <Smtlib_syntax.attribute_value> attribute_value
%type <Smtlib_syntax.command> command
%type <Smtlib_syntax.commands> commands
%type <Smtlib_syntax.identifier> identifier
%type <Smtlib_syntax.key_info> key_info
%type <Smtlib_syntax.key_option> key_option
%type <Smtlib_syntax.key_term> key_term
%type <Smtlib_syntax.keyword> keyword
%type <Smtlib_syntax.qualidentifier> qualidentifier
%type <Smtlib_syntax.sexpr> sexpr
%type <Smtlib_syntax.sort> sort
%type <Smtlib_syntax.sorted_var> sorted_var
%type <Smtlib_syntax.symbol> symbol
%type <Smtlib_syntax.term> term
%type <Smtlib_syntax.term list * bool> term_list
%type <Smtlib_syntax.varbinding> varbinding
%%

list_fun_defs_:
  
    {    ( [] )}
| x = fun_defs xs = list_fun_defs_
    {    ( x :: xs )}

list_key_term_:
  
    {    ( [] )}
| x = key_term xs = list_key_term_
    {    ( x :: xs )}

list_prop_literal_:
  
    {    ( [] )}
| x = prop_literal xs = list_prop_literal_
    {    ( x :: xs )}

list_selector_dec_:
  
    {    ( [] )}
| x = selector_dec xs = list_selector_dec_
    {    ( x :: xs )}

list_sexpr_:
  
    {    ( [] )}
| x = sexpr xs = list_sexpr_
    {    ( x :: xs )}

list_sort_:
  
    {    ( [] )}
| x = sort xs = list_sort_
    {    ( x :: xs )}

list_sorted_var_:
  
    {    ( [] )}
| x = sorted_var xs = list_sorted_var_
    {    ( x :: xs )}

list_symbol_:
  
    {    ( [] )}
| x = symbol xs = list_symbol_
    {    ( x :: xs )}

list_term_:
  
    {    ( [] )}
| x = term xs = list_term_
    {    ( x :: xs )}

nonempty_list_constructor_dec_:
  x = constructor_dec
    {    ( [ x ] )}
| x = constructor_dec xs = nonempty_list_constructor_dec_
    {    ( x :: xs )}

nonempty_list_datatype_dec_:
  x = datatype_dec
    {    ( [ x ] )}
| x = datatype_dec xs = nonempty_list_datatype_dec_
    {    ( x :: xs )}

nonempty_list_index_:
  x = index
    {    ( [ x ] )}
| x = index xs = nonempty_list_index_
    {    ( x :: xs )}

nonempty_list_match_case_:
  x = match_case
    {    ( [ x ] )}
| x = match_case xs = nonempty_list_match_case_
    {    ( x :: xs )}

nonempty_list_sort_:
  x = sort
    {    ( [ x ] )}
| x = sort xs = nonempty_list_sort_
    {    ( x :: xs )}

nonempty_list_sort_dec_:
  x = sort_dec
    {    ( [ x ] )}
| x = sort_dec xs = nonempty_list_sort_dec_
    {    ( x :: xs )}

nonempty_list_sorted_var_:
  x = sorted_var
    {    ( [ x ] )}
| x = sorted_var xs = nonempty_list_sorted_var_
    {    ( x :: xs )}

nonempty_list_symbol_:
  x = symbol
    {    ( [ x ] )}
| x = symbol xs = nonempty_list_symbol_
    {    ( x :: xs )}

nonempty_list_term_:
  x = term
    {    ( [ x ] )}
| x = term xs = nonempty_list_term_
    {    ( x :: xs )}

nonempty_list_varbinding_:
  x = varbinding
    {    ( [ x ] )}
| x = varbinding xs = nonempty_list_varbinding_
    {    ( x :: xs )}

term_list:
  _1 = list_term_
    {              ( _1,true)}

constant:
  _1 = DECIMAL
    {                  ( Const_Dec _1 )}
| _1 = NUMERAL
    {                  ( Const_Num _1 )}
| _1 = STRINGLIT
    {                  ( Const_Str _1 )}
| _1 = HEXADECIMAL
    {                  ( Const_Hex _1 )}
| _1 = BINARY
    {                  ( Const_Bin _1 )}

symbol:
  _1 = SYMBOL
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               ( mk_data (_startpos,_endpos) (_1) )}
| _1 = ASCIIWOR
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               ( mk_data (_startpos,_endpos) (_1) )}

index:
  _1 = symbol
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               ( mk_data (_startpos,_endpos) (IndexSymbol _1) )}
| _1 = NUMERAL
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               ( mk_data (_startpos,_endpos) (IndexNumeral _1) )}

identifier:
  _1 = symbol
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
             ( mk_data (_startpos,_endpos) (IdSymbol _1) )}
| _1 = LP _2 = UNDERSCORE _3 = symbol _4 = nonempty_list_index_ _5 = RP
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
      ( mk_data (_startpos,_endpos) (IdUnderscoreSymNum(_3, _4)) )}

prop_literal:
  _1 = symbol
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
      ( mk_data (_startpos,_endpos) (PropLit _1) )}
| _1 = LP _2 = symbol _3 = symbol _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
      ( mk_data (_startpos,_endpos)
        (if _2.c <> "not" then raise Error; PropLitNot _3) )}

sort:
  _1 = identifier
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                 ( mk_data (_startpos,_endpos) (SortIdentifier _1) )}
| _1 = LP _2 = identifier _3 = nonempty_list_sort_ _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
      ( mk_data (_startpos,_endpos) (SortIdMulti(_2, _3)) )}

attribute_value:
  _1 = constant
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               ( mk_data (_startpos,_endpos) (AttributeValSpecConst _1) )}
| _1 = symbol
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
             ( mk_data (_startpos,_endpos) (AttributeValSymbol _1) )}
| _1 = LP _2 = list_sexpr_ _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
                        ( mk_data (_startpos,_endpos) (AttributeValSexpr _2) )}

attribute:
  _1 = key_info
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               ( mk_data (_startpos,_endpos) (AttributeKey _1) )}
| _1 = key_info _2 = attribute_value
    {let _endpos = _endpos__2_ in
let _startpos = _startpos__1_ in
        ( mk_data (_startpos,_endpos) (AttributeKeyValue(_1,_2)) )}

sexpr:
  _1 = constant
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               ( mk_data (_startpos,_endpos) (SexprSpecConst _1) )}
| _1 = symbol
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
             ( mk_data (_startpos,_endpos) (SexprSymbol _1) )}
| _1 = keyword
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
              ( mk_data (_startpos,_endpos) (SexprKeyword _1) )}
| _1 = LP _2 = list_sexpr_ _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
                        ( mk_data (_startpos,_endpos) (SexprInParen _2) )}

varbinding:
  _1 = LP _2 = symbol _3 = term _4 = RP
    {                        ( _2,_3 )}

sorted_var:
  _1 = LP _2 = symbol _3 = sort _4 = RP
    {                        ( _2,_3 )}

qualidentifier:
  _1 = identifier
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                 ( mk_data (_startpos,_endpos) (QualIdentifierId _1) )}
| _1 = LP _2 = AS _3 = identifier _4 = sort _5 = RP
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
      ( mk_data (_startpos,_endpos) (QualIdentifierAs(_3, _4)) )}

pattern:
  _1 = symbol
    {             ( _1,[] )}
| _1 = LP _2 = symbol _3 = nonempty_list_symbol_ _4 = RP
    {       ( _2, _3 )}

match_case:
  _1 = LP _2 = pattern _3 = term _4 = RP
    {                         ( (_2,_3) )}

term:
  _1 = constant
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               ( mk_data (_startpos,_endpos) (TermSpecConst _1) )}
| _1 = qualidentifier
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                     ( mk_data (_startpos,_endpos) (TermQualIdentifier _1) )}
| _1 = LP _2 = qualidentifier _3 = nonempty_list_term_ _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
       ( mk_data (_startpos,_endpos) (TermQualIdTerm (_2, _3)) )}
| _1 = LP _2 = LET _3 = LP _4 = nonempty_list_varbinding_ _5 = RP _6 = term _7 = RP
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
       ( mk_data (_startpos,_endpos) (TermLetTerm (_4, _6)) )}
| _1 = LP _2 = LET _3 = LP _4 = RP _5 = term _6 = RP
    {       ( _5 )}
| _1 = LP _2 = FORALL _3 = LP _4 = nonempty_list_sorted_var_ _5 = RP _6 = term _7 = RP
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
       ( mk_data (_startpos,_endpos) (TermForAllTerm (_4, _6)) )}
| _1 = LP _2 = EXISTS _3 = LP _4 = nonempty_list_sorted_var_ _5 = RP _6 = term _7 = RP
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
       ( mk_data (_startpos,_endpos) (TermExistsTerm (_4, _6)) )}
| _1 = LP _2 = MATCH _3 = term _4 = LP _5 = nonempty_list_match_case_ _6 = RP _7 = RP
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
       ( mk_data (_startpos,_endpos) (TermMatch (_3, _5)) )}
| _1 = LP _2 = EXCLIMATIONPT _3 = term _4 = list_key_term_ _5 = RP
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
       ( mk_data (_startpos,_endpos) (TermExclimationPt (_3, _4)) )}

keyword:
  _1 = CATEGORY
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               (mk_data (_startpos,_endpos) Category )}
| _1 = SMTLIBVERSION
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                    (mk_data (_startpos,_endpos) Smtlibversion )}
| _1 = SOURCE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
             (mk_data (_startpos,_endpos) Source )}
| _1 = STATUTS _2 = symbol
    {let _endpos = _endpos__2_ in
let _startpos = _startpos__1_ in
        (Options.set_status _2.c;mk_data (_startpos,_endpos) (Statuts _2) )}
| _1 = LICENSE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
              (mk_data (_startpos,_endpos) License )}
| _1 = NOTES
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
            (mk_data (_startpos,_endpos) Notes )}
| _1 = AXIOMS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
             (mk_data (_startpos,_endpos) Axioms )}
| _1 = DEFINITIO
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                (mk_data (_startpos,_endpos) Definitio )}
| _1 = EXTENSIONS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                 (mk_data (_startpos,_endpos) Extensions )}
| _1 = FUNS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
           (mk_data (_startpos,_endpos) Funs )}
| _1 = FUNSDESCRIPT
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                   (mk_data (_startpos,_endpos) FunsDescript  )}
| _1 = LANGUAGE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               (mk_data (_startpos,_endpos) Language )}
| _1 = SORTS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
            (mk_data (_startpos,_endpos) Sorts )}
| _1 = SORTSDESCRIPTION
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                       (mk_data (_startpos,_endpos) SortsDescr )}
| _1 = THEORIES
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               (mk_data (_startpos,_endpos) Theories )}
| _1 = VALUES
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
             (mk_data (_startpos,_endpos) Values )}

key_option:
  _1 = DIAGNOOUTPUTCHAN
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                       (mk_data (_startpos,_endpos) Diagnooutputchan )}
| _1 = GLOBALDECLARATIONS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                         (mk_data (_startpos,_endpos) Globaldeclarations )}
| _1 = INTERACTIVE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                  (mk_data (_startpos,_endpos) Interactive )}
| _1 = PRINTSUCCESS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                   (mk_data (_startpos,_endpos) Printsucces )}
| _1 = PRODUCEASSERTIONS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                        (mk_data (_startpos,_endpos) Produceassertions )}
| _1 = PRODUCEASSIGNEMENT
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                         (mk_data (_startpos,_endpos) Produceassignement )}
| _1 = PRODUCEMODELS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                    (mk_data (_startpos,_endpos) Producemodels )}
| _1 = PRODUCEPROOFS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                    (mk_data (_startpos,_endpos) Produceproofs )}
| _1 = PRODUCEUNSATASSUMPTIONS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
      (mk_data (_startpos,_endpos) Produceunsatassumptions )}
| _1 = PRODUCEUNSATCORES
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                        (mk_data (_startpos,_endpos) Produceunsatcores )}
| _1 = RANDOMSEED
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                 (mk_data (_startpos,_endpos) Randomseed )}
| _1 = REGULAROUTPUTCHAN
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                        (mk_data (_startpos,_endpos) Regularoutputchan )}
| _1 = VERBOSITY
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                (mk_data (_startpos,_endpos) Verbosity )}
| _1 = RESSOURCELIMIT
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                     (mk_data (_startpos,_endpos) Ressourcelimit )}

psmt2_frontend_0_1_smtlib_parser_option:
  _1 = key_option _2 = index
    {let _endpos = _endpos__2_ in
let _startpos = _startpos__1_ in
                       (mk_data (_startpos,_endpos) (Option_key (_1,_2)) )}
| _1 = attribute
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                (mk_data (_startpos,_endpos) (Option_attribute _1) )}

key_info:
  _1 = ALLSTATS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               (mk_data (_startpos,_endpos) Allstats )}
| _1 = ASSERTIONSTACKLVL
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                        (mk_data (_startpos,_endpos) Assertionstacklvl )}
| _1 = AUTHORS
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
              (mk_data (_startpos,_endpos) Authors )}
| _1 = AUTHOR
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
             (mk_data (_startpos,_endpos) Authors )}
| _1 = DIFFICULTY
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                 (mk_data (_startpos,_endpos) Difficulty )}
| _1 = ERRORBEHAV
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                 (mk_data (_startpos,_endpos) Errorbehav )}
| _1 = INSTANCE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
               (mk_data (_startpos,_endpos) Instance )}
| _1 = NAME
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
           (mk_data (_startpos,_endpos) Name )}
| _1 = REASONUNKNOWN
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                    (mk_data (_startpos,_endpos) Reasonunknown )}
| _1 = SERIES
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
             (mk_data (_startpos,_endpos) Series )}
| _1 = VERSION
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
              (mk_data (_startpos,_endpos) Version )}
| _1 = keyword
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
              (mk_data (_startpos,_endpos) (Key_info _1) )}

key_term:
  _1 = PATTERN _2 = LP _3 = nonempty_list_term_ _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
      ( mk_data (_startpos,_endpos) (Pattern _3) )}
| _1 = NAMED _2 = symbol
    {let _endpos = _endpos__2_ in
let _startpos = _startpos__1_ in
                   ( mk_data (_startpos,_endpos) (Named _2) )}

selector_dec:
  _1 = LP _2 = symbol _3 = sort _4 = RP
    {                        ( (_2,_3) )}

constructor_dec:
  _1 = LP _2 = symbol _3 = list_selector_dec_ _4 = RP
    {                                      ( _2,_3 )}

datatype_dec:
  _1 = LP _2 = nonempty_list_constructor_dec_ _3 = RP
    {        ( [],_2 )}
| _1 = LP _2 = PAR _3 = LP _4 = nonempty_list_symbol_ _5 = RP _6 = LP _7 = nonempty_list_constructor_dec_ _8 = RP _9 = RP
    {        ( _4,_7 )}

sort_dec:
  _1 = LP _2 = symbol _3 = NUMERAL _4 = RP
    {                           ( (_2,_3) )}

const_dec:
  _1 = sort
    {        ( [],_1 )}
| _1 = LP _2 = PAR _3 = LP _4 = nonempty_list_symbol_ _5 = RP _6 = sort _7 = RP
    {        ( _4,_6 )}

fun_dec:
  _1 = LP _2 = list_sort_ _3 = RP _4 = sort
    {        ( [],_2,_4 )}
| _1 = LP _2 = PAR _3 = LP _4 = nonempty_list_symbol_ _5 = RP _6 = LP _7 = list_sort_ _8 = RP _9 = sort _10 = RP
    {        ( (_4,_7,_9) )}

fun_def:
  _1 = symbol _2 = LP _3 = list_sorted_var_ _4 = RP _5 = sort
    {        ( _1,[],_3,_5 )}
| _1 = symbol _2 = LP _3 = PAR _4 = LP _5 = nonempty_list_symbol_ _6 = RP _7 = LP _8 = list_sorted_var_ _9 = RP _10 = sort _11 = RP
    {        ( _1,_5,_8,_10 )}

fun_defs:
  _1 = LP _2 = fun_def _3 = RP
    {                    ( _2 )}

assert_dec:
  _1 = term
    {        ( [],_1 )}
| _1 = LP _2 = PAR _3 = LP _4 = nonempty_list_symbol_ _5 = RP _6 = term _7 = RP
    {        ( _4,_6 )}

command:
  _1 = LP _2 = ASSERT _3 = assert_dec _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_Assert (_3)) )}
| _1 = LP _2 = CHECKSAT _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_CheckSat) )}
| _1 = LP _2 = CHECKSATASSUMING _3 = LP _4 = list_prop_literal_ _5 = RP _6 = RP
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_CheckSatAssum _4) )}
| _1 = LP _2 = CHECKENTAILMENT _3 = assert_dec _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_CheckEntailment _3) )}
| _1 = LP _2 = DECLARECONST _3 = symbol _4 = const_dec _5 = RP
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_DeclareConst (_3,_4)) )}
| _1 = LP _2 = DECLAREDATATYPE _3 = symbol _4 = datatype_dec _5 = RP
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
        ( mk_data (_startpos,_endpos) (Cmd_DeclareDataType (_3,_4)) )}
| _1 = LP _2 = DECLAREDATATYPES _3 = LP _4 = nonempty_list_sort_dec_ _5 = RP _6 = LP _7 = nonempty_list_datatype_dec_ _8 = RP _9 = RP
    {let _endpos = _endpos__9_ in
let _startpos = _startpos__1_ in
        ( mk_data (_startpos,_endpos) (Cmd_DeclareDataTypes (_4,_7)) )}
| _1 = LP _2 = DECLAREFUN _3 = symbol _4 = fun_dec _5 = RP
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_DeclareFun(_3, _4)) )}
| _1 = LP _2 = DECLARESORT _3 = symbol _4 = NUMERAL _5 = RP
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_DeclareSort (_3, _4)) )}
| _1 = LP _2 = DEFINEFUN _3 = fun_def _4 = term _5 = RP
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_DefineFun (_3,_4)) )}
| _1 = LP _2 = DEFINEFUNREC _3 = fun_def _4 = term _5 = RP
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_DefineFunRec (_3,_4)) )}
| _1 = LP _2 = DEFINEFUNSREC _3 = LP _4 = list_fun_defs_ _5 = RP _6 = LP _7 = nonempty_list_term_ _8 = RP _9 = RP
    {let _endpos = _endpos__9_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_DefineFunsRec (_4,_7)) )}
| _1 = LP _2 = DEFINESORT _3 = symbol _4 = LP _5 = list_symbol_ _6 = RP _7 = sort _8 = RP
    {let _endpos = _endpos__8_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_DefineSort(_3, _5, _7)) )}
| _1 = LP _2 = ECHO _3 = symbol _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_Echo _3) )}
| _1 = LP _2 = EXIT _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_Exit) )}
| _1 = LP _2 = GETASSERT _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_GetAssert) )}
| _1 = LP _2 = GETASSIGN _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_GetAssign) )}
| _1 = LP _2 = GETINFO _3 = key_info _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_GetInfo _3) )}
| _1 = LP _2 = GETMODEL _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_GetModel) )}
| _1 = LP _2 = GETOPTION _3 = keyword _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_GetOption _3) )}
| _1 = LP _2 = GETPROOF _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_GetProof) )}
| _1 = LP _2 = GETUNSATASSUMPTIONS _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_GetUnsatAssumptions) )}
| _1 = LP _2 = GETUNSATCORE _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_GetUnsatCore) )}
| _1 = LP _2 = GETVALUE _3 = LP _4 = nonempty_list_term_ _5 = RP _6 = RP
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_GetValue _4) )}
| _1 = LP _2 = PUSH _3 = NUMERAL _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_Push _3) )}
| _1 = LP _2 = POP _3 = NUMERAL _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_Pop _3) )}
| _1 = LP _2 = RESET _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_Reset) )}
| _1 = LP _2 = RESETASSERTIONS _3 = RP
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_ResetAssert) )}
| _1 = LP _2 = SETINFO _3 = attribute _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_SetInfo _3) )}
| _1 = LP _2 = SETLOGIC _3 = symbol _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (Smtlib_error.set_logic true;
         mk_data (_startpos,_endpos) (Cmd_SetLogic _3) )}
| _1 = LP _2 = SETOPTION _3 = psmt2_frontend_0_1_smtlib_parser_option _4 = RP
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
        (mk_data (_startpos,_endpos) (Cmd_SetOption _3) )}

commands:
  _1 = EOF
    {                       ( [] )}
| _1 = command _2 = commands
    {                       ( _1::_2 )}

%%


Note: the nonterminal symbol option (from psmt2-frontend.0.1-smtlib_parser.mly) is renamed psmt2_frontend_0_1_smtlib_parser_option.
