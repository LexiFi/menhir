State 0:
## Known stack suffix:
##
## LR(1) items:
text' -> . text [ # ]
## Transitions:
-- On Token shift to state 1
-- On Separator shift to state 5
-- On text shift to state 6
-- On declarations shift to state 7
-- On declaration shift to state 75
## Reductions:

State 1:
## Known stack suffix:
## Token
## LR(1) items:
declaration -> Token . Uname [ Token Separator ]
declaration -> Token . Type Uname [ Token Separator ]
## Transitions:
-- On Uname shift to state 2
-- On Type shift to state 3
## Reductions:

State 2:
## Known stack suffix:
## Token Uname
## LR(1) items:
declaration -> Token Uname . [ Token Separator ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> Token Uname

State 3:
## Known stack suffix:
## Token Type
## LR(1) items:
declaration -> Token Type . Uname [ Token Separator ]
## Transitions:
-- On Uname shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## Token Type Uname
## LR(1) items:
declaration -> Token Type Uname . [ Token Separator ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> Token Type Uname

State 5:
## Known stack suffix:
## Separator
## LR(1) items:
declarations -> Separator . [ Separator Lname ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarations -> Separator

State 6:
## Known stack suffix:
## text
## LR(1) items:
text' -> text . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept text

State 7:
## Known stack suffix:
## declarations
## LR(1) items:
text -> declarations . rules [ # ]
## Transitions:
-- On Separator shift to state 8
-- On Lname shift to state 9
-- On rules shift to state 72
-- On rule shift to state 73
## Reductions:

State 8:
## Known stack suffix:
## Separator
## LR(1) items:
rules -> Separator . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production rules -> Separator

State 9:
## Known stack suffix:
## Lname
## LR(1) items:
rule -> Lname . Lparen formal_arguments Colon branches [ Separator Lname ]
## Transitions:
-- On Lparen shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## Lname Lparen
## LR(1) items:
rule -> Lname Lparen . formal_arguments Colon branches [ Separator Lname ]
## Transitions:
-- On Rparen shift to state 11
-- On Lname shift to state 12
-- On formal_arguments shift to state 18
## Reductions:

State 11:
## Known stack suffix:
## Rparen
## LR(1) items:
formal_arguments -> Rparen . [ Colon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_arguments -> Rparen

State 12:
## Known stack suffix:
## Lname
## LR(1) items:
formal_arguments -> Lname . comma_formal_arguments [ Colon ]
## Transitions:
-- On Rparen shift to state 13
-- On Comma shift to state 14
-- On comma_formal_arguments shift to state 17
## Reductions:

State 13:
## Known stack suffix:
## Rparen
## LR(1) items:
comma_formal_arguments -> Rparen . [ Colon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production comma_formal_arguments -> Rparen

State 14:
## Known stack suffix:
## Comma
## LR(1) items:
comma_formal_arguments -> Comma . Lname comma_formal_arguments [ Colon ]
## Transitions:
-- On Lname shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## Comma Lname
## LR(1) items:
comma_formal_arguments -> Comma Lname . comma_formal_arguments [ Colon ]
## Transitions:
-- On Rparen shift to state 13
-- On Comma shift to state 14
-- On comma_formal_arguments shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## Comma Lname comma_formal_arguments
## LR(1) items:
comma_formal_arguments -> Comma Lname comma_formal_arguments . [ Colon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production comma_formal_arguments -> Comma Lname comma_formal_arguments

State 17:
## Known stack suffix:
## Lname comma_formal_arguments
## LR(1) items:
formal_arguments -> Lname comma_formal_arguments . [ Colon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_arguments -> Lname comma_formal_arguments

State 18:
## Known stack suffix:
## Lname Lparen formal_arguments
## LR(1) items:
rule -> Lname Lparen formal_arguments . Colon branches [ Separator Lname ]
## Transitions:
-- On Colon shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## Lname Lparen formal_arguments Colon
## LR(1) items:
rule -> Lname Lparen formal_arguments Colon . branches [ Separator Lname ]
## Transitions:
-- On Uname shift to state 20
-- On Lname shift to state 21
-- On Lbracket shift to state 41
-- On Dollar shift to state 46
-- On symbol shift to state 48
-- On simple_branch shift to state 65
-- On branches shift to state 66
-- On branch shift to state 67
## Reductions:

State 20:
## Known stack suffix:
## Uname
## LR(1) items:
symbol -> Uname . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symbol -> Uname

State 21:
## Known stack suffix:
## Lname
## LR(1) items:
symbol -> Lname . Colon Uname [ Uname Loop_star Lname Lbracket Error Dollar Code ]
symbol -> Lname . Colon Lname Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
symbol -> Lname . Colon Lbracket Lname Rbracket Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
symbol -> Lname . Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Lparen shift to state 22
-- On Colon shift to state 31
## Reductions:

State 22:
## Known stack suffix:
## Lname Lparen
## LR(1) items:
symbol -> Lname Lparen . actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Rparen shift to state 23
-- On Lname shift to state 24
-- On actual_arguments shift to state 30
## Reductions:

State 23:
## Known stack suffix:
## Rparen
## LR(1) items:
actual_arguments -> Rparen . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production actual_arguments -> Rparen

State 24:
## Known stack suffix:
## Lname
## LR(1) items:
actual_arguments -> Lname . comma_actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Rparen shift to state 25
-- On Comma shift to state 26
-- On comma_actual_arguments shift to state 29
## Reductions:

State 25:
## Known stack suffix:
## Rparen
## LR(1) items:
comma_actual_arguments -> Rparen . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production comma_actual_arguments -> Rparen

State 26:
## Known stack suffix:
## Comma
## LR(1) items:
comma_actual_arguments -> Comma . Lname comma_actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Lname shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## Comma Lname
## LR(1) items:
comma_actual_arguments -> Comma Lname . comma_actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Rparen shift to state 25
-- On Comma shift to state 26
-- On comma_actual_arguments shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## Comma Lname comma_actual_arguments
## LR(1) items:
comma_actual_arguments -> Comma Lname comma_actual_arguments . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production comma_actual_arguments -> Comma Lname comma_actual_arguments

State 29:
## Known stack suffix:
## Lname comma_actual_arguments
## LR(1) items:
actual_arguments -> Lname comma_actual_arguments . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production actual_arguments -> Lname comma_actual_arguments

State 30:
## Known stack suffix:
## Lname Lparen actual_arguments
## LR(1) items:
symbol -> Lname Lparen actual_arguments . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symbol -> Lname Lparen actual_arguments

State 31:
## Known stack suffix:
## Lname Colon
## LR(1) items:
symbol -> Lname Colon . Uname [ Uname Loop_star Lname Lbracket Error Dollar Code ]
symbol -> Lname Colon . Lname Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
symbol -> Lname Colon . Lbracket Lname Rbracket Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Uname shift to state 32
-- On Lname shift to state 33
-- On Lbracket shift to state 36
## Reductions:

State 32:
## Known stack suffix:
## Lname Colon Uname
## LR(1) items:
symbol -> Lname Colon Uname . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symbol -> Lname Colon Uname

State 33:
## Known stack suffix:
## Lname Colon Lname
## LR(1) items:
symbol -> Lname Colon Lname . Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Lparen shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## Lname Colon Lname Lparen
## LR(1) items:
symbol -> Lname Colon Lname Lparen . actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Rparen shift to state 23
-- On Lname shift to state 24
-- On actual_arguments shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## Lname Colon Lname Lparen actual_arguments
## LR(1) items:
symbol -> Lname Colon Lname Lparen actual_arguments . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symbol -> Lname Colon Lname Lparen actual_arguments

State 36:
## Known stack suffix:
## Lname Colon Lbracket
## LR(1) items:
symbol -> Lname Colon Lbracket . Lname Rbracket Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Lname shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## Lname Colon Lbracket Lname
## LR(1) items:
symbol -> Lname Colon Lbracket Lname . Rbracket Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Rbracket shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## Lname Colon Lbracket Lname Rbracket
## LR(1) items:
symbol -> Lname Colon Lbracket Lname Rbracket . Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Lparen shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## Lname Colon Lbracket Lname Rbracket Lparen
## LR(1) items:
symbol -> Lname Colon Lbracket Lname Rbracket Lparen . actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Rparen shift to state 23
-- On Lname shift to state 24
-- On actual_arguments shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## Lname Colon Lbracket Lname Rbracket Lparen actual_arguments
## LR(1) items:
symbol -> Lname Colon Lbracket Lname Rbracket Lparen actual_arguments . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symbol -> Lname Colon Lbracket Lname Rbracket Lparen actual_arguments

State 41:
## Known stack suffix:
## Lbracket
## LR(1) items:
symbol -> Lbracket . Lname Rbracket Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Lname shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## Lbracket Lname
## LR(1) items:
symbol -> Lbracket Lname . Rbracket Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Rbracket shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## Lbracket Lname Rbracket
## LR(1) items:
symbol -> Lbracket Lname Rbracket . Lparen actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Lparen shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## Lbracket Lname Rbracket Lparen
## LR(1) items:
symbol -> Lbracket Lname Rbracket Lparen . actual_arguments [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
-- On Rparen shift to state 23
-- On Lname shift to state 24
-- On actual_arguments shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## Lbracket Lname Rbracket Lparen actual_arguments
## LR(1) items:
symbol -> Lbracket Lname Rbracket Lparen actual_arguments . [ Uname Loop_star Lname Lbracket Error Dollar Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symbol -> Lbracket Lname Rbracket Lparen actual_arguments

State 46:
## Known stack suffix:
## Dollar
## LR(1) items:
branch -> Dollar . Code simple_branch [ Separator Lname Alt ]
## Transitions:
-- On Code shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## Dollar Code
## LR(1) items:
branch -> Dollar Code . simple_branch [ Separator Lname Alt ]
## Transitions:
-- On Uname shift to state 20
-- On Lname shift to state 21
-- On Lbracket shift to state 41
-- On symbol shift to state 48
-- On simple_branch shift to state 64
## Reductions:

State 48:
## Known stack suffix:
## symbol
## LR(1) items:
simple_branch -> symbol . Dollar Code patterns Code opt_error_handler [ Separator Lname Alt ]
simple_branch -> symbol . patterns Code opt_error_handler [ Separator Lname Alt ]
## Transitions:
-- On Uname shift to state 20
-- On Lname shift to state 21
-- On Lbracket shift to state 41
-- On Dollar shift to state 49
-- On symbol shift to state 51
-- On patterns shift to state 61
-- On pattern shift to state 59
## Reductions:
-- On Code reduce production patterns ->

State 49:
## Known stack suffix:
## symbol Dollar
## LR(1) items:
simple_branch -> symbol Dollar . Code patterns Code opt_error_handler [ Separator Lname Alt ]
## Transitions:
-- On Code shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## symbol Dollar Code
## LR(1) items:
simple_branch -> symbol Dollar Code . patterns Code opt_error_handler [ Separator Lname Alt ]
## Transitions:
-- On Uname shift to state 20
-- On Lname shift to state 21
-- On Lbracket shift to state 41
-- On symbol shift to state 51
-- On patterns shift to state 54
-- On pattern shift to state 59
## Reductions:
-- On Code reduce production patterns ->

State 51:
## Known stack suffix:
## symbol
## LR(1) items:
pattern -> symbol . Loop_star [ Uname Lname Lbracket Code ]
pattern -> symbol . Error [ Uname Lname Lbracket Code ]
pattern -> symbol . [ Uname Lname Lbracket Code ]
## Transitions:
-- On Loop_star shift to state 52
-- On Error shift to state 53
## Reductions:
-- On Uname reduce production pattern -> symbol
-- On Lname reduce production pattern -> symbol
-- On Lbracket reduce production pattern -> symbol
-- On Code reduce production pattern -> symbol

State 52:
## Known stack suffix:
## symbol Loop_star
## LR(1) items:
pattern -> symbol Loop_star . [ Uname Lname Lbracket Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> symbol Loop_star

State 53:
## Known stack suffix:
## symbol Error
## LR(1) items:
pattern -> symbol Error . [ Uname Lname Lbracket Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> symbol Error

State 54:
## Known stack suffix:
## symbol Dollar Code patterns
## LR(1) items:
simple_branch -> symbol Dollar Code patterns . Code opt_error_handler [ Separator Lname Alt ]
## Transitions:
-- On Code shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## symbol Dollar Code patterns Code
## LR(1) items:
simple_branch -> symbol Dollar Code patterns Code . opt_error_handler [ Separator Lname Alt ]
## Transitions:
-- On Error shift to state 56
-- On opt_error_handler shift to state 58
## Reductions:
-- On Separator reduce production opt_error_handler ->
-- On Lname reduce production opt_error_handler ->
-- On Alt reduce production opt_error_handler ->

State 56:
## Known stack suffix:
## Error
## LR(1) items:
opt_error_handler -> Error . Code [ Separator Lname Alt ]
## Transitions:
-- On Code shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## Error Code
## LR(1) items:
opt_error_handler -> Error Code . [ Separator Lname Alt ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_error_handler -> Error Code

State 58:
## Known stack suffix:
## symbol Dollar Code patterns Code opt_error_handler
## LR(1) items:
simple_branch -> symbol Dollar Code patterns Code opt_error_handler . [ Separator Lname Alt ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_branch -> symbol Dollar Code patterns Code opt_error_handler

State 59:
## Known stack suffix:
## pattern
## LR(1) items:
patterns -> pattern . patterns [ Code ]
## Transitions:
-- On Uname shift to state 20
-- On Lname shift to state 21
-- On Lbracket shift to state 41
-- On symbol shift to state 51
-- On patterns shift to state 60
-- On pattern shift to state 59
## Reductions:
-- On Code reduce production patterns ->

State 60:
## Known stack suffix:
## pattern patterns
## LR(1) items:
patterns -> pattern patterns . [ Code ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patterns -> pattern patterns

State 61:
## Known stack suffix:
## symbol patterns
## LR(1) items:
simple_branch -> symbol patterns . Code opt_error_handler [ Separator Lname Alt ]
## Transitions:
-- On Code shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## symbol patterns Code
## LR(1) items:
simple_branch -> symbol patterns Code . opt_error_handler [ Separator Lname Alt ]
## Transitions:
-- On Error shift to state 56
-- On opt_error_handler shift to state 63
## Reductions:
-- On Separator reduce production opt_error_handler ->
-- On Lname reduce production opt_error_handler ->
-- On Alt reduce production opt_error_handler ->

State 63:
## Known stack suffix:
## symbol patterns Code opt_error_handler
## LR(1) items:
simple_branch -> symbol patterns Code opt_error_handler . [ Separator Lname Alt ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_branch -> symbol patterns Code opt_error_handler

State 64:
## Known stack suffix:
## Dollar Code simple_branch
## LR(1) items:
branch -> Dollar Code simple_branch . [ Separator Lname Alt ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production branch -> Dollar Code simple_branch

State 65:
## Known stack suffix:
## simple_branch
## LR(1) items:
branch -> simple_branch . [ Separator Lname Alt ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production branch -> simple_branch

State 66:
## Known stack suffix:
## Lname Lparen formal_arguments Colon branches
## LR(1) items:
rule -> Lname Lparen formal_arguments Colon branches . [ Separator Lname ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> Lname Lparen formal_arguments Colon branches

State 67:
## Known stack suffix:
## branch
## LR(1) items:
branches -> branch . alt_branches [ Separator Lname ]
## Transitions:
-- On Alt shift to state 68
-- On alt_branches shift to state 71
## Reductions:
-- On Separator reduce production alt_branches ->
-- On Lname reduce production alt_branches ->

State 68:
## Known stack suffix:
## Alt
## LR(1) items:
alt_branches -> Alt . branch alt_branches [ Separator Lname ]
## Transitions:
-- On Uname shift to state 20
-- On Lname shift to state 21
-- On Lbracket shift to state 41
-- On Dollar shift to state 46
-- On symbol shift to state 48
-- On simple_branch shift to state 65
-- On branch shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## Alt branch
## LR(1) items:
alt_branches -> Alt branch . alt_branches [ Separator Lname ]
## Transitions:
-- On Alt shift to state 68
-- On alt_branches shift to state 70
## Reductions:
-- On Separator reduce production alt_branches ->
-- On Lname reduce production alt_branches ->

State 70:
## Known stack suffix:
## Alt branch alt_branches
## LR(1) items:
alt_branches -> Alt branch alt_branches . [ Separator Lname ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alt_branches -> Alt branch alt_branches

State 71:
## Known stack suffix:
## branch alt_branches
## LR(1) items:
branches -> branch alt_branches . [ Separator Lname ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production branches -> branch alt_branches

State 72:
## Known stack suffix:
## declarations rules
## LR(1) items:
text -> declarations rules . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production text -> declarations rules

State 73:
## Known stack suffix:
## rule
## LR(1) items:
rules -> rule . rules [ # ]
## Transitions:
-- On Separator shift to state 8
-- On Lname shift to state 9
-- On rules shift to state 74
-- On rule shift to state 73
## Reductions:

State 74:
## Known stack suffix:
## rule rules
## LR(1) items:
rules -> rule rules . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production rules -> rule rules

State 75:
## Known stack suffix:
## declaration
## LR(1) items:
declarations -> declaration . declarations [ Separator Lname ]
## Transitions:
-- On Token shift to state 1
-- On Separator shift to state 5
-- On declarations shift to state 76
-- On declaration shift to state 75
## Reductions:

State 76:
## Known stack suffix:
## declaration declarations
## LR(1) items:
declarations -> declaration declarations . [ Separator Lname ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarations -> declaration declarations

