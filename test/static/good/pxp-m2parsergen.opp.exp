File "pxp-m2parsergen.mly", line 28, characters 22-25:
Warning: the token Eof is unused.
File "pxp-m2parsergen.mly", line 24, characters 7-16:
Warning: the token Loop_plus is unused.
File "pxp-m2parsergen.mly", line 11, characters 7-12:
Warning: the token Space is unused.
%{
  open Ast

%}
%start text
%token Alt
%token <string * int * int> Code
%token Colon
%token Comma
%token Dollar
%token ERROR
%token Eof
%token Lbracket
%token <string> Lname
%token Loop_plus
%token Loop_star
%token Lparen
%token Rbracket
%token Rparen
%token Separator
%token Space
%token Token
%token Type
%token <string> Uname
%type <Ast.text> text
%%

text:
  _1 = declarations _2 = rules
    {    ( { text_decls = _1; text_rules = _2; } )}

declarations:
  _1 = declaration _2 = declarations
    {    ( _1 :: _2 )}
| _1 = Separator
    {    ( [] )}

declaration:
  _1 = Token _2 = Uname
    {    ( D_token _2 )}
| _1 = Token _2 = Type _3 = Uname
    {    ( D_typed_token _3 )}

rules:
  _1 = rule _2 = rules
    {    ( _1 :: _2 )}
| _1 = Separator
    {    ( [] )}

rule:
  _1 = Lname _2 = Lparen _3 = formal_arguments _4 = Colon _5 = branches
    {    ( { rule_name = _1;
	rule_arguments = _3;
	rule_branches = _5;
      }
    )}

formal_arguments:
  _1 = Rparen
    {    ( [] )}
| _1 = Lname _2 = comma_formal_arguments
    {    ( _1 :: _2 )}

comma_formal_arguments:
  _1 = Comma _2 = Lname _3 = comma_formal_arguments
    {    ( _2 :: _3 )}
| _1 = Rparen
    {    ( [] )}

branches:
  _1 = branch _2 = alt_branches
    {    ( _1 :: _2 )}

alt_branches:
  _1 = Alt _2 = branch _3 = alt_branches
    {    ( _2 :: _3 )}
| 
    {    ( [] )}

branch:
  _1 = simple_branch
    {    ( _1 )}
| _1 = Dollar _2 = Code _3 = simple_branch
    {    ( { _3 with branch_early_code = _2 } )}

simple_branch:
  _1 = symbol _2 = Dollar _3 = Code _4 = patterns _5 = Code _6 = opt_error_handler
    {    ( { branch_selector = _1;
        branch_early_code = ("",0,0);
	branch_binding_code = _3;
	branch_pattern = _4;
	branch_result_code = _5;
	branch_error_code = _6;
      }
    )}
| _1 = symbol _2 = patterns _3 = Code _4 = opt_error_handler
    {    ( { branch_selector = _1;
        branch_early_code = ("",0,0);
	branch_binding_code = ("", 0, 0);
	branch_pattern = _2;
	branch_result_code = _3;
	branch_error_code = _4;
      }
    )}

patterns:
  _1 = pattern _2 = patterns
    {    ( _1 :: _2 )}
| 
    {    ( [] )}

pattern:
  _1 = symbol _2 = Loop_star
    {    ( { pat_symbol = _1;
	pat_modifier = Repetition;
      }
    )}
| _1 = symbol _2 = ERROR
    {    ( { pat_symbol = _1;
	pat_modifier = Option;
      }
    )}
| _1 = symbol
    {    ( { pat_symbol = _1;
	pat_modifier = Exact;
      }
    )}

symbol:
  _1 = Lname _2 = Colon _3 = Uname
    {    ( U_symbol(_3, Some _1) )}
| _1 = Lname _2 = Colon _3 = Lname _4 = Lparen _5 = actual_arguments
    {    ( L_symbol(_3, _5, Some _1) )}
| _1 = Lname _2 = Colon _3 = Lbracket _4 = Lname _5 = Rbracket _6 = Lparen _7 = actual_arguments
    {    ( L_indirect(_4, _7, Some _1) )}
| _1 = Uname
    {    ( U_symbol(_1, None) )}
| _1 = Lname _2 = Lparen _3 = actual_arguments
    {    ( L_symbol(_1, _3, None) )}
| _1 = Lbracket _2 = Lname _3 = Rbracket _4 = Lparen _5 = actual_arguments
    {    ( L_indirect(_2, _5, None) )}

actual_arguments:
  _1 = Rparen
    {    ( [] )}
| _1 = Lname _2 = comma_actual_arguments
    {    ( _1 :: _2 )}

comma_actual_arguments:
  _1 = Rparen
    {    ( [] )}
| _1 = Comma _2 = Lname _3 = comma_actual_arguments
    {    ( _2 :: _3 )}

opt_error_handler:
  _1 = ERROR _2 = Code
    {    ( Some _2 )}
| 
    {    ( None )}

%%


(* ======================================================================
 * History:
 *
 * $Log: parser.mly,v $
 * Revision 1.4  2000/05/09 00:03:22  gerd
 * 	Added [ ml_name ] symbols, where ml_name is an arbitrary
 * OCaml identifier.
 *
 * Revision 1.3  2000/05/08 22:03:01  gerd
 * 	It is now possible to have a $ {{ }} sequence right BEFORE
 * the first token. This code is executed just after the first token
 * has been recognized.
 *
 * Revision 1.2  2000/05/06 21:51:46  gerd
 * 	New Dollar tag.
 *
 * Revision 1.1  2000/05/06 17:36:17  gerd
 * 	Initial revision.
 *
 *
 *)

