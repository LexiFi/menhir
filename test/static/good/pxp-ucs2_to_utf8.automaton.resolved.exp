State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On LET shift to state 1
-- On EOF shift to state 16
-- On main shift to state 17
-- On declaration shift to state 18
## Reductions:

State 1:
## Known stack suffix:
## LET
## LR(1) items:
declaration -> LET . IDENT EQ regexp END_OF_LET [ LET EOF ]
## Transitions:
-- On IDENT shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## LET IDENT
## LR(1) items:
declaration -> LET IDENT . EQ regexp END_OF_LET [ LET EOF ]
## Transitions:
-- On EQ shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## LET IDENT EQ
## LR(1) items:
declaration -> LET IDENT EQ . regexp END_OF_LET [ LET EOF ]
## Transitions:
-- On LBRACKET shift to state 4
-- On IDENT shift to state 9
-- On CHAR shift to state 10
-- On regexptoken shift to state 11
-- On regexp shift to state 14
## Reductions:

State 4:
## Known stack suffix:
## LBRACKET
## LR(1) items:
regexptoken -> LBRACKET . CHAR RANGE CHAR RBRACKET [ PIPE END_OF_LET ]
## Transitions:
-- On CHAR shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## LBRACKET CHAR
## LR(1) items:
regexptoken -> LBRACKET CHAR . RANGE CHAR RBRACKET [ PIPE END_OF_LET ]
## Transitions:
-- On RANGE shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## LBRACKET CHAR RANGE
## LR(1) items:
regexptoken -> LBRACKET CHAR RANGE . CHAR RBRACKET [ PIPE END_OF_LET ]
## Transitions:
-- On CHAR shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## LBRACKET CHAR RANGE CHAR
## LR(1) items:
regexptoken -> LBRACKET CHAR RANGE CHAR . RBRACKET [ PIPE END_OF_LET ]
## Transitions:
-- On RBRACKET shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## LBRACKET CHAR RANGE CHAR RBRACKET
## LR(1) items:
regexptoken -> LBRACKET CHAR RANGE CHAR RBRACKET . [ PIPE END_OF_LET ]
## Transitions:
## Reductions:
-- On PIPE reduce production regexptoken -> LBRACKET CHAR RANGE CHAR RBRACKET
-- On END_OF_LET reduce production regexptoken -> LBRACKET CHAR RANGE CHAR RBRACKET

State 9:
## Known stack suffix:
## IDENT
## LR(1) items:
regexptoken -> IDENT . [ PIPE END_OF_LET ]
## Transitions:
## Reductions:
-- On PIPE reduce production regexptoken -> IDENT
-- On END_OF_LET reduce production regexptoken -> IDENT

State 10:
## Known stack suffix:
## CHAR
## LR(1) items:
regexptoken -> CHAR . [ PIPE END_OF_LET ]
## Transitions:
## Reductions:
-- On PIPE reduce production regexptoken -> CHAR
-- On END_OF_LET reduce production regexptoken -> CHAR

State 11:
## Known stack suffix:
## regexptoken
## LR(1) items:
regexp -> regexptoken . PIPE regexp [ END_OF_LET ]
regexp -> regexptoken . [ END_OF_LET ]
## Transitions:
-- On PIPE shift to state 12
## Reductions:
-- On END_OF_LET reduce production regexp -> regexptoken

State 12:
## Known stack suffix:
## regexptoken PIPE
## LR(1) items:
regexp -> regexptoken PIPE . regexp [ END_OF_LET ]
## Transitions:
-- On LBRACKET shift to state 4
-- On IDENT shift to state 9
-- On CHAR shift to state 10
-- On regexptoken shift to state 11
-- On regexp shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## regexptoken PIPE regexp
## LR(1) items:
regexp -> regexptoken PIPE regexp . [ END_OF_LET ]
## Transitions:
## Reductions:
-- On END_OF_LET reduce production regexp -> regexptoken PIPE regexp

State 14:
## Known stack suffix:
## LET IDENT EQ regexp
## LR(1) items:
declaration -> LET IDENT EQ regexp . END_OF_LET [ LET EOF ]
## Transitions:
-- On END_OF_LET shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## LET IDENT EQ regexp END_OF_LET
## LR(1) items:
declaration -> LET IDENT EQ regexp END_OF_LET . [ LET EOF ]
## Transitions:
## Reductions:
-- On LET reduce production declaration -> LET IDENT EQ regexp END_OF_LET
-- On EOF reduce production declaration -> LET IDENT EQ regexp END_OF_LET

State 16:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> EOF

State 17:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

State 18:
## Known stack suffix:
## declaration
## LR(1) items:
main -> declaration . main [ # ]
## Transitions:
-- On LET shift to state 1
-- On EOF shift to state 16
-- On main shift to state 19
-- On declaration shift to state 18
## Reductions:

State 19:
## Known stack suffix:
## declaration main
## LR(1) items:
main -> declaration main . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> declaration main

