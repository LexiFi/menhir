File "reason.3.3.7-reason_parser.mly", line 1222, characters 29-36:
Warning: the token COMMENT is unused.
File "reason.3.3.7-reason_parser.mly", line 1225, characters 7-10:
Warning: the token EOL is unused.
File "reason.3.3.7-reason_parser.mly", line 1179, characters 19-28:
Warning: the token NATIVEINT is unused.
File "reason.3.3.7-reason_parser.mly", line 1201, characters 7-15:
Warning: the token SEMISEMI is unused.
Grammar has 294 nonterminal symbols, among which 7 start symbols.
Grammar has 125 terminal symbols.
Grammar has 1215 productions.
nullable(with_constraint) = false
nullable(virtual_flag) = true
nullable(value_type) = false
nullable(value) = false
nullable(val_longident) = false
nullable(val_ident) = false
nullable(use_file_no_mapper) = false
nullable(use_file) = false
nullable(unattributed_expr) = false
nullable(unattributed_core_type) = false
nullable(type_variance) = true
nullable(type_variables_with_variance_comma_list) = false
nullable(type_variables_with_variance) = true
nullable(type_variable_with_variance) = false
nullable(type_variable) = false
nullable(type_parameters) = false
nullable(type_parameter) = false
nullable(type_other_kind) = true
nullable(type_longident) = false
nullable(type_declarations) = false
nullable(type_declaration_kind) = true
nullable(type_declaration_details) = false
nullable(type_constraint) = false
nullable(toplevel_phrase) = false
nullable(toplevel_directive) = false
nullable(tag_field) = false
nullable(subtractive) = false
nullable(structure_item) = false
nullable(structure) = true
nullable(string_literal_labels) = false
nullable(string_literal_label) = false
nullable(string_literal_exprs_maybe_punned) = false
nullable(string_literal_expr_maybe_punned_with_comma) = false
nullable(string_literal_expr_maybe_punned) = false
nullable(str_type_extension) = false
nullable(str_exception_declaration) = false
nullable(single_attr_id) = false
nullable(simple_pattern_not_ident) = false
nullable(simple_pattern_ident) = false
nullable(simple_pattern_direct_argument) = false
nullable(simple_pattern) = false
nullable(simple_module_type) = false
nullable(simple_expr_template_constructor) = false
nullable(simple_expr_no_constructor) = false
nullable(simple_expr_no_call) = false
nullable(simple_expr_direct_argument) = false
nullable(simple_expr_call) = false
nullable(signed_constant) = false
nullable(signature_items) = false
nullable(signature_item) = false
nullable(signature) = true
nullable(sig_type_extension) = false
nullable(sig_exception_declaration) = false
nullable(seq_expr_no_seq) = false
nullable(seq_expr) = false
nullable(separated_nonempty_list(AMPERSAND,non_arrowed_simple_core_types)) = false
nullable(row_field_list) = false
nullable(row_field) = false
nullable(record_label_declaration) = false
nullable(record_expr_with_string_keys) = false
nullable(record_expr) = false
nullable(record_declaration) = false
nullable(rec_flag) = true
nullable(protected_type) = false
nullable(primitive_declaration) = false
nullable(poly_type) = false
nullable(payload) = true
nullable(pattern_without_or) = false
nullable(pattern_optional_constraint) = false
nullable(pattern_constructor_argument) = false
nullable(pattern_comma_list_extension) = false
nullable(pattern) = false
nullable(parse_pattern) = false
nullable(parse_expression) = false
nullable(parse_core_type) = false
nullable(parenthesized_expr) = false
nullable(package_type) = false
nullable(override_flag) = true
nullable(optional_expr_extension) = true
nullable(optional) = true
nullable(option(type_constraint)) = true
nullable(option(preceded(WHEN,expr))) = true
nullable(option(preceded(COLONGREATER,core_type))) = true
nullable(option(preceded(COLON,simple_module_type))) = true
nullable(option(preceded(COLON,poly_type))) = true
nullable(option(preceded(COLON,non_arrowed_core_type))) = true
nullable(option(preceded(COLON,expr))) = true
nullable(option(preceded(COLON,core_type))) = true
nullable(option(preceded(COLON,class_constructor_type))) = true
nullable(option(preceded(AS,LIDENT))) = true
nullable(option(item_extension_sugar)) = true
nullable(option(constructor_arguments)) = true
nullable(option(SEMI)) = true
nullable(option(OF)) = true
nullable(option(MODULE)) = true
nullable(option(LET)) = true
nullable(option(DOTDOTDOT)) = true
nullable(option(DOT)) = true
nullable(option(COMMA)) = true
nullable(opt_LET_MODULE_ident) = false
nullable(opt_LET_MODULE_REC_ident) = false
nullable(opt_LET_MODULE) = false
nullable(operator) = false
nullable(open_statement) = false
nullable(object_record_type) = false
nullable(object_label_declarations) = false
nullable(object_label_declaration) = false
nullable(object_body_class_fields) = true
nullable(object_body) = true
nullable(nonrec_flag) = true
nullable(nonempty_list(preceded(QUOTE,ident))) = false
nullable(nonempty_list(preceded(CONSTRAINT,constrain))) = false
nullable(nonempty_list(name_tag)) = false
nullable(nonempty_list(attributed_ext_constructor(extension_constructor_declaration))) = false
nullable(nonempty_list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = false
nullable(nonempty_list(as_loc(attribute))) = false
nullable(nonempty_list(__anonymous_31)) = false
nullable(nonempty_list(LIDENT)) = false
nullable(non_labeled_argument_list) = false
nullable(non_arrowed_simple_core_types) = false
nullable(non_arrowed_simple_core_type) = false
nullable(non_arrowed_core_type) = false
nullable(mutable_or_virtual_flags) = true
nullable(mutable_flag) = true
nullable(mty_longident) = false
nullable(module_type_signature) = false
nullable(module_type_body(EQUAL)) = false
nullable(module_type_body(COLON)) = false
nullable(module_type) = false
nullable(module_parameter) = false
nullable(module_expr_structure) = false
nullable(module_expr_body) = false
nullable(module_expr) = false
nullable(module_declaration) = false
nullable(module_complex_expr) = false
nullable(module_binding_body) = false
nullable(module_arguments_comma_list) = true
nullable(module_arguments) = false
nullable(mod_longident) = false
nullable(mod_ext_longident) = false
nullable(mod_ext_apply) = false
nullable(method_) = false
nullable(match_case(seq_expr)) = false
nullable(match_case(expr)) = false
nullable(lseparated_nonempty_list_aux(SEMI,class_sig_field)) = false
nullable(lseparated_nonempty_list_aux(SEMI,class_field)) = false
nullable(lseparated_nonempty_list_aux(COMMA,uncurried_labeled_expr)) = false
nullable(lseparated_nonempty_list_aux(COMMA,uncurried_arrow_type_parameter)) = false
nullable(lseparated_nonempty_list_aux(COMMA,type_variable_with_variance)) = false
nullable(lseparated_nonempty_list_aux(COMMA,type_parameter)) = false
nullable(lseparated_nonempty_list_aux(COMMA,string_literal_label)) = false
nullable(lseparated_nonempty_list_aux(COMMA,string_literal_expr_maybe_punned)) = false
nullable(lseparated_nonempty_list_aux(COMMA,record_label_declaration)) = false
nullable(lseparated_nonempty_list_aux(COMMA,protected_type)) = false
nullable(lseparated_nonempty_list_aux(COMMA,pattern_optional_constraint)) = false
nullable(lseparated_nonempty_list_aux(COMMA,opt_spread(pattern))) = false
nullable(lseparated_nonempty_list_aux(COMMA,opt_spread(lbl_expr))) = false
nullable(lseparated_nonempty_list_aux(COMMA,opt_spread(expr_optional_constraint))) = false
nullable(lseparated_nonempty_list_aux(COMMA,object_label_declaration)) = false
nullable(lseparated_nonempty_list_aux(COMMA,module_parameter)) = false
nullable(lseparated_nonempty_list_aux(COMMA,module_complex_expr)) = false
nullable(lseparated_nonempty_list_aux(COMMA,mod_ext_longident)) = false
nullable(lseparated_nonempty_list_aux(COMMA,labeled_pattern)) = false
nullable(lseparated_nonempty_list_aux(COMMA,field_expr)) = false
nullable(lseparated_nonempty_list_aux(COMMA,expr_optional_constraint)) = false
nullable(lseparated_nonempty_list_aux(COMMA,expr)) = false
nullable(lseparated_nonempty_list_aux(COMMA,core_type)) = false
nullable(lseparated_nonempty_list_aux(AND,with_constraint)) = false
nullable(loption(type_parameters)) = true
nullable(loption(terminated(pattern_comma_list,option(COMMA)))) = true
nullable(loption(row_field_list)) = true
nullable(loption(preceded(GREATER,nonempty_list(name_tag)))) = true
nullable(loption(parenthesized(type_variables_with_variance_comma_list))) = true
nullable(loption(parenthesized(class_type_arguments_comma_list))) = true
nullable(loption(object_label_declarations)) = true
nullable(loption(located_attributes)) = true
nullable(loption(functor_parameters)) = true
nullable(loption(class_type_parameters)) = true
nullable(longident_type_constraint) = false
nullable(llist_aux(preceded(COMMA,opt_spread(lbl_expr)))) = true
nullable(llist_aux(match_case(seq_expr))) = true
nullable(llist_aux(match_case(expr))) = true
nullable(list(simple_expr_no_call)) = true
nullable(list(bar_row_field)) = true
nullable(list(attributed_ext_constructor(extension_constructor_declaration))) = true
nullable(list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = true
nullable(list(and_module_rec_declaration)) = true
nullable(list(and_module_bindings)) = true
nullable(list(and_let_binding)) = true
nullable(list(and_class_type_declaration)) = true
nullable(list(and_class_description)) = true
nullable(list(and_class_declaration)) = true
nullable(let_bindings) = false
nullable(let_binding_body) = false
nullable(let_binding) = false
nullable(lbl_pattern) = false
nullable(labelled_arrow_type_parameter_optional) = false
nullable(labeled_pattern_constraint) = true
nullable(labeled_pattern) = false
nullable(labeled_expr_constraint) = false
nullable(labeled_expr) = false
nullable(labeled_arguments) = false
nullable(label_longident) = false
nullable(jsx_without_leading_less) = false
nullable(jsx_start_tag_and_args_without_leading_less) = false
nullable(jsx_start_tag_and_args) = false
nullable(jsx_arguments) = true
nullable(jsx) = false
nullable(item_extension_sugar) = false
nullable(item_extension) = false
nullable(interface) = false
nullable(implementation) = false
nullable(ident) = false
nullable(greater_spread) = false
nullable(generalized_constructor_arguments) = true
nullable(functor_parameters) = false
nullable(fun_def(EQUALGREATER,non_arrowed_core_type)) = false
nullable(fun_def(EQUAL,core_type)) = false
nullable(field_expr) = false
nullable(extension_constructor_rebind) = false
nullable(extension_constructor_declaration) = false
nullable(extension) = false
nullable(expr_optional_constraint) = false
nullable(expr_list) = false
nullable(expr_comma_seq_extension) = false
nullable(expr) = false
nullable(es6_parameters) = false
nullable(embedded(private_flag)) = true
nullable(embedded(__anonymous_38)) = true
nullable(embedded(__anonymous_32)) = false
nullable(embedded(__anonymous_1)) = false
nullable(embedded(__anonymous_0)) = false
nullable(either(preceded(EQUALGREATER,expr),braced_expr)) = false
nullable(either(preceded(EQUAL,expr),braced_expr)) = false
nullable(either(preceded(EQUAL,class_instance_type),class_type_body)) = false
nullable(either(preceded(EQUAL,class_expr),class_body_expr)) = false
nullable(either(parenthesized(longident_type_constraint),longident_type_constraint)) = false
nullable(either(extension_constructor_declaration,extension_constructor_rebind)) = false
nullable(either(constructor_declaration,bar_constructor_declaration)) = false
nullable(either(__anonymous_12,__anonymous_13)) = false
nullable(either(ES6_FUN,FUN)) = false
nullable(direction_flag) = false
nullable(core_type2) = false
nullable(core_type) = false
nullable(constructor_declarations_aux) = true
nullable(constructor_declarations) = false
nullable(constructor_declaration) = false
nullable(constructor_arguments_comma_list) = false
nullable(constructor_arguments) = false
nullable(constrain_field) = false
nullable(constrain) = false
nullable(constr_longident) = false
nullable(constant) = false
nullable(clty_longident) = false
nullable(class_type_declarations) = false
nullable(class_type_declaration_details) = false
nullable(class_type_body) = false
nullable(class_type_arguments_comma_list) = false
nullable(class_simple_expr) = false
nullable(class_sig_field) = false
nullable(class_sig_body_fields) = true
nullable(class_sig_body) = true
nullable(class_self_type) = false
nullable(class_self_expr) = false
nullable(class_longident) = false
nullable(class_instance_type) = false
nullable(class_field) = false
nullable(class_expr_lets_and_rest) = true
nullable(class_expr) = false
nullable(class_descriptions) = false
nullable(class_description_details) = false
nullable(class_declaration_details) = false
nullable(class_declaration_body) = false
nullable(class_constructor_type) = false
nullable(braced_expr) = false
nullable(boption(AMPERSAND)) = true
nullable(basic_core_type) = false
nullable(bar_row_field) = false
nullable(bar_constructor_declaration) = false
nullable(attributed_ext_constructors(extension_constructor_declaration)) = false
nullable(attributed_ext_constructors(either(extension_constructor_declaration,extension_constructor_rebind))) = false
nullable(attribute) = false
nullable(attr_id) = false
nullable(arrowed_simple_core_type) = false
nullable(arrow_type_parameters) = false
nullable(arrow_type_parameter) = false
nullable(and_type_declaration) = true
nullable(and_module_rec_declaration) = false
nullable(and_module_bindings) = false
nullable(and_class_type_declaration) = false
nullable(and_class_description) = false
nullable(and_class_declaration) = false
nullable(additive) = false
nullable(_lbl_pattern_list) = false
first(with_constraint) = TYPE MODULE
first(virtual_flag) = VIRTUAL
first(value_type) = VIRTUAL MUTABLE LIDENT
first(value) = VIRTUAL MUTABLE LIDENT BANG
first(val_longident) = UIDENT LPAREN LIDENT
first(val_ident) = LPAREN LIDENT
first(use_file_no_mapper) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN EOF DOCSTRING CLASS CHAR BANG BACKQUOTE ASSERT
first(use_file) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN EOF DOCSTRING CLASS CHAR BANG BACKQUOTE ASSERT
first(unattributed_expr) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN CHAR BANG BACKQUOTE ASSERT
first(unattributed_core_type) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE ES6_FUN
first(type_variance) = PLUS MINUS
first(type_variables_with_variance_comma_list) = UNDERSCORE QUOTE PLUS MINUS
first(type_variables_with_variance) = LPAREN
first(type_variable_with_variance) = UNDERSCORE QUOTE PLUS MINUS
first(type_variable) = QUOTE
first(type_parameters) = LPAREN
first(type_parameter) = QUOTE PLUS MINUS
first(type_other_kind) = EQUAL
first(type_longident) = UIDENT LIDENT
first(type_declarations) = TYPE LBRACKETAT DOCSTRING
first(type_declaration_kind) = LBRACKETAT EQUAL DOCSTRING CONSTRAINT AND
first(type_declaration_details) = UIDENT LIDENT
first(type_constraint) = COLONGREATER COLON
first(toplevel_phrase) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN EOF DOCSTRING CLASS CHAR BANG BACKQUOTE ASSERT
first(toplevel_directive) = SHARP
first(tag_field) = LBRACKETAT DOCSTRING BACKQUOTE
first(subtractive) = MINUSDOT MINUS
first(structure_item) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN DOCSTRING CLASS CHAR BANG BACKQUOTE ASSERT
first(structure) = error WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN DOCSTRING CLASS CHAR BANG BACKQUOTE ASSERT
first(string_literal_labels) = STRING LBRACKETAT DOCSTRING
first(string_literal_label) = STRING LBRACKETAT DOCSTRING
first(string_literal_exprs_maybe_punned) = STRING
first(string_literal_expr_maybe_punned_with_comma) = STRING
first(string_literal_expr_maybe_punned) = STRING
first(str_type_extension) = TYPE LBRACKETAT DOCSTRING
first(str_exception_declaration) = LBRACKETAT EXCEPTION DOCSTRING
first(single_attr_id) = WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN SWITCH STRUCT SIG REC PRI OR OPEN OF OBJECT NONREC NEW MUTABLE MODULE LIDENT LET LAZY INITIALIZER INHERIT INCLUDE IN IF FUNCTOR FUNCTION FUN FOR FALSE EXTERNAL EXCEPTION END ELSE DOWNTO DONE DO CONSTRAINT CLASS BEGIN ASSERT AS AND
first(simple_pattern_not_ident) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(simple_pattern_ident) = LPAREN LIDENT
first(simple_pattern_direct_argument) = UIDENT TRUE LPAREN LBRACKETBAR LBRACKET LBRACE FALSE
first(simple_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(simple_module_type) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE
first(simple_expr_template_constructor) = UIDENT TRUE LPAREN LBRACKET FALSE BACKQUOTE
first(simple_expr_no_constructor) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(simple_expr_no_call) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(simple_expr_direct_argument) = LPAREN LBRACKETLESS LBRACELESS LBRACE
first(simple_expr_call) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(signed_constant) = STRING PLUS MINUS INT FLOAT CHAR
first(signature_items) = TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETAT INCLUDE EXTERNAL EXCEPTION DOCSTRING CLASS
first(signature_item) = TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETAT INCLUDE EXTERNAL EXCEPTION DOCSTRING CLASS
first(signature) = TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETAT INCLUDE EXTERNAL EXCEPTION DOCSTRING CLASS
first(sig_type_extension) = TYPE LBRACKETAT DOCSTRING
first(sig_exception_declaration) = LBRACKETAT EXCEPTION DOCSTRING
first(seq_expr_no_seq) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE EXCEPTION ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(seq_expr) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE EXCEPTION ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(separated_nonempty_list(AMPERSAND,non_arrowed_simple_core_types)) = LPAREN
first(row_field_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE DOCSTRING BAR BACKQUOTE
first(row_field) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE DOCSTRING BACKQUOTE
first(record_label_declaration) = MUTABLE LIDENT LBRACKETAT DOCSTRING
first(record_expr_with_string_keys) = STRING DOTDOTDOT
first(record_expr) = UIDENT LIDENT DOTDOTDOT
first(record_declaration) = LBRACE
first(rec_flag) = REC
first(protected_type) = UNDERSCORE UIDENT TILDE SHARP QUOTE MODULE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(primitive_declaration) = STRING
first(poly_type) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(payload) = error WHILE UIDENT TYPE TRY TRUE SWITCH STRING QUESTION PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN DOCSTRING COLON CLASS CHAR BANG BACKQUOTE ASSERT
first(pattern_without_or) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
first(pattern_optional_constraint) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MODULE MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
first(pattern_constructor_argument) = UIDENT TRUE LPAREN LBRACKETBAR LBRACKET LBRACE FALSE
first(pattern_comma_list_extension) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOTDOTDOT DOCSTRING CHAR BACKQUOTE
first(pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
first(parse_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
first(parse_expression) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(parse_core_type) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(parenthesized_expr) = LPAREN LBRACE
first(package_type) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACKETAT LBRACE DOCSTRING
first(override_flag) = BANG
first(optional_expr_extension) = PERCENT
first(optional) = QUESTION
first(option(type_constraint)) = COLONGREATER COLON
first(option(preceded(WHEN,expr))) = WHEN
first(option(preceded(COLONGREATER,core_type))) = COLONGREATER
first(option(preceded(COLON,simple_module_type))) = COLON
first(option(preceded(COLON,poly_type))) = COLON
first(option(preceded(COLON,non_arrowed_core_type))) = COLON
first(option(preceded(COLON,expr))) = COLON
first(option(preceded(COLON,core_type))) = COLON
first(option(preceded(COLON,class_constructor_type))) = COLON
first(option(preceded(AS,LIDENT))) = AS
first(option(item_extension_sugar)) = PERCENT
first(option(constructor_arguments)) = LPAREN LBRACE
first(option(SEMI)) = SEMI
first(option(OF)) = OF
first(option(MODULE)) = MODULE
first(option(LET)) = LET
first(option(DOTDOTDOT)) = DOTDOTDOT
first(option(DOT)) = DOT
first(option(COMMA)) = COMMA
first(opt_LET_MODULE_ident) = MODULE LET
first(opt_LET_MODULE_REC_ident) = MODULE LET
first(opt_LET_MODULE) = MODULE LET
first(operator) = STAR SLASHGREATER PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERDOTDOTDOT GREATER COLONEQUAL BARBAR BANG AMPERSAND AMPERAMPER
first(open_statement) = OPEN LBRACKETAT DOCSTRING
first(object_record_type) = LBRACE
first(object_label_declarations) = LIDENT LBRACKETAT DOCSTRING
first(object_label_declaration) = LIDENT LBRACKETAT DOCSTRING
first(object_body_class_fields) = VAL SEMI PUB PRI LBRACKETPERCENTPERCENT LBRACKETAT INITIALIZER INHERIT DOCSTRING CONSTRAINT
first(object_body) = VAL SEMI PUB PRI LBRACKETPERCENTPERCENT LBRACKETAT INITIALIZER INHERIT DOCSTRING CONSTRAINT AS
first(nonrec_flag) = NONREC
first(nonempty_list(preceded(QUOTE,ident))) = QUOTE
first(nonempty_list(preceded(CONSTRAINT,constrain))) = CONSTRAINT
first(nonempty_list(name_tag)) = BACKQUOTE
first(nonempty_list(attributed_ext_constructor(extension_constructor_declaration))) = LBRACKETAT DOCSTRING BAR
first(nonempty_list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = LBRACKETAT DOCSTRING BAR
first(nonempty_list(as_loc(attribute))) = LBRACKETAT DOCSTRING
first(nonempty_list(__anonymous_31)) = STRING
first(nonempty_list(LIDENT)) = LIDENT
first(non_labeled_argument_list) = LPAREN
first(non_arrowed_simple_core_types) = LPAREN
first(non_arrowed_simple_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(non_arrowed_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE DOCSTRING
first(mutable_or_virtual_flags) = VIRTUAL MUTABLE
first(mutable_flag) = MUTABLE
first(mty_longident) = UIDENT LIDENT
first(module_type_signature) = LBRACE
first(module_type_body(EQUAL)) = LBRACE EQUAL
first(module_type_body(COLON)) = LBRACE COLON
first(module_type) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACKETAT LBRACE DOCSTRING
first(module_parameter) = UNDERSCORE UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACKETAT LBRACE DOCSTRING
first(module_expr_structure) = LBRACE
first(module_expr_body) = LBRACE EQUAL
first(module_expr) = UIDENT LPAREN LBRACKETPERCENT LBRACKETAT LBRACE FUN ES6_FUN DOCSTRING
first(module_declaration) = LPAREN LBRACE COLON
first(module_complex_expr) = VAL UIDENT LPAREN LBRACKETPERCENT LBRACKETAT LBRACE FUN ES6_FUN DOCSTRING
first(module_binding_body) = LPAREN LBRACE EQUAL COLON
first(module_arguments_comma_list) = VAL UIDENT LPAREN LBRACKETPERCENT LBRACKETAT LBRACE FUN ES6_FUN DOCSTRING COMMA
first(module_arguments) = LPAREN LBRACE
first(mod_longident) = UIDENT
first(mod_ext_longident) = UIDENT
first(mod_ext_apply) = UIDENT
first(method_) = VIRTUAL LIDENT BANG
first(match_case(seq_expr)) = BAR
first(match_case(expr)) = BAR
first(lseparated_nonempty_list_aux(SEMI,class_sig_field)) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETAT INHERIT DOCSTRING CONSTRAINT
first(lseparated_nonempty_list_aux(SEMI,class_field)) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETAT INITIALIZER INHERIT DOCSTRING CONSTRAINT
first(lseparated_nonempty_list_aux(COMMA,uncurried_labeled_expr)) = WHILE UNDERSCORE UIDENT TRY TRUE TILDE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOT DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(lseparated_nonempty_list_aux(COMMA,uncurried_arrow_type_parameter)) = UNDERSCORE UIDENT TILDE SHARP QUOTE MODULE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOT DOCSTRING
first(lseparated_nonempty_list_aux(COMMA,type_variable_with_variance)) = UNDERSCORE QUOTE PLUS MINUS
first(lseparated_nonempty_list_aux(COMMA,type_parameter)) = QUOTE PLUS MINUS
first(lseparated_nonempty_list_aux(COMMA,string_literal_label)) = STRING LBRACKETAT DOCSTRING
first(lseparated_nonempty_list_aux(COMMA,string_literal_expr_maybe_punned)) = STRING
first(lseparated_nonempty_list_aux(COMMA,record_label_declaration)) = MUTABLE LIDENT LBRACKETAT DOCSTRING
first(lseparated_nonempty_list_aux(COMMA,protected_type)) = UNDERSCORE UIDENT TILDE SHARP QUOTE MODULE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(lseparated_nonempty_list_aux(COMMA,pattern_optional_constraint)) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MODULE MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
first(lseparated_nonempty_list_aux(COMMA,opt_spread(pattern))) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOTDOTDOT DOCSTRING CHAR BACKQUOTE
first(lseparated_nonempty_list_aux(COMMA,opt_spread(lbl_expr))) = UIDENT LIDENT DOTDOTDOT
first(lseparated_nonempty_list_aux(COMMA,opt_spread(expr_optional_constraint))) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOTDOTDOT DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(lseparated_nonempty_list_aux(COMMA,object_label_declaration)) = LIDENT LBRACKETAT DOCSTRING
first(lseparated_nonempty_list_aux(COMMA,module_parameter)) = UNDERSCORE UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACKETAT LBRACE DOCSTRING
first(lseparated_nonempty_list_aux(COMMA,module_complex_expr)) = VAL UIDENT LPAREN LBRACKETPERCENT LBRACKETAT LBRACE FUN ES6_FUN DOCSTRING
first(lseparated_nonempty_list_aux(COMMA,mod_ext_longident)) = UIDENT
first(lseparated_nonempty_list_aux(COMMA,labeled_pattern)) = UNDERSCORE UIDENT TYPE TRUE TILDE STRING SHARP PLUS MODULE MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
first(lseparated_nonempty_list_aux(COMMA,field_expr)) = LIDENT
first(lseparated_nonempty_list_aux(COMMA,expr_optional_constraint)) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(lseparated_nonempty_list_aux(COMMA,expr)) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(lseparated_nonempty_list_aux(COMMA,core_type)) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(lseparated_nonempty_list_aux(AND,with_constraint)) = TYPE MODULE
first(loption(type_parameters)) = LPAREN
first(loption(terminated(pattern_comma_list,option(COMMA)))) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOTDOTDOT DOCSTRING CHAR BACKQUOTE
first(loption(row_field_list)) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE DOCSTRING BAR BACKQUOTE
first(loption(preceded(GREATER,nonempty_list(name_tag)))) = GREATER
first(loption(parenthesized(type_variables_with_variance_comma_list))) = LPAREN
first(loption(parenthesized(class_type_arguments_comma_list))) = LPAREN
first(loption(object_label_declarations)) = LIDENT LBRACKETAT DOCSTRING
first(loption(located_attributes)) = LBRACKETAT DOCSTRING
first(loption(functor_parameters)) = LPAREN
first(loption(class_type_parameters)) = LPAREN
first(longident_type_constraint) = UIDENT LPAREN LIDENT
first(llist_aux(preceded(COMMA,opt_spread(lbl_expr)))) = COMMA
first(llist_aux(match_case(seq_expr))) = BAR
first(llist_aux(match_case(expr))) = BAR
first(list(simple_expr_no_call)) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(list(bar_row_field)) = LBRACKETAT DOCSTRING BAR
first(list(attributed_ext_constructor(extension_constructor_declaration))) = LBRACKETAT DOCSTRING BAR
first(list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = LBRACKETAT DOCSTRING BAR
first(list(and_module_rec_declaration)) = LBRACKETAT DOCSTRING AND
first(list(and_module_bindings)) = LBRACKETAT DOCSTRING AND
first(list(and_let_binding)) = LBRACKETAT DOCSTRING AND
first(list(and_class_type_declaration)) = LBRACKETAT DOCSTRING AND
first(list(and_class_description)) = LBRACKETAT DOCSTRING AND
first(list(and_class_declaration)) = LBRACKETAT DOCSTRING AND
first(let_bindings) = LET LBRACKETAT DOCSTRING
first(let_binding_body) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
first(let_binding) = LET LBRACKETAT DOCSTRING
first(lbl_pattern) = UIDENT LIDENT
first(labelled_arrow_type_parameter_optional) = TILDE
first(labeled_pattern_constraint) = COLON AS
first(labeled_pattern) = UNDERSCORE UIDENT TYPE TRUE TILDE STRING SHARP PLUS MODULE MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
first(labeled_expr_constraint) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING COLONGREATER COLON CHAR BANG BACKQUOTE ASSERT
first(labeled_expr) = WHILE UNDERSCORE UIDENT TRY TRUE TILDE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(labeled_arguments) = LPAREN LBRACKETLESS LBRACELESS LBRACE
first(label_longident) = UIDENT LIDENT
first(jsx_without_leading_less) = UIDENT LIDENT GREATER
first(jsx_start_tag_and_args_without_leading_less) = UIDENT LIDENT
first(jsx_start_tag_and_args) = LESSIDENT LESS
first(jsx_arguments) = QUESTION LIDENT INFIXOP3
first(jsx) = LESSIDENT LESSGREATER LESS
first(item_extension_sugar) = PERCENT
first(item_extension) = LBRACKETPERCENTPERCENT
first(interface) = TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETAT INCLUDE EXTERNAL EXCEPTION EOF DOCSTRING CLASS
first(implementation) = error WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN EOF DOCSTRING CLASS CHAR BANG BACKQUOTE ASSERT
first(ident) = UIDENT LIDENT
first(greater_spread) = GREATERDOTDOTDOT GREATER
first(generalized_constructor_arguments) = LPAREN LBRACE COLON
first(functor_parameters) = LPAREN
first(fun_def(EQUALGREATER,non_arrowed_core_type)) = LPAREN
first(fun_def(EQUAL,core_type)) = LPAREN
first(field_expr) = LIDENT
first(extension_constructor_rebind) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(extension_constructor_declaration) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(extension) = LBRACKETPERCENT
first(expr_optional_constraint) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(expr_list) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(expr_comma_seq_extension) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOTDOTDOT DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(expr) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
first(es6_parameters) = UNDERSCORE LPAREN LIDENT
first(embedded(private_flag)) = PRI
first(embedded(__anonymous_38)) = UIDENT TRUE STRING LPAREN LIDENT INT FALSE
first(embedded(__anonymous_32)) = UNDERSCORE QUOTE PLUS MINUS
first(embedded(__anonymous_1)) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN EOF DOCSTRING CLASS CHAR BANG BACKQUOTE ASSERT
first(embedded(__anonymous_0)) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN EOF DOCSTRING CLASS CHAR BANG BACKQUOTE ASSERT
first(either(preceded(EQUALGREATER,expr),braced_expr)) = LBRACE EQUALGREATER
first(either(preceded(EQUAL,expr),braced_expr)) = LBRACE EQUAL
first(either(preceded(EQUAL,class_instance_type),class_type_body)) = LBRACE EQUAL
first(either(preceded(EQUAL,class_expr),class_body_expr)) = LBRACE EQUAL
first(either(parenthesized(longident_type_constraint),longident_type_constraint)) = UIDENT LPAREN LIDENT
first(either(extension_constructor_declaration,extension_constructor_rebind)) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(either(constructor_declaration,bar_constructor_declaration)) = UIDENT TRUE LPAREN LBRACKETAT LBRACKET FALSE DOCSTRING COLONCOLON BAR
first(either(__anonymous_12,__anonymous_13)) = PUB PRI
first(either(ES6_FUN,FUN)) = FUN ES6_FUN
first(direction_flag) = TO DOWNTO
first(core_type2) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(core_type) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(constructor_declarations_aux) = LBRACKETAT DOCSTRING CONSTRAINT BAR AND
first(constructor_declarations) = UIDENT TRUE LPAREN LBRACKETAT LBRACKET FALSE DOCSTRING COLONCOLON BAR
first(constructor_declaration) = UIDENT TRUE LPAREN LBRACKETAT LBRACKET FALSE DOCSTRING COLONCOLON
first(constructor_arguments_comma_list) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(constructor_arguments) = LPAREN LBRACE
first(constrain_field) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(constrain) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(constr_longident) = UIDENT TRUE LPAREN LBRACKET FALSE
first(constant) = STRING INT FLOAT CHAR
first(clty_longident) = UIDENT LIDENT
first(class_type_declarations) = LBRACKETAT DOCSTRING CLASS
first(class_type_declaration_details) = VIRTUAL LIDENT
first(class_type_body) = LBRACE
first(class_type_arguments_comma_list) = UNDERSCORE UIDENT TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(class_simple_expr) = UIDENT LPAREN LIDENT LBRACE
first(class_sig_field) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETAT INHERIT DOCSTRING CONSTRAINT
first(class_sig_body_fields) = VAL SEMI PUB PRI LBRACKETPERCENTPERCENT LBRACKETAT INHERIT DOCSTRING CONSTRAINT
first(class_sig_body) = VAL SEMI PUB PRI LBRACKETPERCENTPERCENT LBRACKETAT INHERIT DOCSTRING CONSTRAINT AS
first(class_self_type) = AS
first(class_self_expr) = AS
first(class_longident) = UIDENT LIDENT
first(class_instance_type) = UIDENT LIDENT LBRACKETPERCENT LBRACKETAT LBRACE DOCSTRING
first(class_field) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETAT INITIALIZER INHERIT DOCSTRING CONSTRAINT
first(class_expr_lets_and_rest) = VAL UIDENT SEMI PUB PRI LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETAT LBRACE INITIALIZER INHERIT FUN ES6_FUN DOCSTRING CONSTRAINT CLASS AS
first(class_expr) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACKETAT LBRACE FUN ES6_FUN DOCSTRING CLASS
first(class_descriptions) = LBRACKETAT DOCSTRING CLASS
first(class_description_details) = VIRTUAL LIDENT
first(class_declaration_details) = VIRTUAL LIDENT
first(class_declaration_body) = LBRACE EQUAL COLON
first(class_constructor_type) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACKETAT LBRACE DOCSTRING
first(braced_expr) = LBRACE
first(boption(AMPERSAND)) = AMPERSAND
first(basic_core_type) = UNDERSCORE UIDENT SHARP QUOTE LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(bar_row_field) = LBRACKETAT DOCSTRING BAR
first(bar_constructor_declaration) = LBRACKETAT DOCSTRING BAR
first(attributed_ext_constructors(extension_constructor_declaration)) = UIDENT TRUE LPAREN LBRACKETAT LBRACKET FALSE DOCSTRING COLONCOLON BAR
first(attributed_ext_constructors(either(extension_constructor_declaration,extension_constructor_rebind))) = UIDENT TRUE LPAREN LBRACKETAT LBRACKET FALSE DOCSTRING COLONCOLON BAR
first(attribute) = LBRACKETAT DOCSTRING
first(attr_id) = WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN SWITCH STRUCT SIG REC PRI OR OPEN OF OBJECT NONREC NEW MUTABLE MODULE LIDENT LET LAZY INITIALIZER INHERIT INCLUDE IN IF FUNCTOR FUNCTION FUN FOR FALSE EXTERNAL EXCEPTION END ELSE DOWNTO DONE DO CONSTRAINT CLASS BEGIN ASSERT AS AND
first(arrowed_simple_core_type) = UNDERSCORE UIDENT TILDE SHARP QUOTE LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE ES6_FUN
first(arrow_type_parameters) = LPAREN
first(arrow_type_parameter) = UNDERSCORE UIDENT TILDE SHARP QUOTE MODULE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE ES6_FUN DOCSTRING
first(and_type_declaration) = LBRACKETAT DOCSTRING AND
first(and_module_rec_declaration) = LBRACKETAT DOCSTRING AND
first(and_module_bindings) = LBRACKETAT DOCSTRING AND
first(and_class_type_declaration) = LBRACKETAT DOCSTRING AND
first(and_class_description) = LBRACKETAT DOCSTRING AND
first(and_class_declaration) = LBRACKETAT DOCSTRING AND
first(additive) = PLUSDOT PLUS
first(_lbl_pattern_list) = UIDENT LIDENT DOTDOTDOT
minimal(with_constraint) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(virtual_flag) = (* 0 *)
minimal(value_type) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(value) = (* 3 *) LIDENT EQUAL LIDENT
minimal(val_longident) = (* 1 *) LIDENT
minimal(val_ident) = (* 1 *) LIDENT
minimal(use_file_no_mapper) = (* 1 *) EOF
minimal(use_file) = (* 1 *) EOF
minimal(unattributed_expr) = (* 1 *) LIDENT
minimal(unattributed_core_type) = (* 1 *) UNDERSCORE
minimal(type_variance) = (* 0 *)
minimal(type_variables_with_variance_comma_list) = (* 1 *) UNDERSCORE
minimal(type_variables_with_variance) = (* 0 *)
minimal(type_variable_with_variance) = (* 1 *) UNDERSCORE
minimal(type_variable) = (* 2 *) QUOTE UIDENT
minimal(type_parameters) = (* 3 *) LPAREN UNDERSCORE RPAREN
minimal(type_parameter) = (* 2 *) QUOTE UIDENT
minimal(type_other_kind) = (* 0 *)
minimal(type_longident) = (* 1 *) LIDENT
minimal(type_declarations) = (* 2 *) TYPE UIDENT
minimal(type_declaration_kind) = (* 0 *)
minimal(type_declaration_details) = (* 1 *) UIDENT
minimal(type_constraint) = (* 2 *) COLON UNDERSCORE
minimal(toplevel_phrase) = (* 1 *) EOF
minimal(toplevel_directive) = (* 2 *) SHARP UIDENT
minimal(tag_field) = (* 2 *) BACKQUOTE UIDENT
minimal(subtractive) = (* 1 *) MINUS
minimal(structure_item) = (* 1 *) LIDENT
minimal(structure) = (* 0 *)
minimal(string_literal_labels) = (* 3 *) STRING COLON UNDERSCORE
minimal(string_literal_label) = (* 3 *) STRING COLON UNDERSCORE
minimal(string_literal_exprs_maybe_punned) = (* 1 *) STRING
minimal(string_literal_expr_maybe_punned_with_comma) = (* 2 *) STRING COMMA
minimal(string_literal_expr_maybe_punned) = (* 1 *) STRING
minimal(str_type_extension) = (* 4 *) TYPE LIDENT PLUSEQ UIDENT
minimal(str_exception_declaration) = (* 2 *) EXCEPTION UIDENT
minimal(single_attr_id) = (* 1 *) LIDENT
minimal(simple_pattern_not_ident) = (* 1 *) UNDERSCORE
minimal(simple_pattern_ident) = (* 1 *) LIDENT
minimal(simple_pattern_direct_argument) = (* 1 *) UIDENT
minimal(simple_pattern) = (* 1 *) LIDENT
minimal(simple_module_type) = (* 1 *) UIDENT
minimal(simple_expr_template_constructor) = (* 3 *) UIDENT LPAREN RPAREN
minimal(simple_expr_no_constructor) = (* 1 *) LIDENT
minimal(simple_expr_no_call) = (* 1 *) LIDENT
minimal(simple_expr_direct_argument) = (* 2 *) LBRACE RBRACE
minimal(simple_expr_call) = (* 1 *) LIDENT
minimal(signed_constant) = (* 1 *) INT
minimal(signature_items) = (* 1 *) DOCSTRING
minimal(signature_item) = (* 2 *) TYPE UIDENT
minimal(signature) = (* 0 *)
minimal(sig_type_extension) = (* 4 *) TYPE LIDENT PLUSEQ UIDENT
minimal(sig_exception_declaration) = (* 2 *) EXCEPTION UIDENT
minimal(seq_expr_no_seq) = (* 1 *) LIDENT
minimal(seq_expr) = (* 1 *) LIDENT
minimal(separated_nonempty_list(AMPERSAND,non_arrowed_simple_core_types)) = (* 3 *) LPAREN UNDERSCORE RPAREN
minimal(row_field_list) = (* 1 *) UNDERSCORE
minimal(row_field) = (* 1 *) UNDERSCORE
minimal(record_label_declaration) = (* 1 *) LIDENT
minimal(record_expr_with_string_keys) = (* 3 *) STRING COMMA STRING
minimal(record_expr) = (* 3 *) LIDENT COMMA LIDENT
minimal(record_declaration) = (* 3 *) LBRACE LIDENT RBRACE
minimal(rec_flag) = (* 0 *)
minimal(protected_type) = (* 1 *) UNDERSCORE
minimal(primitive_declaration) = (* 1 *) STRING
minimal(poly_type) = (* 1 *) UNDERSCORE
minimal(payload) = (* 0 *)
minimal(pattern_without_or) = (* 1 *) LIDENT
minimal(pattern_optional_constraint) = (* 1 *) LIDENT
minimal(pattern_constructor_argument) = (* 1 *) UIDENT
minimal(pattern_comma_list_extension) = (* 1 *) LIDENT
minimal(pattern) = (* 1 *) LIDENT
minimal(parse_pattern) = (* 2 *) LIDENT EOF
minimal(parse_expression) = (* 2 *) LIDENT EOF
minimal(parse_core_type) = (* 2 *) UNDERSCORE EOF
minimal(parenthesized_expr) = (* 2 *) LBRACE RBRACE
minimal(package_type) = (* 1 *) UIDENT
minimal(override_flag) = (* 0 *)
minimal(optional_expr_extension) = (* 0 *)
minimal(optional) = (* 0 *)
minimal(option(type_constraint)) = (* 0 *)
minimal(option(preceded(WHEN,expr))) = (* 0 *)
minimal(option(preceded(COLONGREATER,core_type))) = (* 0 *)
minimal(option(preceded(COLON,simple_module_type))) = (* 0 *)
minimal(option(preceded(COLON,poly_type))) = (* 0 *)
minimal(option(preceded(COLON,non_arrowed_core_type))) = (* 0 *)
minimal(option(preceded(COLON,expr))) = (* 0 *)
minimal(option(preceded(COLON,core_type))) = (* 0 *)
minimal(option(preceded(COLON,class_constructor_type))) = (* 0 *)
minimal(option(preceded(AS,LIDENT))) = (* 0 *)
minimal(option(item_extension_sugar)) = (* 0 *)
minimal(option(constructor_arguments)) = (* 0 *)
minimal(option(SEMI)) = (* 0 *)
minimal(option(OF)) = (* 0 *)
minimal(option(MODULE)) = (* 0 *)
minimal(option(LET)) = (* 0 *)
minimal(option(DOTDOTDOT)) = (* 0 *)
minimal(option(DOT)) = (* 0 *)
minimal(option(COMMA)) = (* 0 *)
minimal(opt_LET_MODULE_ident) = (* 2 *) MODULE UIDENT
minimal(opt_LET_MODULE_REC_ident) = (* 3 *) MODULE REC UIDENT
minimal(opt_LET_MODULE) = (* 1 *) MODULE
minimal(operator) = (* 1 *) PREFIXOP
minimal(open_statement) = (* 2 *) OPEN UIDENT
minimal(object_record_type) = (* 2 *) LBRACE RBRACE
minimal(object_label_declarations) = (* 1 *) LIDENT
minimal(object_label_declaration) = (* 1 *) LIDENT
minimal(object_body_class_fields) = (* 0 *)
minimal(object_body) = (* 0 *)
minimal(nonrec_flag) = (* 0 *)
minimal(nonempty_list(preceded(QUOTE,ident))) = (* 2 *) QUOTE UIDENT
minimal(nonempty_list(preceded(CONSTRAINT,constrain))) = (* 4 *) CONSTRAINT UNDERSCORE EQUAL UNDERSCORE
minimal(nonempty_list(name_tag)) = (* 2 *) BACKQUOTE UIDENT
minimal(nonempty_list(attributed_ext_constructor(extension_constructor_declaration))) = (* 2 *) BAR UIDENT
minimal(nonempty_list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = (* 2 *) BAR UIDENT
minimal(nonempty_list(as_loc(attribute))) = (* 1 *) DOCSTRING
minimal(nonempty_list(__anonymous_31)) = (* 1 *) STRING
minimal(nonempty_list(LIDENT)) = (* 1 *) LIDENT
minimal(non_labeled_argument_list) = (* 2 *) LPAREN RPAREN
minimal(non_arrowed_simple_core_types) = (* 3 *) LPAREN UNDERSCORE RPAREN
minimal(non_arrowed_simple_core_type) = (* 1 *) UNDERSCORE
minimal(non_arrowed_core_type) = (* 1 *) UNDERSCORE
minimal(mutable_or_virtual_flags) = (* 0 *)
minimal(mutable_flag) = (* 0 *)
minimal(mty_longident) = (* 1 *) UIDENT
minimal(module_type_signature) = (* 2 *) LBRACE RBRACE
minimal(module_type_body(EQUAL)) = (* 2 *) EQUAL UIDENT
minimal(module_type_body(COLON)) = (* 2 *) COLON UIDENT
minimal(module_type) = (* 1 *) UIDENT
minimal(module_parameter) = (* 1 *) UIDENT
minimal(module_expr_structure) = (* 2 *) LBRACE RBRACE
minimal(module_expr_body) = (* 2 *) LBRACE RBRACE
minimal(module_expr) = (* 1 *) UIDENT
minimal(module_declaration) = (* 2 *) COLON UIDENT
minimal(module_complex_expr) = (* 1 *) UIDENT
minimal(module_binding_body) = (* 2 *) LBRACE RBRACE
minimal(module_arguments_comma_list) = (* 0 *)
minimal(module_arguments) = (* 2 *) LBRACE RBRACE
minimal(mod_longident) = (* 1 *) UIDENT
minimal(mod_ext_longident) = (* 1 *) UIDENT
minimal(mod_ext_apply) = (* 4 *) UIDENT LPAREN UIDENT RPAREN
minimal(method_) = (* 3 *) LIDENT EQUAL LIDENT
minimal(match_case(seq_expr)) = (* 4 *) BAR LIDENT EQUALGREATER LIDENT
minimal(match_case(expr)) = (* 4 *) BAR LIDENT EQUALGREATER LIDENT
minimal(lseparated_nonempty_list_aux(SEMI,class_sig_field)) = (* 1 *) DOCSTRING
minimal(lseparated_nonempty_list_aux(SEMI,class_field)) = (* 1 *) DOCSTRING
minimal(lseparated_nonempty_list_aux(COMMA,uncurried_labeled_expr)) = (* 1 *) UNDERSCORE
minimal(lseparated_nonempty_list_aux(COMMA,uncurried_arrow_type_parameter)) = (* 1 *) UNDERSCORE
minimal(lseparated_nonempty_list_aux(COMMA,type_variable_with_variance)) = (* 1 *) UNDERSCORE
minimal(lseparated_nonempty_list_aux(COMMA,type_parameter)) = (* 2 *) QUOTE UIDENT
minimal(lseparated_nonempty_list_aux(COMMA,string_literal_label)) = (* 3 *) STRING COLON UNDERSCORE
minimal(lseparated_nonempty_list_aux(COMMA,string_literal_expr_maybe_punned)) = (* 1 *) STRING
minimal(lseparated_nonempty_list_aux(COMMA,record_label_declaration)) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,protected_type)) = (* 1 *) UNDERSCORE
minimal(lseparated_nonempty_list_aux(COMMA,pattern_optional_constraint)) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,opt_spread(pattern))) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,opt_spread(lbl_expr))) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,opt_spread(expr_optional_constraint))) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,object_label_declaration)) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,module_parameter)) = (* 1 *) UIDENT
minimal(lseparated_nonempty_list_aux(COMMA,module_complex_expr)) = (* 1 *) UIDENT
minimal(lseparated_nonempty_list_aux(COMMA,mod_ext_longident)) = (* 1 *) UIDENT
minimal(lseparated_nonempty_list_aux(COMMA,labeled_pattern)) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,field_expr)) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,expr_optional_constraint)) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,expr)) = (* 1 *) LIDENT
minimal(lseparated_nonempty_list_aux(COMMA,core_type)) = (* 1 *) UNDERSCORE
minimal(lseparated_nonempty_list_aux(AND,with_constraint)) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(loption(type_parameters)) = (* 0 *)
minimal(loption(terminated(pattern_comma_list,option(COMMA)))) = (* 0 *)
minimal(loption(row_field_list)) = (* 0 *)
minimal(loption(preceded(GREATER,nonempty_list(name_tag)))) = (* 0 *)
minimal(loption(parenthesized(type_variables_with_variance_comma_list))) = (* 0 *)
minimal(loption(parenthesized(class_type_arguments_comma_list))) = (* 0 *)
minimal(loption(object_label_declarations)) = (* 0 *)
minimal(loption(located_attributes)) = (* 0 *)
minimal(loption(functor_parameters)) = (* 0 *)
minimal(loption(class_type_parameters)) = (* 0 *)
minimal(longident_type_constraint) = (* 1 *) LIDENT
minimal(llist_aux(preceded(COMMA,opt_spread(lbl_expr)))) = (* 0 *)
minimal(llist_aux(match_case(seq_expr))) = (* 0 *)
minimal(llist_aux(match_case(expr))) = (* 0 *)
minimal(list(simple_expr_no_call)) = (* 0 *)
minimal(list(bar_row_field)) = (* 0 *)
minimal(list(attributed_ext_constructor(extension_constructor_declaration))) = (* 0 *)
minimal(list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = (* 0 *)
minimal(list(and_module_rec_declaration)) = (* 0 *)
minimal(list(and_module_bindings)) = (* 0 *)
minimal(list(and_let_binding)) = (* 0 *)
minimal(list(and_class_type_declaration)) = (* 0 *)
minimal(list(and_class_description)) = (* 0 *)
minimal(list(and_class_declaration)) = (* 0 *)
minimal(let_bindings) = (* 4 *) LET LIDENT EQUAL LIDENT
minimal(let_binding_body) = (* 3 *) LIDENT EQUAL LIDENT
minimal(let_binding) = (* 4 *) LET LIDENT EQUAL LIDENT
minimal(lbl_pattern) = (* 1 *) LIDENT
minimal(labelled_arrow_type_parameter_optional) = (* 5 *) TILDE LIDENT COLON UNDERSCORE EQUAL
minimal(labeled_pattern_constraint) = (* 0 *)
minimal(labeled_pattern) = (* 1 *) LIDENT
minimal(labeled_expr_constraint) = (* 1 *) LIDENT
minimal(labeled_expr) = (* 1 *) UNDERSCORE
minimal(labeled_arguments) = (* 2 *) LBRACE RBRACE
minimal(label_longident) = (* 1 *) LIDENT
minimal(jsx_without_leading_less) = (* 2 *) GREATER LESSSLASHGREATER
minimal(jsx_start_tag_and_args_without_leading_less) = (* 1 *) UIDENT
minimal(jsx_start_tag_and_args) = (* 1 *) LESSIDENT
minimal(jsx_arguments) = (* 0 *)
minimal(jsx) = (* 2 *) LESSGREATER LESSSLASHGREATER
minimal(item_extension_sugar) = (* 2 *) PERCENT LIDENT
minimal(item_extension) = (* 3 *) LBRACKETPERCENTPERCENT LIDENT RBRACKET
minimal(interface) = (* 1 *) EOF
minimal(implementation) = (* 1 *) EOF
minimal(ident) = (* 1 *) UIDENT
minimal(greater_spread) = (* 1 *) GREATERDOTDOTDOT
minimal(generalized_constructor_arguments) = (* 0 *)
minimal(functor_parameters) = (* 2 *) LPAREN RPAREN
minimal(fun_def(EQUALGREATER,non_arrowed_core_type)) = (* 4 *) LPAREN RPAREN LBRACE RBRACE
minimal(fun_def(EQUAL,core_type)) = (* 4 *) LPAREN RPAREN EQUAL LIDENT
minimal(field_expr) = (* 1 *) LIDENT
minimal(extension_constructor_rebind) = (* 3 *) UIDENT EQUAL UIDENT
minimal(extension_constructor_declaration) = (* 1 *) UIDENT
minimal(extension) = (* 3 *) LBRACKETPERCENT LIDENT RBRACKET
minimal(expr_optional_constraint) = (* 1 *) LIDENT
minimal(expr_list) = (* 1 *) LIDENT
minimal(expr_comma_seq_extension) = (* 1 *) LIDENT
minimal(expr) = (* 1 *) LIDENT
minimal(es6_parameters) = (* 1 *) UNDERSCORE
minimal(embedded(private_flag)) = (* 0 *)
minimal(embedded(__anonymous_38)) = (* 0 *)
minimal(embedded(__anonymous_32)) = (* 1 *) UNDERSCORE
minimal(embedded(__anonymous_1)) = (* 1 *) EOF
minimal(embedded(__anonymous_0)) = (* 1 *) EOF
minimal(either(preceded(EQUALGREATER,expr),braced_expr)) = (* 2 *) LBRACE RBRACE
minimal(either(preceded(EQUAL,expr),braced_expr)) = (* 2 *) EQUAL LIDENT
minimal(either(preceded(EQUAL,class_instance_type),class_type_body)) = (* 2 *) EQUAL LIDENT
minimal(either(preceded(EQUAL,class_expr),class_body_expr)) = (* 2 *) EQUAL LIDENT
minimal(either(parenthesized(longident_type_constraint),longident_type_constraint)) = (* 1 *) LIDENT
minimal(either(extension_constructor_declaration,extension_constructor_rebind)) = (* 1 *) UIDENT
minimal(either(constructor_declaration,bar_constructor_declaration)) = (* 1 *) UIDENT
minimal(either(__anonymous_12,__anonymous_13)) = (* 1 *) PUB
minimal(either(ES6_FUN,FUN)) = (* 1 *) ES6_FUN
minimal(direction_flag) = (* 1 *) TO
minimal(core_type2) = (* 1 *) UNDERSCORE
minimal(core_type) = (* 1 *) UNDERSCORE
minimal(constructor_declarations_aux) = (* 0 *)
minimal(constructor_declarations) = (* 1 *) UIDENT
minimal(constructor_declaration) = (* 1 *) UIDENT
minimal(constructor_arguments_comma_list) = (* 1 *) UNDERSCORE
minimal(constructor_arguments) = (* 2 *) LBRACE RBRACE
minimal(constrain_field) = (* 3 *) UNDERSCORE EQUAL UNDERSCORE
minimal(constrain) = (* 3 *) UNDERSCORE EQUAL UNDERSCORE
minimal(constr_longident) = (* 1 *) UIDENT
minimal(constant) = (* 1 *) INT
minimal(clty_longident) = (* 1 *) LIDENT
minimal(class_type_declarations) = (* 5 *) CLASS TYPE LIDENT EQUAL LIDENT
minimal(class_type_declaration_details) = (* 3 *) LIDENT EQUAL LIDENT
minimal(class_type_body) = (* 2 *) LBRACE RBRACE
minimal(class_type_arguments_comma_list) = (* 1 *) UNDERSCORE
minimal(class_simple_expr) = (* 1 *) LIDENT
minimal(class_sig_field) = (* 1 *) DOCSTRING
minimal(class_sig_body_fields) = (* 0 *)
minimal(class_sig_body) = (* 0 *)
minimal(class_self_type) = (* 2 *) AS UNDERSCORE
minimal(class_self_expr) = (* 2 *) AS LIDENT
minimal(class_longident) = (* 1 *) LIDENT
minimal(class_instance_type) = (* 1 *) LIDENT
minimal(class_field) = (* 1 *) DOCSTRING
minimal(class_expr_lets_and_rest) = (* 0 *)
minimal(class_expr) = (* 1 *) LIDENT
minimal(class_descriptions) = (* 4 *) CLASS LIDENT COLON LIDENT
minimal(class_description_details) = (* 3 *) LIDENT COLON LIDENT
minimal(class_declaration_details) = (* 3 *) LIDENT EQUAL LIDENT
minimal(class_declaration_body) = (* 2 *) EQUAL LIDENT
minimal(class_constructor_type) = (* 1 *) LIDENT
minimal(braced_expr) = (* 2 *) LBRACE RBRACE
minimal(boption(AMPERSAND)) = (* 0 *)
minimal(basic_core_type) = (* 1 *) UNDERSCORE
minimal(bar_row_field) = (* 2 *) BAR UNDERSCORE
minimal(bar_constructor_declaration) = (* 2 *) BAR UIDENT
minimal(attributed_ext_constructors(extension_constructor_declaration)) = (* 1 *) UIDENT
minimal(attributed_ext_constructors(either(extension_constructor_declaration,extension_constructor_rebind))) = (* 1 *) UIDENT
minimal(attribute) = (* 1 *) DOCSTRING
minimal(attr_id) = (* 1 *) LIDENT
minimal(arrowed_simple_core_type) = (* 3 *) UNDERSCORE EQUALGREATER UNDERSCORE
minimal(arrow_type_parameters) = (* 3 *) LPAREN UNDERSCORE RPAREN
minimal(arrow_type_parameter) = (* 1 *) UNDERSCORE
minimal(and_type_declaration) = (* 0 *)
minimal(and_module_rec_declaration) = (* 4 *) AND UIDENT COLON UIDENT
minimal(and_module_bindings) = (* 4 *) AND UIDENT LBRACE RBRACE
minimal(and_class_type_declaration) = (* 4 *) AND LIDENT EQUAL LIDENT
minimal(and_class_description) = (* 4 *) AND LIDENT COLON LIDENT
minimal(and_class_declaration) = (* 4 *) AND LIDENT EQUAL LIDENT
minimal(additive) = (* 1 *) PLUS
minimal(_lbl_pattern_list) = (* 1 *) LIDENT
maximal(with_constraint) = infinity
maximal(virtual_flag) = 1
maximal(value_type) = infinity
maximal(value) = infinity
maximal(val_longident) = infinity
maximal(val_ident) = 4
maximal(use_file_no_mapper) = infinity
maximal(use_file) = infinity
maximal(unattributed_expr) = infinity
maximal(unattributed_core_type) = infinity
maximal(type_variance) = 1
maximal(type_variables_with_variance_comma_list) = infinity
maximal(type_variables_with_variance) = infinity
maximal(type_variable_with_variance) = 3
maximal(type_variable) = 2
maximal(type_parameters) = infinity
maximal(type_parameter) = 3
maximal(type_other_kind) = infinity
maximal(type_longident) = infinity
maximal(type_declarations) = infinity
maximal(type_declaration_kind) = infinity
maximal(type_declaration_details) = infinity
maximal(type_constraint) = infinity
maximal(toplevel_phrase) = infinity
maximal(toplevel_directive) = infinity
maximal(tag_field) = infinity
maximal(subtractive) = 1
maximal(structure_item) = infinity
maximal(structure) = infinity
maximal(string_literal_labels) = infinity
maximal(string_literal_label) = infinity
maximal(string_literal_exprs_maybe_punned) = infinity
maximal(string_literal_expr_maybe_punned_with_comma) = infinity
maximal(string_literal_expr_maybe_punned) = infinity
maximal(str_type_extension) = infinity
maximal(str_exception_declaration) = infinity
maximal(single_attr_id) = 1
maximal(simple_pattern_not_ident) = infinity
maximal(simple_pattern_ident) = 4
maximal(simple_pattern_direct_argument) = infinity
maximal(simple_pattern) = infinity
maximal(simple_module_type) = infinity
maximal(simple_expr_template_constructor) = infinity
maximal(simple_expr_no_constructor) = infinity
maximal(simple_expr_no_call) = infinity
maximal(simple_expr_direct_argument) = infinity
maximal(simple_expr_call) = infinity
maximal(signed_constant) = 2
maximal(signature_items) = infinity
maximal(signature_item) = infinity
maximal(signature) = infinity
maximal(sig_type_extension) = infinity
maximal(sig_exception_declaration) = infinity
maximal(seq_expr_no_seq) = infinity
maximal(seq_expr) = infinity
maximal(separated_nonempty_list(AMPERSAND,non_arrowed_simple_core_types)) = infinity
maximal(row_field_list) = infinity
maximal(row_field) = infinity
maximal(record_label_declaration) = infinity
maximal(record_expr_with_string_keys) = infinity
maximal(record_expr) = infinity
maximal(record_declaration) = infinity
maximal(rec_flag) = 1
maximal(protected_type) = infinity
maximal(primitive_declaration) = infinity
maximal(poly_type) = infinity
maximal(payload) = infinity
maximal(pattern_without_or) = infinity
maximal(pattern_optional_constraint) = infinity
maximal(pattern_constructor_argument) = infinity
maximal(pattern_comma_list_extension) = infinity
maximal(pattern) = infinity
maximal(parse_pattern) = infinity
maximal(parse_expression) = infinity
maximal(parse_core_type) = infinity
maximal(parenthesized_expr) = infinity
maximal(package_type) = infinity
maximal(override_flag) = 1
maximal(optional_expr_extension) = infinity
maximal(optional) = 1
maximal(option(type_constraint)) = infinity
maximal(option(preceded(WHEN,expr))) = infinity
maximal(option(preceded(COLONGREATER,core_type))) = infinity
maximal(option(preceded(COLON,simple_module_type))) = infinity
maximal(option(preceded(COLON,poly_type))) = infinity
maximal(option(preceded(COLON,non_arrowed_core_type))) = infinity
maximal(option(preceded(COLON,expr))) = infinity
maximal(option(preceded(COLON,core_type))) = infinity
maximal(option(preceded(COLON,class_constructor_type))) = infinity
maximal(option(preceded(AS,LIDENT))) = 2
maximal(option(item_extension_sugar)) = infinity
maximal(option(constructor_arguments)) = infinity
maximal(option(SEMI)) = 1
maximal(option(OF)) = 1
maximal(option(MODULE)) = 1
maximal(option(LET)) = 1
maximal(option(DOTDOTDOT)) = 1
maximal(option(DOT)) = 1
maximal(option(COMMA)) = 1
maximal(opt_LET_MODULE_ident) = 3
maximal(opt_LET_MODULE_REC_ident) = 4
maximal(opt_LET_MODULE) = 2
maximal(operator) = 2
maximal(open_statement) = infinity
maximal(object_record_type) = infinity
maximal(object_label_declarations) = infinity
maximal(object_label_declaration) = infinity
maximal(object_body_class_fields) = infinity
maximal(object_body) = infinity
maximal(nonrec_flag) = 1
maximal(nonempty_list(preceded(QUOTE,ident))) = infinity
maximal(nonempty_list(preceded(CONSTRAINT,constrain))) = infinity
maximal(nonempty_list(name_tag)) = infinity
maximal(nonempty_list(attributed_ext_constructor(extension_constructor_declaration))) = infinity
maximal(nonempty_list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = infinity
maximal(nonempty_list(as_loc(attribute))) = infinity
maximal(nonempty_list(__anonymous_31)) = infinity
maximal(nonempty_list(LIDENT)) = infinity
maximal(non_labeled_argument_list) = infinity
maximal(non_arrowed_simple_core_types) = infinity
maximal(non_arrowed_simple_core_type) = infinity
maximal(non_arrowed_core_type) = infinity
maximal(mutable_or_virtual_flags) = 2
maximal(mutable_flag) = 1
maximal(mty_longident) = infinity
maximal(module_type_signature) = infinity
maximal(module_type_body(EQUAL)) = infinity
maximal(module_type_body(COLON)) = infinity
maximal(module_type) = infinity
maximal(module_parameter) = infinity
maximal(module_expr_structure) = infinity
maximal(module_expr_body) = infinity
maximal(module_expr) = infinity
maximal(module_declaration) = infinity
maximal(module_complex_expr) = infinity
maximal(module_binding_body) = infinity
maximal(module_arguments_comma_list) = infinity
maximal(module_arguments) = infinity
maximal(mod_longident) = infinity
maximal(mod_ext_longident) = infinity
maximal(mod_ext_apply) = infinity
maximal(method_) = infinity
maximal(match_case(seq_expr)) = infinity
maximal(match_case(expr)) = infinity
maximal(lseparated_nonempty_list_aux(SEMI,class_sig_field)) = infinity
maximal(lseparated_nonempty_list_aux(SEMI,class_field)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,uncurried_labeled_expr)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,uncurried_arrow_type_parameter)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,type_variable_with_variance)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,type_parameter)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,string_literal_label)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,string_literal_expr_maybe_punned)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,record_label_declaration)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,protected_type)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,pattern_optional_constraint)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,opt_spread(pattern))) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,opt_spread(lbl_expr))) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,opt_spread(expr_optional_constraint))) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,object_label_declaration)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,module_parameter)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,module_complex_expr)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,mod_ext_longident)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,labeled_pattern)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,field_expr)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,expr_optional_constraint)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,expr)) = infinity
maximal(lseparated_nonempty_list_aux(COMMA,core_type)) = infinity
maximal(lseparated_nonempty_list_aux(AND,with_constraint)) = infinity
maximal(loption(type_parameters)) = infinity
maximal(loption(terminated(pattern_comma_list,option(COMMA)))) = infinity
maximal(loption(row_field_list)) = infinity
maximal(loption(preceded(GREATER,nonempty_list(name_tag)))) = infinity
maximal(loption(parenthesized(type_variables_with_variance_comma_list))) = infinity
maximal(loption(parenthesized(class_type_arguments_comma_list))) = infinity
maximal(loption(object_label_declarations)) = infinity
maximal(loption(located_attributes)) = infinity
maximal(loption(functor_parameters)) = infinity
maximal(loption(class_type_parameters)) = infinity
maximal(longident_type_constraint) = infinity
maximal(llist_aux(preceded(COMMA,opt_spread(lbl_expr)))) = infinity
maximal(llist_aux(match_case(seq_expr))) = infinity
maximal(llist_aux(match_case(expr))) = infinity
maximal(list(simple_expr_no_call)) = infinity
maximal(list(bar_row_field)) = infinity
maximal(list(attributed_ext_constructor(extension_constructor_declaration))) = infinity
maximal(list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = infinity
maximal(list(and_module_rec_declaration)) = infinity
maximal(list(and_module_bindings)) = infinity
maximal(list(and_let_binding)) = infinity
maximal(list(and_class_type_declaration)) = infinity
maximal(list(and_class_description)) = infinity
maximal(list(and_class_declaration)) = infinity
maximal(let_bindings) = infinity
maximal(let_binding_body) = infinity
maximal(let_binding) = infinity
maximal(lbl_pattern) = infinity
maximal(labelled_arrow_type_parameter_optional) = infinity
maximal(labeled_pattern_constraint) = infinity
maximal(labeled_pattern) = infinity
maximal(labeled_expr_constraint) = infinity
maximal(labeled_expr) = infinity
maximal(labeled_arguments) = infinity
maximal(label_longident) = infinity
maximal(jsx_without_leading_less) = infinity
maximal(jsx_start_tag_and_args_without_leading_less) = infinity
maximal(jsx_start_tag_and_args) = infinity
maximal(jsx_arguments) = infinity
maximal(jsx) = infinity
maximal(item_extension_sugar) = infinity
maximal(item_extension) = infinity
maximal(interface) = infinity
maximal(implementation) = infinity
maximal(ident) = 1
maximal(greater_spread) = 2
maximal(generalized_constructor_arguments) = infinity
maximal(functor_parameters) = infinity
maximal(fun_def(EQUALGREATER,non_arrowed_core_type)) = infinity
maximal(fun_def(EQUAL,core_type)) = infinity
maximal(field_expr) = infinity
maximal(extension_constructor_rebind) = infinity
maximal(extension_constructor_declaration) = infinity
maximal(extension) = infinity
maximal(expr_optional_constraint) = infinity
maximal(expr_list) = infinity
maximal(expr_comma_seq_extension) = infinity
maximal(expr) = infinity
maximal(es6_parameters) = infinity
maximal(embedded(private_flag)) = 1
maximal(embedded(__anonymous_38)) = infinity
maximal(embedded(__anonymous_32)) = 3
maximal(embedded(__anonymous_1)) = infinity
maximal(embedded(__anonymous_0)) = infinity
maximal(either(preceded(EQUALGREATER,expr),braced_expr)) = infinity
maximal(either(preceded(EQUAL,expr),braced_expr)) = infinity
maximal(either(preceded(EQUAL,class_instance_type),class_type_body)) = infinity
maximal(either(preceded(EQUAL,class_expr),class_body_expr)) = infinity
maximal(either(parenthesized(longident_type_constraint),longident_type_constraint)) = infinity
maximal(either(extension_constructor_declaration,extension_constructor_rebind)) = infinity
maximal(either(constructor_declaration,bar_constructor_declaration)) = infinity
maximal(either(__anonymous_12,__anonymous_13)) = 1
maximal(either(ES6_FUN,FUN)) = 1
maximal(direction_flag) = 1
maximal(core_type2) = infinity
maximal(core_type) = infinity
maximal(constructor_declarations_aux) = infinity
maximal(constructor_declarations) = infinity
maximal(constructor_declaration) = infinity
maximal(constructor_arguments_comma_list) = infinity
maximal(constructor_arguments) = infinity
maximal(constrain_field) = infinity
maximal(constrain) = infinity
maximal(constr_longident) = infinity
maximal(constant) = 1
maximal(clty_longident) = infinity
maximal(class_type_declarations) = infinity
maximal(class_type_declaration_details) = infinity
maximal(class_type_body) = infinity
maximal(class_type_arguments_comma_list) = infinity
maximal(class_simple_expr) = infinity
maximal(class_sig_field) = infinity
maximal(class_sig_body_fields) = infinity
maximal(class_sig_body) = infinity
maximal(class_self_type) = infinity
maximal(class_self_expr) = infinity
maximal(class_longident) = infinity
maximal(class_instance_type) = infinity
maximal(class_field) = infinity
maximal(class_expr_lets_and_rest) = infinity
maximal(class_expr) = infinity
maximal(class_descriptions) = infinity
maximal(class_description_details) = infinity
maximal(class_declaration_details) = infinity
maximal(class_declaration_body) = infinity
maximal(class_constructor_type) = infinity
maximal(braced_expr) = infinity
maximal(boption(AMPERSAND)) = 1
maximal(basic_core_type) = infinity
maximal(bar_row_field) = infinity
maximal(bar_constructor_declaration) = infinity
maximal(attributed_ext_constructors(extension_constructor_declaration)) = infinity
maximal(attributed_ext_constructors(either(extension_constructor_declaration,extension_constructor_rebind))) = infinity
maximal(attribute) = infinity
maximal(attr_id) = infinity
maximal(arrowed_simple_core_type) = infinity
maximal(arrow_type_parameters) = infinity
maximal(arrow_type_parameter) = infinity
maximal(and_type_declaration) = infinity
maximal(and_module_rec_declaration) = infinity
maximal(and_module_bindings) = infinity
maximal(and_class_type_declaration) = infinity
maximal(and_class_description) = infinity
maximal(and_class_declaration) = infinity
maximal(additive) = 1
maximal(_lbl_pattern_list) = infinity
follow(with_constraint) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING COMMA COLONGREATER BARRBRACKET AND
follow(virtual_flag) = LIDENT
follow(value_type) = error SEMI RBRACE
follow(value) = error SEMI RBRACE
follow(val_longident) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
follow(val_ident) = error WITH WHEN UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(use_file_no_mapper) = #
follow(use_file) = #
follow(unattributed_expr) = error STAR SLASHGREATER SEMI RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERDOTDOTDOT GREATER EOF COLONEQUAL BARBAR AMPERSAND AMPERAMPER
follow(unattributed_core_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND
follow(type_variance) = QUOTE
follow(type_variables_with_variance_comma_list) = RPAREN
follow(type_variables_with_variance) = error SEMI RBRACKET RBRACE PLUSEQ LBRACKETAT EQUAL EOF DOCSTRING CONSTRAINT COLONEQUAL AND
follow(type_variable_with_variance) = RPAREN COMMA
follow(type_variable) = RPAREN COMMA
follow(type_parameters) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE GREATER EQUALGREATER EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER COLON BARRBRACKET BAR AS AND AMPERSAND
follow(type_parameter) = RPAREN COMMA
follow(type_other_kind) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING CONSTRAINT AND
follow(type_longident) = error WITH WHEN SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETAT LBRACE IN GREATER EQUALGREATER EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER COLONCOLON COLON BARRBRACKET BAR AS AND
follow(type_declarations) = error SEMI RBRACKET RBRACE EOF
follow(type_declaration_kind) = error SEMI RBRACKET RBRACE EOF
follow(type_declaration_details) = error SEMI RBRACKET RBRACE EOF
follow(type_constraint) = error SEMI RPAREN RBRACKET RBRACE EQUAL COMMA BARRBRACKET
follow(toplevel_phrase) = #
follow(toplevel_directive) = SEMI EOF
follow(tag_field) = RBRACKET LBRACKETAT GREATER DOCSTRING BAR
follow(subtractive) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
follow(structure_item) = error SEMI RBRACKET RBRACE EOF
follow(structure) = RBRACKET RBRACE EOF
follow(string_literal_labels) = RBRACE
follow(string_literal_label) = RBRACE COMMA
follow(string_literal_exprs_maybe_punned) = error RBRACE
follow(string_literal_expr_maybe_punned_with_comma) = STRING
follow(string_literal_expr_maybe_punned) = error RBRACE COMMA
follow(str_type_extension) = error SEMI RBRACKET RBRACE EOF
follow(str_exception_declaration) = error SEMI RBRACKET RBRACE EOF
follow(single_attr_id) = error WHILE UNDERSCORE UIDENT TYPE TRY TRUE SWITCH STRING SHARP REC RBRACKET QUESTION PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN DOT DOCSTRING COLON CLASS CHAR BAR BANG BACKQUOTE ASSERT
follow(simple_pattern_not_ident) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(simple_pattern_ident) = error WHEN SEMI RPAREN RBRACKET RBRACE LPAREN IN EQUALGREATER EQUAL EOF COMMA COLONGREATER COLONCOLON COLON BARRBRACKET BAR AS
follow(simple_pattern_direct_argument) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(simple_pattern) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(simple_module_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUALGREATER EQUAL EOF DOCSTRING COMMA COLONGREATER BARRBRACKET AND
follow(simple_expr_template_constructor) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
follow(simple_expr_no_constructor) = WITH SHARPOP SHARPEQUAL SHARP POSTFIXOP MINUSGREATER LBRACKET LBRACE DOT
follow(simple_expr_no_call) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
follow(simple_expr_direct_argument) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(simple_expr_call) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
follow(signed_constant) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF DOTDOT COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(signature_items) = error SEMI RBRACKET RBRACE EOF
follow(signature_item) = error SEMI RBRACKET RBRACE EOF
follow(signature) = error RBRACKET RBRACE EOF
follow(sig_type_extension) = error SEMI RBRACKET RBRACE EOF
follow(sig_exception_declaration) = error SEMI RBRACKET RBRACE EOF
follow(seq_expr_no_seq) = error RBRACE BAR
follow(seq_expr) = error RBRACE BAR
follow(separated_nonempty_list(AMPERSAND,non_arrowed_simple_core_types)) = RBRACKET LBRACKETAT GREATER DOCSTRING BAR
follow(row_field_list) = RBRACKET GREATER
follow(row_field) = RBRACKET LBRACKETAT GREATER DOCSTRING BAR
follow(record_label_declaration) = RBRACE COMMA
follow(record_expr_with_string_keys) = error RBRACE
follow(record_expr) = error RBRACE
follow(record_declaration) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING CONSTRAINT COLON BAR AND
follow(rec_flag) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
follow(protected_type) = RPAREN EQUAL COMMA
follow(primitive_declaration) = error SEMI RBRACKET RBRACE EOF
follow(poly_type) = error SEMI RBRACE LBRACE EQUAL COMMA
follow(payload) = RBRACKET
follow(pattern_without_or) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(pattern_optional_constraint) = RPAREN EQUAL COMMA
follow(pattern_constructor_argument) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(pattern_comma_list_extension) = error RBRACKET
follow(pattern) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLON BARRBRACKET BAR
follow(parse_pattern) = #
follow(parse_expression) = #
follow(parse_core_type) = #
follow(parenthesized_expr) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BACKQUOTE
follow(package_type) = error SEMI RPAREN RBRACKET RBRACE EQUAL COMMA COLONGREATER BARRBRACKET
follow(override_flag) = VIRTUAL UIDENT MUTABLE LPAREN LIDENT LBRACKETPERCENT LBRACKETAT LBRACE FUN ES6_FUN DOCSTRING CLASS
follow(optional_expr_extension) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BAR BACKQUOTE
follow(optional) = WHILE UNDERSCORE UIDENT TRY TRUE SWITCH STRING RPAREN PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN EQUALGREATER DOCSTRING COMMA COLONGREATER COLON CHAR BANG BACKQUOTE ASSERT
follow(option(type_constraint)) = RPAREN COMMA
follow(option(preceded(WHEN,expr))) = EQUALGREATER
follow(option(preceded(COLONGREATER,core_type))) = error SEMI RPAREN RBRACKET RBRACE EQUAL COMMA BARRBRACKET
follow(option(preceded(COLON,simple_module_type))) = EQUALGREATER
follow(option(preceded(COLON,poly_type))) = LBRACE EQUAL
follow(option(preceded(COLON,non_arrowed_core_type))) = LBRACE EQUALGREATER
follow(option(preceded(COLON,expr))) = error RBRACE COMMA
follow(option(preceded(COLON,core_type))) = error SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING CONSTRAINT COMMA BAR AND
follow(option(preceded(COLON,class_constructor_type))) = LBRACE EQUAL
follow(option(preceded(AS,LIDENT))) = error SEMI RBRACE
follow(option(item_extension_sugar)) = UNDERSCORE UIDENT TRUE STRING SHARP REC PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION DOCSTRING CHAR BACKQUOTE
follow(option(constructor_arguments)) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING CONSTRAINT COLON BAR AND
follow(option(SEMI)) = error RBRACE BAR
follow(option(OF)) = UIDENT LIDENT
follow(option(MODULE)) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACKETAT LBRACE DOCSTRING
follow(option(LET)) = OPEN
follow(option(DOTDOTDOT)) = WHILE UNDERSCORE UIDENT TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE EXCEPTION ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
follow(option(DOT)) = WHILE UNDERSCORE UIDENT TRY TRUE TILDE SWITCH STRING SHARP QUOTE PREFIXOP PLUSDOT PLUS NEW MODULE MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
follow(option(COMMA)) = error RPAREN RBRACKET RBRACE GREATERRBRACE BARRBRACKET
follow(opt_LET_MODULE_ident) = LPAREN LBRACE EQUAL COLON
follow(opt_LET_MODULE_REC_ident) = LPAREN LBRACE EQUAL COLON
follow(opt_LET_MODULE) = UIDENT REC LIDENT
follow(operator) = RPAREN
follow(open_statement) = error SEMI RBRACKET RBRACE EOF
follow(object_record_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE GREATER EQUALGREATER EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER COLON BARRBRACKET BAR AS AND
follow(object_label_declarations) = RBRACE
follow(object_label_declaration) = RBRACE COMMA
follow(object_body_class_fields) = error RBRACE
follow(object_body) = error RBRACE
follow(nonrec_flag) = UIDENT LIDENT
follow(nonempty_list(preceded(QUOTE,ident))) = DOT
follow(nonempty_list(preceded(CONSTRAINT,constrain))) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING COMMA COLONGREATER BARRBRACKET AND
follow(nonempty_list(name_tag)) = RBRACKET
follow(nonempty_list(attributed_ext_constructor(extension_constructor_declaration))) = error SEMI RBRACKET RBRACE EOF
follow(nonempty_list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = error SEMI RBRACKET RBRACE EOF
follow(nonempty_list(as_loc(attribute))) = error WHILE VAL UNDERSCORE UIDENT TYPE TRY TRUE TILDE SWITCH STRING SHARP SEMI RBRACKET RBRACE QUOTE PUB PRI PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MUTABLE MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT INITIALIZER INHERIT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN EOF CONSTRAINT COLONCOLON CLASS CHAR BAR BANG BACKQUOTE ASSERT AS AND
follow(nonempty_list(__anonymous_31)) = error SEMI RBRACKET RBRACE EOF
follow(nonempty_list(LIDENT)) = DOT
follow(non_labeled_argument_list) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
follow(non_arrowed_simple_core_types) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE GREATER EQUALGREATER EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND AMPERSAND
follow(non_arrowed_simple_core_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE GREATER EQUALGREATER EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND
follow(non_arrowed_core_type) = RBRACKET LBRACKETAT LBRACE GREATER EQUALGREATER DOCSTRING BAR
follow(mutable_or_virtual_flags) = LIDENT
follow(mutable_flag) = LIDENT
follow(mty_longident) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUALGREATER EQUAL EOF DOCSTRING COMMA COLONGREATER BARRBRACKET AND
follow(module_type_signature) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUALGREATER EQUAL EOF DOCSTRING COMMA COLONGREATER BARRBRACKET AND
follow(module_type_body(EQUAL)) = error SEMI RBRACKET RBRACE EOF
follow(module_type_body(COLON)) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(module_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING COMMA COLONGREATER BARRBRACKET AND
follow(module_parameter) = RPAREN COMMA
follow(module_expr_structure) = error SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETAT LBRACE EOF DOCSTRING COMMA COLON AND
follow(module_expr_body) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(module_expr) = error SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETAT LBRACE EOF DOCSTRING COMMA COLON AND
follow(module_declaration) = error SEMI RBRACKET RBRACE EOF
follow(module_complex_expr) = RPAREN COMMA
follow(module_binding_body) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(module_arguments_comma_list) = RPAREN
follow(module_arguments) = error SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETAT LBRACE EOF DOCSTRING COMMA COLON AND
follow(mod_longident) = error WITH WHEN UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(mod_ext_longident) = error WITH SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION LIDENT LBRACKETAT LBRACE INFIXOP3 GREATERDOTDOTDOT GREATER EQUAL EOF DOT DOCSTRING COMMA COLONGREATER BARRBRACKET AND
follow(mod_ext_apply) = error WITH SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKETAT LBRACE INFIXOP3 GREATERDOTDOTDOT GREATER EQUAL EOF DOT DOCSTRING COMMA COLONGREATER BARRBRACKET AND
follow(method_) = error SEMI RBRACE
follow(match_case(seq_expr)) = RBRACE BAR
follow(match_case(expr)) = error TO STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER EQUALGREATER EOF DOWNTO DOCSTRING COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(lseparated_nonempty_list_aux(SEMI,class_sig_field)) = error SEMI RBRACE
follow(lseparated_nonempty_list_aux(SEMI,class_field)) = error SEMI RBRACE
follow(lseparated_nonempty_list_aux(COMMA,uncurried_labeled_expr)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,uncurried_arrow_type_parameter)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,type_variable_with_variance)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,type_parameter)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,string_literal_label)) = RBRACE COMMA
follow(lseparated_nonempty_list_aux(COMMA,string_literal_expr_maybe_punned)) = error RBRACE COMMA
follow(lseparated_nonempty_list_aux(COMMA,record_label_declaration)) = RBRACE COMMA
follow(lseparated_nonempty_list_aux(COMMA,protected_type)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,pattern_optional_constraint)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,opt_spread(pattern))) = error SEMI RBRACKET COMMA BARRBRACKET
follow(lseparated_nonempty_list_aux(COMMA,opt_spread(lbl_expr))) = error RBRACE COMMA
follow(lseparated_nonempty_list_aux(COMMA,opt_spread(expr_optional_constraint))) = RBRACKET COMMA BARRBRACKET
follow(lseparated_nonempty_list_aux(COMMA,object_label_declaration)) = RBRACE COMMA
follow(lseparated_nonempty_list_aux(COMMA,module_parameter)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,module_complex_expr)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,mod_ext_longident)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,labeled_pattern)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(COMMA,field_expr)) = error GREATERRBRACE COMMA
follow(lseparated_nonempty_list_aux(COMMA,expr_optional_constraint)) = error RPAREN COMMA BARRBRACKET
follow(lseparated_nonempty_list_aux(COMMA,expr)) = RBRACE COMMA
follow(lseparated_nonempty_list_aux(COMMA,core_type)) = RPAREN COMMA
follow(lseparated_nonempty_list_aux(AND,with_constraint)) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING COMMA COLONGREATER BARRBRACKET AND
follow(loption(type_parameters)) = error SEMI RPAREN RBRACKET RBRACE LBRACKETAT EOF DOCSTRING COLON AS AND
follow(loption(terminated(pattern_comma_list,option(COMMA)))) = BARRBRACKET
follow(loption(row_field_list)) = RBRACKET
follow(loption(preceded(GREATER,nonempty_list(name_tag)))) = RBRACKET
follow(loption(parenthesized(type_variables_with_variance_comma_list))) = error SEMI RBRACKET RBRACE PLUSEQ LBRACKETAT EQUAL EOF DOCSTRING CONSTRAINT COLONEQUAL AND
follow(loption(parenthesized(class_type_arguments_comma_list))) = error SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING AND
follow(loption(object_label_declarations)) = RBRACE
follow(loption(located_attributes)) = AS
follow(loption(functor_parameters)) = LBRACE EQUAL COLON
follow(loption(class_type_parameters)) = LBRACE EQUAL COLON
follow(longident_type_constraint) = RPAREN COMMA
follow(llist_aux(preceded(COMMA,opt_spread(lbl_expr)))) = error SEMI RBRACE COMMA
follow(llist_aux(match_case(seq_expr))) = RBRACE BAR
follow(llist_aux(match_case(expr))) = error TO STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER EQUALGREATER EOF DOWNTO DOCSTRING COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(list(simple_expr_no_call)) = LESSSLASHIDENTGREATER LESSSLASHGREATER
follow(list(bar_row_field)) = RBRACKET GREATER
follow(list(attributed_ext_constructor(extension_constructor_declaration))) = error SEMI RBRACKET RBRACE EOF
follow(list(attributed_ext_constructor(either(extension_constructor_declaration,extension_constructor_rebind)))) = error SEMI RBRACKET RBRACE EOF
follow(list(and_module_rec_declaration)) = error SEMI RBRACKET RBRACE EOF
follow(list(and_module_bindings)) = error SEMI RBRACKET RBRACE EOF
follow(list(and_let_binding)) = error SEMI RBRACKET RBRACE EOF BAR
follow(list(and_class_type_declaration)) = error SEMI RBRACKET RBRACE EOF
follow(list(and_class_description)) = error SEMI RBRACKET RBRACE EOF
follow(list(and_class_declaration)) = error SEMI RBRACKET RBRACE EOF
follow(let_bindings) = error SEMI RBRACKET RBRACE EOF BAR
follow(let_binding_body) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING BAR AND
follow(let_binding) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING BAR AND
follow(lbl_pattern) = error RBRACE COMMA
follow(labelled_arrow_type_parameter_optional) = RPAREN EQUALGREATER COMMA
follow(labeled_pattern_constraint) = RPAREN EQUAL COMMA
follow(labeled_pattern) = RPAREN COMMA
follow(labeled_expr_constraint) = RPAREN COMMA
follow(labeled_expr) = RPAREN COMMA
follow(labeled_arguments) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_longident) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(jsx_without_leading_less) = RBRACKET COMMA
follow(jsx_start_tag_and_args_without_leading_less) = SLASHGREATER GREATERDOTDOTDOT GREATER
follow(jsx_start_tag_and_args) = SLASHGREATER GREATERDOTDOTDOT GREATER
follow(jsx_arguments) = SLASHGREATER GREATERDOTDOTDOT GREATER
follow(jsx) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
follow(item_extension_sugar) = WHILE UNDERSCORE UIDENT TYPE TRY TRUE SWITCH STRING SHARP REC PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN DOCSTRING CLASS CHAR BAR BANG BACKQUOTE ASSERT
follow(item_extension) = error SEMI RBRACKET RBRACE EOF
follow(interface) = #
follow(implementation) = #
follow(ident) = error WITH WHEN UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT DOCSTRING CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(greater_spread) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BACKQUOTE
follow(generalized_constructor_arguments) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING CONSTRAINT BAR AND
follow(functor_parameters) = LBRACE EQUALGREATER EQUAL COLON
follow(fun_def(EQUALGREATER,non_arrowed_core_type)) = error TO STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER EQUALGREATER EOF DOWNTO DOCSTRING COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(fun_def(EQUAL,core_type)) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING BAR AND
follow(field_expr) = error GREATERRBRACE COMMA
follow(extension_constructor_rebind) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING BAR
follow(extension_constructor_declaration) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING BAR
follow(extension) = error WITH WHEN UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT DOCSTRING CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(expr_optional_constraint) = error SEMI RPAREN RBRACKET RBRACE COMMA BARRBRACKET
follow(expr_list) = error RPAREN BARRBRACKET
follow(expr_comma_seq_extension) = RBRACKET
follow(expr) = error TO STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER EQUALGREATER EOF DOWNTO DOCSTRING COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(es6_parameters) = EQUALGREATER COLON
follow(embedded(private_flag)) = UNDERSCORE UIDENT TRUE TILDE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETAT LBRACKET LBRACE FALSE ES6_FUN DOCSTRING COLONCOLON BAR
follow(embedded(__anonymous_38)) = SEMI EOF
follow(embedded(__anonymous_32)) = RPAREN COMMA
follow(embedded(__anonymous_1)) = #
follow(embedded(__anonymous_0)) = #
follow(either(preceded(EQUALGREATER,expr),braced_expr)) = error TO STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER EQUALGREATER EOF DOWNTO DOCSTRING COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(either(preceded(EQUAL,expr),braced_expr)) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING BAR AND
follow(either(preceded(EQUAL,class_instance_type),class_type_body)) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(either(preceded(EQUAL,class_expr),class_body_expr)) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(either(parenthesized(longident_type_constraint),longident_type_constraint)) = RPAREN COMMA
follow(either(extension_constructor_declaration,extension_constructor_rebind)) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING BAR
follow(either(constructor_declaration,bar_constructor_declaration)) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING CONSTRAINT BAR AND
follow(either(__anonymous_12,__anonymous_13)) = VIRTUAL LIDENT BANG
follow(either(ES6_FUN,FUN)) = LPAREN
follow(direction_flag) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
follow(core_type2) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND
follow(core_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AND
follow(constructor_declarations_aux) = error SEMI RBRACKET RBRACE EOF
follow(constructor_declarations) = error SEMI RBRACKET RBRACE EOF
follow(constructor_declaration) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING CONSTRAINT BAR AND
follow(constructor_arguments_comma_list) = RPAREN
follow(constructor_arguments) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING CONSTRAINT COLON BAR AND
follow(constrain_field) = error SEMI RBRACE
follow(constrain) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER BARRBRACKET AND
follow(constr_longident) = error WITH WHEN UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(constant) = error WITH WHEN UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOTDOT DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(clty_longident) = error SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETAT LBRACE EQUAL EOF DOCSTRING AND
follow(class_type_declarations) = error SEMI RBRACKET RBRACE EOF
follow(class_type_declaration_details) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(class_type_body) = error SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING AND
follow(class_type_arguments_comma_list) = RPAREN
follow(class_simple_expr) = error SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETLESS LBRACKETAT LBRACELESS LBRACE EOF DOCSTRING COLON AS AND
follow(class_sig_field) = error SEMI RBRACE
follow(class_sig_body_fields) = error RBRACE
follow(class_sig_body) = error RBRACE
follow(class_self_type) = error SEMI RBRACE
follow(class_self_expr) = error SEMI RBRACE
follow(class_longident) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT DOCSTRING CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(class_instance_type) = error SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING AND
follow(class_field) = error SEMI RBRACE
follow(class_expr_lets_and_rest) = error RBRACE
follow(class_expr) = error SEMI RPAREN RBRACKET RBRACE LBRACKETAT EOF DOCSTRING COLON AS AND
follow(class_descriptions) = error SEMI RBRACKET RBRACE EOF
follow(class_description_details) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(class_declaration_details) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(class_declaration_body) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(class_constructor_type) = error SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING AND
follow(braced_expr) = error WITH UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARPEQUAL SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP POSTFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATERDOTDOTDOT GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT DOCSTRING COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(boption(AMPERSAND)) = LPAREN
follow(basic_core_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE GREATER EQUALGREATER EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND
follow(bar_row_field) = RBRACKET LBRACKETAT GREATER DOCSTRING BAR
follow(bar_constructor_declaration) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING CONSTRAINT BAR AND
follow(attributed_ext_constructors(extension_constructor_declaration)) = error SEMI RBRACKET RBRACE EOF
follow(attributed_ext_constructors(either(extension_constructor_declaration,extension_constructor_rebind))) = error SEMI RBRACKET RBRACE EOF
follow(attribute) = error WHILE VAL UNDERSCORE UIDENT TYPE TRY TRUE TILDE SWITCH STRING SHARP SEMI RBRACKET RBRACE QUOTE PUB PRI PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MUTABLE MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INITIALIZER INHERIT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN EOF DOCSTRING CONSTRAINT COLONCOLON CLASS CHAR BAR BANG BACKQUOTE ASSERT AS AND
follow(attr_id) = error WHILE UNDERSCORE UIDENT TYPE TRY TRUE SWITCH STRING SHARP REC RBRACKET QUESTION PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LESS LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION ES6_FUN DOCSTRING COLON CLASS CHAR BAR BANG BACKQUOTE ASSERT
follow(arrowed_simple_core_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETAT LBRACE EQUAL EOF DOCSTRING CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND
follow(arrow_type_parameters) = EQUALGREATER
follow(arrow_type_parameter) = RPAREN COMMA
follow(and_type_declaration) = error SEMI RBRACKET RBRACE EOF
follow(and_module_rec_declaration) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(and_module_bindings) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(and_class_type_declaration) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(and_class_description) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(and_class_declaration) = error SEMI RBRACKET RBRACE LBRACKETAT EOF DOCSTRING AND
follow(additive) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETAT LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE ES6_FUN DOCSTRING CHAR BANG BACKQUOTE ASSERT
follow(_lbl_pattern_list) = error RBRACE
Built an LR(0) automaton with 2463 states.
The grammar is not SLR(1) -- 134 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 4272 states.
3591 shift/reduce conflicts were silently solved.
Extra reductions on error were added in 180 states.
Priority played a role in 0 of these states.
1614 out of 4272 states have a default reduction.
2112 out of 4272 states are represented.
221 out of 428 symbols keep track of their start position.
323 out of 428 symbols keep track of their end position.
713 out of 1222 productions exploit shiftreduce optimization.
918 out of 4272 states can peek at an error.
10071 functions before inlining, 2284 functions after inlining.
