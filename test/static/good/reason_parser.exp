File "reason_parser.mly", line 976, characters 29-36:
Warning: the token COMMENT is unused.
File "reason_parser.mly", line 978, characters 7-10:
Warning: the token EOL is unused.
File "reason_parser.mly", line 917, characters 7-16:
Warning: the token LESSMINUS is unused.
File "reason_parser.mly", line 925, characters 7-16:
Warning: the token LESSSLASH is unused.
File "reason_parser.mly", line 931, characters 7-19:
Warning: the token MINUSGREATER is unused.
File "reason_parser.mly", line 934, characters 19-28:
Warning: the token NATIVEINT is unused.
File "reason_parser.mly", line 956, characters 7-15:
Warning: the token SEMISEMI is unused.
File "reason_parser.mly", line 964, characters 7-12:
Warning: the token TILDE is unused.
Grammar has 306 nonterminal symbols, among which 7 start symbols.
Grammar has 127 terminal symbols.
Grammar has 888 productions.
nullable(with_type_binder) = false
nullable(with_constraints) = false
nullable(with_constraint) = false
nullable(virtual_flag) = true
nullable(value_type) = false
nullable(value) = false
nullable(val_longident) = false
nullable(val_ident) = false
nullable(use_file) = false
nullable(typevar_list) = false
nullable(type_variance) = true
nullable(type_variable) = false
nullable(type_strictly_longident) = false
nullable(type_parameter) = false
nullable(type_longident) = false
nullable(type_kind) = true
nullable(type_declaration_details) = false
nullable(type_constraint_right_of_colon) = false
nullable(type_constraint) = false
nullable(toplevel_phrase) = false
nullable(toplevel_directive) = false
nullable(tag_field) = false
nullable(subtractive) = false
nullable(structure_item_without_item_extension_sugar) = false
nullable(structure_item) = false
nullable(structure) = true
nullable(string_literal_expr_list_that_is_not_a_single_punned_field) = false
nullable(string_literal_expr_list) = false
nullable(string_literal_expr) = false
nullable(str_type_extension) = false
nullable(str_extension_constructors) = false
nullable(str_exception_declaration) = false
nullable(single_attr_id) = false
nullable(simple_pattern_not_ident) = false
nullable(simple_pattern_list) = false
nullable(simple_pattern) = false
nullable(simple_non_labeled_expr_list_as_tuple) = false
nullable(simple_non_labeled_expr_list) = false
nullable(simple_module_type) = false
nullable(simple_module_expr) = false
nullable(simple_labeled_expr_list) = false
nullable(simple_expr_list) = true
nullable(simple_expr) = false
nullable(signed_constant) = false
nullable(signature_item) = false
nullable(signature) = true
nullable(sig_type_extension) = false
nullable(sig_extension_constructors) = false
nullable(sig_exception_declaration) = false
nullable(semi_terminated_seq_expr_row) = false
nullable(semi_terminated_seq_expr) = false
nullable(semi_terminated_class_fields) = true
nullable(row_field_list) = false
nullable(row_field) = false
nullable(record_expr_with_string_keys) = false
nullable(record_expr) = false
nullable(rec_flag) = true
nullable(private_virtual_flags) = true
nullable(private_flag) = true
nullable(primitive_declaration) = false
nullable(potentially_long_ident_and_optional_type_parameters) = false
nullable(post_item_attributes) = true
nullable(poly_type) = false
nullable(payload) = true
nullable(pattern_without_or) = false
nullable(pattern_with_bar) = false
nullable(pattern_two_or_more_comma_list) = false
nullable(pattern_optional_constraint) = false
nullable(pattern_comma_list_extension) = false
nullable(pattern_comma_list) = false
nullable(pattern) = false
nullable(parse_pattern) = false
nullable(parse_expression) = false
nullable(parse_core_type) = false
nullable(parent_binder) = true
nullable(package_type_cstrs) = false
nullable(package_type_cstr) = false
nullable(package_type) = false
nullable(override_flag) = true
nullable(or_pattern) = false
nullable(optional_type_variable_with_variance) = false
nullable(optional_type_parameters) = true
nullable(optional_type_parameter_list) = false
nullable(option(OF)) = true
nullable(option(LET)) = true
nullable(opt_semi) = true
nullable(opt_let_module) = false
nullable(opt_comma) = true
nullable(opt_bar) = true
nullable(opt_ampersand) = true
nullable(operator) = false
nullable(open_statement) = false
nullable(object_record_type) = false
nullable(nonrec_flag) = true
nullable(nonlocal_module_binding_details) = false
nullable(non_punned_string_literal_expression) = false
nullable(non_punned_lbl_expression) = false
nullable(non_arrowed_simple_core_type_list) = false
nullable(non_arrowed_simple_core_type) = false
nullable(non_arrowed_non_simple_core_type) = false
nullable(non_arrowed_module_type) = false
nullable(non_arrowed_core_type) = false
nullable(non_arrowed_class_constructor_type) = false
nullable(name_tag_list) = false
nullable(name_tag) = false
nullable(mutable_flag) = true
nullable(mty_longident) = false
nullable(module_type) = false
nullable(module_rec_declaration_details) = false
nullable(module_expr) = false
nullable(module_declaration) = false
nullable(module_binding_body_functor) = false
nullable(module_binding_body_expr) = false
nullable(module_binding_body) = false
nullable(mod_longident) = false
nullable(mod_ext_longident) = false
nullable(mod_ext2) = false
nullable(method_) = false
nullable(mark_position_typ2(_non_arrowed_simple_core_type)) = false
nullable(mark_position_typ2(_non_arrowed_non_simple_core_type)) = false
nullable(mark_position_typ2(_core_type2)) = false
nullable(mark_position_typ2(_core_type)) = false
nullable(mark_position_typ(_type_variable)) = false
nullable(mark_position_typ(_poly_type)) = false
nullable(mark_position_str(_structure_item_without_item_extension_sugar)) = false
nullable(mark_position_str(_structure_item)) = false
nullable(mark_position_sig(_signature_item)) = false
nullable(mark_position_pat(_simple_pattern_not_ident)) = false
nullable(mark_position_pat(_simple_pattern)) = false
nullable(mark_position_pat(_pattern_without_or)) = false
nullable(mark_position_pat(_pattern_optional_constraint)) = false
nullable(mark_position_pat(_or_pattern)) = false
nullable(mark_position_pat(_class_self_pattern)) = true
nullable(mark_position_mty(_simple_module_type)) = false
nullable(mark_position_mty(_non_arrowed_module_type)) = false
nullable(mark_position_mty(_module_type)) = false
nullable(mark_position_mty(_module_declaration)) = false
nullable(mark_position_mod(_simple_module_expr)) = false
nullable(mark_position_mod(_module_expr)) = false
nullable(mark_position_mod(_module_binding_body_functor)) = false
nullable(mark_position_exp(expr)) = false
nullable(mark_position_exp(_simple_non_labeled_expr_list_as_tuple)) = false
nullable(mark_position_exp(_simple_expr)) = false
nullable(mark_position_exp(_semi_terminated_seq_expr_row)) = false
nullable(mark_position_exp(_semi_terminated_seq_expr)) = false
nullable(mark_position_exp(_expr)) = false
nullable(mark_position_exp(_curried_binding_return_typed)) = false
nullable(mark_position_cty(_non_arrowed_class_constructor_type)) = false
nullable(mark_position_cty(_class_instance_type)) = false
nullable(mark_position_cty(_class_constructor_type)) = false
nullable(mark_position_ctf(_class_sig_field)) = false
nullable(mark_position_cl(_constrained_class_declaration)) = false
nullable(mark_position_cl(_class_simple_expr)) = false
nullable(mark_position_cl(_class_fun_def)) = false
nullable(mark_position_cl(_class_fun_binding)) = false
nullable(mark_position_cl(_class_expr_lets_and_rest)) = true
nullable(mark_position_cl(_class_expr)) = false
nullable(mark_position_cf(_class_field)) = false
nullable(many_type_declarations) = false
nullable(many_nonlocal_module_bindings) = false
nullable(many_module_rec_declarations) = false
nullable(many_class_type_declarations) = false
nullable(many_class_descriptions) = false
nullable(many_class_declarations) = false
nullable(lident_list) = false
nullable(let_bindings) = false
nullable(let_binding_impl) = false
nullable(let_binding_body) = false
nullable(let_binding) = false
nullable(less_aggressive_simple_expression) = false
nullable(leading_bar_match_cases_to_sequence_body) = false
nullable(leading_bar_match_cases) = false
nullable(leading_bar_match_case_to_sequence_body) = false
nullable(leading_bar_match_case) = false
nullable(lbl_pattern_list) = false
nullable(lbl_pattern) = false
nullable(lbl_expr_list_that_is_not_a_single_punned_field) = false
nullable(lbl_expr_list) = false
nullable(lbl_expr) = false
nullable(labeled_simple_pattern) = false
nullable(labeled_simple_expr) = false
nullable(label_longident) = false
nullable(label_expr) = false
nullable(label_declarations) = false
nullable(label_declaration) = false
nullable(label) = false
nullable(jsx_without_leading_less) = false
nullable(jsx_start_tag_and_args_without_leading_less) = false
nullable(jsx_start_tag_and_args) = false
nullable(jsx_arguments) = true
nullable(jsx) = false
nullable(item_extension_sugar) = false
nullable(item_extension) = false
nullable(item_attribute) = false
nullable(interface) = false
nullable(implementation) = false
nullable(ident) = false
nullable(generalized_constructor_arguments) = true
nullable(functor_args) = false
nullable(functor_arg_name) = false
nullable(functor_arg) = false
nullable(fun_def) = false
nullable(floating_attribute) = false
nullable(field_expr_list) = false
nullable(field_expr) = false
nullable(extension_constructor_rebind) = false
nullable(extension_constructor_declaration) = false
nullable(extension) = false
nullable(expr_optional_constraint) = false
nullable(expr_comma_seq_extension) = false
nullable(expr_comma_seq) = false
nullable(expr_comma_list) = false
nullable(expr) = false
nullable(direction_flag) = false
nullable(curried_binding_return_typed_) = false
nullable(curried_binding_return_typed) = false
nullable(curried_binding) = false
nullable(core_type_comma_list) = false
nullable(core_type2) = false
nullable(core_type) = false
nullable(constructor_declarations_leading_bar) = false
nullable(constructor_declarations) = false
nullable(constructor_declaration_no_leading_bar) = false
nullable(constructor_declaration_leading_bar) = false
nullable(constructor_arguments) = false
nullable(constraints) = true
nullable(constrained_class_declaration) = false
nullable(constrain_field) = false
nullable(constrain) = false
nullable(constr_longident) = false
nullable(constant) = false
nullable(clty_longident) = false
nullable(class_type_parameters) = true
nullable(class_type_declaration_details) = false
nullable(class_simple_expr) = false
nullable(class_sig_fields) = true
nullable(class_sig_field) = false
nullable(class_sig_body) = true
nullable(class_self_type) = true
nullable(class_self_pattern_and_structure) = true
nullable(class_self_pattern) = true
nullable(class_longident) = false
nullable(class_instance_type) = false
nullable(class_fun_return) = false
nullable(class_fun_def) = false
nullable(class_fun_binding) = false
nullable(class_field) = false
nullable(class_expr_lets_and_rest) = true
nullable(class_expr) = false
nullable(class_description_details) = false
nullable(class_declaration_details) = false
nullable(class_constructor_type) = false
nullable(attributes) = true
nullable(attribute) = false
nullable(attr_id) = false
nullable(and_type_declaration) = false
nullable(and_nonlocal_module_bindings) = false
nullable(and_module_rec_declaration) = false
nullable(and_let_binding) = false
nullable(and_class_type_declaration) = false
nullable(and_class_description) = false
nullable(and_class_declaration) = false
nullable(amper_type_list) = false
nullable(additive) = false
nullable(_use_file) = false
nullable(_type_variable) = false
nullable(_toplevel_phrase) = false
nullable(_structure_item_without_item_extension_sugar) = false
nullable(_structure_item) = false
nullable(_simple_pattern_not_ident) = false
nullable(_simple_pattern) = false
nullable(_simple_non_labeled_expr_list_as_tuple) = false
nullable(_simple_module_type) = false
nullable(_simple_module_expr) = false
nullable(_simple_expr) = false
nullable(_signature_item) = false
nullable(_semi_terminated_seq_expr_row) = false
nullable(_semi_terminated_seq_expr) = false
nullable(_poly_type) = false
nullable(_pattern_without_or) = false
nullable(_pattern_optional_constraint) = false
nullable(_or_pattern) = false
nullable(_optional_type_variable_with_variance) = false
nullable(_non_arrowed_simple_core_type) = false
nullable(_non_arrowed_non_simple_core_type) = false
nullable(_non_arrowed_module_type) = false
nullable(_non_arrowed_class_constructor_type) = false
nullable(_module_type) = false
nullable(_module_expr) = false
nullable(_module_declaration) = false
nullable(_module_binding_body_functor) = false
nullable(_expr) = false
nullable(_curried_binding_return_typed) = false
nullable(_core_type2) = false
nullable(_core_type) = false
nullable(_constrained_class_declaration) = false
nullable(_class_simple_expr) = false
nullable(_class_sig_field) = false
nullable(_class_self_pattern) = true
nullable(_class_instance_type) = false
nullable(_class_fun_def) = false
nullable(_class_fun_binding) = false
nullable(_class_field) = false
nullable(_class_expr_lets_and_rest) = true
nullable(_class_expr) = false
nullable(_class_constructor_type) = false
first(with_type_binder) = EQUAL
first(with_constraints) = TYPE MODULE
first(with_constraint) = TYPE MODULE
first(virtual_flag) = VIRTUAL
first(value_type) = VIRTUAL MUTABLE LIDENT
first(value) = VIRTUAL MUTABLE LIDENT BANG
first(val_longident) = UIDENT LPAREN LIDENT
first(val_ident) = LPAREN LIDENT
first(use_file) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BANG BACKQUOTE ASSERT
first(typevar_list) = QUOTE
first(type_variance) = PLUS MINUS
first(type_variable) = QUOTE
first(type_strictly_longident) = UIDENT
first(type_parameter) = QUOTE PLUS MINUS
first(type_longident) = UIDENT LIDENT
first(type_kind) = EQUAL
first(type_declaration_details) = UIDENT LIDENT
first(type_constraint_right_of_colon) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(type_constraint) = COLONGREATER COLON
first(toplevel_phrase) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BANG BACKQUOTE ASSERT
first(toplevel_directive) = SHARP
first(tag_field) = BACKQUOTE
first(subtractive) = MINUSDOT MINUS
first(structure_item_without_item_extension_sugar) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BANG BACKQUOTE ASSERT
first(structure_item) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BANG BACKQUOTE ASSERT
first(structure) = error WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BANG BACKQUOTE ASSERT
first(string_literal_expr_list_that_is_not_a_single_punned_field) = STRING
first(string_literal_expr_list) = STRING
first(string_literal_expr) = STRING
first(str_type_extension) = TYPE
first(str_extension_constructors) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(str_exception_declaration) = EXCEPTION
first(single_attr_id) = WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN SWITCH STRUCT SIG REC PRI OR OPEN OF OBJECT NONREC NEW MUTABLE MODULE LIDENT LET LAZY INITIALIZER INHERIT INCLUDE IN IF FUNCTOR FUNCTION FUN FOR FALSE EXTERNAL EXCEPTION END ELSE DOWNTO DONE DO CONSTRAINT CLASS BEGIN ASSERT AS AND
first(simple_pattern_not_ident) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(simple_pattern_list) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(simple_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(simple_non_labeled_expr_list_as_tuple) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
first(simple_non_labeled_expr_list) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
first(simple_module_type) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE
first(simple_module_expr) = UIDENT LPAREN LBRACKETPERCENT LBRACE
first(simple_labeled_expr_list) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENTCOLONCOLON LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE COLONCOLONLIDENT COLONCOLON CHAR BANG BACKQUOTE
first(simple_expr_list) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
first(simple_expr) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
first(signed_constant) = STRING PLUS MINUS INT FLOAT CHAR
first(signature_item) = TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(signature) = TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(sig_type_extension) = TYPE
first(sig_extension_constructors) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(sig_exception_declaration) = EXCEPTION
first(semi_terminated_seq_expr_row) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(semi_terminated_seq_expr) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(semi_terminated_class_fields) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(row_field_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE BACKQUOTE
first(row_field) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE BACKQUOTE
first(record_expr_with_string_keys) = STRING DOTDOTDOT
first(record_expr) = UIDENT LIDENT DOTDOTDOT
first(rec_flag) = REC
first(private_virtual_flags) = VIRTUAL
first(private_flag) = PRI
first(primitive_declaration) = STRING
first(potentially_long_ident_and_optional_type_parameters) = UIDENT LIDENT
first(post_item_attributes) = LBRACKETATAT
first(poly_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(payload) = error WHILE UIDENT TYPE TRY TRUE SWITCH STRING QUESTION PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION COLON CLASS CHAR BANG BACKQUOTE ASSERT
first(pattern_without_or) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(pattern_with_bar) = BAR
first(pattern_two_or_more_comma_list) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(pattern_optional_constraint) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(pattern_comma_list_extension) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(pattern_comma_list) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(parse_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(parse_expression) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(parse_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(parent_binder) = AS
first(package_type_cstrs) = TYPE
first(package_type_cstr) = TYPE
first(package_type) = UIDENT LIDENT
first(override_flag) = BANG
first(or_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(optional_type_variable_with_variance) = UNDERSCORE QUOTE PLUS MINUS
first(optional_type_parameters) = UNDERSCORE QUOTE PLUS MINUS
first(optional_type_parameter_list) = UNDERSCORE QUOTE PLUS MINUS
first(option(OF)) = OF
first(option(LET)) = LET
first(opt_semi) = SEMI
first(opt_let_module) = MODULE LET
first(opt_comma) = COMMA
first(opt_bar) = BAR
first(opt_ampersand) = AMPERSAND
first(operator) = STAR SLASHGREATER PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER COLONEQUAL BARBAR BANG AMPERSAND AMPERAMPER
first(open_statement) = OPEN
first(object_record_type) = LBRACE
first(nonrec_flag) = NONREC
first(nonlocal_module_binding_details) = UIDENT
first(non_punned_string_literal_expression) = STRING
first(non_punned_lbl_expression) = UIDENT LIDENT
first(non_arrowed_simple_core_type_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(non_arrowed_simple_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(non_arrowed_non_simple_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(non_arrowed_module_type) = UIDENT MODULE LPAREN LIDENT LBRACKETPERCENT LBRACE
first(non_arrowed_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(non_arrowed_class_constructor_type) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE
first(name_tag_list) = BACKQUOTE
first(name_tag) = BACKQUOTE
first(mutable_flag) = MUTABLE
first(mty_longident) = UIDENT LIDENT
first(module_type) = UIDENT MODULE LPAREN LIDENT LBRACKETPERCENT LBRACE
first(module_rec_declaration_details) = UIDENT
first(module_expr) = UIDENT LPAREN LBRACKETPERCENT LBRACE FUN
first(module_declaration) = LPAREN COLON
first(module_binding_body_functor) = LPAREN
first(module_binding_body_expr) = EQUAL COLON
first(module_binding_body) = LPAREN EQUAL COLON
first(mod_longident) = UIDENT
first(mod_ext_longident) = UIDENT
first(mod_ext2) = UIDENT
first(method_) = VIRTUAL LIDENT BANG
first(mark_position_typ2(_non_arrowed_simple_core_type)) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(mark_position_typ2(_non_arrowed_non_simple_core_type)) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(mark_position_typ2(_core_type2)) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(mark_position_typ2(_core_type)) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(mark_position_typ(_type_variable)) = QUOTE
first(mark_position_typ(_poly_type)) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(mark_position_str(_structure_item_without_item_extension_sugar)) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BANG BACKQUOTE ASSERT
first(mark_position_str(_structure_item)) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BANG BACKQUOTE ASSERT
first(mark_position_sig(_signature_item)) = TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(mark_position_pat(_simple_pattern_not_ident)) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(mark_position_pat(_simple_pattern)) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(mark_position_pat(_pattern_without_or)) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(mark_position_pat(_pattern_optional_constraint)) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(mark_position_pat(_or_pattern)) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(mark_position_pat(_class_self_pattern)) = AS
first(mark_position_mty(_simple_module_type)) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE
first(mark_position_mty(_non_arrowed_module_type)) = UIDENT MODULE LPAREN LIDENT LBRACKETPERCENT LBRACE
first(mark_position_mty(_module_type)) = UIDENT MODULE LPAREN LIDENT LBRACKETPERCENT LBRACE
first(mark_position_mty(_module_declaration)) = LPAREN COLON
first(mark_position_mod(_simple_module_expr)) = UIDENT LPAREN LBRACKETPERCENT LBRACE
first(mark_position_mod(_module_expr)) = UIDENT LPAREN LBRACKETPERCENT LBRACE FUN
first(mark_position_mod(_module_binding_body_functor)) = LPAREN
first(mark_position_exp(expr)) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(mark_position_exp(_simple_non_labeled_expr_list_as_tuple)) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
first(mark_position_exp(_simple_expr)) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
first(mark_position_exp(_semi_terminated_seq_expr_row)) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(mark_position_exp(_semi_terminated_seq_expr)) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(mark_position_exp(_expr)) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(mark_position_exp(_curried_binding_return_typed)) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(mark_position_cty(_non_arrowed_class_constructor_type)) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE
first(mark_position_cty(_class_instance_type)) = UIDENT LIDENT LBRACKETPERCENT LBRACE
first(mark_position_cty(_class_constructor_type)) = UNDERSCORE UIDENT SHARP QUOTE NEW LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(mark_position_ctf(_class_sig_field)) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(mark_position_cl(_constrained_class_declaration)) = COLON
first(mark_position_cl(_class_simple_expr)) = UIDENT LPAREN LIDENT LBRACE
first(mark_position_cl(_class_fun_def)) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(mark_position_cl(_class_fun_binding)) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(mark_position_cl(_class_expr_lets_and_rest)) = VAL UIDENT PUB PRI PERCENT LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETATATAT LBRACE INITIALIZER INHERIT FUN CONSTRAINT CLASS AS
first(mark_position_cl(_class_expr)) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE FUN CLASS
first(mark_position_cf(_class_field)) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(many_type_declarations) = TYPE
first(many_nonlocal_module_bindings) = MODULE LET
first(many_module_rec_declarations) = MODULE LET
first(many_class_type_declarations) = CLASS
first(many_class_descriptions) = CLASS
first(many_class_declarations) = CLASS
first(lident_list) = LIDENT
first(let_bindings) = PERCENT LET
first(let_binding_impl) = LET
first(let_binding_body) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(let_binding) = PERCENT LET
first(less_aggressive_simple_expression) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
first(leading_bar_match_cases_to_sequence_body) = BAR
first(leading_bar_match_cases) = BAR
first(leading_bar_match_case_to_sequence_body) = BAR
first(leading_bar_match_case) = BAR
first(lbl_pattern_list) = UIDENT LIDENT
first(lbl_pattern) = UIDENT LIDENT
first(lbl_expr_list_that_is_not_a_single_punned_field) = UIDENT LIDENT
first(lbl_expr_list) = UIDENT LIDENT
first(lbl_expr) = UIDENT LIDENT
first(labeled_simple_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(labeled_simple_expr) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENTCOLONCOLON LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE COLONCOLONLIDENT COLONCOLON CHAR BANG BACKQUOTE
first(label_longident) = UIDENT LIDENT
first(label_expr) = LIDENTCOLONCOLON COLONCOLONLIDENT COLONCOLON
first(label_declarations) = MUTABLE LIDENT
first(label_declaration) = MUTABLE LIDENT
first(label) = LIDENT
first(jsx_without_leading_less) = UIDENT GREATER
first(jsx_start_tag_and_args_without_leading_less) = UIDENT
first(jsx_start_tag_and_args) = LESSIDENT
first(jsx_arguments) = LIDENT
first(jsx) = LESSIDENT LESSGREATER
first(item_extension_sugar) = PERCENT
first(item_extension) = LBRACKETPERCENTPERCENT
first(item_attribute) = LBRACKETATAT
first(interface) = TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION EOF CLASS
first(implementation) = error WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BANG BACKQUOTE ASSERT
first(ident) = UIDENT LIDENT
first(generalized_constructor_arguments) = UNDERSCORE UIDENT SHARP QUOTE OF LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE COLON
first(functor_args) = LPAREN
first(functor_arg_name) = UNDERSCORE UIDENT
first(functor_arg) = LPAREN
first(fun_def) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUALGREATER COLONCOLONLIDENT COLON CHAR BACKQUOTE
first(floating_attribute) = LBRACKETATATAT
first(field_expr_list) = LIDENT
first(field_expr) = LIDENT
first(extension_constructor_rebind) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(extension_constructor_declaration) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(extension) = LBRACKETPERCENT
first(expr_optional_constraint) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(expr_comma_seq_extension) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE DOTDOTDOT CHAR BANG BACKQUOTE ASSERT
first(expr_comma_seq) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(expr_comma_list) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(expr) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(direction_flag) = TO DOWNTO
first(curried_binding_return_typed_) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUALGREATER COLONCOLONLIDENT COLON CHAR BACKQUOTE
first(curried_binding_return_typed) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(curried_binding) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUALGREATER COLONCOLONLIDENT CHAR BACKQUOTE
first(core_type_comma_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(core_type2) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(constructor_declarations_leading_bar) = BAR
first(constructor_declarations) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON BAR
first(constructor_declaration_no_leading_bar) = UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
first(constructor_declaration_leading_bar) = BAR
first(constructor_arguments) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(constraints) = CONSTRAINT
first(constrained_class_declaration) = COLON
first(constrain_field) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(constrain) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(constr_longident) = UIDENT TRUE LPAREN LBRACKET FALSE
first(constant) = STRING INT FLOAT CHAR
first(clty_longident) = UIDENT LIDENT
first(class_type_parameters) = QUOTE PLUS MINUS
first(class_type_declaration_details) = VIRTUAL LIDENT
first(class_simple_expr) = UIDENT LPAREN LIDENT LBRACE
first(class_sig_fields) = VAL SEMI PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(class_sig_field) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(class_sig_body) = VAL SEMI PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT AS
first(class_self_type) = AS
first(class_self_pattern_and_structure) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT AS
first(class_self_pattern) = AS
first(class_longident) = UIDENT LIDENT
first(class_instance_type) = UIDENT LIDENT LBRACKETPERCENT LBRACE
first(class_fun_return) = EQUALGREATER COLON
first(class_fun_def) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(class_fun_binding) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(class_field) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(class_expr_lets_and_rest) = VAL UIDENT PUB PRI PERCENT LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETATATAT LBRACE INITIALIZER INHERIT FUN CONSTRAINT CLASS AS
first(class_expr) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE FUN CLASS
first(class_description_details) = VIRTUAL LIDENT
first(class_declaration_details) = VIRTUAL LIDENT
first(class_constructor_type) = UNDERSCORE UIDENT SHARP QUOTE NEW LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(attributes) = LBRACKETAT
first(attribute) = LBRACKETAT
first(attr_id) = WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN SWITCH STRUCT SIG REC PRI OR OPEN OF OBJECT NONREC NEW MUTABLE MODULE LIDENT LET LAZY INITIALIZER INHERIT INCLUDE IN IF FUNCTOR FUNCTION FUN FOR FALSE EXTERNAL EXCEPTION END ELSE DOWNTO DONE DO CONSTRAINT CLASS BEGIN ASSERT AS AND
first(and_type_declaration) = AND
first(and_nonlocal_module_bindings) = AND
first(and_module_rec_declaration) = AND
first(and_let_binding) = AND
first(and_class_type_declaration) = AND
first(and_class_description) = AND
first(and_class_declaration) = AND
first(amper_type_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(additive) = PLUSDOT PLUS
first(_use_file) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BANG BACKQUOTE ASSERT
first(_type_variable) = QUOTE
first(_toplevel_phrase) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING SHARP PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BANG BACKQUOTE ASSERT
first(_structure_item_without_item_extension_sugar) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BANG BACKQUOTE ASSERT
first(_structure_item) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BANG BACKQUOTE ASSERT
first(_simple_pattern_not_ident) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(_simple_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE CHAR BACKQUOTE
first(_simple_non_labeled_expr_list_as_tuple) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
first(_simple_module_type) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE
first(_simple_module_expr) = UIDENT LPAREN LBRACKETPERCENT LBRACE
first(_simple_expr) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
first(_signature_item) = TYPE OPEN MODULE LET LBRACKETPERCENTPERCENT LBRACKETATATAT INCLUDE EXTERNAL EXCEPTION CLASS
first(_semi_terminated_seq_expr_row) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(_semi_terminated_seq_expr) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(_poly_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(_pattern_without_or) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(_pattern_optional_constraint) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(_or_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
first(_optional_type_variable_with_variance) = UNDERSCORE QUOTE PLUS MINUS
first(_non_arrowed_simple_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(_non_arrowed_non_simple_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(_non_arrowed_module_type) = UIDENT MODULE LPAREN LIDENT LBRACKETPERCENT LBRACE
first(_non_arrowed_class_constructor_type) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE
first(_module_type) = UIDENT MODULE LPAREN LIDENT LBRACKETPERCENT LBRACE
first(_module_expr) = UIDENT LPAREN LBRACKETPERCENT LBRACE FUN
first(_module_declaration) = LPAREN COLON
first(_module_binding_body_functor) = LPAREN
first(_expr) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
first(_curried_binding_return_typed) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(_core_type2) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
first(_constrained_class_declaration) = COLON
first(_class_simple_expr) = UIDENT LPAREN LIDENT LBRACE
first(_class_sig_field) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
first(_class_self_pattern) = AS
first(_class_instance_type) = UIDENT LIDENT LBRACKETPERCENT LBRACE
first(_class_fun_def) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(_class_fun_binding) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE COLONCOLONLIDENT CHAR BACKQUOTE
first(_class_field) = VAL PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
first(_class_expr_lets_and_rest) = VAL UIDENT PUB PRI PERCENT LPAREN LIDENT LET LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETATATAT LBRACE INITIALIZER INHERIT FUN CONSTRAINT CLASS AS
first(_class_expr) = UIDENT LPAREN LIDENT LBRACKETPERCENT LBRACE FUN CLASS
first(_class_constructor_type) = UNDERSCORE UIDENT SHARP QUOTE NEW LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
minimal(with_type_binder) = (* 1 *) EQUAL
minimal(with_constraints) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(with_constraint) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(virtual_flag) = (* 0 *)
minimal(value_type) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(value) = (* 3 *) LIDENT EQUAL LIDENT
minimal(val_longident) = (* 1 *) LIDENT
minimal(val_ident) = (* 1 *) LIDENT
minimal(use_file) = (* 1 *) EOF
minimal(typevar_list) = (* 2 *) QUOTE UIDENT
minimal(type_variance) = (* 0 *)
minimal(type_variable) = (* 2 *) QUOTE UIDENT
minimal(type_strictly_longident) = (* 3 *) UIDENT DOT LIDENT
minimal(type_parameter) = (* 2 *) QUOTE UIDENT
minimal(type_longident) = (* 1 *) LIDENT
minimal(type_kind) = (* 0 *)
minimal(type_declaration_details) = (* 1 *) UIDENT
minimal(type_constraint_right_of_colon) = (* 1 *) UNDERSCORE
minimal(type_constraint) = (* 2 *) COLON UNDERSCORE
minimal(toplevel_phrase) = (* 1 *) EOF
minimal(toplevel_directive) = (* 2 *) SHARP UIDENT
minimal(tag_field) = (* 2 *) BACKQUOTE UIDENT
minimal(subtractive) = (* 1 *) MINUS
minimal(structure_item_without_item_extension_sugar) = (* 1 *) LIDENT
minimal(structure_item) = (* 1 *) LIDENT
minimal(structure) = (* 0 *)
minimal(string_literal_expr_list_that_is_not_a_single_punned_field) = (* 3 *) STRING COMMA STRING
minimal(string_literal_expr_list) = (* 1 *) STRING
minimal(string_literal_expr) = (* 1 *) STRING
minimal(str_type_extension) = (* 4 *) TYPE LIDENT PLUSEQ UIDENT
minimal(str_extension_constructors) = (* 1 *) UIDENT
minimal(str_exception_declaration) = (* 2 *) EXCEPTION UIDENT
minimal(single_attr_id) = (* 1 *) LIDENT
minimal(simple_pattern_not_ident) = (* 1 *) UNDERSCORE
minimal(simple_pattern_list) = (* 1 *) LIDENT
minimal(simple_pattern) = (* 1 *) LIDENT
minimal(simple_non_labeled_expr_list_as_tuple) = (* 1 *) LIDENT
minimal(simple_non_labeled_expr_list) = (* 1 *) LIDENT
minimal(simple_module_type) = (* 1 *) UIDENT
minimal(simple_module_expr) = (* 1 *) UIDENT
minimal(simple_labeled_expr_list) = (* 1 *) LIDENT
minimal(simple_expr_list) = (* 0 *)
minimal(simple_expr) = (* 1 *) LIDENT
minimal(signed_constant) = (* 1 *) INT
minimal(signature_item) = (* 2 *) TYPE UIDENT
minimal(signature) = (* 0 *)
minimal(sig_type_extension) = (* 4 *) TYPE LIDENT PLUSEQ UIDENT
minimal(sig_extension_constructors) = (* 1 *) UIDENT
minimal(sig_exception_declaration) = (* 2 *) EXCEPTION UIDENT
minimal(semi_terminated_seq_expr_row) = (* 1 *) LIDENT
minimal(semi_terminated_seq_expr) = (* 1 *) LIDENT
minimal(semi_terminated_class_fields) = (* 0 *)
minimal(row_field_list) = (* 1 *) UNDERSCORE
minimal(row_field) = (* 1 *) UNDERSCORE
minimal(record_expr_with_string_keys) = (* 3 *) STRING COMMA STRING
minimal(record_expr) = (* 3 *) LIDENT COMMA LIDENT
minimal(rec_flag) = (* 0 *)
minimal(private_virtual_flags) = (* 0 *)
minimal(private_flag) = (* 0 *)
minimal(primitive_declaration) = (* 1 *) STRING
minimal(potentially_long_ident_and_optional_type_parameters) = (* 1 *) LIDENT
minimal(post_item_attributes) = (* 0 *)
minimal(poly_type) = (* 1 *) UNDERSCORE
minimal(payload) = (* 0 *)
minimal(pattern_without_or) = (* 1 *) LIDENT
minimal(pattern_with_bar) = (* 2 *) BAR LIDENT
minimal(pattern_two_or_more_comma_list) = (* 3 *) LIDENT COMMA LIDENT
minimal(pattern_optional_constraint) = (* 1 *) LIDENT
minimal(pattern_comma_list_extension) = (* 1 *) LIDENT
minimal(pattern_comma_list) = (* 1 *) LIDENT
minimal(pattern) = (* 1 *) LIDENT
minimal(parse_pattern) = (* 2 *) LIDENT EOF
minimal(parse_expression) = (* 2 *) LIDENT EOF
minimal(parse_core_type) = (* 2 *) UNDERSCORE EOF
minimal(parent_binder) = (* 0 *)
minimal(package_type_cstrs) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(package_type_cstr) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(package_type) = (* 1 *) UIDENT
minimal(override_flag) = (* 0 *)
minimal(or_pattern) = (* 3 *) LIDENT BAR LIDENT
minimal(optional_type_variable_with_variance) = (* 1 *) UNDERSCORE
minimal(optional_type_parameters) = (* 0 *)
minimal(optional_type_parameter_list) = (* 1 *) UNDERSCORE
minimal(option(OF)) = (* 0 *)
minimal(option(LET)) = (* 0 *)
minimal(opt_semi) = (* 0 *)
minimal(opt_let_module) = (* 1 *) MODULE
minimal(opt_comma) = (* 0 *)
minimal(opt_bar) = (* 0 *)
minimal(opt_ampersand) = (* 0 *)
minimal(operator) = (* 1 *) PREFIXOP
minimal(open_statement) = (* 2 *) OPEN UIDENT
minimal(object_record_type) = (* 2 *) LBRACE RBRACE
minimal(nonrec_flag) = (* 0 *)
minimal(nonlocal_module_binding_details) = (* 3 *) UIDENT EQUAL UIDENT
minimal(non_punned_string_literal_expression) = (* 3 *) STRING COLON LIDENT
minimal(non_punned_lbl_expression) = (* 3 *) LIDENT COLON LIDENT
minimal(non_arrowed_simple_core_type_list) = (* 1 *) UNDERSCORE
minimal(non_arrowed_simple_core_type) = (* 1 *) UNDERSCORE
minimal(non_arrowed_non_simple_core_type) = (* 2 *) LIDENT UNDERSCORE
minimal(non_arrowed_module_type) = (* 1 *) UIDENT
minimal(non_arrowed_core_type) = (* 1 *) UNDERSCORE
minimal(non_arrowed_class_constructor_type) = (* 1 *) LIDENT
minimal(name_tag_list) = (* 2 *) BACKQUOTE UIDENT
minimal(name_tag) = (* 2 *) BACKQUOTE UIDENT
minimal(mutable_flag) = (* 0 *)
minimal(mty_longident) = (* 1 *) UIDENT
minimal(module_type) = (* 1 *) UIDENT
minimal(module_rec_declaration_details) = (* 3 *) UIDENT COLON UIDENT
minimal(module_expr) = (* 1 *) UIDENT
minimal(module_declaration) = (* 2 *) COLON UIDENT
minimal(module_binding_body_functor) = (* 4 *) LPAREN RPAREN EQUALGREATER UIDENT
minimal(module_binding_body_expr) = (* 2 *) EQUAL UIDENT
minimal(module_binding_body) = (* 2 *) EQUAL UIDENT
minimal(mod_longident) = (* 1 *) UIDENT
minimal(mod_ext_longident) = (* 1 *) UIDENT
minimal(mod_ext2) = (* 4 *) UIDENT LPAREN UIDENT RPAREN
minimal(method_) = (* 3 *) LIDENT EQUALGREATER LIDENT
minimal(mark_position_typ2(_non_arrowed_simple_core_type)) = (* 1 *) UNDERSCORE
minimal(mark_position_typ2(_non_arrowed_non_simple_core_type)) = (* 2 *) LIDENT UNDERSCORE
minimal(mark_position_typ2(_core_type2)) = (* 1 *) UNDERSCORE
minimal(mark_position_typ2(_core_type)) = (* 1 *) UNDERSCORE
minimal(mark_position_typ(_type_variable)) = (* 2 *) QUOTE UIDENT
minimal(mark_position_typ(_poly_type)) = (* 1 *) UNDERSCORE
minimal(mark_position_str(_structure_item_without_item_extension_sugar)) = (* 1 *) LIDENT
minimal(mark_position_str(_structure_item)) = (* 1 *) LIDENT
minimal(mark_position_sig(_signature_item)) = (* 2 *) TYPE UIDENT
minimal(mark_position_pat(_simple_pattern_not_ident)) = (* 1 *) UNDERSCORE
minimal(mark_position_pat(_simple_pattern)) = (* 1 *) LIDENT
minimal(mark_position_pat(_pattern_without_or)) = (* 1 *) LIDENT
minimal(mark_position_pat(_pattern_optional_constraint)) = (* 1 *) LIDENT
minimal(mark_position_pat(_or_pattern)) = (* 3 *) LIDENT BAR LIDENT
minimal(mark_position_pat(_class_self_pattern)) = (* 0 *)
minimal(mark_position_mty(_simple_module_type)) = (* 1 *) UIDENT
minimal(mark_position_mty(_non_arrowed_module_type)) = (* 1 *) UIDENT
minimal(mark_position_mty(_module_type)) = (* 1 *) UIDENT
minimal(mark_position_mty(_module_declaration)) = (* 2 *) COLON UIDENT
minimal(mark_position_mod(_simple_module_expr)) = (* 1 *) UIDENT
minimal(mark_position_mod(_module_expr)) = (* 1 *) UIDENT
minimal(mark_position_mod(_module_binding_body_functor)) = (* 4 *) LPAREN RPAREN EQUALGREATER UIDENT
minimal(mark_position_exp(expr)) = (* 1 *) LIDENT
minimal(mark_position_exp(_simple_non_labeled_expr_list_as_tuple)) = (* 1 *) LIDENT
minimal(mark_position_exp(_simple_expr)) = (* 1 *) LIDENT
minimal(mark_position_exp(_semi_terminated_seq_expr_row)) = (* 1 *) LIDENT
minimal(mark_position_exp(_semi_terminated_seq_expr)) = (* 1 *) LIDENT
minimal(mark_position_exp(_expr)) = (* 1 *) LIDENT
minimal(mark_position_exp(_curried_binding_return_typed)) = (* 3 *) COLONCOLONLIDENT EQUALGREATER LIDENT
minimal(mark_position_cty(_non_arrowed_class_constructor_type)) = (* 1 *) LIDENT
minimal(mark_position_cty(_class_instance_type)) = (* 1 *) LIDENT
minimal(mark_position_cty(_class_constructor_type)) = (* 2 *) NEW LIDENT
minimal(mark_position_ctf(_class_sig_field)) = (* 2 *) INHERIT LIDENT
minimal(mark_position_cl(_constrained_class_declaration)) = (* 5 *) COLON NEW LIDENT EQUAL LIDENT
minimal(mark_position_cl(_class_simple_expr)) = (* 1 *) LIDENT
minimal(mark_position_cl(_class_fun_def)) = (* 3 *) COLONCOLONLIDENT EQUALGREATER LIDENT
minimal(mark_position_cl(_class_fun_binding)) = (* 3 *) COLONCOLONLIDENT EQUALGREATER LIDENT
minimal(mark_position_cl(_class_expr_lets_and_rest)) = (* 0 *)
minimal(mark_position_cl(_class_expr)) = (* 1 *) LIDENT
minimal(mark_position_cf(_class_field)) = (* 2 *) INHERIT LIDENT
minimal(many_type_declarations) = (* 2 *) TYPE UIDENT
minimal(many_nonlocal_module_bindings) = (* 5 *) MODULE REC UIDENT EQUAL UIDENT
minimal(many_module_rec_declarations) = (* 5 *) MODULE REC UIDENT COLON UIDENT
minimal(many_class_type_declarations) = (* 5 *) CLASS TYPE LIDENT EQUAL LIDENT
minimal(many_class_descriptions) = (* 5 *) CLASS LIDENT COLON NEW LIDENT
minimal(many_class_declarations) = (* 4 *) CLASS LIDENT EQUAL LIDENT
minimal(lident_list) = (* 1 *) LIDENT
minimal(let_bindings) = (* 4 *) LET LIDENT EQUAL LIDENT
minimal(let_binding_impl) = (* 4 *) LET LIDENT EQUAL LIDENT
minimal(let_binding_body) = (* 3 *) LIDENT EQUAL LIDENT
minimal(let_binding) = (* 4 *) LET LIDENT EQUAL LIDENT
minimal(less_aggressive_simple_expression) = (* 1 *) LIDENT
minimal(leading_bar_match_cases_to_sequence_body) = (* 4 *) BAR LIDENT EQUALGREATER LIDENT
minimal(leading_bar_match_cases) = (* 4 *) BAR LIDENT EQUALGREATER LIDENT
minimal(leading_bar_match_case_to_sequence_body) = (* 4 *) BAR LIDENT EQUALGREATER LIDENT
minimal(leading_bar_match_case) = (* 4 *) BAR LIDENT EQUALGREATER LIDENT
minimal(lbl_pattern_list) = (* 1 *) LIDENT
minimal(lbl_pattern) = (* 1 *) LIDENT
minimal(lbl_expr_list_that_is_not_a_single_punned_field) = (* 3 *) LIDENT COMMA LIDENT
minimal(lbl_expr_list) = (* 1 *) LIDENT
minimal(lbl_expr) = (* 1 *) LIDENT
minimal(labeled_simple_pattern) = (* 1 *) COLONCOLONLIDENT
minimal(labeled_simple_expr) = (* 1 *) LIDENT
minimal(label_longident) = (* 1 *) LIDENT
minimal(label_expr) = (* 1 *) COLONCOLONLIDENT
minimal(label_declarations) = (* 1 *) LIDENT
minimal(label_declaration) = (* 1 *) LIDENT
minimal(label) = (* 1 *) LIDENT
minimal(jsx_without_leading_less) = (* 2 *) GREATER LESSSLASHGREATER
minimal(jsx_start_tag_and_args_without_leading_less) = (* 1 *) UIDENT
minimal(jsx_start_tag_and_args) = (* 1 *) LESSIDENT
minimal(jsx_arguments) = (* 0 *)
minimal(jsx) = (* 2 *) LESSGREATER LESSSLASHGREATER
minimal(item_extension_sugar) = (* 2 *) PERCENT LIDENT
minimal(item_extension) = (* 3 *) LBRACKETPERCENTPERCENT LIDENT RBRACKET
minimal(item_attribute) = (* 3 *) LBRACKETATAT LIDENT RBRACKET
minimal(interface) = (* 1 *) EOF
minimal(implementation) = (* 1 *) EOF
minimal(ident) = (* 1 *) UIDENT
minimal(generalized_constructor_arguments) = (* 0 *)
minimal(functor_args) = (* 2 *) LPAREN RPAREN
minimal(functor_arg_name) = (* 1 *) UIDENT
minimal(functor_arg) = (* 2 *) LPAREN RPAREN
minimal(fun_def) = (* 2 *) EQUALGREATER LIDENT
minimal(floating_attribute) = (* 3 *) LBRACKETATATAT LIDENT RBRACKET
minimal(field_expr_list) = (* 1 *) LIDENT
minimal(field_expr) = (* 1 *) LIDENT
minimal(extension_constructor_rebind) = (* 3 *) UIDENT EQUAL UIDENT
minimal(extension_constructor_declaration) = (* 1 *) UIDENT
minimal(extension) = (* 3 *) LBRACKETPERCENT LIDENT RBRACKET
minimal(expr_optional_constraint) = (* 1 *) LIDENT
minimal(expr_comma_seq_extension) = (* 2 *) LIDENT RBRACKET
minimal(expr_comma_seq) = (* 1 *) LIDENT
minimal(expr_comma_list) = (* 3 *) LIDENT COMMA LIDENT
minimal(expr) = (* 1 *) LIDENT
minimal(direction_flag) = (* 1 *) TO
minimal(curried_binding_return_typed_) = (* 2 *) EQUALGREATER LIDENT
minimal(curried_binding_return_typed) = (* 3 *) COLONCOLONLIDENT EQUALGREATER LIDENT
minimal(curried_binding) = (* 2 *) EQUALGREATER LIDENT
minimal(core_type_comma_list) = (* 1 *) UNDERSCORE
minimal(core_type2) = (* 1 *) UNDERSCORE
minimal(core_type) = (* 1 *) UNDERSCORE
minimal(constructor_declarations_leading_bar) = (* 2 *) BAR UIDENT
minimal(constructor_declarations) = (* 1 *) UIDENT
minimal(constructor_declaration_no_leading_bar) = (* 1 *) UIDENT
minimal(constructor_declaration_leading_bar) = (* 2 *) BAR UIDENT
minimal(constructor_arguments) = (* 1 *) UNDERSCORE
minimal(constraints) = (* 0 *)
minimal(constrained_class_declaration) = (* 5 *) COLON NEW LIDENT EQUAL LIDENT
minimal(constrain_field) = (* 3 *) UNDERSCORE EQUAL UNDERSCORE
minimal(constrain) = (* 3 *) UNDERSCORE EQUAL UNDERSCORE
minimal(constr_longident) = (* 1 *) UIDENT
minimal(constant) = (* 1 *) INT
minimal(clty_longident) = (* 1 *) LIDENT
minimal(class_type_parameters) = (* 0 *)
minimal(class_type_declaration_details) = (* 3 *) LIDENT EQUAL LIDENT
minimal(class_simple_expr) = (* 1 *) LIDENT
minimal(class_sig_fields) = (* 0 *)
minimal(class_sig_field) = (* 2 *) INHERIT LIDENT
minimal(class_sig_body) = (* 0 *)
minimal(class_self_type) = (* 0 *)
minimal(class_self_pattern_and_structure) = (* 0 *)
minimal(class_self_pattern) = (* 0 *)
minimal(class_longident) = (* 1 *) LIDENT
minimal(class_instance_type) = (* 1 *) LIDENT
minimal(class_fun_return) = (* 2 *) EQUALGREATER LIDENT
minimal(class_fun_def) = (* 3 *) COLONCOLONLIDENT EQUALGREATER LIDENT
minimal(class_fun_binding) = (* 3 *) COLONCOLONLIDENT EQUALGREATER LIDENT
minimal(class_field) = (* 2 *) INHERIT LIDENT
minimal(class_expr_lets_and_rest) = (* 0 *)
minimal(class_expr) = (* 1 *) LIDENT
minimal(class_description_details) = (* 4 *) LIDENT COLON NEW LIDENT
minimal(class_declaration_details) = (* 3 *) LIDENT EQUAL LIDENT
minimal(class_constructor_type) = (* 2 *) NEW LIDENT
minimal(attributes) = (* 0 *)
minimal(attribute) = (* 3 *) LBRACKETAT LIDENT RBRACKET
minimal(attr_id) = (* 1 *) LIDENT
minimal(and_type_declaration) = (* 2 *) AND UIDENT
minimal(and_nonlocal_module_bindings) = (* 4 *) AND UIDENT EQUAL UIDENT
minimal(and_module_rec_declaration) = (* 4 *) AND UIDENT COLON UIDENT
minimal(and_let_binding) = (* 4 *) AND LIDENT EQUAL LIDENT
minimal(and_class_type_declaration) = (* 4 *) AND LIDENT EQUAL LIDENT
minimal(and_class_description) = (* 5 *) AND LIDENT COLON NEW LIDENT
minimal(and_class_declaration) = (* 4 *) AND LIDENT EQUAL LIDENT
minimal(amper_type_list) = (* 1 *) UNDERSCORE
minimal(additive) = (* 1 *) PLUS
minimal(_use_file) = (* 1 *) EOF
minimal(_type_variable) = (* 2 *) QUOTE UIDENT
minimal(_toplevel_phrase) = (* 1 *) EOF
minimal(_structure_item_without_item_extension_sugar) = (* 1 *) LIDENT
minimal(_structure_item) = (* 1 *) LIDENT
minimal(_simple_pattern_not_ident) = (* 1 *) UNDERSCORE
minimal(_simple_pattern) = (* 1 *) LIDENT
minimal(_simple_non_labeled_expr_list_as_tuple) = (* 1 *) LIDENT
minimal(_simple_module_type) = (* 1 *) UIDENT
minimal(_simple_module_expr) = (* 1 *) UIDENT
minimal(_simple_expr) = (* 1 *) LIDENT
minimal(_signature_item) = (* 2 *) TYPE UIDENT
minimal(_semi_terminated_seq_expr_row) = (* 1 *) LIDENT
minimal(_semi_terminated_seq_expr) = (* 1 *) LIDENT
minimal(_poly_type) = (* 1 *) UNDERSCORE
minimal(_pattern_without_or) = (* 1 *) LIDENT
minimal(_pattern_optional_constraint) = (* 1 *) LIDENT
minimal(_or_pattern) = (* 3 *) LIDENT BAR LIDENT
minimal(_optional_type_variable_with_variance) = (* 1 *) UNDERSCORE
minimal(_non_arrowed_simple_core_type) = (* 1 *) UNDERSCORE
minimal(_non_arrowed_non_simple_core_type) = (* 2 *) LIDENT UNDERSCORE
minimal(_non_arrowed_module_type) = (* 1 *) UIDENT
minimal(_non_arrowed_class_constructor_type) = (* 1 *) LIDENT
minimal(_module_type) = (* 1 *) UIDENT
minimal(_module_expr) = (* 1 *) UIDENT
minimal(_module_declaration) = (* 2 *) COLON UIDENT
minimal(_module_binding_body_functor) = (* 4 *) LPAREN RPAREN EQUALGREATER UIDENT
minimal(_expr) = (* 1 *) LIDENT
minimal(_curried_binding_return_typed) = (* 3 *) COLONCOLONLIDENT EQUALGREATER LIDENT
minimal(_core_type2) = (* 1 *) UNDERSCORE
minimal(_core_type) = (* 1 *) UNDERSCORE
minimal(_constrained_class_declaration) = (* 5 *) COLON NEW LIDENT EQUAL LIDENT
minimal(_class_simple_expr) = (* 1 *) LIDENT
minimal(_class_sig_field) = (* 2 *) INHERIT LIDENT
minimal(_class_self_pattern) = (* 0 *)
minimal(_class_instance_type) = (* 1 *) LIDENT
minimal(_class_fun_def) = (* 3 *) COLONCOLONLIDENT EQUALGREATER LIDENT
minimal(_class_fun_binding) = (* 3 *) COLONCOLONLIDENT EQUALGREATER LIDENT
minimal(_class_field) = (* 2 *) INHERIT LIDENT
minimal(_class_expr_lets_and_rest) = (* 0 *)
minimal(_class_expr) = (* 1 *) LIDENT
minimal(_class_constructor_type) = (* 2 *) NEW LIDENT
maximal(with_type_binder) = 2
maximal(with_constraints) = infinity
maximal(with_constraint) = infinity
maximal(virtual_flag) = 1
maximal(value_type) = infinity
maximal(value) = infinity
maximal(val_longident) = infinity
maximal(val_ident) = 4
maximal(use_file) = infinity
maximal(typevar_list) = infinity
maximal(type_variance) = 1
maximal(type_variable) = 2
maximal(type_strictly_longident) = infinity
maximal(type_parameter) = 3
maximal(type_longident) = infinity
maximal(type_kind) = infinity
maximal(type_declaration_details) = infinity
maximal(type_constraint_right_of_colon) = infinity
maximal(type_constraint) = infinity
maximal(toplevel_phrase) = infinity
maximal(toplevel_directive) = infinity
maximal(tag_field) = infinity
maximal(subtractive) = 1
maximal(structure_item_without_item_extension_sugar) = infinity
maximal(structure_item) = infinity
maximal(structure) = infinity
maximal(string_literal_expr_list_that_is_not_a_single_punned_field) = infinity
maximal(string_literal_expr_list) = infinity
maximal(string_literal_expr) = infinity
maximal(str_type_extension) = infinity
maximal(str_extension_constructors) = infinity
maximal(str_exception_declaration) = infinity
maximal(single_attr_id) = 1
maximal(simple_pattern_not_ident) = infinity
maximal(simple_pattern_list) = infinity
maximal(simple_pattern) = infinity
maximal(simple_non_labeled_expr_list_as_tuple) = infinity
maximal(simple_non_labeled_expr_list) = infinity
maximal(simple_module_type) = infinity
maximal(simple_module_expr) = infinity
maximal(simple_labeled_expr_list) = infinity
maximal(simple_expr_list) = infinity
maximal(simple_expr) = infinity
maximal(signed_constant) = 2
maximal(signature_item) = infinity
maximal(signature) = infinity
maximal(sig_type_extension) = infinity
maximal(sig_extension_constructors) = infinity
maximal(sig_exception_declaration) = infinity
maximal(semi_terminated_seq_expr_row) = infinity
maximal(semi_terminated_seq_expr) = infinity
maximal(semi_terminated_class_fields) = infinity
maximal(row_field_list) = infinity
maximal(row_field) = infinity
maximal(record_expr_with_string_keys) = infinity
maximal(record_expr) = infinity
maximal(rec_flag) = 1
maximal(private_virtual_flags) = 1
maximal(private_flag) = 1
maximal(primitive_declaration) = infinity
maximal(potentially_long_ident_and_optional_type_parameters) = infinity
maximal(post_item_attributes) = infinity
maximal(poly_type) = infinity
maximal(payload) = infinity
maximal(pattern_without_or) = infinity
maximal(pattern_with_bar) = infinity
maximal(pattern_two_or_more_comma_list) = infinity
maximal(pattern_optional_constraint) = infinity
maximal(pattern_comma_list_extension) = infinity
maximal(pattern_comma_list) = infinity
maximal(pattern) = infinity
maximal(parse_pattern) = infinity
maximal(parse_expression) = infinity
maximal(parse_core_type) = infinity
maximal(parent_binder) = 2
maximal(package_type_cstrs) = infinity
maximal(package_type_cstr) = infinity
maximal(package_type) = infinity
maximal(override_flag) = 1
maximal(or_pattern) = infinity
maximal(optional_type_variable_with_variance) = 3
maximal(optional_type_parameters) = infinity
maximal(optional_type_parameter_list) = infinity
maximal(option(OF)) = 1
maximal(option(LET)) = 1
maximal(opt_semi) = 1
maximal(opt_let_module) = 2
maximal(opt_comma) = 1
maximal(opt_bar) = 1
maximal(opt_ampersand) = 1
maximal(operator) = 2
maximal(open_statement) = infinity
maximal(object_record_type) = infinity
maximal(nonrec_flag) = 1
maximal(nonlocal_module_binding_details) = infinity
maximal(non_punned_string_literal_expression) = infinity
maximal(non_punned_lbl_expression) = infinity
maximal(non_arrowed_simple_core_type_list) = infinity
maximal(non_arrowed_simple_core_type) = infinity
maximal(non_arrowed_non_simple_core_type) = infinity
maximal(non_arrowed_module_type) = infinity
maximal(non_arrowed_core_type) = infinity
maximal(non_arrowed_class_constructor_type) = infinity
maximal(name_tag_list) = infinity
maximal(name_tag) = 2
maximal(mutable_flag) = 1
maximal(mty_longident) = infinity
maximal(module_type) = infinity
maximal(module_rec_declaration_details) = infinity
maximal(module_expr) = infinity
maximal(module_declaration) = infinity
maximal(module_binding_body_functor) = infinity
maximal(module_binding_body_expr) = infinity
maximal(module_binding_body) = infinity
maximal(mod_longident) = infinity
maximal(mod_ext_longident) = infinity
maximal(mod_ext2) = infinity
maximal(method_) = infinity
maximal(mark_position_typ2(_non_arrowed_simple_core_type)) = infinity
maximal(mark_position_typ2(_non_arrowed_non_simple_core_type)) = infinity
maximal(mark_position_typ2(_core_type2)) = infinity
maximal(mark_position_typ2(_core_type)) = infinity
maximal(mark_position_typ(_type_variable)) = 2
maximal(mark_position_typ(_poly_type)) = infinity
maximal(mark_position_str(_structure_item_without_item_extension_sugar)) = infinity
maximal(mark_position_str(_structure_item)) = infinity
maximal(mark_position_sig(_signature_item)) = infinity
maximal(mark_position_pat(_simple_pattern_not_ident)) = infinity
maximal(mark_position_pat(_simple_pattern)) = infinity
maximal(mark_position_pat(_pattern_without_or)) = infinity
maximal(mark_position_pat(_pattern_optional_constraint)) = infinity
maximal(mark_position_pat(_or_pattern)) = infinity
maximal(mark_position_pat(_class_self_pattern)) = infinity
maximal(mark_position_mty(_simple_module_type)) = infinity
maximal(mark_position_mty(_non_arrowed_module_type)) = infinity
maximal(mark_position_mty(_module_type)) = infinity
maximal(mark_position_mty(_module_declaration)) = infinity
maximal(mark_position_mod(_simple_module_expr)) = infinity
maximal(mark_position_mod(_module_expr)) = infinity
maximal(mark_position_mod(_module_binding_body_functor)) = infinity
maximal(mark_position_exp(expr)) = infinity
maximal(mark_position_exp(_simple_non_labeled_expr_list_as_tuple)) = infinity
maximal(mark_position_exp(_simple_expr)) = infinity
maximal(mark_position_exp(_semi_terminated_seq_expr_row)) = infinity
maximal(mark_position_exp(_semi_terminated_seq_expr)) = infinity
maximal(mark_position_exp(_expr)) = infinity
maximal(mark_position_exp(_curried_binding_return_typed)) = infinity
maximal(mark_position_cty(_non_arrowed_class_constructor_type)) = infinity
maximal(mark_position_cty(_class_instance_type)) = infinity
maximal(mark_position_cty(_class_constructor_type)) = infinity
maximal(mark_position_ctf(_class_sig_field)) = infinity
maximal(mark_position_cl(_constrained_class_declaration)) = infinity
maximal(mark_position_cl(_class_simple_expr)) = infinity
maximal(mark_position_cl(_class_fun_def)) = infinity
maximal(mark_position_cl(_class_fun_binding)) = infinity
maximal(mark_position_cl(_class_expr_lets_and_rest)) = infinity
maximal(mark_position_cl(_class_expr)) = infinity
maximal(mark_position_cf(_class_field)) = infinity
maximal(many_type_declarations) = infinity
maximal(many_nonlocal_module_bindings) = infinity
maximal(many_module_rec_declarations) = infinity
maximal(many_class_type_declarations) = infinity
maximal(many_class_descriptions) = infinity
maximal(many_class_declarations) = infinity
maximal(lident_list) = infinity
maximal(let_bindings) = infinity
maximal(let_binding_impl) = infinity
maximal(let_binding_body) = infinity
maximal(let_binding) = infinity
maximal(less_aggressive_simple_expression) = infinity
maximal(leading_bar_match_cases_to_sequence_body) = infinity
maximal(leading_bar_match_cases) = infinity
maximal(leading_bar_match_case_to_sequence_body) = infinity
maximal(leading_bar_match_case) = infinity
maximal(lbl_pattern_list) = infinity
maximal(lbl_pattern) = infinity
maximal(lbl_expr_list_that_is_not_a_single_punned_field) = infinity
maximal(lbl_expr_list) = infinity
maximal(lbl_expr) = infinity
maximal(labeled_simple_pattern) = infinity
maximal(labeled_simple_expr) = infinity
maximal(label_longident) = infinity
maximal(label_expr) = infinity
maximal(label_declarations) = infinity
maximal(label_declaration) = infinity
maximal(label) = 1
maximal(jsx_without_leading_less) = infinity
maximal(jsx_start_tag_and_args_without_leading_less) = infinity
maximal(jsx_start_tag_and_args) = infinity
maximal(jsx_arguments) = infinity
maximal(jsx) = infinity
maximal(item_extension_sugar) = infinity
maximal(item_extension) = infinity
maximal(item_attribute) = infinity
maximal(interface) = infinity
maximal(implementation) = infinity
maximal(ident) = 1
maximal(generalized_constructor_arguments) = infinity
maximal(functor_args) = infinity
maximal(functor_arg_name) = 1
maximal(functor_arg) = infinity
maximal(fun_def) = infinity
maximal(floating_attribute) = infinity
maximal(field_expr_list) = infinity
maximal(field_expr) = infinity
maximal(extension_constructor_rebind) = infinity
maximal(extension_constructor_declaration) = infinity
maximal(extension) = infinity
maximal(expr_optional_constraint) = infinity
maximal(expr_comma_seq_extension) = infinity
maximal(expr_comma_seq) = infinity
maximal(expr_comma_list) = infinity
maximal(expr) = infinity
maximal(direction_flag) = 1
maximal(curried_binding_return_typed_) = infinity
maximal(curried_binding_return_typed) = infinity
maximal(curried_binding) = infinity
maximal(core_type_comma_list) = infinity
maximal(core_type2) = infinity
maximal(core_type) = infinity
maximal(constructor_declarations_leading_bar) = infinity
maximal(constructor_declarations) = infinity
maximal(constructor_declaration_no_leading_bar) = infinity
maximal(constructor_declaration_leading_bar) = infinity
maximal(constructor_arguments) = infinity
maximal(constraints) = infinity
maximal(constrained_class_declaration) = infinity
maximal(constrain_field) = infinity
maximal(constrain) = infinity
maximal(constr_longident) = infinity
maximal(constant) = 1
maximal(clty_longident) = infinity
maximal(class_type_parameters) = infinity
maximal(class_type_declaration_details) = infinity
maximal(class_simple_expr) = infinity
maximal(class_sig_fields) = infinity
maximal(class_sig_field) = infinity
maximal(class_sig_body) = infinity
maximal(class_self_type) = infinity
maximal(class_self_pattern_and_structure) = infinity
maximal(class_self_pattern) = infinity
maximal(class_longident) = infinity
maximal(class_instance_type) = infinity
maximal(class_fun_return) = infinity
maximal(class_fun_def) = infinity
maximal(class_fun_binding) = infinity
maximal(class_field) = infinity
maximal(class_expr_lets_and_rest) = infinity
maximal(class_expr) = infinity
maximal(class_description_details) = infinity
maximal(class_declaration_details) = infinity
maximal(class_constructor_type) = infinity
maximal(attributes) = infinity
maximal(attribute) = infinity
maximal(attr_id) = infinity
maximal(and_type_declaration) = infinity
maximal(and_nonlocal_module_bindings) = infinity
maximal(and_module_rec_declaration) = infinity
maximal(and_let_binding) = infinity
maximal(and_class_type_declaration) = infinity
maximal(and_class_description) = infinity
maximal(and_class_declaration) = infinity
maximal(amper_type_list) = infinity
maximal(additive) = 1
maximal(_use_file) = infinity
maximal(_type_variable) = 2
maximal(_toplevel_phrase) = infinity
maximal(_structure_item_without_item_extension_sugar) = infinity
maximal(_structure_item) = infinity
maximal(_simple_pattern_not_ident) = infinity
maximal(_simple_pattern) = infinity
maximal(_simple_non_labeled_expr_list_as_tuple) = infinity
maximal(_simple_module_type) = infinity
maximal(_simple_module_expr) = infinity
maximal(_simple_expr) = infinity
maximal(_signature_item) = infinity
maximal(_semi_terminated_seq_expr_row) = infinity
maximal(_semi_terminated_seq_expr) = infinity
maximal(_poly_type) = infinity
maximal(_pattern_without_or) = infinity
maximal(_pattern_optional_constraint) = infinity
maximal(_or_pattern) = infinity
maximal(_optional_type_variable_with_variance) = 3
maximal(_non_arrowed_simple_core_type) = infinity
maximal(_non_arrowed_non_simple_core_type) = infinity
maximal(_non_arrowed_module_type) = infinity
maximal(_non_arrowed_class_constructor_type) = infinity
maximal(_module_type) = infinity
maximal(_module_expr) = infinity
maximal(_module_declaration) = infinity
maximal(_module_binding_body_functor) = infinity
maximal(_expr) = infinity
maximal(_curried_binding_return_typed) = infinity
maximal(_core_type2) = infinity
maximal(_core_type) = infinity
maximal(_constrained_class_declaration) = infinity
maximal(_class_simple_expr) = infinity
maximal(_class_sig_field) = infinity
maximal(_class_self_pattern) = infinity
maximal(_class_instance_type) = infinity
maximal(_class_fun_def) = infinity
maximal(_class_fun_binding) = infinity
maximal(_class_field) = infinity
maximal(_class_expr_lets_and_rest) = infinity
maximal(_class_expr) = infinity
maximal(_class_constructor_type) = infinity
follow(with_type_binder) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
follow(with_constraints) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(with_constraint) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(virtual_flag) = LIDENT
follow(value_type) = error SEMI RBRACE LBRACKETATAT
follow(value) = error SEMI RBRACE LBRACKETATAT
follow(val_longident) = error WITH UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(val_ident) = error WITH WHEN UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTIONAL_NO_DEFAULT NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(use_file) = #
follow(typevar_list) = QUOTE DOT
follow(type_variance) = QUOTE
follow(type_variable) = UNDERSCORE UIDENT TRUE STRING SHARP QUOTE PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUAL COLONCOLONLIDENT COLON CHAR BACKQUOTE
follow(type_strictly_longident) = UNDERSCORE QUOTE PLUSEQ PLUS MINUS
follow(type_parameter) = UNDERSCORE UIDENT TRUE STRING SHARP QUOTE PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUAL COLONCOLONLIDENT COLON CHAR BACKQUOTE
follow(type_longident) = error WITH WHEN UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PLUS OPTIONAL_NO_DEFAULT MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACE INT IN GREATER FLOAT FALSE EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS AND AMPERSAND
follow(type_kind) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF CONSTRAINT AND
follow(type_declaration_details) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(type_constraint_right_of_colon) = error RPAREN RBRACKET RBRACE EQUAL COMMA BARRBRACKET
follow(type_constraint) = error RPAREN RBRACKET RBRACE EQUAL COMMA BARRBRACKET
follow(toplevel_phrase) = #
follow(toplevel_directive) = SEMI EOF
follow(tag_field) = RBRACKET GREATER BAR
follow(subtractive) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
follow(structure_item_without_item_extension_sugar) = error SEMI RBRACKET RBRACE EOF
follow(structure_item) = error SEMI RBRACKET RBRACE EOF
follow(structure) = RBRACKET RBRACE EOF
follow(string_literal_expr_list_that_is_not_a_single_punned_field) = error RBRACE
follow(string_literal_expr_list) = error RBRACE
follow(string_literal_expr) = error RBRACE COMMA
follow(str_type_extension) = error SEMI RBRACKET RBRACE EOF
follow(str_extension_constructors) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR
follow(str_exception_declaration) = error SEMI RBRACKET RBRACE EOF
follow(single_attr_id) = error WHILE UIDENT TYPE TRY TRUE SWITCH STRING RBRACKET QUESTION PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION DOT COLON CLASS CHAR BANG BACKQUOTE ASSERT
follow(simple_pattern_not_ident) = error WHEN UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE PLUS OPTIONAL_NO_DEFAULT MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE INT IN FLOAT FALSE EQUALGREATER EQUAL EOF COMMA COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(simple_pattern_list) = error WHEN UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE INT IN FLOAT FALSE EQUALGREATER EQUAL EOF COMMA COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(simple_pattern) = error WHEN UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE PLUS OPTIONAL_NO_DEFAULT MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE INT IN FLOAT FALSE EQUALGREATER EQUAL EOF COMMA COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(simple_non_labeled_expr_list_as_tuple) = error STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETATAT LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(simple_non_labeled_expr_list) = error UIDENT TRUE STRING STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AND AMPERSAND AMPERAMPER
follow(simple_module_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(simple_module_expr) = error WITH UIDENT SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETPERCENT LBRACKETATAT LBRACKETAT LBRACE EQUALGREATER EQUAL EOF COLON AND
follow(simple_labeled_expr_list) = error UIDENT TRUE STRING STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(simple_expr_list) = LESSSLASHIDENTGREATER LESSSLASHGREATER
follow(simple_expr) = error WITH UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(signed_constant) = error WHEN UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE PLUS OPTIONAL_NO_DEFAULT MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE INT IN FLOAT FALSE EQUALGREATER EQUAL EOF DOTDOT COMMA COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(signature_item) = SEMI
follow(signature) = error RBRACE EOF
follow(sig_type_extension) = SEMI
follow(sig_extension_constructors) = SEMI LBRACKETATAT BAR
follow(sig_exception_declaration) = SEMI
follow(semi_terminated_seq_expr_row) = error RBRACE BAR
follow(semi_terminated_seq_expr) = error RBRACE BAR
follow(semi_terminated_class_fields) = error RBRACE
follow(row_field_list) = RBRACKET GREATER BAR
follow(row_field) = RBRACKET GREATER BAR
follow(record_expr_with_string_keys) = error RBRACE
follow(record_expr) = error RBRACE
follow(rec_flag) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE LAZY INT FLOAT FALSE EXCEPTION CHAR BACKQUOTE
follow(private_virtual_flags) = LIDENT
follow(private_flag) = UIDENT TRUE LPAREN LBRACKET LBRACE FALSE COLONCOLON BAR
follow(primitive_declaration) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF
follow(potentially_long_ident_and_optional_type_parameters) = PLUSEQ
follow(post_item_attributes) = error SEMI RBRACKET RBRACE EOF BAR AND
follow(poly_type) = error SEMI RBRACE LBRACKETATAT LBRACKETAT EQUAL COMMA
follow(payload) = RBRACKET
follow(pattern_without_or) = error WHEN SEMI RPAREN RBRACKET RBRACE LBRACKETAT IN EQUALGREATER EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(pattern_with_bar) = WHEN EQUALGREATER
follow(pattern_two_or_more_comma_list) = RPAREN COMMA
follow(pattern_optional_constraint) = RPAREN COMMA
follow(pattern_comma_list_extension) = error SEMI RBRACKET
follow(pattern_comma_list) = error SEMI COMMA BARRBRACKET
follow(pattern) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLON BARRBRACKET BAR
follow(parse_pattern) = #
follow(parse_expression) = #
follow(parse_core_type) = #
follow(parent_binder) = error SEMI RBRACE LBRACKETATAT
follow(package_type_cstrs) = error RPAREN COLONGREATER
follow(package_type_cstr) = error RPAREN COLONGREATER AND
follow(package_type) = error RPAREN COLONGREATER
follow(override_flag) = VIRTUAL UIDENT MUTABLE LPAREN LIDENT LBRACKETPERCENT LBRACE FUN CLASS
follow(or_pattern) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLON BARRBRACKET BAR
follow(optional_type_variable_with_variance) = error UNDERSCORE SEMI RBRACKET RBRACE QUOTE PLUSEQ PLUS MINUS LBRACKETATAT EQUAL EOF CONSTRAINT COLONEQUAL AND
follow(optional_type_parameters) = error SEMI RBRACKET RBRACE PLUSEQ LBRACKETATAT EQUAL EOF CONSTRAINT COLONEQUAL AND
follow(optional_type_parameter_list) = error UNDERSCORE SEMI RBRACKET RBRACE QUOTE PLUSEQ PLUS MINUS LBRACKETATAT EQUAL EOF CONSTRAINT COLONEQUAL AND
follow(option(OF)) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE AMPERSAND
follow(option(LET)) = OPEN
follow(opt_semi) = error RBRACKET RBRACE BARRBRACKET BAR
follow(opt_let_module) = UIDENT REC
follow(opt_comma) = error RPAREN RBRACKET RBRACE GREATERRBRACE BARRBRACKET
follow(opt_bar) = UNDERSCORE UIDENT TRUE SHARP QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE FALSE COLONCOLON BACKQUOTE
follow(opt_ampersand) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKET LBRACE
follow(operator) = RPAREN
follow(open_statement) = error SEMI RBRACKET RBRACE EOF
follow(object_record_type) = error WITH UNDERSCORE UIDENT SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETATAT LBRACKETAT LBRACKET LBRACE GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER COLON BARRBRACKET BAR AS AND AMPERSAND
follow(nonrec_flag) = UIDENT LIDENT
follow(nonlocal_module_binding_details) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(non_punned_string_literal_expression) = error RBRACE
follow(non_punned_lbl_expression) = error RBRACE
follow(non_arrowed_simple_core_type_list) = error WITH UNDERSCORE UIDENT SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETATAT LBRACKETAT LBRACKET LBRACE GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER COLON BARRBRACKET BAR AS AND AMPERSAND
follow(non_arrowed_simple_core_type) = error WITH UNDERSCORE UIDENT SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETATAT LBRACKETAT LBRACKET LBRACE GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER COLON BARRBRACKET BAR AS AND AMPERSAND
follow(non_arrowed_non_simple_core_type) = error WITH SEMI RPAREN RBRACKET RBRACE QUESTION LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND AMPERSAND
follow(non_arrowed_module_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(non_arrowed_core_type) = error WITH SEMI RPAREN RBRACKET RBRACE QUESTION LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND AMPERSAND
follow(non_arrowed_class_constructor_type) = EQUALGREATER
follow(name_tag_list) = RBRACKET BACKQUOTE
follow(name_tag) = error WITH WHEN UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTIONAL_NO_DEFAULT OF NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(mutable_flag) = LIDENT
follow(mty_longident) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF COLONGREATER AND
follow(module_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(module_rec_declaration_details) = SEMI LBRACKETATAT AND
follow(module_expr) = error WITH UIDENT SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETPERCENT LBRACKETATAT LBRACKETAT LBRACE EQUALGREATER EQUAL EOF COLON AND
follow(module_declaration) = SEMI LBRACKETATAT
follow(module_binding_body_functor) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(module_binding_body_expr) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(module_binding_body) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(mod_longident) = error WITH WHEN UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTIONAL_NO_DEFAULT NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(mod_ext_longident) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF DOT AND
follow(mod_ext2) = error WITH SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF DOT AND
follow(method_) = error SEMI RBRACE LBRACKETATAT
follow(mark_position_typ2(_non_arrowed_simple_core_type)) = error WITH UNDERSCORE UIDENT SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETATAT LBRACKETAT LBRACKET LBRACE GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER COLON BARRBRACKET BAR AS AND AMPERSAND
follow(mark_position_typ2(_non_arrowed_non_simple_core_type)) = error WITH SEMI RPAREN RBRACKET RBRACE QUESTION LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND AMPERSAND
follow(mark_position_typ2(_core_type2)) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND AMPERSAND
follow(mark_position_typ2(_core_type)) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AND AMPERSAND
follow(mark_position_typ(_type_variable)) = UNDERSCORE UIDENT TRUE STRING SHARP QUOTE PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUAL COLONCOLONLIDENT COLON CHAR BACKQUOTE
follow(mark_position_typ(_poly_type)) = error SEMI RBRACE LBRACKETATAT LBRACKETAT EQUAL COMMA
follow(mark_position_str(_structure_item_without_item_extension_sugar)) = error SEMI RBRACKET RBRACE EOF
follow(mark_position_str(_structure_item)) = error SEMI RBRACKET RBRACE EOF
follow(mark_position_sig(_signature_item)) = SEMI
follow(mark_position_pat(_simple_pattern_not_ident)) = error WHEN UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE PLUS OPTIONAL_NO_DEFAULT MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE INT IN FLOAT FALSE EQUALGREATER EQUAL EOF COMMA COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(mark_position_pat(_simple_pattern)) = error WHEN UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE PLUS OPTIONAL_NO_DEFAULT MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE INT IN FLOAT FALSE EQUALGREATER EQUAL EOF COMMA COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(mark_position_pat(_pattern_without_or)) = error WHEN SEMI RPAREN RBRACKET RBRACE LBRACKETAT IN EQUALGREATER EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(mark_position_pat(_pattern_optional_constraint)) = RPAREN COMMA
follow(mark_position_pat(_or_pattern)) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLON BARRBRACKET BAR
follow(mark_position_pat(_class_self_pattern)) = error VAL RBRACE PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
follow(mark_position_mty(_simple_module_type)) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(mark_position_mty(_non_arrowed_module_type)) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(mark_position_mty(_module_type)) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(mark_position_mty(_module_declaration)) = SEMI LBRACKETATAT
follow(mark_position_mod(_simple_module_expr)) = error WITH UIDENT SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETPERCENT LBRACKETATAT LBRACKETAT LBRACE EQUALGREATER EQUAL EOF COLON AND
follow(mark_position_mod(_module_expr)) = error WITH UIDENT SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETPERCENT LBRACKETATAT LBRACKETAT LBRACE EQUALGREATER EQUAL EOF COLON AND
follow(mark_position_mod(_module_binding_body_functor)) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(mark_position_exp(expr)) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR AND
follow(mark_position_exp(_simple_non_labeled_expr_list_as_tuple)) = error STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETATAT LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(mark_position_exp(_simple_expr)) = error WITH UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(mark_position_exp(_semi_terminated_seq_expr_row)) = error RBRACE BAR
follow(mark_position_exp(_semi_terminated_seq_expr)) = error RBRACE BAR
follow(mark_position_exp(_expr)) = error STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETATAT LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(mark_position_exp(_curried_binding_return_typed)) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR AND
follow(mark_position_cty(_non_arrowed_class_constructor_type)) = EQUALGREATER
follow(mark_position_cty(_class_instance_type)) = error SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(mark_position_cty(_class_constructor_type)) = error SEMI RPAREN LBRACKETATAT EQUAL AND
follow(mark_position_ctf(_class_sig_field)) = error SEMI RBRACE
follow(mark_position_cl(_constrained_class_declaration)) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(mark_position_cl(_class_simple_expr)) = error UIDENT TRUE STRING SEMI RPAREN RBRACKET RBRACE PREFIXOP NEW LPAREN LIDENTCOLONCOLON LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT FLOAT FALSE EOF COLONCOLONLIDENT COLONCOLON COLON CHAR BANG BACKQUOTE AS AND
follow(mark_position_cl(_class_fun_def)) = error SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EOF COLON AS AND
follow(mark_position_cl(_class_fun_binding)) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(mark_position_cl(_class_expr_lets_and_rest)) = error RBRACE
follow(mark_position_cl(_class_expr)) = error SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EOF COLON AS AND
follow(mark_position_cf(_class_field)) = error SEMI RBRACE
follow(many_type_declarations) = error SEMI RBRACKET RBRACE EOF AND
follow(many_nonlocal_module_bindings) = error SEMI RBRACKET RBRACE EOF AND
follow(many_module_rec_declarations) = SEMI AND
follow(many_class_type_declarations) = error SEMI RBRACKET RBRACE EOF AND
follow(many_class_descriptions) = SEMI AND
follow(many_class_declarations) = error SEMI RBRACKET RBRACE EOF AND
follow(lident_list) = RPAREN DOT
follow(let_bindings) = error SEMI RBRACKET RBRACE EOF BAR AND
follow(let_binding_impl) = error SEMI RBRACKET RBRACE EOF BAR AND
follow(let_binding_body) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR AND
follow(let_binding) = error SEMI RBRACKET RBRACE EOF BAR AND
follow(less_aggressive_simple_expression) = error UIDENT TRUE STRING STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(leading_bar_match_cases_to_sequence_body) = RBRACE BAR
follow(leading_bar_match_cases) = error STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETATAT LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(leading_bar_match_case_to_sequence_body) = RBRACE BAR
follow(leading_bar_match_case) = error STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETATAT LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(lbl_pattern_list) = error RBRACE
follow(lbl_pattern) = error RBRACE COMMA
follow(lbl_expr_list_that_is_not_a_single_punned_field) = error RBRACE
follow(lbl_expr_list) = error RBRACE
follow(lbl_expr) = error RBRACE COMMA
follow(labeled_simple_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUALGREATER COLONCOLONLIDENT COLON CHAR BACKQUOTE
follow(labeled_simple_expr) = error UIDENT TRUE STRING STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_longident) = error WITH UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_expr) = error UIDENT TRUE STRING STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_declarations) = RBRACE COMMA
follow(label_declaration) = RBRACE COMMA
follow(label) = error WITH UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(jsx_without_leading_less) = RBRACKET COMMA
follow(jsx_start_tag_and_args_without_leading_less) = SLASHGREATER GREATER
follow(jsx_start_tag_and_args) = SLASHGREATER GREATER
follow(jsx_arguments) = SLASHGREATER GREATER
follow(jsx) = error WITH UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(item_extension_sugar) = WHILE UIDENT TYPE TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION CLASS CHAR BANG BACKQUOTE ASSERT
follow(item_extension) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF
follow(item_attribute) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR AND
follow(interface) = #
follow(implementation) = #
follow(ident) = error WITH WHEN UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTIONAL_NO_DEFAULT OF NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(generalized_constructor_arguments) = error SEMI RBRACKET RBRACE LBRACKETATAT LBRACKETAT EOF CONSTRAINT BAR AND
follow(functor_args) = LPAREN EQUALGREATER COLON
follow(functor_arg_name) = COLON
follow(functor_arg) = LPAREN EQUALGREATER COLON
follow(fun_def) = error STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETATAT LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(floating_attribute) = error SEMI RBRACKET RBRACE EOF
follow(field_expr_list) = error GREATERRBRACE COMMA
follow(field_expr) = error GREATERRBRACE COMMA
follow(extension_constructor_rebind) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR
follow(extension_constructor_declaration) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR
follow(extension) = error WITH WHEN UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTIONAL_NO_DEFAULT NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(expr_optional_constraint) = error RPAREN RBRACKET RBRACE COMMA BARRBRACKET
follow(expr_comma_seq_extension) = error WITH UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(expr_comma_seq) = error COMMA BARRBRACKET
follow(expr_comma_list) = error RPAREN COMMA
follow(expr) = error STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETATAT LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(direction_flag) = UIDENT TRUE STRING PREFIXOP NEW LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BANG BACKQUOTE
follow(curried_binding_return_typed_) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR AND
follow(curried_binding_return_typed) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR AND
follow(curried_binding) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR AND
follow(core_type_comma_list) = RPAREN COMMA
follow(core_type2) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND AMPERSAND
follow(core_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AND AMPERSAND
follow(constructor_declarations_leading_bar) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF CONSTRAINT BAR AND
follow(constructor_declarations) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF CONSTRAINT AND
follow(constructor_declaration_no_leading_bar) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF CONSTRAINT BAR AND
follow(constructor_declaration_leading_bar) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF CONSTRAINT BAR AND
follow(constructor_arguments) = error SEMI RBRACKET RBRACE LBRACKETATAT LBRACKETAT EOF CONSTRAINT COLON BAR AND
follow(constraints) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF CONSTRAINT AND
follow(constrained_class_declaration) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(constrain_field) = error SEMI RBRACE LBRACKETATAT
follow(constrain) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF CONSTRAINT AND
follow(constr_longident) = error WITH WHEN UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTIONAL_NO_DEFAULT NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(constant) = error WITH WHEN UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR OPTIONAL_NO_DEFAULT NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOTDOT DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(clty_longident) = error UNDERSCORE UIDENT SHARP SEMI RPAREN RBRACKET RBRACE QUOTE LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETATAT LBRACKETAT LBRACKET LBRACE EQUALGREATER EQUAL EOF AND
follow(class_type_parameters) = UNDERSCORE UIDENT TRUE STRING SHARP QUOTE PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUAL COLONCOLONLIDENT COLON CHAR BACKQUOTE
follow(class_type_declaration_details) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(class_simple_expr) = error UIDENT TRUE STRING SEMI RPAREN RBRACKET RBRACE PREFIXOP NEW LPAREN LIDENTCOLONCOLON LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT FLOAT FALSE EOF COLONCOLONLIDENT COLONCOLON COLON CHAR BANG BACKQUOTE AS AND
follow(class_sig_fields) = error SEMI RBRACE
follow(class_sig_field) = error SEMI RBRACE
follow(class_sig_body) = error RBRACE
follow(class_self_type) = error VAL SEMI RBRACE PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INHERIT CONSTRAINT
follow(class_self_pattern_and_structure) = error RBRACE
follow(class_self_pattern) = error VAL RBRACE PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
follow(class_longident) = error WITH UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EQUAL EOF ELSE DOWNTO DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(class_instance_type) = error SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(class_fun_return) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(class_fun_def) = error SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EOF COLON AS AND
follow(class_fun_binding) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(class_field) = error SEMI RBRACE
follow(class_expr_lets_and_rest) = error RBRACE
follow(class_expr) = error SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EOF COLON AS AND
follow(class_description_details) = SEMI LBRACKETATAT AND
follow(class_declaration_details) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(class_constructor_type) = error SEMI RPAREN LBRACKETATAT EQUAL AND
follow(attributes) = error SEMI RBRACKET RBRACE LBRACKETATAT GREATER EOF CONSTRAINT COMMA COLON BAR AND
follow(attribute) = error WITH WHEN UIDENT STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LPAREN LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETATAT LBRACKETAT LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACE GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
follow(attr_id) = error WHILE UIDENT TYPE TRY TRUE SWITCH STRING RBRACKET QUESTION PREFIXOP PLUSDOT PLUS PERCENT OPEN NEW MODULE MINUSDOT MINUS LPAREN LIDENT LET LESSIDENT LESSGREATER LBRACKETPERCENTPERCENT LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATATAT LBRACKET LBRACELESS LBRACE LAZY INT INCLUDE IF FUN FOR FLOAT FALSE EXTERNAL EXCEPTION COLON CLASS CHAR BANG BACKQUOTE ASSERT
follow(and_type_declaration) = error SEMI RBRACKET RBRACE EOF AND
follow(and_nonlocal_module_bindings) = error SEMI RBRACKET RBRACE EOF AND
follow(and_module_rec_declaration) = SEMI AND
follow(and_let_binding) = error SEMI RBRACKET RBRACE EOF BAR AND
follow(and_class_type_declaration) = error SEMI RBRACKET RBRACE EOF AND
follow(and_class_description) = SEMI AND
follow(and_class_declaration) = error SEMI RBRACKET RBRACE EOF AND
follow(amper_type_list) = RBRACKET LBRACKETAT GREATER BAR AMPERSAND
follow(additive) = WHILE UIDENT TRY TRUE SWITCH STRING PREFIXOP PLUSDOT PLUS NEW MINUSDOT MINUS LPAREN LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUN FOR FLOAT FALSE CHAR BANG BACKQUOTE ASSERT
follow(_use_file) = #
follow(_type_variable) = UNDERSCORE UIDENT TRUE STRING SHARP QUOTE PLUS MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKET LBRACE INT FLOAT FALSE EQUAL COLONCOLONLIDENT COLON CHAR BACKQUOTE
follow(_toplevel_phrase) = #
follow(_structure_item_without_item_extension_sugar) = error SEMI RBRACKET RBRACE EOF
follow(_structure_item) = error SEMI RBRACKET RBRACE EOF
follow(_simple_pattern_not_ident) = error WHEN UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE PLUS OPTIONAL_NO_DEFAULT MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE INT IN FLOAT FALSE EQUALGREATER EQUAL EOF COMMA COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(_simple_pattern) = error WHEN UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE PLUS OPTIONAL_NO_DEFAULT MINUS LPAREN LIDENTCOLONCOLON LIDENT LBRACKETPERCENT LBRACKETBAR LBRACKETAT LBRACKET LBRACE INT IN FLOAT FALSE EQUALGREATER EQUAL EOF COMMA COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(_simple_non_labeled_expr_list_as_tuple) = error STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETATAT LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(_simple_module_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(_simple_module_expr) = error WITH UIDENT SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETPERCENT LBRACKETATAT LBRACKETAT LBRACE EQUALGREATER EQUAL EOF COLON AND
follow(_simple_expr) = error WITH UNDERSCORE UIDENT TRUE TO STRING STAR SLASHGREATER SHARPOP SHARP SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUSEQ PLUSDOT PLUS PERCENT OR NEW MINUSDOT MINUS LPAREN LIDENTCOLONCOLON LIDENT LESSSLASHIDENTGREATER LESSSLASHGREATER LESSIDENT LESSGREATER LESSDOTDOTGREATER LESS LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER FLOAT FALSE EQUALGREATER EOF ELSE DOWNTO DOT COMMA COLONGREATER COLONEQUAL COLONCOLONLIDENT COLONCOLON COLON CHAR BARRBRACKET BARBAR BAR BANG BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(_signature_item) = SEMI
follow(_semi_terminated_seq_expr_row) = error RBRACE BAR
follow(_semi_terminated_seq_expr) = error RBRACE BAR
follow(_poly_type) = error SEMI RBRACE LBRACKETATAT LBRACKETAT EQUAL COMMA
follow(_pattern_without_or) = error WHEN SEMI RPAREN RBRACKET RBRACE LBRACKETAT IN EQUALGREATER EQUAL EOF COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(_pattern_optional_constraint) = RPAREN COMMA
follow(_or_pattern) = error WHEN SEMI RPAREN RBRACKET RBRACE IN EQUALGREATER EQUAL EOF COMMA COLON BARRBRACKET BAR
follow(_optional_type_variable_with_variance) = error UNDERSCORE SEMI RBRACKET RBRACE QUOTE PLUSEQ PLUS MINUS LBRACKETATAT EQUAL EOF CONSTRAINT COLONEQUAL AND
follow(_non_arrowed_simple_core_type) = error WITH UNDERSCORE UIDENT SHARP SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION LPAREN LIDENT LBRACKETPERCENT LBRACKETLESS LBRACKETGREATER LBRACKETATAT LBRACKETAT LBRACKET LBRACE GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER COLON BARRBRACKET BAR AS AND AMPERSAND
follow(_non_arrowed_non_simple_core_type) = error WITH SEMI RPAREN RBRACKET RBRACE QUESTION LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND AMPERSAND
follow(_non_arrowed_module_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(_non_arrowed_class_constructor_type) = EQUALGREATER
follow(_module_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(_module_expr) = error WITH UIDENT SEMI RPAREN RBRACKET RBRACE LPAREN LBRACKETPERCENT LBRACKETATAT LBRACKETAT LBRACE EQUALGREATER EQUAL EOF COLON AND
follow(_module_declaration) = SEMI LBRACKETATAT
follow(_module_binding_body_functor) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(_expr) = error STAR SLASHGREATER SEMI RPAREN RBRACKET RBRACE QUESTION PLUSEQ PLUSDOT PLUS PERCENT OR MINUSDOT MINUS LESSDOTDOTGREATER LESS LBRACKETATAT LBRACKETAT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUALGREATER EOF COMMA COLONGREATER COLONEQUAL COLON BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
follow(_curried_binding_return_typed) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF BAR AND
follow(_core_type2) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AS AND AMPERSAND
follow(_core_type) = error WITH SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT GREATER EQUALGREATER EQUAL EOF CONSTRAINT COMMA COLONGREATER BARRBRACKET BAR AND AMPERSAND
follow(_constrained_class_declaration) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(_class_simple_expr) = error UIDENT TRUE STRING SEMI RPAREN RBRACKET RBRACE PREFIXOP NEW LPAREN LIDENTCOLONCOLON LIDENT LESSIDENT LESSGREATER LBRACKETPERCENT LBRACKETLESS LBRACKETBAR LBRACKETATAT LBRACKETAT LBRACKET LBRACELESS LBRACE INT FLOAT FALSE EOF COLONCOLONLIDENT COLONCOLON COLON CHAR BANG BACKQUOTE AS AND
follow(_class_sig_field) = error SEMI RBRACE
follow(_class_self_pattern) = error VAL RBRACE PUB PRI LBRACKETPERCENTPERCENT LBRACKETATATAT INITIALIZER INHERIT CONSTRAINT
follow(_class_instance_type) = error SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EQUALGREATER EQUAL EOF AND
follow(_class_fun_def) = error SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EOF COLON AS AND
follow(_class_fun_binding) = error SEMI RBRACKET RBRACE LBRACKETATAT EOF AND
follow(_class_field) = error SEMI RBRACE
follow(_class_expr_lets_and_rest) = error RBRACE
follow(_class_expr) = error SEMI RPAREN RBRACKET RBRACE LBRACKETATAT LBRACKETAT EOF COLON AS AND
follow(_class_constructor_type) = error SEMI RPAREN LBRACKETATAT EQUAL AND
Built an LR(0) automaton with 1722 states.
The grammar is not SLR(1) -- 94 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 2902 states.
1772 shift/reduce conflicts were silently solved.
Extra reductions on error were added in 570 states.
Priority played a role in 0 of these states.
1171 out of 2902 states have a default reduction.
The action table is 371456 entries; 58875 non-zero; 37591 compressed.
The action table occupies roughly 81080 bytes.
The goto table is 908326 entries; 11122 non-zero; 21166 compressed.
The goto table occupies roughly 42424 bytes.
The error table occupies roughly 46464 bytes.
The default_reduction table occupies roughly 5840 bytes.
The lhs table occupies roughly 1824 bytes.
The trace table occupies roughly 8 bytes.
