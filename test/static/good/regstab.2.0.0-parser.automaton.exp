State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On UNSAT shift to state 1
-- On SAT shift to state 2
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On LET shift to state 91
-- On EOF shift to state 108
-- On AND shift to state 70
-- On sentences shift to state 126
-- On regstab_2_0_0_parser_option shift to state 127
-- On regschema shift to state 110
-- On main shift to state 129
-- On function_call shift to state 84
## Reductions:

State 1:
## Known stack suffix:
## UNSAT
## LR(1) items:
regstab_2_0_0_parser_option -> UNSAT . [ UNSAT SAT PROP OR NOT LPAREN LET EOF AND ]
## Transitions:
## Reductions:
-- On UNSAT SAT PROP OR NOT LPAREN LET EOF AND
--   reduce production regstab_2_0_0_parser_option -> UNSAT

State 2:
## Known stack suffix:
## SAT
## LR(1) items:
regstab_2_0_0_parser_option -> SAT . [ UNSAT SAT PROP OR NOT LPAREN LET EOF AND ]
## Transitions:
## Reductions:
-- On UNSAT SAT PROP OR NOT LPAREN LET EOF AND
--   reduce production regstab_2_0_0_parser_option -> SAT

State 3:
## Known stack suffix:
## PROP
## LR(1) items:
function_call -> PROP . LPAREN arguments RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . LPAREN RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . AND [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . OR [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . NOT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . PROP [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . EOF [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> PROP . INDEX terme [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 4
-- On OR shift to state 5
-- On NOT shift to state 6
-- On LPAREN shift to state 7
-- On INDEX shift to state 23
-- On EOF shift to state 25
-- On AND shift to state 26
## Reductions:

State 4:
## Known stack suffix:
## PROP PROP
## LR(1) items:
function_call -> PROP PROP . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production function_call -> PROP PROP

State 5:
## Known stack suffix:
## PROP OR
## LR(1) items:
function_call -> PROP OR . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production function_call -> PROP OR

State 6:
## Known stack suffix:
## PROP NOT
## LR(1) items:
function_call -> PROP NOT . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production function_call -> PROP NOT

State 7:
## Known stack suffix:
## PROP LPAREN
## LR(1) items:
function_call -> PROP LPAREN . arguments RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP LPAREN . RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 8
-- On RPAREN shift to state 13
-- On PROP shift to state 14
-- On INT shift to state 16
-- On terme shift to state 17
-- On arguments shift to state 21
## Reductions:

State 8:
## Known stack suffix:
## VAR
## LR(1) items:
terme -> VAR . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
terme -> VAR . PLUS INT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
terme -> VAR . MINUS INT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
## Transitions:
-- On PLUS shift to state 9
-- On MINUS shift to state 11
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND
--   reduce production terme -> VAR

State 9:
## Known stack suffix:
## VAR PLUS
## LR(1) items:
terme -> VAR PLUS . INT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
## Transitions:
-- On INT shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## VAR PLUS INT
## LR(1) items:
terme -> VAR PLUS INT . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND
--   reduce production terme -> VAR PLUS INT

State 11:
## Known stack suffix:
## VAR MINUS
## LR(1) items:
terme -> VAR MINUS . INT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
## Transitions:
-- On INT shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## VAR MINUS INT
## LR(1) items:
terme -> VAR MINUS INT . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND
--   reduce production terme -> VAR MINUS INT

State 13:
## Known stack suffix:
## PROP LPAREN RPAREN
## LR(1) items:
function_call -> PROP LPAREN RPAREN . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production function_call -> PROP LPAREN RPAREN

State 14:
## Known stack suffix:
## PROP
## LR(1) items:
arguments -> PROP . [ RPAREN ]
arguments -> PROP . COMMA arguments [ RPAREN ]
## Transitions:
-- On COMMA shift to state 15
## Reductions:
-- On RPAREN
--   reduce production arguments -> PROP

State 15:
## Known stack suffix:
## PROP COMMA
## LR(1) items:
arguments -> PROP COMMA . arguments [ RPAREN ]
## Transitions:
-- On VAR shift to state 8
-- On PROP shift to state 14
-- On INT shift to state 16
-- On terme shift to state 17
-- On arguments shift to state 20
## Reductions:

State 16:
## Known stack suffix:
## INT
## LR(1) items:
terme -> INT . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND
--   reduce production terme -> INT

State 17:
## Known stack suffix:
## terme
## LR(1) items:
arguments -> terme . [ RPAREN ]
arguments -> terme . COMMA arguments [ RPAREN ]
## Transitions:
-- On COMMA shift to state 18
## Reductions:
-- On RPAREN
--   reduce production arguments -> terme

State 18:
## Known stack suffix:
## terme COMMA
## LR(1) items:
arguments -> terme COMMA . arguments [ RPAREN ]
## Transitions:
-- On VAR shift to state 8
-- On PROP shift to state 14
-- On INT shift to state 16
-- On terme shift to state 17
-- On arguments shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## terme COMMA arguments
## LR(1) items:
arguments -> terme COMMA arguments . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production arguments -> terme COMMA arguments

State 20:
## Known stack suffix:
## PROP COMMA arguments
## LR(1) items:
arguments -> PROP COMMA arguments . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production arguments -> PROP COMMA arguments

State 21:
## Known stack suffix:
## PROP LPAREN arguments
## LR(1) items:
function_call -> PROP LPAREN arguments . RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On RPAREN shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## PROP LPAREN arguments RPAREN
## LR(1) items:
function_call -> PROP LPAREN arguments RPAREN . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production function_call -> PROP LPAREN arguments RPAREN

State 23:
## Known stack suffix:
## PROP INDEX
## LR(1) items:
regschema -> PROP INDEX . terme [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 8
-- On INT shift to state 16
-- On terme shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## PROP INDEX terme
## LR(1) items:
regschema -> PROP INDEX terme . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production regschema -> PROP INDEX terme

State 25:
## Known stack suffix:
## PROP EOF
## LR(1) items:
function_call -> PROP EOF . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production function_call -> PROP EOF

State 26:
## Known stack suffix:
## PROP AND
## LR(1) items:
function_call -> PROP AND . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production function_call -> PROP AND

State 27:
## Known stack suffix:
## OR
## LR(1) items:
regschema -> OR . VAR EQUAL INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## OR VAR
## LR(1) items:
regschema -> OR VAR . EQUAL INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On EQUAL shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## OR VAR EQUAL
## LR(1) items:
regschema -> OR VAR EQUAL . INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On INT shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## OR VAR EQUAL INT
## LR(1) items:
regschema -> OR VAR EQUAL INT . DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On DOTS shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## OR VAR EQUAL INT DOTS
## LR(1) items:
regschema -> OR VAR EQUAL INT DOTS . upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 32
-- On upper shift to state 37
## Reductions:

State 32:
## Known stack suffix:
## VAR
## LR(1) items:
upper -> VAR . [ PROP OR NOT LPAREN AND ]
upper -> VAR . PLUS INT [ PROP OR NOT LPAREN AND ]
upper -> VAR . MINUS INT [ PROP OR NOT LPAREN AND ]
## Transitions:
-- On PLUS shift to state 33
-- On MINUS shift to state 35
## Reductions:
-- On PROP OR NOT LPAREN AND
--   reduce production upper -> VAR

State 33:
## Known stack suffix:
## VAR PLUS
## LR(1) items:
upper -> VAR PLUS . INT [ PROP OR NOT LPAREN AND ]
## Transitions:
-- On INT shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## VAR PLUS INT
## LR(1) items:
upper -> VAR PLUS INT . [ PROP OR NOT LPAREN AND ]
## Transitions:
## Reductions:
-- On PROP OR NOT LPAREN AND
--   reduce production upper -> VAR PLUS INT

State 35:
## Known stack suffix:
## VAR MINUS
## LR(1) items:
upper -> VAR MINUS . INT [ PROP OR NOT LPAREN AND ]
## Transitions:
-- On INT shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## VAR MINUS INT
## LR(1) items:
upper -> VAR MINUS INT . [ PROP OR NOT LPAREN AND ]
## Transitions:
## Reductions:
-- On PROP OR NOT LPAREN AND
--   reduce production upper -> VAR MINUS INT

State 37:
## Known stack suffix:
## OR VAR EQUAL INT DOTS upper
## LR(1) items:
regschema -> OR VAR EQUAL INT DOTS upper . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 67
## Reductions:

State 38:
## Known stack suffix:
## PROP
## LR(1) items:
flatschema -> PROP . INDEX terme [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . LPAREN arguments RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . LPAREN RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . AND [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . OR [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . NOT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . PROP [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . EOF [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 4
-- On OR shift to state 5
-- On NOT shift to state 6
-- On LPAREN shift to state 7
-- On INDEX shift to state 39
-- On EOF shift to state 25
-- On AND shift to state 26
## Reductions:

State 39:
## Known stack suffix:
## PROP INDEX
## LR(1) items:
flatschema -> PROP INDEX . terme [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 8
-- On INT shift to state 16
-- On terme shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## PROP INDEX terme
## LR(1) items:
flatschema -> PROP INDEX terme . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production flatschema -> PROP INDEX terme

State 41:
## Known stack suffix:
## OR
## LR(1) items:
flatschema -> OR . VAR EQUAL INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## OR VAR
## LR(1) items:
flatschema -> OR VAR . EQUAL INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On EQUAL shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## OR VAR EQUAL
## LR(1) items:
flatschema -> OR VAR EQUAL . INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On INT shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## OR VAR EQUAL INT
## LR(1) items:
flatschema -> OR VAR EQUAL INT . DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On DOTS shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## OR VAR EQUAL INT DOTS
## LR(1) items:
flatschema -> OR VAR EQUAL INT DOTS . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production flatschema -> OR VAR EQUAL INT DOTS

State 46:
## Known stack suffix:
## NOT
## LR(1) items:
flatschema -> NOT . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 66
## Reductions:

State 47:
## Known stack suffix:
## LPAREN
## LR(1) items:
flatschema -> LPAREN . flatschema RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 54
## Reductions:

State 48:
## Known stack suffix:
## AND
## LR(1) items:
flatschema -> AND . VAR EQUAL INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## AND VAR
## LR(1) items:
flatschema -> AND VAR . EQUAL INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On EQUAL shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## AND VAR EQUAL
## LR(1) items:
flatschema -> AND VAR EQUAL . INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On INT shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## AND VAR EQUAL INT
## LR(1) items:
flatschema -> AND VAR EQUAL INT . DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On DOTS shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## AND VAR EQUAL INT DOTS
## LR(1) items:
flatschema -> AND VAR EQUAL INT DOTS . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production flatschema -> AND VAR EQUAL INT DOTS

State 53:
## Known stack suffix:
## function_call
## LR(1) items:
flatschema -> function_call . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production flatschema -> function_call

State 54:
## Known stack suffix:
## LPAREN flatschema
## LR(1) items:
flatschema -> flatschema . AND flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> flatschema . OR flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> flatschema . XOR flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> LPAREN flatschema . RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On XOR shift to state 55
-- On RPAREN shift to state 61
-- On OR shift to state 57
-- On IMPLY shift to state 62
-- On EQUIV shift to state 64
-- On AND shift to state 59
## Reductions:

State 55:
## Known stack suffix:
## flatschema XOR
## LR(1) items:
flatschema -> flatschema XOR . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## flatschema XOR flatschema
## LR(1) items:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema XOR flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On OR shift to state 57
-- On AND shift to state 59
## Reductions:
-- On XOR ST RPAREN PROP NOT LPAREN LET IN IMPLY EQUIV EOF
--   reduce production flatschema -> flatschema XOR flatschema

State 57:
## Known stack suffix:
## flatschema OR
## LR(1) items:
flatschema -> flatschema OR . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## flatschema OR flatschema
## LR(1) items:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema OR flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On AND shift to state 59
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF
--   reduce production flatschema -> flatschema OR flatschema

State 59:
## Known stack suffix:
## flatschema AND
## LR(1) items:
flatschema -> flatschema AND . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## flatschema AND flatschema
## LR(1) items:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema AND flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production flatschema -> flatschema AND flatschema

State 61:
## Known stack suffix:
## LPAREN flatschema RPAREN
## LR(1) items:
flatschema -> LPAREN flatschema RPAREN . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production flatschema -> LPAREN flatschema RPAREN

State 62:
## Known stack suffix:
## flatschema IMPLY
## LR(1) items:
flatschema -> flatschema IMPLY . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## flatschema IMPLY flatschema
## LR(1) items:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema IMPLY flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On XOR shift to state 55
-- On OR shift to state 57
-- On AND shift to state 59
## Reductions:
-- On ST RPAREN PROP NOT LPAREN LET IN IMPLY EQUIV EOF
--   reduce production flatschema -> flatschema IMPLY flatschema

State 64:
## Known stack suffix:
## flatschema EQUIV
## LR(1) items:
flatschema -> flatschema EQUIV . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## flatschema EQUIV flatschema
## LR(1) items:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema EQUIV flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On XOR shift to state 55
-- On OR shift to state 57
-- On AND shift to state 59
## Reductions:
-- On ST RPAREN PROP NOT LPAREN LET IN IMPLY EQUIV EOF
--   reduce production flatschema -> flatschema EQUIV flatschema

State 66:
## Known stack suffix:
## NOT flatschema
## LR(1) items:
flatschema -> NOT flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production flatschema -> NOT flatschema

State 67:
## Known stack suffix:
## OR VAR EQUAL INT DOTS upper flatschema
## LR(1) items:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> OR VAR EQUAL INT DOTS upper flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema

State 68:
## Known stack suffix:
## NOT
## LR(1) items:
regschema -> NOT . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 90
-- On function_call shift to state 84
## Reductions:

State 69:
## Known stack suffix:
## LPAREN
## LR(1) items:
regschema -> LPAREN . regschema RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 77
-- On function_call shift to state 84
## Reductions:

State 70:
## Known stack suffix:
## AND
## LR(1) items:
regschema -> AND . VAR EQUAL INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## AND VAR
## LR(1) items:
regschema -> AND VAR . EQUAL INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On EQUAL shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## AND VAR EQUAL
## LR(1) items:
regschema -> AND VAR EQUAL . INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On INT shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## AND VAR EQUAL INT
## LR(1) items:
regschema -> AND VAR EQUAL INT . DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On DOTS shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## AND VAR EQUAL INT DOTS
## LR(1) items:
regschema -> AND VAR EQUAL INT DOTS . upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 32
-- On upper shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## AND VAR EQUAL INT DOTS upper
## LR(1) items:
regschema -> AND VAR EQUAL INT DOTS upper . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## AND VAR EQUAL INT DOTS upper flatschema
## LR(1) items:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> AND VAR EQUAL INT DOTS upper flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema

State 77:
## Known stack suffix:
## LPAREN regschema
## LR(1) items:
regschema -> regschema . AND regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> regschema . OR regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> regschema . XOR regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> regschema . EQUIV regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> regschema . IMPLY regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> LPAREN regschema . RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On XOR shift to state 78
-- On RPAREN shift to state 85
-- On OR shift to state 80
-- On IMPLY shift to state 86
-- On EQUIV shift to state 88
-- On AND shift to state 82
## Reductions:

State 78:
## Known stack suffix:
## regschema XOR
## LR(1) items:
regschema -> regschema XOR . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 79
-- On function_call shift to state 84
## Reductions:

State 79:
## Known stack suffix:
## regschema XOR regschema
## LR(1) items:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema XOR regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On OR shift to state 80
-- On AND shift to state 82
## Reductions:
-- On XOR ST RPAREN PROP NOT LPAREN LET IN IMPLY EQUIV EOF
--   reduce production regschema -> regschema XOR regschema

State 80:
## Known stack suffix:
## regschema OR
## LR(1) items:
regschema -> regschema OR . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 81
-- On function_call shift to state 84
## Reductions:

State 81:
## Known stack suffix:
## regschema OR regschema
## LR(1) items:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema OR regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On AND shift to state 82
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF
--   reduce production regschema -> regschema OR regschema

State 82:
## Known stack suffix:
## regschema AND
## LR(1) items:
regschema -> regschema AND . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 83
-- On function_call shift to state 84
## Reductions:

State 83:
## Known stack suffix:
## regschema AND regschema
## LR(1) items:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema AND regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production regschema -> regschema AND regschema

State 84:
## Known stack suffix:
## function_call
## LR(1) items:
regschema -> function_call . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production regschema -> function_call

State 85:
## Known stack suffix:
## LPAREN regschema RPAREN
## LR(1) items:
regschema -> LPAREN regschema RPAREN . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production regschema -> LPAREN regschema RPAREN

State 86:
## Known stack suffix:
## regschema IMPLY
## LR(1) items:
regschema -> regschema IMPLY . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 87
-- On function_call shift to state 84
## Reductions:

State 87:
## Known stack suffix:
## regschema IMPLY regschema
## LR(1) items:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema IMPLY regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On XOR shift to state 78
-- On OR shift to state 80
-- On AND shift to state 82
## Reductions:
-- On ST RPAREN PROP NOT LPAREN LET IN IMPLY EQUIV EOF
--   reduce production regschema -> regschema IMPLY regschema

State 88:
## Known stack suffix:
## regschema EQUIV
## LR(1) items:
regschema -> regschema EQUIV . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 89
-- On function_call shift to state 84
## Reductions:

State 89:
## Known stack suffix:
## regschema EQUIV regschema
## LR(1) items:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema EQUIV regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On XOR shift to state 78
-- On OR shift to state 80
-- On AND shift to state 82
## Reductions:
-- On ST RPAREN PROP NOT LPAREN LET IN IMPLY EQUIV EOF
--   reduce production regschema -> regschema EQUIV regschema

State 90:
## Known stack suffix:
## NOT regschema
## LR(1) items:
regschema -> NOT regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
## Reductions:
-- On XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND
--   reduce production regschema -> NOT regschema

State 91:
## Known stack suffix:
## LET
## LR(1) items:
sentences -> LET . def_lhs def_rhs [ # ]
## Transitions:
-- On PROP shift to state 92
-- On def_lhs shift to state 102
## Reductions:

State 92:
## Known stack suffix:
## PROP
## LR(1) items:
def_lhs -> PROP . LPAREN params RPAREN [ EQUAL DEF ]
def_lhs -> PROP . [ EQUAL DEF ]
## Transitions:
-- On LPAREN shift to state 93
## Reductions:
-- On EQUAL DEF
--   reduce production def_lhs -> PROP

State 93:
## Known stack suffix:
## PROP LPAREN
## LR(1) items:
def_lhs -> PROP LPAREN . params RPAREN [ EQUAL DEF ]
## Transitions:
-- On VAR shift to state 94
-- On PROP shift to state 96
-- On params shift to state 100
## Reductions:

State 94:
## Known stack suffix:
## VAR
## LR(1) items:
params -> VAR . [ RPAREN ]
params -> VAR . COMMA params [ RPAREN ]
## Transitions:
-- On COMMA shift to state 95
## Reductions:
-- On RPAREN
--   reduce production params -> VAR

State 95:
## Known stack suffix:
## VAR COMMA
## LR(1) items:
params -> VAR COMMA . params [ RPAREN ]
## Transitions:
-- On VAR shift to state 94
-- On PROP shift to state 96
-- On params shift to state 99
## Reductions:

State 96:
## Known stack suffix:
## PROP
## LR(1) items:
params -> PROP . [ RPAREN ]
params -> PROP . COMMA params [ RPAREN ]
## Transitions:
-- On COMMA shift to state 97
## Reductions:
-- On RPAREN
--   reduce production params -> PROP

State 97:
## Known stack suffix:
## PROP COMMA
## LR(1) items:
params -> PROP COMMA . params [ RPAREN ]
## Transitions:
-- On VAR shift to state 94
-- On PROP shift to state 96
-- On params shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## PROP COMMA params
## LR(1) items:
params -> PROP COMMA params . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production params -> PROP COMMA params

State 99:
## Known stack suffix:
## VAR COMMA params
## LR(1) items:
params -> VAR COMMA params . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production params -> VAR COMMA params

State 100:
## Known stack suffix:
## PROP LPAREN params
## LR(1) items:
def_lhs -> PROP LPAREN params . RPAREN [ EQUAL DEF ]
## Transitions:
-- On RPAREN shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## PROP LPAREN params RPAREN
## LR(1) items:
def_lhs -> PROP LPAREN params RPAREN . [ EQUAL DEF ]
## Transitions:
## Reductions:
-- On EQUAL DEF
--   reduce production def_lhs -> PROP LPAREN params RPAREN

State 102:
## Known stack suffix:
## LET def_lhs
## LR(1) items:
sentences -> LET def_lhs . def_rhs [ # ]
## Transitions:
-- On EQUAL shift to state 103
-- On DEF shift to state 104
-- On def_rhs shift to state 125
## Reductions:

State 103:
## Known stack suffix:
## EQUAL
## LR(1) items:
def_rhs -> EQUAL . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production def_rhs -> EQUAL

State 104:
## Known stack suffix:
## DEF
## LR(1) items:
def_rhs -> DEF . regschema in_sentences [ # ]
## Transitions:
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 105
-- On function_call shift to state 84
## Reductions:

State 105:
## Known stack suffix:
## DEF regschema
## LR(1) items:
def_rhs -> DEF regschema . in_sentences [ # ]
regschema -> regschema . AND regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
## Transitions:
-- On XOR shift to state 78
-- On PROP shift to state 3
-- On OR shift to state 106
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On LET shift to state 91
-- On IN shift to state 107
-- On IMPLY shift to state 86
-- On EQUIV shift to state 88
-- On EOF shift to state 108
-- On AND shift to state 122
-- On sentences shift to state 123
-- On regschema shift to state 110
-- On in_sentences shift to state 124
-- On function_call shift to state 84
## Reductions:

State 106:
## Known stack suffix:
## regschema OR
## LR(1) items:
regschema -> regschema OR . regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> OR . VAR EQUAL INT DOTS upper flatschema [ XOR ST OR IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 28
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 81
-- On function_call shift to state 84
## Reductions:

State 107:
## Known stack suffix:
## IN
## LR(1) items:
in_sentences -> IN . sentences [ # ]
## Transitions:
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On LET shift to state 91
-- On EOF shift to state 108
-- On AND shift to state 70
-- On sentences shift to state 109
-- On regschema shift to state 110
-- On function_call shift to state 84
## Reductions:

State 108:
## Known stack suffix:
## EOF
## LR(1) items:
sentences -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production sentences -> EOF

State 109:
## Known stack suffix:
## IN sentences
## LR(1) items:
in_sentences -> IN sentences . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production in_sentences -> IN sentences

State 110:
## Known stack suffix:
## regschema
## LR(1) items:
regschema -> regschema . AND regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
sentences -> regschema . EOF [ # ]
sentences -> regschema . ST cstr EOF [ # ]
## Transitions:
-- On XOR shift to state 78
-- On ST shift to state 111
-- On OR shift to state 80
-- On IMPLY shift to state 86
-- On EQUIV shift to state 88
-- On EOF shift to state 121
-- On AND shift to state 82
## Reductions:

State 111:
## Known stack suffix:
## regschema ST
## LR(1) items:
sentences -> regschema ST . cstr EOF [ # ]
## Transitions:
-- On VAR shift to state 112
-- On cstr shift to state 119
## Reductions:

State 112:
## Known stack suffix:
## VAR
## LR(1) items:
cstr -> VAR . GE INT [ EOF ]
cstr -> VAR . GT INT [ EOF ]
cstr -> VAR . EQUAL INT [ EOF ]
## Transitions:
-- On GT shift to state 113
-- On GE shift to state 115
-- On EQUAL shift to state 117
## Reductions:

State 113:
## Known stack suffix:
## VAR GT
## LR(1) items:
cstr -> VAR GT . INT [ EOF ]
## Transitions:
-- On INT shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## VAR GT INT
## LR(1) items:
cstr -> VAR GT INT . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production cstr -> VAR GT INT

State 115:
## Known stack suffix:
## VAR GE
## LR(1) items:
cstr -> VAR GE . INT [ EOF ]
## Transitions:
-- On INT shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## VAR GE INT
## LR(1) items:
cstr -> VAR GE INT . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production cstr -> VAR GE INT

State 117:
## Known stack suffix:
## VAR EQUAL
## LR(1) items:
cstr -> VAR EQUAL . INT [ EOF ]
## Transitions:
-- On INT shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## VAR EQUAL INT
## LR(1) items:
cstr -> VAR EQUAL INT . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production cstr -> VAR EQUAL INT

State 119:
## Known stack suffix:
## regschema ST cstr
## LR(1) items:
sentences -> regschema ST cstr . EOF [ # ]
## Transitions:
-- On EOF shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## regschema ST cstr EOF
## LR(1) items:
sentences -> regschema ST cstr EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production sentences -> regschema ST cstr EOF

State 121:
## Known stack suffix:
## regschema EOF
## LR(1) items:
sentences -> regschema EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production sentences -> regschema EOF

State 122:
## Known stack suffix:
## regschema AND
## LR(1) items:
regschema -> regschema AND . regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> AND . VAR EQUAL INT DOTS upper flatschema [ XOR ST OR IMPLY EQUIV EOF AND ]
## Transitions:
-- On VAR shift to state 71
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 83
-- On function_call shift to state 84
## Reductions:

State 123:
## Known stack suffix:
## sentences
## LR(1) items:
in_sentences -> sentences . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production in_sentences -> sentences

State 124:
## Known stack suffix:
## DEF regschema in_sentences
## LR(1) items:
def_rhs -> DEF regschema in_sentences . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production def_rhs -> DEF regschema in_sentences

State 125:
## Known stack suffix:
## LET def_lhs def_rhs
## LR(1) items:
sentences -> LET def_lhs def_rhs . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production sentences -> LET def_lhs def_rhs

State 126:
## Known stack suffix:
## sentences
## LR(1) items:
main -> sentences . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> sentences

State 127:
## Known stack suffix:
## regstab_2_0_0_parser_option
## LR(1) items:
main -> regstab_2_0_0_parser_option . main [ # ]
## Transitions:
-- On UNSAT shift to state 1
-- On SAT shift to state 2
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On LET shift to state 91
-- On EOF shift to state 108
-- On AND shift to state 70
-- On sentences shift to state 126
-- On regstab_2_0_0_parser_option shift to state 127
-- On regschema shift to state 110
-- On main shift to state 128
-- On function_call shift to state 84
## Reductions:

State 128:
## Known stack suffix:
## regstab_2_0_0_parser_option main
## LR(1) items:
main -> regstab_2_0_0_parser_option main . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> regstab_2_0_0_parser_option main

State 129:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

