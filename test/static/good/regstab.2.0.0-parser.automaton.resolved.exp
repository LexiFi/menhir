State 0:
main' -> . main [ # ]
-- On UNSAT shift to state 1
-- On SAT shift to state 2
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On LET shift to state 91
-- On EOF shift to state 108
-- On AND shift to state 70
-- On sentences shift to state 126
-- On regstab_2_0_0_parser_option shift to state 127
-- On regschema shift to state 110
-- On main shift to state 129
-- On function_call shift to state 84

State 1:
regstab_2_0_0_parser_option -> UNSAT . [ UNSAT SAT PROP OR NOT LPAREN LET EOF AND ]
-- On UNSAT reduce production regstab_2_0_0_parser_option -> UNSAT
-- On SAT reduce production regstab_2_0_0_parser_option -> UNSAT
-- On PROP reduce production regstab_2_0_0_parser_option -> UNSAT
-- On OR reduce production regstab_2_0_0_parser_option -> UNSAT
-- On NOT reduce production regstab_2_0_0_parser_option -> UNSAT
-- On LPAREN reduce production regstab_2_0_0_parser_option -> UNSAT
-- On LET reduce production regstab_2_0_0_parser_option -> UNSAT
-- On EOF reduce production regstab_2_0_0_parser_option -> UNSAT
-- On AND reduce production regstab_2_0_0_parser_option -> UNSAT

State 2:
regstab_2_0_0_parser_option -> SAT . [ UNSAT SAT PROP OR NOT LPAREN LET EOF AND ]
-- On UNSAT reduce production regstab_2_0_0_parser_option -> SAT
-- On SAT reduce production regstab_2_0_0_parser_option -> SAT
-- On PROP reduce production regstab_2_0_0_parser_option -> SAT
-- On OR reduce production regstab_2_0_0_parser_option -> SAT
-- On NOT reduce production regstab_2_0_0_parser_option -> SAT
-- On LPAREN reduce production regstab_2_0_0_parser_option -> SAT
-- On LET reduce production regstab_2_0_0_parser_option -> SAT
-- On EOF reduce production regstab_2_0_0_parser_option -> SAT
-- On AND reduce production regstab_2_0_0_parser_option -> SAT

State 3:
function_call -> PROP . LPAREN arguments RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . LPAREN RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . AND [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . OR [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . NOT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . PROP [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . EOF [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> PROP . INDEX terme [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 4
-- On OR shift to state 5
-- On NOT shift to state 6
-- On LPAREN shift to state 7
-- On INDEX shift to state 23
-- On EOF shift to state 25
-- On AND shift to state 26

State 4:
function_call -> PROP PROP . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production function_call -> PROP PROP
-- On ST reduce production function_call -> PROP PROP
-- On RPAREN reduce production function_call -> PROP PROP
-- On PROP reduce production function_call -> PROP PROP
-- On OR reduce production function_call -> PROP PROP
-- On NOT reduce production function_call -> PROP PROP
-- On LPAREN reduce production function_call -> PROP PROP
-- On LET reduce production function_call -> PROP PROP
-- On IN reduce production function_call -> PROP PROP
-- On IMPLY reduce production function_call -> PROP PROP
-- On EQUIV reduce production function_call -> PROP PROP
-- On EOF reduce production function_call -> PROP PROP
-- On AND reduce production function_call -> PROP PROP

State 5:
function_call -> PROP OR . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production function_call -> PROP OR
-- On ST reduce production function_call -> PROP OR
-- On RPAREN reduce production function_call -> PROP OR
-- On PROP reduce production function_call -> PROP OR
-- On OR reduce production function_call -> PROP OR
-- On NOT reduce production function_call -> PROP OR
-- On LPAREN reduce production function_call -> PROP OR
-- On LET reduce production function_call -> PROP OR
-- On IN reduce production function_call -> PROP OR
-- On IMPLY reduce production function_call -> PROP OR
-- On EQUIV reduce production function_call -> PROP OR
-- On EOF reduce production function_call -> PROP OR
-- On AND reduce production function_call -> PROP OR

State 6:
function_call -> PROP NOT . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production function_call -> PROP NOT
-- On ST reduce production function_call -> PROP NOT
-- On RPAREN reduce production function_call -> PROP NOT
-- On PROP reduce production function_call -> PROP NOT
-- On OR reduce production function_call -> PROP NOT
-- On NOT reduce production function_call -> PROP NOT
-- On LPAREN reduce production function_call -> PROP NOT
-- On LET reduce production function_call -> PROP NOT
-- On IN reduce production function_call -> PROP NOT
-- On IMPLY reduce production function_call -> PROP NOT
-- On EQUIV reduce production function_call -> PROP NOT
-- On EOF reduce production function_call -> PROP NOT
-- On AND reduce production function_call -> PROP NOT

State 7:
function_call -> PROP LPAREN . arguments RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP LPAREN . RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On VAR shift to state 8
-- On RPAREN shift to state 13
-- On PROP shift to state 14
-- On INT shift to state 16
-- On terme shift to state 17
-- On arguments shift to state 21

State 8:
terme -> VAR . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
terme -> VAR . PLUS INT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
terme -> VAR . MINUS INT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
-- On PLUS shift to state 9
-- On MINUS shift to state 11
-- On XOR reduce production terme -> VAR
-- On ST reduce production terme -> VAR
-- On RPAREN reduce production terme -> VAR
-- On PROP reduce production terme -> VAR
-- On OR reduce production terme -> VAR
-- On NOT reduce production terme -> VAR
-- On LPAREN reduce production terme -> VAR
-- On LET reduce production terme -> VAR
-- On IN reduce production terme -> VAR
-- On IMPLY reduce production terme -> VAR
-- On EQUIV reduce production terme -> VAR
-- On EOF reduce production terme -> VAR
-- On COMMA reduce production terme -> VAR
-- On AND reduce production terme -> VAR

State 9:
terme -> VAR PLUS . INT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
-- On INT shift to state 10

State 10:
terme -> VAR PLUS INT . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
-- On XOR reduce production terme -> VAR PLUS INT
-- On ST reduce production terme -> VAR PLUS INT
-- On RPAREN reduce production terme -> VAR PLUS INT
-- On PROP reduce production terme -> VAR PLUS INT
-- On OR reduce production terme -> VAR PLUS INT
-- On NOT reduce production terme -> VAR PLUS INT
-- On LPAREN reduce production terme -> VAR PLUS INT
-- On LET reduce production terme -> VAR PLUS INT
-- On IN reduce production terme -> VAR PLUS INT
-- On IMPLY reduce production terme -> VAR PLUS INT
-- On EQUIV reduce production terme -> VAR PLUS INT
-- On EOF reduce production terme -> VAR PLUS INT
-- On COMMA reduce production terme -> VAR PLUS INT
-- On AND reduce production terme -> VAR PLUS INT

State 11:
terme -> VAR MINUS . INT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
-- On INT shift to state 12

State 12:
terme -> VAR MINUS INT . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
-- On XOR reduce production terme -> VAR MINUS INT
-- On ST reduce production terme -> VAR MINUS INT
-- On RPAREN reduce production terme -> VAR MINUS INT
-- On PROP reduce production terme -> VAR MINUS INT
-- On OR reduce production terme -> VAR MINUS INT
-- On NOT reduce production terme -> VAR MINUS INT
-- On LPAREN reduce production terme -> VAR MINUS INT
-- On LET reduce production terme -> VAR MINUS INT
-- On IN reduce production terme -> VAR MINUS INT
-- On IMPLY reduce production terme -> VAR MINUS INT
-- On EQUIV reduce production terme -> VAR MINUS INT
-- On EOF reduce production terme -> VAR MINUS INT
-- On COMMA reduce production terme -> VAR MINUS INT
-- On AND reduce production terme -> VAR MINUS INT

State 13:
function_call -> PROP LPAREN RPAREN . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production function_call -> PROP LPAREN RPAREN
-- On ST reduce production function_call -> PROP LPAREN RPAREN
-- On RPAREN reduce production function_call -> PROP LPAREN RPAREN
-- On PROP reduce production function_call -> PROP LPAREN RPAREN
-- On OR reduce production function_call -> PROP LPAREN RPAREN
-- On NOT reduce production function_call -> PROP LPAREN RPAREN
-- On LPAREN reduce production function_call -> PROP LPAREN RPAREN
-- On LET reduce production function_call -> PROP LPAREN RPAREN
-- On IN reduce production function_call -> PROP LPAREN RPAREN
-- On IMPLY reduce production function_call -> PROP LPAREN RPAREN
-- On EQUIV reduce production function_call -> PROP LPAREN RPAREN
-- On EOF reduce production function_call -> PROP LPAREN RPAREN
-- On AND reduce production function_call -> PROP LPAREN RPAREN

State 14:
arguments -> PROP . [ RPAREN ]
arguments -> PROP . COMMA arguments [ RPAREN ]
-- On COMMA shift to state 15
-- On RPAREN reduce production arguments -> PROP

State 15:
arguments -> PROP COMMA . arguments [ RPAREN ]
-- On VAR shift to state 8
-- On PROP shift to state 14
-- On INT shift to state 16
-- On terme shift to state 17
-- On arguments shift to state 20

State 16:
terme -> INT . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF COMMA AND ]
-- On XOR reduce production terme -> INT
-- On ST reduce production terme -> INT
-- On RPAREN reduce production terme -> INT
-- On PROP reduce production terme -> INT
-- On OR reduce production terme -> INT
-- On NOT reduce production terme -> INT
-- On LPAREN reduce production terme -> INT
-- On LET reduce production terme -> INT
-- On IN reduce production terme -> INT
-- On IMPLY reduce production terme -> INT
-- On EQUIV reduce production terme -> INT
-- On EOF reduce production terme -> INT
-- On COMMA reduce production terme -> INT
-- On AND reduce production terme -> INT

State 17:
arguments -> terme . [ RPAREN ]
arguments -> terme . COMMA arguments [ RPAREN ]
-- On COMMA shift to state 18
-- On RPAREN reduce production arguments -> terme

State 18:
arguments -> terme COMMA . arguments [ RPAREN ]
-- On VAR shift to state 8
-- On PROP shift to state 14
-- On INT shift to state 16
-- On terme shift to state 17
-- On arguments shift to state 19

State 19:
arguments -> terme COMMA arguments . [ RPAREN ]
-- On RPAREN reduce production arguments -> terme COMMA arguments

State 20:
arguments -> PROP COMMA arguments . [ RPAREN ]
-- On RPAREN reduce production arguments -> PROP COMMA arguments

State 21:
function_call -> PROP LPAREN arguments . RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On RPAREN shift to state 22

State 22:
function_call -> PROP LPAREN arguments RPAREN . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production function_call -> PROP LPAREN arguments RPAREN
-- On ST reduce production function_call -> PROP LPAREN arguments RPAREN
-- On RPAREN reduce production function_call -> PROP LPAREN arguments RPAREN
-- On PROP reduce production function_call -> PROP LPAREN arguments RPAREN
-- On OR reduce production function_call -> PROP LPAREN arguments RPAREN
-- On NOT reduce production function_call -> PROP LPAREN arguments RPAREN
-- On LPAREN reduce production function_call -> PROP LPAREN arguments RPAREN
-- On LET reduce production function_call -> PROP LPAREN arguments RPAREN
-- On IN reduce production function_call -> PROP LPAREN arguments RPAREN
-- On IMPLY reduce production function_call -> PROP LPAREN arguments RPAREN
-- On EQUIV reduce production function_call -> PROP LPAREN arguments RPAREN
-- On EOF reduce production function_call -> PROP LPAREN arguments RPAREN
-- On AND reduce production function_call -> PROP LPAREN arguments RPAREN

State 23:
regschema -> PROP INDEX . terme [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On VAR shift to state 8
-- On INT shift to state 16
-- On terme shift to state 24

State 24:
regschema -> PROP INDEX terme . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production regschema -> PROP INDEX terme
-- On ST reduce production regschema -> PROP INDEX terme
-- On RPAREN reduce production regschema -> PROP INDEX terme
-- On PROP reduce production regschema -> PROP INDEX terme
-- On OR reduce production regschema -> PROP INDEX terme
-- On NOT reduce production regschema -> PROP INDEX terme
-- On LPAREN reduce production regschema -> PROP INDEX terme
-- On LET reduce production regschema -> PROP INDEX terme
-- On IN reduce production regschema -> PROP INDEX terme
-- On IMPLY reduce production regschema -> PROP INDEX terme
-- On EQUIV reduce production regschema -> PROP INDEX terme
-- On EOF reduce production regschema -> PROP INDEX terme
-- On AND reduce production regschema -> PROP INDEX terme

State 25:
function_call -> PROP EOF . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production function_call -> PROP EOF
-- On ST reduce production function_call -> PROP EOF
-- On RPAREN reduce production function_call -> PROP EOF
-- On PROP reduce production function_call -> PROP EOF
-- On OR reduce production function_call -> PROP EOF
-- On NOT reduce production function_call -> PROP EOF
-- On LPAREN reduce production function_call -> PROP EOF
-- On LET reduce production function_call -> PROP EOF
-- On IN reduce production function_call -> PROP EOF
-- On IMPLY reduce production function_call -> PROP EOF
-- On EQUIV reduce production function_call -> PROP EOF
-- On EOF reduce production function_call -> PROP EOF
-- On AND reduce production function_call -> PROP EOF

State 26:
function_call -> PROP AND . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production function_call -> PROP AND
-- On ST reduce production function_call -> PROP AND
-- On RPAREN reduce production function_call -> PROP AND
-- On PROP reduce production function_call -> PROP AND
-- On OR reduce production function_call -> PROP AND
-- On NOT reduce production function_call -> PROP AND
-- On LPAREN reduce production function_call -> PROP AND
-- On LET reduce production function_call -> PROP AND
-- On IN reduce production function_call -> PROP AND
-- On IMPLY reduce production function_call -> PROP AND
-- On EQUIV reduce production function_call -> PROP AND
-- On EOF reduce production function_call -> PROP AND
-- On AND reduce production function_call -> PROP AND

State 27:
regschema -> OR . VAR EQUAL INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On VAR shift to state 28

State 28:
regschema -> OR VAR . EQUAL INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On EQUAL shift to state 29

State 29:
regschema -> OR VAR EQUAL . INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On INT shift to state 30

State 30:
regschema -> OR VAR EQUAL INT . DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On DOTS shift to state 31

State 31:
regschema -> OR VAR EQUAL INT DOTS . upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On VAR shift to state 32
-- On upper shift to state 37

State 32:
upper -> VAR . [ PROP OR NOT LPAREN AND ]
upper -> VAR . PLUS INT [ PROP OR NOT LPAREN AND ]
upper -> VAR . MINUS INT [ PROP OR NOT LPAREN AND ]
-- On PLUS shift to state 33
-- On MINUS shift to state 35
-- On PROP reduce production upper -> VAR
-- On OR reduce production upper -> VAR
-- On NOT reduce production upper -> VAR
-- On LPAREN reduce production upper -> VAR
-- On AND reduce production upper -> VAR

State 33:
upper -> VAR PLUS . INT [ PROP OR NOT LPAREN AND ]
-- On INT shift to state 34

State 34:
upper -> VAR PLUS INT . [ PROP OR NOT LPAREN AND ]
-- On PROP reduce production upper -> VAR PLUS INT
-- On OR reduce production upper -> VAR PLUS INT
-- On NOT reduce production upper -> VAR PLUS INT
-- On LPAREN reduce production upper -> VAR PLUS INT
-- On AND reduce production upper -> VAR PLUS INT

State 35:
upper -> VAR MINUS . INT [ PROP OR NOT LPAREN AND ]
-- On INT shift to state 36

State 36:
upper -> VAR MINUS INT . [ PROP OR NOT LPAREN AND ]
-- On PROP reduce production upper -> VAR MINUS INT
-- On OR reduce production upper -> VAR MINUS INT
-- On NOT reduce production upper -> VAR MINUS INT
-- On LPAREN reduce production upper -> VAR MINUS INT
-- On AND reduce production upper -> VAR MINUS INT

State 37:
regschema -> OR VAR EQUAL INT DOTS upper . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 67

State 38:
flatschema -> PROP . INDEX terme [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . LPAREN arguments RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . LPAREN RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . AND [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . OR [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . NOT [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . PROP [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
function_call -> PROP . EOF [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 4
-- On OR shift to state 5
-- On NOT shift to state 6
-- On LPAREN shift to state 7
-- On INDEX shift to state 39
-- On EOF shift to state 25
-- On AND shift to state 26

State 39:
flatschema -> PROP INDEX . terme [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On VAR shift to state 8
-- On INT shift to state 16
-- On terme shift to state 40

State 40:
flatschema -> PROP INDEX terme . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production flatschema -> PROP INDEX terme
-- On ST reduce production flatschema -> PROP INDEX terme
-- On RPAREN reduce production flatschema -> PROP INDEX terme
-- On PROP reduce production flatschema -> PROP INDEX terme
-- On OR reduce production flatschema -> PROP INDEX terme
-- On NOT reduce production flatschema -> PROP INDEX terme
-- On LPAREN reduce production flatschema -> PROP INDEX terme
-- On LET reduce production flatschema -> PROP INDEX terme
-- On IN reduce production flatschema -> PROP INDEX terme
-- On IMPLY reduce production flatschema -> PROP INDEX terme
-- On EQUIV reduce production flatschema -> PROP INDEX terme
-- On EOF reduce production flatschema -> PROP INDEX terme
-- On AND reduce production flatschema -> PROP INDEX terme

State 41:
flatschema -> OR . VAR EQUAL INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On VAR shift to state 42

State 42:
flatschema -> OR VAR . EQUAL INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On EQUAL shift to state 43

State 43:
flatschema -> OR VAR EQUAL . INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On INT shift to state 44

State 44:
flatschema -> OR VAR EQUAL INT . DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On DOTS shift to state 45

State 45:
flatschema -> OR VAR EQUAL INT DOTS . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On ST reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On RPAREN reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On PROP reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On OR reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On NOT reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On LPAREN reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On LET reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On IN reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On IMPLY reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On EQUIV reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On EOF reduce production flatschema -> OR VAR EQUAL INT DOTS
-- On AND reduce production flatschema -> OR VAR EQUAL INT DOTS

State 46:
flatschema -> NOT . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 66

State 47:
flatschema -> LPAREN . flatschema RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 54

State 48:
flatschema -> AND . VAR EQUAL INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On VAR shift to state 49

State 49:
flatschema -> AND VAR . EQUAL INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On EQUAL shift to state 50

State 50:
flatschema -> AND VAR EQUAL . INT DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On INT shift to state 51

State 51:
flatschema -> AND VAR EQUAL INT . DOTS [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On DOTS shift to state 52

State 52:
flatschema -> AND VAR EQUAL INT DOTS . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On ST reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On RPAREN reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On PROP reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On OR reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On NOT reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On LPAREN reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On LET reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On IN reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On IMPLY reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On EQUIV reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On EOF reduce production flatschema -> AND VAR EQUAL INT DOTS
-- On AND reduce production flatschema -> AND VAR EQUAL INT DOTS

State 53:
flatschema -> function_call . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production flatschema -> function_call
-- On ST reduce production flatschema -> function_call
-- On RPAREN reduce production flatschema -> function_call
-- On PROP reduce production flatschema -> function_call
-- On OR reduce production flatschema -> function_call
-- On NOT reduce production flatschema -> function_call
-- On LPAREN reduce production flatschema -> function_call
-- On LET reduce production flatschema -> function_call
-- On IN reduce production flatschema -> function_call
-- On IMPLY reduce production flatschema -> function_call
-- On EQUIV reduce production flatschema -> function_call
-- On EOF reduce production flatschema -> function_call
-- On AND reduce production flatschema -> function_call

State 54:
flatschema -> flatschema . AND flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> flatschema . OR flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> flatschema . XOR flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR RPAREN OR IMPLY EQUIV AND ]
flatschema -> LPAREN flatschema . RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR shift to state 55
-- On RPAREN shift to state 61
-- On OR shift to state 57
-- On IMPLY shift to state 62
-- On EQUIV shift to state 64
-- On AND shift to state 59

State 55:
flatschema -> flatschema XOR . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 56

State 56:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema XOR flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On OR shift to state 57
-- On AND shift to state 59
-- On XOR reduce production flatschema -> flatschema XOR flatschema
-- On ST reduce production flatschema -> flatschema XOR flatschema
-- On RPAREN reduce production flatschema -> flatschema XOR flatschema
-- On PROP reduce production flatschema -> flatschema XOR flatschema
-- On NOT reduce production flatschema -> flatschema XOR flatschema
-- On LPAREN reduce production flatschema -> flatschema XOR flatschema
-- On LET reduce production flatschema -> flatschema XOR flatschema
-- On IN reduce production flatschema -> flatschema XOR flatschema
-- On IMPLY reduce production flatschema -> flatschema XOR flatschema
-- On EQUIV reduce production flatschema -> flatschema XOR flatschema
-- On EOF reduce production flatschema -> flatschema XOR flatschema

State 57:
flatschema -> flatschema OR . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 58

State 58:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema OR flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On AND shift to state 59
-- On XOR reduce production flatschema -> flatschema OR flatschema
-- On ST reduce production flatschema -> flatschema OR flatschema
-- On RPAREN reduce production flatschema -> flatschema OR flatschema
-- On PROP reduce production flatschema -> flatschema OR flatschema
-- On OR reduce production flatschema -> flatschema OR flatschema
-- On NOT reduce production flatschema -> flatschema OR flatschema
-- On LPAREN reduce production flatschema -> flatschema OR flatschema
-- On LET reduce production flatschema -> flatschema OR flatschema
-- On IN reduce production flatschema -> flatschema OR flatschema
-- On IMPLY reduce production flatschema -> flatschema OR flatschema
-- On EQUIV reduce production flatschema -> flatschema OR flatschema
-- On EOF reduce production flatschema -> flatschema OR flatschema

State 59:
flatschema -> flatschema AND . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 60

State 60:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema AND flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production flatschema -> flatschema AND flatschema
-- On ST reduce production flatschema -> flatschema AND flatschema
-- On RPAREN reduce production flatschema -> flatschema AND flatschema
-- On PROP reduce production flatschema -> flatschema AND flatschema
-- On OR reduce production flatschema -> flatschema AND flatschema
-- On NOT reduce production flatschema -> flatschema AND flatschema
-- On LPAREN reduce production flatschema -> flatschema AND flatschema
-- On LET reduce production flatschema -> flatschema AND flatschema
-- On IN reduce production flatschema -> flatschema AND flatschema
-- On IMPLY reduce production flatschema -> flatschema AND flatschema
-- On EQUIV reduce production flatschema -> flatschema AND flatschema
-- On EOF reduce production flatschema -> flatschema AND flatschema
-- On AND reduce production flatschema -> flatschema AND flatschema

State 61:
flatschema -> LPAREN flatschema RPAREN . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production flatschema -> LPAREN flatschema RPAREN
-- On ST reduce production flatschema -> LPAREN flatschema RPAREN
-- On RPAREN reduce production flatschema -> LPAREN flatschema RPAREN
-- On PROP reduce production flatschema -> LPAREN flatschema RPAREN
-- On OR reduce production flatschema -> LPAREN flatschema RPAREN
-- On NOT reduce production flatschema -> LPAREN flatschema RPAREN
-- On LPAREN reduce production flatschema -> LPAREN flatschema RPAREN
-- On LET reduce production flatschema -> LPAREN flatschema RPAREN
-- On IN reduce production flatschema -> LPAREN flatschema RPAREN
-- On IMPLY reduce production flatschema -> LPAREN flatschema RPAREN
-- On EQUIV reduce production flatschema -> LPAREN flatschema RPAREN
-- On EOF reduce production flatschema -> LPAREN flatschema RPAREN
-- On AND reduce production flatschema -> LPAREN flatschema RPAREN

State 62:
flatschema -> flatschema IMPLY . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 63

State 63:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema IMPLY flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR shift to state 55
-- On OR shift to state 57
-- On AND shift to state 59
-- On ST reduce production flatschema -> flatschema IMPLY flatschema
-- On RPAREN reduce production flatschema -> flatschema IMPLY flatschema
-- On PROP reduce production flatschema -> flatschema IMPLY flatschema
-- On NOT reduce production flatschema -> flatschema IMPLY flatschema
-- On LPAREN reduce production flatschema -> flatschema IMPLY flatschema
-- On LET reduce production flatschema -> flatschema IMPLY flatschema
-- On IN reduce production flatschema -> flatschema IMPLY flatschema
-- On IMPLY reduce production flatschema -> flatschema IMPLY flatschema
-- On EQUIV reduce production flatschema -> flatschema IMPLY flatschema
-- On EOF reduce production flatschema -> flatschema IMPLY flatschema

State 64:
flatschema -> flatschema EQUIV . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 65

State 65:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema EQUIV flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR shift to state 55
-- On OR shift to state 57
-- On AND shift to state 59
-- On ST reduce production flatschema -> flatschema EQUIV flatschema
-- On RPAREN reduce production flatschema -> flatschema EQUIV flatschema
-- On PROP reduce production flatschema -> flatschema EQUIV flatschema
-- On NOT reduce production flatschema -> flatschema EQUIV flatschema
-- On LPAREN reduce production flatschema -> flatschema EQUIV flatschema
-- On LET reduce production flatschema -> flatschema EQUIV flatschema
-- On IN reduce production flatschema -> flatschema EQUIV flatschema
-- On IMPLY reduce production flatschema -> flatschema EQUIV flatschema
-- On EQUIV reduce production flatschema -> flatschema EQUIV flatschema
-- On EOF reduce production flatschema -> flatschema EQUIV flatschema

State 66:
flatschema -> NOT flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production flatschema -> NOT flatschema
-- On ST reduce production flatschema -> NOT flatschema
-- On RPAREN reduce production flatschema -> NOT flatschema
-- On PROP reduce production flatschema -> NOT flatschema
-- On OR reduce production flatschema -> NOT flatschema
-- On NOT reduce production flatschema -> NOT flatschema
-- On LPAREN reduce production flatschema -> NOT flatschema
-- On LET reduce production flatschema -> NOT flatschema
-- On IN reduce production flatschema -> NOT flatschema
-- On IMPLY reduce production flatschema -> NOT flatschema
-- On EQUIV reduce production flatschema -> NOT flatschema
-- On EOF reduce production flatschema -> NOT flatschema
-- On AND reduce production flatschema -> NOT flatschema

State 67:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> OR VAR EQUAL INT DOTS upper flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On ST reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On RPAREN reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On PROP reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On OR reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On NOT reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On LPAREN reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On LET reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On IN reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On IMPLY reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On EQUIV reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On EOF reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema
-- On AND reduce production regschema -> OR VAR EQUAL INT DOTS upper flatschema

State 68:
regschema -> NOT . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 90
-- On function_call shift to state 84

State 69:
regschema -> LPAREN . regschema RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 77
-- On function_call shift to state 84

State 70:
regschema -> AND . VAR EQUAL INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On VAR shift to state 71

State 71:
regschema -> AND VAR . EQUAL INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On EQUAL shift to state 72

State 72:
regschema -> AND VAR EQUAL . INT DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On INT shift to state 73

State 73:
regschema -> AND VAR EQUAL INT . DOTS upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On DOTS shift to state 74

State 74:
regschema -> AND VAR EQUAL INT DOTS . upper flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On VAR shift to state 32
-- On upper shift to state 75

State 75:
regschema -> AND VAR EQUAL INT DOTS upper . flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 38
-- On OR shift to state 41
-- On NOT shift to state 46
-- On LPAREN shift to state 47
-- On AND shift to state 48
-- On function_call shift to state 53
-- On flatschema shift to state 76

State 76:
flatschema -> flatschema . AND flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . OR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . XOR flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . EQUIV flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
flatschema -> flatschema . IMPLY flatschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> AND VAR EQUAL INT DOTS upper flatschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On ST reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On RPAREN reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On PROP reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On OR reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On NOT reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On LPAREN reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On LET reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On IN reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On IMPLY reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On EQUIV reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On EOF reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema
-- On AND reduce production regschema -> AND VAR EQUAL INT DOTS upper flatschema

State 77:
regschema -> regschema . AND regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> regschema . OR regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> regschema . XOR regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> regschema . EQUIV regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> regschema . IMPLY regschema [ XOR RPAREN OR IMPLY EQUIV AND ]
regschema -> LPAREN regschema . RPAREN [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR shift to state 78
-- On RPAREN shift to state 85
-- On OR shift to state 80
-- On IMPLY shift to state 86
-- On EQUIV shift to state 88
-- On AND shift to state 82

State 78:
regschema -> regschema XOR . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 79
-- On function_call shift to state 84

State 79:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema XOR regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On OR shift to state 80
-- On AND shift to state 82
-- On XOR reduce production regschema -> regschema XOR regschema
-- On ST reduce production regschema -> regschema XOR regschema
-- On RPAREN reduce production regschema -> regschema XOR regschema
-- On PROP reduce production regschema -> regschema XOR regschema
-- On NOT reduce production regschema -> regschema XOR regschema
-- On LPAREN reduce production regschema -> regschema XOR regschema
-- On LET reduce production regschema -> regschema XOR regschema
-- On IN reduce production regschema -> regschema XOR regschema
-- On IMPLY reduce production regschema -> regschema XOR regschema
-- On EQUIV reduce production regschema -> regschema XOR regschema
-- On EOF reduce production regschema -> regschema XOR regschema

State 80:
regschema -> regschema OR . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 81
-- On function_call shift to state 84

State 81:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema OR regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On AND shift to state 82
-- On XOR reduce production regschema -> regschema OR regschema
-- On ST reduce production regschema -> regschema OR regschema
-- On RPAREN reduce production regschema -> regschema OR regschema
-- On PROP reduce production regschema -> regschema OR regschema
-- On OR reduce production regschema -> regschema OR regschema
-- On NOT reduce production regschema -> regschema OR regschema
-- On LPAREN reduce production regschema -> regschema OR regschema
-- On LET reduce production regschema -> regschema OR regschema
-- On IN reduce production regschema -> regschema OR regschema
-- On IMPLY reduce production regschema -> regschema OR regschema
-- On EQUIV reduce production regschema -> regschema OR regschema
-- On EOF reduce production regschema -> regschema OR regschema

State 82:
regschema -> regschema AND . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 83
-- On function_call shift to state 84

State 83:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema AND regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production regschema -> regschema AND regschema
-- On ST reduce production regschema -> regschema AND regschema
-- On RPAREN reduce production regschema -> regschema AND regschema
-- On PROP reduce production regschema -> regschema AND regschema
-- On OR reduce production regschema -> regschema AND regschema
-- On NOT reduce production regschema -> regschema AND regschema
-- On LPAREN reduce production regschema -> regschema AND regschema
-- On LET reduce production regschema -> regschema AND regschema
-- On IN reduce production regschema -> regschema AND regschema
-- On IMPLY reduce production regschema -> regschema AND regschema
-- On EQUIV reduce production regschema -> regschema AND regschema
-- On EOF reduce production regschema -> regschema AND regschema
-- On AND reduce production regschema -> regschema AND regschema

State 84:
regschema -> function_call . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production regschema -> function_call
-- On ST reduce production regschema -> function_call
-- On RPAREN reduce production regschema -> function_call
-- On PROP reduce production regschema -> function_call
-- On OR reduce production regschema -> function_call
-- On NOT reduce production regschema -> function_call
-- On LPAREN reduce production regschema -> function_call
-- On LET reduce production regschema -> function_call
-- On IN reduce production regschema -> function_call
-- On IMPLY reduce production regschema -> function_call
-- On EQUIV reduce production regschema -> function_call
-- On EOF reduce production regschema -> function_call
-- On AND reduce production regschema -> function_call

State 85:
regschema -> LPAREN regschema RPAREN . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production regschema -> LPAREN regschema RPAREN
-- On ST reduce production regschema -> LPAREN regschema RPAREN
-- On RPAREN reduce production regschema -> LPAREN regschema RPAREN
-- On PROP reduce production regschema -> LPAREN regschema RPAREN
-- On OR reduce production regschema -> LPAREN regschema RPAREN
-- On NOT reduce production regschema -> LPAREN regschema RPAREN
-- On LPAREN reduce production regschema -> LPAREN regschema RPAREN
-- On LET reduce production regschema -> LPAREN regschema RPAREN
-- On IN reduce production regschema -> LPAREN regschema RPAREN
-- On IMPLY reduce production regschema -> LPAREN regschema RPAREN
-- On EQUIV reduce production regschema -> LPAREN regschema RPAREN
-- On EOF reduce production regschema -> LPAREN regschema RPAREN
-- On AND reduce production regschema -> LPAREN regschema RPAREN

State 86:
regschema -> regschema IMPLY . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 87
-- On function_call shift to state 84

State 87:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema IMPLY regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR shift to state 78
-- On OR shift to state 80
-- On AND shift to state 82
-- On ST reduce production regschema -> regschema IMPLY regschema
-- On RPAREN reduce production regschema -> regschema IMPLY regschema
-- On PROP reduce production regschema -> regschema IMPLY regschema
-- On NOT reduce production regschema -> regschema IMPLY regschema
-- On LPAREN reduce production regschema -> regschema IMPLY regschema
-- On LET reduce production regschema -> regschema IMPLY regschema
-- On IN reduce production regschema -> regschema IMPLY regschema
-- On IMPLY reduce production regschema -> regschema IMPLY regschema
-- On EQUIV reduce production regschema -> regschema IMPLY regschema
-- On EOF reduce production regschema -> regschema IMPLY regschema

State 88:
regschema -> regschema EQUIV . regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 89
-- On function_call shift to state 84

State 89:
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema EQUIV regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR shift to state 78
-- On OR shift to state 80
-- On AND shift to state 82
-- On ST reduce production regschema -> regschema EQUIV regschema
-- On RPAREN reduce production regschema -> regschema EQUIV regschema
-- On PROP reduce production regschema -> regschema EQUIV regschema
-- On NOT reduce production regschema -> regschema EQUIV regschema
-- On LPAREN reduce production regschema -> regschema EQUIV regschema
-- On LET reduce production regschema -> regschema EQUIV regschema
-- On IN reduce production regschema -> regschema EQUIV regschema
-- On IMPLY reduce production regschema -> regschema EQUIV regschema
-- On EQUIV reduce production regschema -> regschema EQUIV regschema
-- On EOF reduce production regschema -> regschema EQUIV regschema

State 90:
regschema -> NOT regschema . [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . AND regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST RPAREN PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR reduce production regschema -> NOT regschema
-- On ST reduce production regschema -> NOT regschema
-- On RPAREN reduce production regschema -> NOT regschema
-- On PROP reduce production regschema -> NOT regschema
-- On OR reduce production regschema -> NOT regschema
-- On NOT reduce production regschema -> NOT regschema
-- On LPAREN reduce production regschema -> NOT regschema
-- On LET reduce production regschema -> NOT regschema
-- On IN reduce production regschema -> NOT regschema
-- On IMPLY reduce production regschema -> NOT regschema
-- On EQUIV reduce production regschema -> NOT regschema
-- On EOF reduce production regschema -> NOT regschema
-- On AND reduce production regschema -> NOT regschema

State 91:
sentences -> LET . def_lhs def_rhs [ # ]
-- On PROP shift to state 92
-- On def_lhs shift to state 102

State 92:
def_lhs -> PROP . LPAREN params RPAREN [ EQUAL DEF ]
def_lhs -> PROP . [ EQUAL DEF ]
-- On LPAREN shift to state 93
-- On EQUAL reduce production def_lhs -> PROP
-- On DEF reduce production def_lhs -> PROP

State 93:
def_lhs -> PROP LPAREN . params RPAREN [ EQUAL DEF ]
-- On VAR shift to state 94
-- On PROP shift to state 96
-- On params shift to state 100

State 94:
params -> VAR . [ RPAREN ]
params -> VAR . COMMA params [ RPAREN ]
-- On COMMA shift to state 95
-- On RPAREN reduce production params -> VAR

State 95:
params -> VAR COMMA . params [ RPAREN ]
-- On VAR shift to state 94
-- On PROP shift to state 96
-- On params shift to state 99

State 96:
params -> PROP . [ RPAREN ]
params -> PROP . COMMA params [ RPAREN ]
-- On COMMA shift to state 97
-- On RPAREN reduce production params -> PROP

State 97:
params -> PROP COMMA . params [ RPAREN ]
-- On VAR shift to state 94
-- On PROP shift to state 96
-- On params shift to state 98

State 98:
params -> PROP COMMA params . [ RPAREN ]
-- On RPAREN reduce production params -> PROP COMMA params

State 99:
params -> VAR COMMA params . [ RPAREN ]
-- On RPAREN reduce production params -> VAR COMMA params

State 100:
def_lhs -> PROP LPAREN params . RPAREN [ EQUAL DEF ]
-- On RPAREN shift to state 101

State 101:
def_lhs -> PROP LPAREN params RPAREN . [ EQUAL DEF ]
-- On EQUAL reduce production def_lhs -> PROP LPAREN params RPAREN
-- On DEF reduce production def_lhs -> PROP LPAREN params RPAREN

State 102:
sentences -> LET def_lhs . def_rhs [ # ]
-- On EQUAL shift to state 103
-- On DEF shift to state 104
-- On def_rhs shift to state 125

State 103:
def_rhs -> EQUAL . [ # ]
-- On # reduce production def_rhs -> EQUAL

State 104:
def_rhs -> DEF . regschema in_sentences [ # ]
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 105
-- On function_call shift to state 84

State 105:
def_rhs -> DEF regschema . in_sentences [ # ]
regschema -> regschema . AND regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
-- On XOR shift to state 78
-- On PROP shift to state 3
-- On OR shift to state 106
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On LET shift to state 91
-- On IN shift to state 107
-- On IMPLY shift to state 86
-- On EQUIV shift to state 88
-- On EOF shift to state 108
-- On AND shift to state 122
-- On sentences shift to state 123
-- On regschema shift to state 110
-- On in_sentences shift to state 124
-- On function_call shift to state 84

State 106:
regschema -> regschema OR . regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> OR . VAR EQUAL INT DOTS upper flatschema [ XOR ST OR IMPLY EQUIV EOF AND ]
-- On VAR shift to state 28
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 81
-- On function_call shift to state 84

State 107:
in_sentences -> IN . sentences [ # ]
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On LET shift to state 91
-- On EOF shift to state 108
-- On AND shift to state 70
-- On sentences shift to state 109
-- On regschema shift to state 110
-- On function_call shift to state 84

State 108:
sentences -> EOF . [ # ]
-- On # reduce production sentences -> EOF

State 109:
in_sentences -> IN sentences . [ # ]
-- On # reduce production in_sentences -> IN sentences

State 110:
regschema -> regschema . AND regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
regschema -> regschema . OR regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
regschema -> regschema . XOR regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
regschema -> regschema . EQUIV regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
regschema -> regschema . IMPLY regschema [ XOR ST OR IMPLY EQUIV EOF AND ]
sentences -> regschema . EOF [ # ]
sentences -> regschema . ST cstr EOF [ # ]
-- On XOR shift to state 78
-- On ST shift to state 111
-- On OR shift to state 80
-- On IMPLY shift to state 86
-- On EQUIV shift to state 88
-- On EOF shift to state 121
-- On AND shift to state 82

State 111:
sentences -> regschema ST . cstr EOF [ # ]
-- On VAR shift to state 112
-- On cstr shift to state 119

State 112:
cstr -> VAR . GE INT [ EOF ]
cstr -> VAR . GT INT [ EOF ]
cstr -> VAR . EQUAL INT [ EOF ]
-- On GT shift to state 113
-- On GE shift to state 115
-- On EQUAL shift to state 117

State 113:
cstr -> VAR GT . INT [ EOF ]
-- On INT shift to state 114

State 114:
cstr -> VAR GT INT . [ EOF ]
-- On EOF reduce production cstr -> VAR GT INT

State 115:
cstr -> VAR GE . INT [ EOF ]
-- On INT shift to state 116

State 116:
cstr -> VAR GE INT . [ EOF ]
-- On EOF reduce production cstr -> VAR GE INT

State 117:
cstr -> VAR EQUAL . INT [ EOF ]
-- On INT shift to state 118

State 118:
cstr -> VAR EQUAL INT . [ EOF ]
-- On EOF reduce production cstr -> VAR EQUAL INT

State 119:
sentences -> regschema ST cstr . EOF [ # ]
-- On EOF shift to state 120

State 120:
sentences -> regschema ST cstr EOF . [ # ]
-- On # reduce production sentences -> regschema ST cstr EOF

State 121:
sentences -> regschema EOF . [ # ]
-- On # reduce production sentences -> regschema EOF

State 122:
regschema -> regschema AND . regschema [ XOR PROP OR NOT LPAREN LET IN IMPLY EQUIV EOF AND ]
regschema -> AND . VAR EQUAL INT DOTS upper flatschema [ XOR ST OR IMPLY EQUIV EOF AND ]
-- On VAR shift to state 71
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On AND shift to state 70
-- On regschema shift to state 83
-- On function_call shift to state 84

State 123:
in_sentences -> sentences . [ # ]
-- On # reduce production in_sentences -> sentences

State 124:
def_rhs -> DEF regschema in_sentences . [ # ]
-- On # reduce production def_rhs -> DEF regschema in_sentences

State 125:
sentences -> LET def_lhs def_rhs . [ # ]
-- On # reduce production sentences -> LET def_lhs def_rhs

State 126:
main -> sentences . [ # ]
-- On # reduce production main -> sentences

State 127:
main -> regstab_2_0_0_parser_option . main [ # ]
-- On UNSAT shift to state 1
-- On SAT shift to state 2
-- On PROP shift to state 3
-- On OR shift to state 27
-- On NOT shift to state 68
-- On LPAREN shift to state 69
-- On LET shift to state 91
-- On EOF shift to state 108
-- On AND shift to state 70
-- On sentences shift to state 126
-- On regstab_2_0_0_parser_option shift to state 127
-- On regschema shift to state 110
-- On main shift to state 128
-- On function_call shift to state 84

State 128:
main -> regstab_2_0_0_parser_option main . [ # ]
-- On # reduce production main -> regstab_2_0_0_parser_option main

State 129:
main' -> main . [ # ]
-- On # accept main

