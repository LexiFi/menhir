%{
open Location

let mk_location (p1,p2) = Loc (!input_name, p1, p2)

let mk_type_decl p desc = { Syntax.td_desc = desc; Syntax.td_loc = mk_location p }
let mk_global_decl p desc = { Syntax.g_desc = desc; Syntax.g_loc = mk_location p }
let mk_fsm_decl p desc = { Syntax.fsm_desc = desc; Syntax.fsm_loc = mk_location p }
let mk_stim_decl p desc = { Syntax.stim_desc = desc; Syntax.stim_loc = mk_location p }
let mk_fsm_inst p desc = { Syntax.fi_desc = desc; Syntax.fi_loc = mk_location p }
let mk_type_expression p desc = { Syntax.te_desc = desc; Syntax.te_loc = mk_location p }
let mk_type_index_expression p desc = { Syntax.ti_desc = desc; Syntax.ti_loc = mk_location p }
let mk_expression p desc = { Syntax.e_desc = desc; Syntax.e_loc = mk_location p }
let mk_condition p desc = { Syntax.cond_desc = desc; Syntax.cond_loc = mk_location p }
let mk_action p desc = { Syntax.act_desc = desc; Syntax.act_loc = mk_location p }
%}
%start program
%token ARROW_END
%token ARROW_START
%token BAR
%token COLEQ
%token COLON
%token COMMA
%token DIV
%token DOT
%token DOTDOT
%token EOF
%token EQUAL
%token FALSE
%token FSM
%token GT
%token GTE
%token IN
%token INOUT
%token INPUT
%token <int> INT
%token ITRANS
%token LBRACE
%token <string> LID
%token LPAREN
%token LT
%token LTE
%token MINUS
%token MOD
%token MODEL
%token NOTEQUAL
%token OUT
%token OUTPUT
%token PERIODIC
%token PLUS
%token QMARK
%token RBRACE
%token RPAREN
%token SEMICOLON
%token SHARED
%token SPORADIC
%token STATES
%token TIMES
%token TRANS
%token TRUE
%token TYBOOL
%token TYEVENT
%token TYINT
%token TYPE
%token <string> UID
%token VALUE_CHANGES
%token VARS
%nonassoc COLON QMARK
%left EQUAL GT GTE LT LTE NOTEQUAL
%left MINUS PLUS
%left DIV MOD TIMES
%type <Syntax.program> program
%%

option_int_range_:
  
    {    ( None )}
| x = int_range
    {    ( Some x )}

loption_separated_nonempty_list_COMMA_INT__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_INT_
    {    ( x )}

loption_separated_nonempty_list_COMMA_id__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_id_
    {    ( x )}

loption_separated_nonempty_list_COMMA_value_change__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_value_change_
    {    ( x )}

loption_separated_nonempty_list_COMMA_var__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_var_
    {    ( x )}

separated_nonempty_list_COMMA_INT_:
  x = INT
    {    ( [ x ] )}
| x = INT _2 = COMMA xs = separated_nonempty_list_COMMA_INT_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_id_:
  x = id
    {    ( [ x ] )}
| x = id _2 = COMMA xs = separated_nonempty_list_COMMA_id_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_value_change_:
  x = value_change
    {    ( [ x ] )}
| x = value_change _2 = COMMA xs = separated_nonempty_list_COMMA_value_change_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_var_:
  x = var
    {    ( [ x ] )}
| x = var _2 = COMMA xs = separated_nonempty_list_COMMA_var_
    {    ( x :: xs )}

separated_nonempty_list_DOT_guard_:
  x = guard
    {    ( [ x ] )}
| x = guard _2 = DOT xs = separated_nonempty_list_DOT_guard_
    {    ( x :: xs )}

separated_nonempty_list_SEMICOLON_action_:
  x = action
    {    ( [ x ] )}
| x = action _2 = SEMICOLON xs = separated_nonempty_list_SEMICOLON_action_
    {    ( x :: xs )}

braced_my_separated_list_COMMA_UID__:
  _1 = LBRACE x = my_separated_list_COMMA_UID_ _3 = RBRACE
    {                      ( x )}

paren_separated_list_COMMA_INT__:
  _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_INT__ _3 = RPAREN
    {let x =     ( xs ) in
                      ( x )}

paren_separated_list_COMMA_id__:
  _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_id__ _3 = RPAREN
    {let x =     ( xs ) in
                      ( x )}

paren_separated_list_COMMA_value_change__:
  _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_value_change__ _3 = RPAREN
    {let x =     ( xs ) in
                      ( x )}

optional_actions_:
  
    {                  ( [] )}
| x = actions
    {        ( x )}

optional_params_:
  
    {                  ( [] )}
| x = params
    {        ( x )}

optional_vars_:
  
    {                  ( [] )}
| x = vars
    {        ( x )}

my_list_type_decl_:
  
    {    ( [] )}
| x = type_decl xs = my_list_type_decl_
    {    ( x :: xs )}

my_nonempty_list_fsm_inst_:
  x = fsm_inst
    {    ( [ x ] )}
| x = fsm_inst xs = my_nonempty_list_fsm_inst_
    {    ( x :: xs )}

my_nonempty_list_fsm_model_:
  x = fsm_model
    {    ( [ x ] )}
| x = fsm_model xs = my_nonempty_list_fsm_model_
    {    ( x :: xs )}

my_nonempty_list_global_:
  x = global
    {    ( [ x ] )}
| x = global xs = my_nonempty_list_global_
    {    ( x :: xs )}

my_separated_nonempty_list_COMMA_UID_:
  x = UID
    {    ( [ x ] )}
| x = UID _2 = COMMA xs = my_separated_nonempty_list_COMMA_UID_
    {    ( x :: xs )}

my_separated_nonempty_list_COMMA_io_:
  x = io
    {    ( [ x ] )}
| x = io _2 = COMMA xs = my_separated_nonempty_list_COMMA_io_
    {    ( x :: xs )}

my_separated_nonempty_list_COMMA_param_:
  x = param
    {    ( [ x ] )}
| x = param _2 = COMMA xs = my_separated_nonempty_list_COMMA_param_
    {    ( x :: xs )}

my_separated_nonempty_list_COMMA_transition_:
  x = transition
    {    ( [ x ] )}
| x = transition _2 = COMMA xs = my_separated_nonempty_list_COMMA_transition_
    {    ( x :: xs )}

my_separated_list_COMMA_UID_:
  
    {    ( [] )}
| x = my_separated_nonempty_list_COMMA_UID_
    {    ( x )}

my_separated_list_COMMA_io_:
  
    {    ( [] )}
| x = my_separated_nonempty_list_COMMA_io_
    {    ( x )}

my_separated_list_COMMA_param_:
  
    {    ( [] )}
| x = my_separated_nonempty_list_COMMA_param_
    {    ( x )}

my_separated_list_COMMA_transition_:
  
    {    ( [] )}
| x = my_separated_nonempty_list_COMMA_transition_
    {    ( x )}

program:
  tydecls = my_list_type_decl_ models = my_nonempty_list_fsm_model_ globals = my_nonempty_list_global_ fsms = my_nonempty_list_fsm_inst_ _5 = EOF
    {    ( { Syntax.p_type_decls = tydecls;
        Syntax.p_fsm_models = models;
        Syntax.p_globals = globals;
        Syntax.p_fsm_insts = fsms; }
      )}

type_decl:
  _1 = TYPE id = LID _3 = EQUAL t = typ
    {let _endpos = _endpos_t_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( mk_type_decl (_symbolstartofs,_endofs) (Syntax.TD_Alias (id,t)) )}
| _1 = TYPE id = LID _3 = EQUAL cs = braced_my_separated_list_COMMA_UID__
    {let _endpos = _endpos_cs_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( mk_type_decl (_symbolstartofs,_endofs) (Syntax.TD_Enum (id,cs)) )}

fsm_model:
  _1 = FSM _2 = MODEL name = id params = optional_params_ _5 = LPAREN ios = my_separated_list_COMMA_io_ _7 = RPAREN _8 = LBRACE _9 = STATES _10 = COLON x = my_separated_list_COMMA_UID_ _2_inlined1 = SEMICOLON vars = optional_vars_ _13 = TRANS _14 = COLON x_inlined1 = my_separated_list_COMMA_transition_ _2_inlined2 = SEMICOLON _16 = ITRANS _17 = COLON x_inlined2 = itransition _2_inlined3 = SEMICOLON _19 = RBRACE
    {let itrans =
  let x = x_inlined2 in
      ( x )
in
let trans =
  let x = x_inlined1 in
      ( x )
in
let states =     ( x ) in
let _endpos = _endpos__19_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
             (
        mk_fsm_decl
          (_symbolstartofs,_endofs)
          { Syntax.fd_name=name;
            Syntax.fd_params=params;
            Syntax.fd_states=states;
            Syntax.fd_ios=ios;
            Syntax.fd_vars=vars;
            Syntax.fd_trans=trans;
            Syntax.fd_itrans=itrans } )}

params:
  _1 = LT params = my_separated_list_COMMA_param_ _3 = GT
    {                                                 ( params )}

param:
  id = LID _2 = COLON ty = typ
    {let _endpos = _endpos_ty_ in
let _symbolstartpos = _startpos_id_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
                        ( (id, mk_type_expression (_symbolstartofs,_endofs) ty) )}

io:
  _1 = IN d = io_desc
    {                 ( (Types.IO_In, d) )}
| _1 = OUT d = io_desc
    {                  ( (Types.IO_Out, d) )}
| _1 = INOUT d = io_desc
    {                    ( (Types.IO_Inout, d) )}

io_desc:
  id = LID _2 = COLON ty = typ
    {let _endpos = _endpos_ty_ in
let _symbolstartpos = _startpos_id_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
                        ( (id, mk_type_expression (_symbolstartofs,_endofs) ty) )}

vars:
  _1 = VARS _2 = COLON xs = loption_separated_nonempty_list_COMMA_var__ _2_inlined1 = SEMICOLON
    {let vars =
  let x =     ( xs ) in
      ( x )
in
                                                                     ( vars )}

var:
  id = LID _2 = COLON ty = typ
    {let _endpos = _endpos_ty_ in
let _symbolstartpos = _startpos_id_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
                        ( (id, mk_type_expression (_symbolstartofs,_endofs) ty) )}

transition:
  prio = prio src = UID _3 = ARROW_START cond = condition actions = optional_actions_ _6 = ARROW_END dst = UID
    {let _endpos = _endpos_dst_ in
let _symbolstartpos = if _startpos_prio_ != _endpos_prio_ then
  _startpos_prio_
else
  _startpos_src_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( src, mk_condition (_symbolstartofs,_endofs) cond, actions, dst, prio )}

prio:
  
    {                    ( false )}
| _1 = TIMES
    {            ( true )}

itransition:
  actions = optional_actions_ _2 = ARROW_END dst = UID
    {                                                ( dst, actions )}

condition:
  ev = LID
    {           ( ([ev],[]) )}
| ev = LID _2 = DOT guards = separated_nonempty_list_DOT_guard_
    {                                                          ( ([ev], guards) )}

guard:
  e = guard_expr
    {                 ( e )}

actions:
  _1 = BAR actions = separated_nonempty_list_SEMICOLON_action_
    {                                                           ( actions )}

action:
  i = LID
    {let _endpos = _endpos_i_ in
let _symbolstartpos = _startpos_i_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
                        ( mk_action (_symbolstartofs,_endofs) (Action.Emit i) )}
| i = LID _2 = COLEQ e = expr
    {let _endpos = _endpos_e_ in
let _symbolstartpos = _startpos_i_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
                        ( mk_action (_symbolstartofs,_endofs) (Action.Assign (i,e)) )}

global:
  _1 = INPUT id = id _3 = COLON ty = typ _5 = EQUAL st = stimuli
    {let _endpos = _endpos_st_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( mk_global_decl
         (_symbolstartofs,_endofs)
         { Syntax.gd_name = id;
           Syntax.gd_type = mk_type_expression (_symbolstartofs,_endofs) ty;
           Syntax.gd_desc = Syntax.GInp st } )}
| _1 = OUTPUT id = id _3 = COLON ty = typ
    {let _endpos = _endpos_ty_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( mk_global_decl
         (_symbolstartofs,_endofs)
         { Syntax.gd_name = id;
           Syntax.gd_type = mk_type_expression (_symbolstartofs,_endofs) ty;
           Syntax.gd_desc = Syntax.GOutp } )}
| _1 = SHARED id = id _3 = COLON ty = typ
    {let _endpos = _endpos_ty_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( mk_global_decl
         (_symbolstartofs,_endofs)
         { Syntax.gd_name = id;
           Syntax.gd_type = mk_type_expression (_symbolstartofs,_endofs) ty;
           Syntax.gd_desc = Syntax.GShared } )}

stimuli:
  _1 = PERIODIC _2 = LPAREN p = INT _4 = COMMA s = INT _6 = COMMA d = INT _8 = RPAREN
    {let _endpos = _endpos__8_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( mk_stim_decl (_symbolstartofs,_endofs) (Syntax.Periodic(p,s,d)) )}
| _1 = SPORADIC ts = paren_separated_list_COMMA_INT__
    {let _endpos = _endpos_ts_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( mk_stim_decl (_symbolstartofs,_endofs) (Syntax.Sporadic(ts)) )}
| _1 = VALUE_CHANGES vcs = paren_separated_list_COMMA_value_change__
    {let _endpos = _endpos_vcs_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( mk_stim_decl (_symbolstartofs,_endofs) (Syntax.ValueChange(vcs)) )}

value_change:
  t = INT _2 = COLON v = const
    {                        ( (t,v) )}

fsm_inst:
  _1 = FSM name = id _3 = EQUAL model = id pvs = opt_inst_params args = paren_separated_list_COMMA_id__
    {let _endpos = _endpos_args_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
      ( mk_fsm_inst
          (_symbolstartofs,_endofs)
          { Syntax.fi_name = name;
            Syntax.fi_model = model;
            Syntax.fi_params = pvs;
            Syntax.fi_args = args }  )}

opt_inst_params:
  
    {                  ( [] )}
| _1 = LT params = separated_nonempty_list_COMMA_INT_ _3 = GT
    {                                                      ( List.map (function v -> Expr.Val_int v) params )}

typ:
  _1 = TYEVENT
    {            ( Syntax.TEEvent )}
| _1 = TYINT r = option_int_range_
    {                              ( Syntax.TEInt r )}
| _1 = TYBOOL
    {           ( Syntax.TEBool )}
| i = LID
    {          ( Syntax.TEName i )}

int_range:
  _1 = LT lo = type_index_expr _3 = DOTDOT hi = type_index_expr _5 = GT
    {let _endpos = _endpos__5_ in
let _symbolstartpos = _startpos__1_ in
let _endofs = _endpos.Lexing.pos_cnum in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
        ( (mk_type_index_expression (_symbolstartofs,_endofs) lo,
           mk_type_index_expression (_symbolstartofs,_endofs) hi) )}

type_index_expr:
  c = INT
    {      ( Syntax.TEConst c )}
| i = LID
    {      ( Syntax.TEVar i )}
| _1 = LPAREN e = type_index_expr _3 = RPAREN
    {      ( e )}
| e1 = type_index_expr _2 = PLUS e2 = type_index_expr
    {      ( Syntax.TEBinop ("+", e1, e2) )}
| e1 = type_index_expr _2 = MINUS e2 = type_index_expr
    {      ( Syntax.TEBinop ("-", e1, e2) )}
| e1 = type_index_expr _2 = TIMES e2 = type_index_expr
    {      ( Syntax.TEBinop ("*", e1, e2) )}
| e1 = type_index_expr _2 = DIV e2 = type_index_expr
    {      ( Syntax.TEBinop ("/", e1, e2) )}
| e1 = type_index_expr _2 = MOD e2 = type_index_expr
    {      ( Syntax.TEBinop ("mod", e1, e2) )}

guard_expr:
  e1 = expr _2 = EQUAL e2 = expr
    {      ( (e1, "=", e2) )}
| e1 = expr _2 = NOTEQUAL e2 = expr
    {      ( (e1, "!=", e2) )}
| e1 = expr _2 = GT e2 = expr
    {      ( (e1, ">", e2) )}
| e1 = expr _2 = LT e2 = expr
    {      ( (e1, "<", e2) )}
| e1 = expr _2 = GTE e2 = expr
    {      ( (e1, ">=", e2) )}
| e1 = expr _2 = LTE e2 = expr
    {      ( (e1, "<=", e2) )}

expr:
  c = INT
    {      ( Expr.EInt c )}
| c = bool
    {      ( Expr.EBool c )}
| v = LID
    {      ( Expr.EVar v )}
| c = UID
    {      ( Expr.EEnum c )}
| _1 = LPAREN e = expr _3 = RPAREN
    {      ( e )}
| e1 = expr _2 = PLUS e2 = expr
    {      ( Expr.EBinop ("+", e1, e2) )}
| e1 = expr _2 = MINUS e2 = expr
    {      ( Expr.EBinop ("-", e1, e2) )}
| e1 = expr _2 = TIMES e2 = expr
    {      ( Expr.EBinop ("*", e1, e2) )}
| e1 = expr _2 = DIV e2 = expr
    {      ( Expr.EBinop ("/", e1, e2) )}
| e1 = expr _2 = MOD e2 = expr
    {      ( Expr.EBinop ("mod", e1, e2) )}
| e1 = expr _2 = EQUAL e2 = expr
    {      ( Expr.EBinop ("=", e1, e2) )}
| e1 = expr _2 = NOTEQUAL e2 = expr
    {      ( Expr.EBinop ("!=", e1, e2) )}
| e1 = expr _2 = GT e2 = expr
    {      ( Expr.EBinop (">", e1, e2) )}
| e1 = expr _2 = LT e2 = expr
    {      ( Expr.EBinop ("<", e1, e2) )}
| e1 = expr _2 = GTE e2 = expr
    {      ( Expr.EBinop (">=", e1, e2) )}
| e1 = expr _2 = LTE e2 = expr
    {      ( Expr.EBinop ("<=", e1, e2) )}
| e1 = expr _2 = QMARK e2 = expr _4 = COLON e3 = expr
    {      ( Expr.ECond (e1, e2, e3) )}

const:
  v = INT
    {            ( Expr.Val_int v )}
| v = bool
    {             ( Expr.Val_bool v )}
| c = UID
    {            ( Expr.Val_enum c )}

bool:
  _1 = TRUE
    {         ( true )}
| _1 = FALSE
    {          ( false )}

id:
  i = LID
    {            ( i )}
| i = UID
    {            ( i )}

%%


