State 0:
## Known stack suffix:
##
## LR(1) items:
implementation' -> . implementation [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 1499
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SEMISEMI shift to state 1543
-- On PREFIXOP shift to state 6
-- On OPEN shift to state 1544
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MODULE shift to state 1546
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 1563
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On INCLUDE shift to state 1566
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On CLASS shift to state 1582
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On structure_tail shift to state 1649
-- On structure_item shift to state 1645
-- On structure shift to state 1650
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1652
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On implementation shift to state 1654
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1:
## Known stack suffix:
## WHILE
## LR(1) items:
expr -> WHILE . seq_expr DO seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1495
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 2:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_longident -> UIDENT . [ WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_longident -> UIDENT

State 3:
## Known stack suffix:
## TRY
## LR(1) items:
expr -> TRY . seq_expr WITH opt_bar match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> TRY . seq_expr WITH error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1490
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 4:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_longident -> TRUE . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> TRUE

State 5:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> STRING

State 6:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
simple_expr -> PREFIXOP . simple_expr [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 1489
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:

State 7:
## Known stack suffix:
## NEW
## LR(1) items:
simple_expr -> NEW . class_longident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 8
-- On mod_longident shift to state 9
-- On class_longident shift to state 13
## Reductions:

State 8:
## Known stack suffix:
## LIDENT
## LR(1) items:
class_longident -> LIDENT . [ WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_longident -> LIDENT

State 9:
## Known stack suffix:
## mod_longident
## LR(1) items:
class_longident -> mod_longident . DOT LIDENT [ WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
class_longident -> mod_longident DOT . LIDENT [ WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 11
-- On LIDENT shift to state 12
## Reductions:

State 11:
## Known stack suffix:
## mod_longident DOT UIDENT
## LR(1) items:
mod_longident -> mod_longident DOT UIDENT . [ WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_longident -> mod_longident DOT UIDENT

State 12:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
class_longident -> mod_longident DOT LIDENT . [ WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_longident -> mod_longident DOT LIDENT

State 13:
## Known stack suffix:
## NEW class_longident
## LR(1) items:
simple_expr -> NEW class_longident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> NEW class_longident

State 14:
## Known stack suffix:
## NATIVEINT
## LR(1) items:
constant -> NATIVEINT . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> NATIVEINT

State 15:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr type_constraint RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
val_ident -> LPAREN . operator RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On STAR shift to state 34
-- On RPAREN shift to state 675
-- On PREFIXOP shift to state 592
-- On PLUS shift to state 36
-- On OR shift to state 37
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 1447
-- On MINUS shift to state 1448
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LESS shift to state 40
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On INFIXOP4 shift to state 41
-- On INFIXOP3 shift to state 42
-- On INFIXOP2 shift to state 43
-- On INFIXOP1 shift to state 44
-- On INFIXOP0 shift to state 45
-- On IF shift to state 818
-- On GREATER shift to state 46
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On EQUAL shift to state 47
-- On COLONEQUAL shift to state 48
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BARBAR shift to state 49
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On AMPERSAND shift to state 50
-- On AMPERAMPER shift to state 51
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1484
-- On operator shift to state 758
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 16:
## Known stack suffix:
## WHILE
## LR(1) items:
expr -> WHILE . seq_expr DO seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1480
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 17:
## Known stack suffix:
## MINUSDOT
## LR(1) items:
subtractive -> MINUSDOT . [ WHILE UIDENT TRY TRUE STRING PREFIXOP NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BACKQUOTE ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subtractive -> MINUSDOT

State 18:
## Known stack suffix:
## MINUS
## LR(1) items:
subtractive -> MINUS . [ WHILE UIDENT TRY TRUE STRING PREFIXOP NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BACKQUOTE ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subtractive -> MINUS

State 19:
## Known stack suffix:
## MATCH
## LR(1) items:
expr -> MATCH . seq_expr WITH opt_bar match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1476
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 20:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ LESSMINUS ]
val_ident -> LIDENT . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On LESSMINUS
--   reduce production label -> LIDENT
-- On WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production val_ident -> LIDENT

State 21:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . rec_flag let_bindings IN seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> LET . MODULE UIDENT module_binding IN seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On REC shift to state 22
-- On MODULE shift to state 23
-- On rec_flag shift to state 1472
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production rec_flag ->

State 22:
## Known stack suffix:
## REC
## LR(1) items:
rec_flag -> REC . [ UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rec_flag -> REC

State 23:
## Known stack suffix:
## LET MODULE
## LR(1) items:
expr -> LET MODULE . UIDENT module_binding IN seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LET MODULE UIDENT
## LR(1) items:
expr -> LET MODULE UIDENT . module_binding IN seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 25
-- On EQUAL shift to state 578
-- On COLON shift to state 602
-- On module_binding shift to state 1469
## Reductions:

State 25:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_binding -> LPAREN . UIDENT COLON module_type RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_binding -> LPAREN UIDENT . COLON module_type RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_binding -> LPAREN UIDENT COLON . module_type RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 576
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 28:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> UIDENT

State 29:
## Known stack suffix:
## SIG
## LR(1) items:
module_type -> SIG . signature END [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
module_type -> SIG . signature error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On signature shift to state 30
## Default reduction:
-- After reading the next token, reduce production signature ->

State 30:
## Known stack suffix:
## SIG signature
## LR(1) items:
module_type -> SIG signature . END [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
module_type -> SIG signature . error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
signature -> signature . signature_item [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature . signature_item SEMISEMI [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 31
-- On VAL shift to state 32
-- On TYPE shift to state 277
-- On OPEN shift to state 347
-- On MODULE shift to state 352
-- On INCLUDE shift to state 362
-- On EXTERNAL shift to state 442
-- On EXCEPTION shift to state 449
-- On END shift to state 575
-- On CLASS shift to state 453
-- On signature_item shift to state 552
## Reductions:

State 31:
## Known stack suffix:
## SIG signature error
## LR(1) items:
module_type -> SIG signature error . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> SIG signature error

State 32:
## Known stack suffix:
## VAL
## LR(1) items:
signature_item -> VAL . val_ident_colon core_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 33
-- On LIDENT shift to state 55
-- On LABEL shift to state 57
-- On val_ident_colon shift to state 58
## Reductions:

State 33:
## Known stack suffix:
## LPAREN
## LR(1) items:
val_ident_colon -> LPAREN . operator RPAREN COLON [ UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKET ]
## Transitions:
-- On STAR shift to state 34
-- On PREFIXOP shift to state 35
-- On PLUS shift to state 36
-- On OR shift to state 37
-- On MINUSDOT shift to state 38
-- On MINUS shift to state 39
-- On LESS shift to state 40
-- On INFIXOP4 shift to state 41
-- On INFIXOP3 shift to state 42
-- On INFIXOP2 shift to state 43
-- On INFIXOP1 shift to state 44
-- On INFIXOP0 shift to state 45
-- On GREATER shift to state 46
-- On EQUAL shift to state 47
-- On COLONEQUAL shift to state 48
-- On BARBAR shift to state 49
-- On AMPERSAND shift to state 50
-- On AMPERAMPER shift to state 51
-- On operator shift to state 52
## Reductions:

State 34:
## Known stack suffix:
## STAR
## LR(1) items:
operator -> STAR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> STAR

State 35:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
operator -> PREFIXOP . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> PREFIXOP

State 36:
## Known stack suffix:
## PLUS
## LR(1) items:
operator -> PLUS . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> PLUS

State 37:
## Known stack suffix:
## OR
## LR(1) items:
operator -> OR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> OR

State 38:
## Known stack suffix:
## MINUSDOT
## LR(1) items:
operator -> MINUSDOT . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> MINUSDOT

State 39:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> MINUS

State 40:
## Known stack suffix:
## LESS
## LR(1) items:
operator -> LESS . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> LESS

State 41:
## Known stack suffix:
## INFIXOP4
## LR(1) items:
operator -> INFIXOP4 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP4

State 42:
## Known stack suffix:
## INFIXOP3
## LR(1) items:
operator -> INFIXOP3 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP3

State 43:
## Known stack suffix:
## INFIXOP2
## LR(1) items:
operator -> INFIXOP2 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP2

State 44:
## Known stack suffix:
## INFIXOP1
## LR(1) items:
operator -> INFIXOP1 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP1

State 45:
## Known stack suffix:
## INFIXOP0
## LR(1) items:
operator -> INFIXOP0 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP0

State 46:
## Known stack suffix:
## GREATER
## LR(1) items:
operator -> GREATER . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> GREATER

State 47:
## Known stack suffix:
## EQUAL
## LR(1) items:
operator -> EQUAL . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> EQUAL

State 48:
## Known stack suffix:
## COLONEQUAL
## LR(1) items:
operator -> COLONEQUAL . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> COLONEQUAL

State 49:
## Known stack suffix:
## BARBAR
## LR(1) items:
operator -> BARBAR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> BARBAR

State 50:
## Known stack suffix:
## AMPERSAND
## LR(1) items:
operator -> AMPERSAND . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> AMPERSAND

State 51:
## Known stack suffix:
## AMPERAMPER
## LR(1) items:
operator -> AMPERAMPER . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> AMPERAMPER

State 52:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
val_ident_colon -> LPAREN operator . RPAREN COLON [ UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKET ]
## Transitions:
-- On RPAREN shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
val_ident_colon -> LPAREN operator RPAREN . COLON [ UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKET ]
## Transitions:
-- On COLON shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## LPAREN operator RPAREN COLON
## LR(1) items:
val_ident_colon -> LPAREN operator RPAREN COLON . [ UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident_colon -> LPAREN operator RPAREN COLON

State 55:
## Known stack suffix:
## LIDENT
## LR(1) items:
val_ident_colon -> LIDENT . COLON [ UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKET ]
## Transitions:
-- On COLON shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## LIDENT COLON
## LR(1) items:
val_ident_colon -> LIDENT COLON . [ UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident_colon -> LIDENT COLON

State 57:
## Known stack suffix:
## LABEL
## LR(1) items:
val_ident_colon -> LABEL . [ UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident_colon -> LABEL

State 58:
## Known stack suffix:
## VAL val_ident_colon
## LR(1) items:
signature_item -> VAL val_ident_colon . core_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 276
## Reductions:

State 59:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_core_type2 -> UNDERSCORE . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> UNDERSCORE

State 60:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_ext_longident -> UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> UIDENT

State 61:
## Known stack suffix:
## SHARP
## LR(1) items:
simple_core_type2 -> SHARP . class_longident opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 62
-- On mod_longident shift to state 63
-- On class_longident shift to state 66
## Reductions:

State 62:
## Known stack suffix:
## LIDENT
## LR(1) items:
class_longident -> LIDENT . [ error WITH VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_longident -> LIDENT

State 63:
## Known stack suffix:
## mod_longident
## LR(1) items:
class_longident -> mod_longident . DOT LIDENT [ error WITH VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
class_longident -> mod_longident DOT . LIDENT [ error WITH VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 11
-- On LIDENT shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
class_longident -> mod_longident DOT LIDENT . [ error WITH VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_longident -> mod_longident DOT LIDENT

State 66:
## Known stack suffix:
## SHARP class_longident
## LR(1) items:
simple_core_type2 -> SHARP class_longident . opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On LBRACKET shift to state 67
-- On opt_present shift to state 77
## Reductions:
-- On error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production opt_present ->

State 67:
## Known stack suffix:
## LBRACKET
## LR(1) items:
opt_present -> LBRACKET . GREATER name_tag_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On GREATER shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## LBRACKET GREATER
## LR(1) items:
opt_present -> LBRACKET GREATER . name_tag_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On BACKQUOTE shift to state 69
-- On name_tag_list shift to state 73
-- On name_tag shift to state 76
## Reductions:

State 69:
## Known stack suffix:
## BACKQUOTE
## LR(1) items:
name_tag -> BACKQUOTE . ident [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN OF NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 72
## Reductions:

State 70:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN OF NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> UIDENT

State 71:
## Known stack suffix:
## LIDENT
## LR(1) items:
ident -> LIDENT . [ WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN OF NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> LIDENT

State 72:
## Known stack suffix:
## BACKQUOTE ident
## LR(1) items:
name_tag -> BACKQUOTE ident . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN OF NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name_tag -> BACKQUOTE ident

State 73:
## Known stack suffix:
## LBRACKET GREATER name_tag_list
## LR(1) items:
name_tag_list -> name_tag_list . name_tag [ RBRACKET BACKQUOTE ]
opt_present -> LBRACKET GREATER name_tag_list . RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RBRACKET shift to state 74
-- On BACKQUOTE shift to state 69
-- On name_tag shift to state 75
## Reductions:

State 74:
## Known stack suffix:
## LBRACKET GREATER name_tag_list RBRACKET
## LR(1) items:
opt_present -> LBRACKET GREATER name_tag_list RBRACKET . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_present -> LBRACKET GREATER name_tag_list RBRACKET

State 75:
## Known stack suffix:
## name_tag_list name_tag
## LR(1) items:
name_tag_list -> name_tag_list name_tag . [ RBRACKET BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name_tag_list -> name_tag_list name_tag

State 76:
## Known stack suffix:
## name_tag
## LR(1) items:
name_tag_list -> name_tag . [ RBRACKET BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name_tag_list -> name_tag

State 77:
## Known stack suffix:
## SHARP class_longident opt_present
## LR(1) items:
simple_core_type2 -> SHARP class_longident opt_present . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> SHARP class_longident opt_present

State 78:
## Known stack suffix:
## QUOTE
## LR(1) items:
simple_core_type2 -> QUOTE . ident [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 79
-- On LIDENT shift to state 80
-- On ident shift to state 81
## Reductions:

State 79:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ error WITH VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> UIDENT

State 80:
## Known stack suffix:
## LIDENT
## LR(1) items:
ident -> LIDENT . [ error WITH VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> LIDENT

State 81:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
simple_core_type2 -> QUOTE ident . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> QUOTE ident

State 82:
## Known stack suffix:
## QUESTION
## LR(1) items:
core_type2 -> QUESTION . LIDENT COLON core_type2 MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On LIDENT shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## QUESTION LIDENT
## LR(1) items:
core_type2 -> QUESTION LIDENT . COLON core_type2 MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On COLON shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## QUESTION LIDENT COLON
## LR(1) items:
core_type2 -> QUESTION LIDENT COLON . core_type2 MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 208
## Reductions:

State 85:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_core_type2 -> UNDERSCORE . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> UNDERSCORE

State 86:
## Known stack suffix:
## SHARP
## LR(1) items:
simple_core_type2 -> SHARP . class_longident opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 8
-- On mod_longident shift to state 9
-- On class_longident shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## SHARP class_longident
## LR(1) items:
simple_core_type2 -> SHARP class_longident . opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On LBRACKET shift to state 88
-- On opt_present shift to state 92
## Reductions:
-- On WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production opt_present ->

State 88:
## Known stack suffix:
## LBRACKET
## LR(1) items:
opt_present -> LBRACKET . GREATER name_tag_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On GREATER shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## LBRACKET GREATER
## LR(1) items:
opt_present -> LBRACKET GREATER . name_tag_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On BACKQUOTE shift to state 69
-- On name_tag_list shift to state 90
-- On name_tag shift to state 76
## Reductions:

State 90:
## Known stack suffix:
## LBRACKET GREATER name_tag_list
## LR(1) items:
name_tag_list -> name_tag_list . name_tag [ RBRACKET BACKQUOTE ]
opt_present -> LBRACKET GREATER name_tag_list . RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On RBRACKET shift to state 91
-- On BACKQUOTE shift to state 69
-- On name_tag shift to state 75
## Reductions:

State 91:
## Known stack suffix:
## LBRACKET GREATER name_tag_list RBRACKET
## LR(1) items:
opt_present -> LBRACKET GREATER name_tag_list RBRACKET . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_present -> LBRACKET GREATER name_tag_list RBRACKET

State 92:
## Known stack suffix:
## SHARP class_longident opt_present
## LR(1) items:
simple_core_type2 -> SHARP class_longident opt_present . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> SHARP class_longident opt_present

State 93:
## Known stack suffix:
## QUOTE
## LR(1) items:
simple_core_type2 -> QUOTE . ident [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
simple_core_type2 -> QUOTE ident . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> QUOTE ident

State 95:
## Known stack suffix:
## QUESTION
## LR(1) items:
core_type2 -> QUESTION . LIDENT COLON core_type2 MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On LIDENT shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## QUESTION LIDENT
## LR(1) items:
core_type2 -> QUESTION LIDENT . COLON core_type2 MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On COLON shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## QUESTION LIDENT COLON
## LR(1) items:
core_type2 -> QUESTION LIDENT COLON . core_type2 MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 205
## Reductions:

State 98:
## Known stack suffix:
## OPTLABEL
## LR(1) items:
core_type2 -> OPTLABEL . core_type2 MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 202
## Reductions:

State 99:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_core_type -> LPAREN . core_type_comma_list RPAREN [ WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN type_longident [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN SHARP class_longident opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 200
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 100:
## Known stack suffix:
## LIDENT
## LR(1) items:
core_type2 -> LIDENT . COLON core_type2 MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
type_longident -> LIDENT . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On COLON shift to state 101
## Reductions:
-- On WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production type_longident -> LIDENT

State 101:
## Known stack suffix:
## LIDENT COLON
## LR(1) items:
core_type2 -> LIDENT COLON . core_type2 MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 197
## Reductions:

State 102:
## Known stack suffix:
## LESS
## LR(1) items:
simple_core_type2 -> LESS . meth_list GREATER [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LESS . GREATER [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On LIDENT shift to state 103
-- On GREATER shift to state 104
-- On DOTDOT shift to state 105
-- On meth_list shift to state 106
-- On label shift to state 108
-- On field shift to state 193
## Reductions:

State 103:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ WITH UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label -> LIDENT

State 104:
## Known stack suffix:
## LESS GREATER
## LR(1) items:
simple_core_type2 -> LESS GREATER . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LESS GREATER

State 105:
## Known stack suffix:
## DOTDOT
## LR(1) items:
meth_list -> DOTDOT . [ GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meth_list -> DOTDOT

State 106:
## Known stack suffix:
## LESS meth_list
## LR(1) items:
simple_core_type2 -> LESS meth_list . GREATER [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On GREATER shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## LESS meth_list GREATER
## LR(1) items:
simple_core_type2 -> LESS meth_list GREATER . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LESS meth_list GREATER

State 108:
## Known stack suffix:
## label
## LR(1) items:
field -> label . COLON poly_type [ SEMI GREATER ]
## Transitions:
-- On COLON shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## label COLON
## LR(1) items:
field -> label COLON . poly_type [ SEMI GREATER ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 110
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On typevar_list shift to state 186
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On poly_type shift to state 191
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 192
## Reductions:

State 110:
## Known stack suffix:
## QUOTE
## LR(1) items:
simple_core_type2 -> QUOTE . ident [ UIDENT STAR SHARP SEMI RBRACE MINUSGREATER LIDENT GREATER EQUAL AS ]
typevar_list -> QUOTE . ident [ QUOTE DOT ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
simple_core_type2 -> QUOTE ident . [ UIDENT STAR SHARP SEMI RBRACE MINUSGREATER LIDENT GREATER EQUAL AS ]
typevar_list -> QUOTE ident . [ QUOTE DOT ]
## Transitions:
## Reductions:
-- On UIDENT STAR SHARP SEMI RBRACE MINUSGREATER LIDENT GREATER EQUAL AS
--   reduce production simple_core_type2 -> QUOTE ident
-- On QUOTE DOT
--   reduce production typevar_list -> QUOTE ident

State 112:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
simple_core_type2 -> LBRACKETLESS . opt_bar row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LBRACKETLESS . opt_bar row_field_list GREATER name_tag_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On BAR shift to state 113
-- On opt_bar shift to state 114
## Reductions:
-- On UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKET BACKQUOTE
--   reduce production opt_bar ->

State 113:
## Known stack suffix:
## BAR
## LR(1) items:
opt_bar -> BAR . [ UNDERSCORE UIDENT TRUE STRING SHARP QUOTE NATIVEINT MINUS LPAREN LIDENT LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE COLONCOLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_bar -> BAR

State 114:
## Known stack suffix:
## LBRACKETLESS opt_bar
## LR(1) items:
simple_core_type2 -> LBRACKETLESS opt_bar . row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LBRACKETLESS opt_bar . row_field_list GREATER name_tag_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 122
-- On simple_core_type2 shift to state 123
-- On row_field_list shift to state 181
-- On row_field shift to state 162
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 115:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN type_longident [ UIDENT SHARP RBRACKET LIDENT GREATER BAR ]
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN SHARP class_longident opt_present [ UIDENT SHARP RBRACKET LIDENT GREATER BAR ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 172
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 116:
## Known stack suffix:
## LBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET . tag_field RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LBRACKET . BAR row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LBRACKET . row_field BAR row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LBRACKET . GREATER opt_bar row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LBRACKET . GREATER RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On GREATER shift to state 118
-- On BAR shift to state 163
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 166
-- On simple_core_type2 shift to state 123
-- On row_field shift to state 168
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 117:
## Known stack suffix:
## LIDENT
## LR(1) items:
type_longident -> LIDENT . [ WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT INCLUDE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BAR BACKQUOTE AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_longident -> LIDENT

State 118:
## Known stack suffix:
## LBRACKET GREATER
## LR(1) items:
simple_core_type2 -> LBRACKET GREATER . opt_bar row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LBRACKET GREATER . RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On RBRACKET shift to state 119
-- On BAR shift to state 113
-- On opt_bar shift to state 120
## Reductions:
-- On UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKET BACKQUOTE
--   reduce production opt_bar ->

State 119:
## Known stack suffix:
## LBRACKET GREATER RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET GREATER RBRACKET . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET GREATER RBRACKET

State 120:
## Known stack suffix:
## LBRACKET GREATER opt_bar
## LR(1) items:
simple_core_type2 -> LBRACKET GREATER opt_bar . row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 122
-- On simple_core_type2 shift to state 123
-- On row_field_list shift to state 136
-- On row_field shift to state 162
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 121:
## Known stack suffix:
## type_longident
## LR(1) items:
simple_core_type2 -> type_longident . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> type_longident

State 122:
## Known stack suffix:
## tag_field
## LR(1) items:
row_field -> tag_field . [ RBRACKET GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_field -> tag_field

State 123:
## Known stack suffix:
## simple_core_type2
## LR(1) items:
row_field -> simple_core_type2 . [ RBRACKET GREATER BAR ]
simple_core_type2 -> simple_core_type2 . type_longident [ UIDENT SHARP RBRACKET LIDENT GREATER BAR ]
simple_core_type2 -> simple_core_type2 . SHARP class_longident opt_present [ UIDENT SHARP RBRACKET LIDENT GREATER BAR ]
## Transitions:
-- On UIDENT shift to state 60
-- On SHARP shift to state 124
-- On LIDENT shift to state 117
-- On type_longident shift to state 127
-- On mod_ext_longident shift to state 128
## Reductions:
-- On RBRACKET GREATER BAR
--   reduce production row_field -> simple_core_type2

State 124:
## Known stack suffix:
## simple_core_type2 SHARP
## LR(1) items:
simple_core_type2 -> simple_core_type2 SHARP . class_longident opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 8
-- On mod_longident shift to state 9
-- On class_longident shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## simple_core_type2 SHARP class_longident
## LR(1) items:
simple_core_type2 -> simple_core_type2 SHARP class_longident . opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On LBRACKET shift to state 88
-- On opt_present shift to state 126
## Reductions:
-- On WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production opt_present ->

State 126:
## Known stack suffix:
## simple_core_type2 SHARP class_longident opt_present
## LR(1) items:
simple_core_type2 -> simple_core_type2 SHARP class_longident opt_present . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> simple_core_type2 SHARP class_longident opt_present

State 127:
## Known stack suffix:
## simple_core_type2 type_longident
## LR(1) items:
simple_core_type2 -> simple_core_type2 type_longident . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> simple_core_type2 type_longident

State 128:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
type_longident -> mod_ext_longident . DOT LIDENT [ WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT INCLUDE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BAR BACKQUOTE AS AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 129
-- On DOT shift to state 134
## Reductions:

State 129:
## Known stack suffix:
## mod_ext_longident LPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN . mod_ext_longident RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 60
-- On mod_ext_longident shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident . RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
-- On RPAREN shift to state 131
-- On LPAREN shift to state 129
-- On DOT shift to state 132
## Reductions:

State 131:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident RPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN

State 132:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 134:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
type_longident -> mod_ext_longident DOT . LIDENT [ WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT INCLUDE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BAR BACKQUOTE AS AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 133
-- On LIDENT shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
type_longident -> mod_ext_longident DOT LIDENT . [ WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT INCLUDE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BAR BACKQUOTE AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_longident -> mod_ext_longident DOT LIDENT

State 136:
## Known stack suffix:
## LBRACKET GREATER opt_bar row_field_list
## LR(1) items:
row_field_list -> row_field_list . BAR row_field [ RBRACKET BAR ]
simple_core_type2 -> LBRACKET GREATER opt_bar row_field_list . RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On RBRACKET shift to state 137
-- On BAR shift to state 138
## Reductions:

State 137:
## Known stack suffix:
## LBRACKET GREATER opt_bar row_field_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET GREATER opt_bar row_field_list RBRACKET . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET GREATER opt_bar row_field_list RBRACKET

State 138:
## Known stack suffix:
## row_field_list BAR
## LR(1) items:
row_field_list -> row_field_list BAR . row_field [ RBRACKET GREATER BAR ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 122
-- On simple_core_type2 shift to state 123
-- On row_field shift to state 139
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 139:
## Known stack suffix:
## row_field_list BAR row_field
## LR(1) items:
row_field_list -> row_field_list BAR row_field . [ RBRACKET GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_field_list -> row_field_list BAR row_field

State 140:
## Known stack suffix:
## name_tag
## LR(1) items:
tag_field -> name_tag . OF opt_ampersand amper_type_list [ RBRACKET GREATER BAR ]
tag_field -> name_tag . [ RBRACKET GREATER BAR ]
## Transitions:
-- On OF shift to state 141
## Reductions:
-- On RBRACKET GREATER BAR
--   reduce production tag_field -> name_tag

State 141:
## Known stack suffix:
## name_tag OF
## LR(1) items:
tag_field -> name_tag OF . opt_ampersand amper_type_list [ RBRACKET GREATER BAR ]
## Transitions:
-- On AMPERSAND shift to state 142
-- On opt_ampersand shift to state 143
## Reductions:
-- On UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKET
--   reduce production opt_ampersand ->

State 142:
## Known stack suffix:
## AMPERSAND
## LR(1) items:
opt_ampersand -> AMPERSAND . [ UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_ampersand -> AMPERSAND

State 143:
## Known stack suffix:
## name_tag OF opt_ampersand
## LR(1) items:
tag_field -> name_tag OF opt_ampersand . amper_type_list [ RBRACKET GREATER BAR ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 158
-- On amper_type_list shift to state 159
## Reductions:

State 144:
## Known stack suffix:
## simple_core_type_or_tuple
## LR(1) items:
core_type2 -> simple_core_type_or_tuple . [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type2 -> simple_core_type_or_tuple

State 145:
## Known stack suffix:
## simple_core_type2
## LR(1) items:
simple_core_type -> simple_core_type2 . [ WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> simple_core_type2 . type_longident [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> simple_core_type2 . SHARP class_longident opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 60
-- On SHARP shift to state 124
-- On LIDENT shift to state 117
-- On type_longident shift to state 127
-- On mod_ext_longident shift to state 128
## Reductions:
-- On WITH VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production simple_core_type -> simple_core_type2

State 146:
## Known stack suffix:
## simple_core_type
## LR(1) items:
simple_core_type_or_tuple -> simple_core_type . [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type_or_tuple -> simple_core_type . STAR core_type_list [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On STAR shift to state 147
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production simple_core_type_or_tuple -> simple_core_type

State 147:
## Known stack suffix:
## simple_core_type STAR
## LR(1) items:
simple_core_type_or_tuple -> simple_core_type STAR . core_type_list [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 99
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 148
-- On mod_ext_longident shift to state 128
-- On core_type_list shift to state 149
## Reductions:

State 148:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type_list -> simple_core_type . [ WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type_list -> simple_core_type

State 149:
## Known stack suffix:
## simple_core_type STAR core_type_list
## LR(1) items:
core_type_list -> core_type_list . STAR simple_core_type [ WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type_or_tuple -> simple_core_type STAR core_type_list . [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On STAR shift to state 150
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production simple_core_type_or_tuple -> simple_core_type STAR core_type_list

State 150:
## Known stack suffix:
## core_type_list STAR
## LR(1) items:
core_type_list -> core_type_list STAR . simple_core_type [ WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 99
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 151
-- On mod_ext_longident shift to state 128
## Reductions:

State 151:
## Known stack suffix:
## core_type_list STAR simple_core_type
## LR(1) items:
core_type_list -> core_type_list STAR simple_core_type . [ WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type_list -> core_type_list STAR simple_core_type

State 152:
## Known stack suffix:
## core_type2
## LR(1) items:
core_type -> core_type2 . [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AND AMPERSAND ]
core_type -> core_type2 . AS QUOTE ident [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AND AMPERSAND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On MINUSGREATER shift to state 153
-- On AS shift to state 155
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AND AMPERSAND
--   reduce production core_type -> core_type2

State 153:
## Known stack suffix:
## core_type2 MINUSGREATER
## LR(1) items:
core_type2 -> core_type2 MINUSGREATER . core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## core_type2 MINUSGREATER core_type2
## LR(1) items:
core_type2 -> core_type2 . MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 MINUSGREATER core_type2 . [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On MINUSGREATER shift to state 153
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production core_type2 -> core_type2 MINUSGREATER core_type2

State 155:
## Known stack suffix:
## core_type2 AS
## LR(1) items:
core_type -> core_type2 AS . QUOTE ident [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AND AMPERSAND ]
## Transitions:
-- On QUOTE shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## core_type2 AS QUOTE
## LR(1) items:
core_type -> core_type2 AS QUOTE . ident [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## core_type2 AS QUOTE ident
## LR(1) items:
core_type -> core_type2 AS QUOTE ident . [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type -> core_type2 AS QUOTE ident

State 158:
## Known stack suffix:
## core_type
## LR(1) items:
amper_type_list -> core_type . [ RBRACKET GREATER BAR AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production amper_type_list -> core_type

State 159:
## Known stack suffix:
## name_tag OF opt_ampersand amper_type_list
## LR(1) items:
amper_type_list -> amper_type_list . AMPERSAND core_type [ RBRACKET GREATER BAR AMPERSAND ]
tag_field -> name_tag OF opt_ampersand amper_type_list . [ RBRACKET GREATER BAR ]
## Transitions:
-- On AMPERSAND shift to state 160
## Reductions:
-- On RBRACKET GREATER BAR
--   reduce production tag_field -> name_tag OF opt_ampersand amper_type_list

State 160:
## Known stack suffix:
## amper_type_list AMPERSAND
## LR(1) items:
amper_type_list -> amper_type_list AMPERSAND . core_type [ RBRACKET GREATER BAR AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## amper_type_list AMPERSAND core_type
## LR(1) items:
amper_type_list -> amper_type_list AMPERSAND core_type . [ RBRACKET GREATER BAR AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production amper_type_list -> amper_type_list AMPERSAND core_type

State 162:
## Known stack suffix:
## row_field
## LR(1) items:
row_field_list -> row_field . [ RBRACKET GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_field_list -> row_field

State 163:
## Known stack suffix:
## LBRACKET BAR
## LR(1) items:
simple_core_type2 -> LBRACKET BAR . row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 122
-- On simple_core_type2 shift to state 123
-- On row_field_list shift to state 164
-- On row_field shift to state 162
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 164:
## Known stack suffix:
## LBRACKET BAR row_field_list
## LR(1) items:
row_field_list -> row_field_list . BAR row_field [ RBRACKET BAR ]
simple_core_type2 -> LBRACKET BAR row_field_list . RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On RBRACKET shift to state 165
-- On BAR shift to state 138
## Reductions:

State 165:
## Known stack suffix:
## LBRACKET BAR row_field_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET BAR row_field_list RBRACKET . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET BAR row_field_list RBRACKET

State 166:
## Known stack suffix:
## LBRACKET tag_field
## LR(1) items:
row_field -> tag_field . [ BAR ]
simple_core_type2 -> LBRACKET tag_field . RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On RBRACKET shift to state 167
## Reductions:
-- On BAR
--   reduce production row_field -> tag_field

State 167:
## Known stack suffix:
## LBRACKET tag_field RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET tag_field RBRACKET . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET tag_field RBRACKET

State 168:
## Known stack suffix:
## LBRACKET row_field
## LR(1) items:
simple_core_type2 -> LBRACKET row_field . BAR row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On BAR shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## LBRACKET row_field BAR
## LR(1) items:
simple_core_type2 -> LBRACKET row_field BAR . row_field_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 122
-- On simple_core_type2 shift to state 123
-- On row_field_list shift to state 170
-- On row_field shift to state 162
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 170:
## Known stack suffix:
## LBRACKET row_field BAR row_field_list
## LR(1) items:
row_field_list -> row_field_list . BAR row_field [ RBRACKET BAR ]
simple_core_type2 -> LBRACKET row_field BAR row_field_list . RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On RBRACKET shift to state 171
-- On BAR shift to state 138
## Reductions:

State 171:
## Known stack suffix:
## LBRACKET row_field BAR row_field_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET row_field BAR row_field_list RBRACKET . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET row_field BAR row_field_list RBRACKET

State 172:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
simple_core_type2 -> LPAREN core_type_comma_list . RPAREN type_longident [ UIDENT SHARP RBRACKET LIDENT GREATER BAR ]
simple_core_type2 -> LPAREN core_type_comma_list . RPAREN SHARP class_longident opt_present [ UIDENT SHARP RBRACKET LIDENT GREATER BAR ]
## Transitions:
-- On RPAREN shift to state 173
-- On COMMA shift to state 178
## Reductions:

State 173:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
simple_core_type2 -> LPAREN core_type_comma_list RPAREN . type_longident [ UIDENT SHARP RBRACKET LIDENT GREATER BAR ]
simple_core_type2 -> LPAREN core_type_comma_list RPAREN . SHARP class_longident opt_present [ UIDENT SHARP RBRACKET LIDENT GREATER BAR ]
## Transitions:
-- On UIDENT shift to state 60
-- On SHARP shift to state 174
-- On LIDENT shift to state 117
-- On type_longident shift to state 177
-- On mod_ext_longident shift to state 128
## Reductions:

State 174:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP
## LR(1) items:
simple_core_type2 -> LPAREN core_type_comma_list RPAREN SHARP . class_longident opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 8
-- On mod_longident shift to state 9
-- On class_longident shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP class_longident
## LR(1) items:
simple_core_type2 -> LPAREN core_type_comma_list RPAREN SHARP class_longident . opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On LBRACKET shift to state 88
-- On opt_present shift to state 176
## Reductions:
-- On WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production opt_present ->

State 176:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP class_longident opt_present
## LR(1) items:
simple_core_type2 -> LPAREN core_type_comma_list RPAREN SHARP class_longident opt_present . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LPAREN core_type_comma_list RPAREN SHARP class_longident opt_present

State 177:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN type_longident
## LR(1) items:
simple_core_type2 -> LPAREN core_type_comma_list RPAREN type_longident . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LPAREN core_type_comma_list RPAREN type_longident

State 178:
## Known stack suffix:
## core_type_comma_list COMMA
## LR(1) items:
core_type_comma_list -> core_type_comma_list COMMA . core_type [ RPAREN RBRACKET COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## core_type_comma_list COMMA core_type
## LR(1) items:
core_type_comma_list -> core_type_comma_list COMMA core_type . [ RPAREN RBRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type_comma_list -> core_type_comma_list COMMA core_type

State 180:
## Known stack suffix:
## core_type
## LR(1) items:
core_type_comma_list -> core_type . [ RPAREN RBRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type_comma_list -> core_type

State 181:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list
## LR(1) items:
row_field_list -> row_field_list . BAR row_field [ RBRACKET GREATER BAR ]
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list . RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list . GREATER name_tag_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On RBRACKET shift to state 182
-- On GREATER shift to state 183
-- On BAR shift to state 138
## Reductions:

State 182:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list RBRACKET . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKETLESS opt_bar row_field_list RBRACKET

State 183:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list GREATER
## LR(1) items:
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list GREATER . name_tag_list RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On BACKQUOTE shift to state 69
-- On name_tag_list shift to state 184
-- On name_tag shift to state 76
## Reductions:

State 184:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list GREATER name_tag_list
## LR(1) items:
name_tag_list -> name_tag_list . name_tag [ RBRACKET BACKQUOTE ]
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list GREATER name_tag_list . RBRACKET [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On RBRACKET shift to state 185
-- On BACKQUOTE shift to state 69
-- On name_tag shift to state 75
## Reductions:

State 185:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list GREATER name_tag_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list GREATER name_tag_list RBRACKET . [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKETLESS opt_bar row_field_list GREATER name_tag_list RBRACKET

State 186:
## Known stack suffix:
## typevar_list
## LR(1) items:
poly_type -> typevar_list . DOT core_type [ SEMI RBRACE GREATER EQUAL ]
typevar_list -> typevar_list . QUOTE ident [ QUOTE DOT ]
## Transitions:
-- On QUOTE shift to state 187
-- On DOT shift to state 189
## Reductions:

State 187:
## Known stack suffix:
## typevar_list QUOTE
## LR(1) items:
typevar_list -> typevar_list QUOTE . ident [ QUOTE DOT ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## typevar_list QUOTE ident
## LR(1) items:
typevar_list -> typevar_list QUOTE ident . [ QUOTE DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typevar_list -> typevar_list QUOTE ident

State 189:
## Known stack suffix:
## typevar_list DOT
## LR(1) items:
poly_type -> typevar_list DOT . core_type [ SEMI RBRACE GREATER EQUAL ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## typevar_list DOT core_type
## LR(1) items:
poly_type -> typevar_list DOT core_type . [ SEMI RBRACE GREATER EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production poly_type -> typevar_list DOT core_type

State 191:
## Known stack suffix:
## label COLON poly_type
## LR(1) items:
field -> label COLON poly_type . [ SEMI GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field -> label COLON poly_type

State 192:
## Known stack suffix:
## core_type
## LR(1) items:
poly_type -> core_type . [ SEMI RBRACE GREATER EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production poly_type -> core_type

State 193:
## Known stack suffix:
## field
## LR(1) items:
meth_list -> field . SEMI meth_list [ GREATER ]
meth_list -> field . opt_semi [ GREATER ]
## Transitions:
-- On SEMI shift to state 194
-- On opt_semi shift to state 196
## Reductions:
-- On GREATER
--   reduce production opt_semi ->

State 194:
## Known stack suffix:
## field SEMI
## LR(1) items:
meth_list -> field SEMI . meth_list [ GREATER ]
opt_semi -> SEMI . [ GREATER ]
## Transitions:
-- On LIDENT shift to state 103
-- On DOTDOT shift to state 105
-- On meth_list shift to state 195
-- On label shift to state 108
-- On field shift to state 193
## Reductions:
-- On GREATER
--   reduce production opt_semi -> SEMI

State 195:
## Known stack suffix:
## field SEMI meth_list
## LR(1) items:
meth_list -> field SEMI meth_list . [ GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meth_list -> field SEMI meth_list

State 196:
## Known stack suffix:
## field opt_semi
## LR(1) items:
meth_list -> field opt_semi . [ GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meth_list -> field opt_semi

State 197:
## Known stack suffix:
## LIDENT COLON core_type2
## LR(1) items:
core_type2 -> LIDENT COLON core_type2 . MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## LIDENT COLON core_type2 MINUSGREATER
## LR(1) items:
core_type2 -> LIDENT COLON core_type2 MINUSGREATER . core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 MINUSGREATER . core_type2 [ MINUSGREATER ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 199
## Reductions:

State 199:
## Known stack suffix:
## LIDENT COLON core_type2 MINUSGREATER core_type2
## LR(1) items:
core_type2 -> LIDENT COLON core_type2 MINUSGREATER core_type2 . [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 MINUSGREATER core_type2 . [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 153
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production core_type2 -> LIDENT COLON core_type2 MINUSGREATER core_type2

State 200:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN [ WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LPAREN core_type_comma_list . RPAREN type_longident [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LPAREN core_type_comma_list . RPAREN SHARP class_longident opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 201
-- On COMMA shift to state 178
## Reductions:

State 201:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN . [ WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LPAREN core_type_comma_list RPAREN . type_longident [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
simple_core_type2 -> LPAREN core_type_comma_list RPAREN . SHARP class_longident opt_present [ WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LIDENT LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 60
-- On SHARP shift to state 174
-- On LIDENT shift to state 117
-- On type_longident shift to state 177
-- On mod_ext_longident shift to state 128
## Reductions:
-- On WITH VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN

State 202:
## Known stack suffix:
## OPTLABEL core_type2
## LR(1) items:
core_type2 -> OPTLABEL core_type2 . MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## OPTLABEL core_type2 MINUSGREATER
## LR(1) items:
core_type2 -> OPTLABEL core_type2 MINUSGREATER . core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 MINUSGREATER . core_type2 [ MINUSGREATER ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## OPTLABEL core_type2 MINUSGREATER core_type2
## LR(1) items:
core_type2 -> OPTLABEL core_type2 MINUSGREATER core_type2 . [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 MINUSGREATER core_type2 . [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 153
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production core_type2 -> OPTLABEL core_type2 MINUSGREATER core_type2

State 205:
## Known stack suffix:
## QUESTION LIDENT COLON core_type2
## LR(1) items:
core_type2 -> QUESTION LIDENT COLON core_type2 . MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## QUESTION LIDENT COLON core_type2 MINUSGREATER
## LR(1) items:
core_type2 -> QUESTION LIDENT COLON core_type2 MINUSGREATER . core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 MINUSGREATER . core_type2 [ MINUSGREATER ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## QUESTION LIDENT COLON core_type2 MINUSGREATER core_type2
## LR(1) items:
core_type2 -> QUESTION LIDENT COLON core_type2 MINUSGREATER core_type2 . [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND ]
core_type2 -> core_type2 MINUSGREATER core_type2 . [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 153
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE LET INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
--   reduce production core_type2 -> QUESTION LIDENT COLON core_type2 MINUSGREATER core_type2

State 208:
## Known stack suffix:
## QUESTION LIDENT COLON core_type2
## LR(1) items:
core_type2 -> QUESTION LIDENT COLON core_type2 . MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## QUESTION LIDENT COLON core_type2 MINUSGREATER
## LR(1) items:
core_type2 -> QUESTION LIDENT COLON core_type2 MINUSGREATER . core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 MINUSGREATER . core_type2 [ MINUSGREATER ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 271
## Reductions:

State 210:
## Known stack suffix:
## OPTLABEL
## LR(1) items:
core_type2 -> OPTLABEL . core_type2 MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## OPTLABEL core_type2
## LR(1) items:
core_type2 -> OPTLABEL core_type2 . MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## OPTLABEL core_type2 MINUSGREATER
## LR(1) items:
core_type2 -> OPTLABEL core_type2 MINUSGREATER . core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 MINUSGREATER . core_type2 [ MINUSGREATER ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 270
## Reductions:

State 213:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_core_type -> LPAREN . core_type_comma_list RPAREN [ error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN type_longident [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN SHARP class_longident opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 214
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 214:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN [ error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LPAREN core_type_comma_list . RPAREN type_longident [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LPAREN core_type_comma_list . RPAREN SHARP class_longident opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RPAREN shift to state 215
-- On COMMA shift to state 178
## Reductions:

State 215:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN . [ error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LPAREN core_type_comma_list RPAREN . type_longident [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LPAREN core_type_comma_list RPAREN . SHARP class_longident opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 60
-- On SHARP shift to state 216
-- On LIDENT shift to state 219
-- On type_longident shift to state 220
-- On mod_ext_longident shift to state 221
## Reductions:
-- On error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN

State 216:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP
## LR(1) items:
simple_core_type2 -> LPAREN core_type_comma_list RPAREN SHARP . class_longident opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 62
-- On mod_longident shift to state 63
-- On class_longident shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP class_longident
## LR(1) items:
simple_core_type2 -> LPAREN core_type_comma_list RPAREN SHARP class_longident . opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On LBRACKET shift to state 67
-- On opt_present shift to state 218
## Reductions:
-- On error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production opt_present ->

State 218:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP class_longident opt_present
## LR(1) items:
simple_core_type2 -> LPAREN core_type_comma_list RPAREN SHARP class_longident opt_present . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LPAREN core_type_comma_list RPAREN SHARP class_longident opt_present

State 219:
## Known stack suffix:
## LIDENT
## LR(1) items:
type_longident -> LIDENT . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT COMMA COLONCOLON COLON CLASS BARRBRACKET BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_longident -> LIDENT

State 220:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN type_longident
## LR(1) items:
simple_core_type2 -> LPAREN core_type_comma_list RPAREN type_longident . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LPAREN core_type_comma_list RPAREN type_longident

State 221:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
type_longident -> mod_ext_longident . DOT LIDENT [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT COMMA COLONCOLON COLON CLASS BARRBRACKET BAR AS AND ]
## Transitions:
-- On LPAREN shift to state 129
-- On DOT shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
type_longident -> mod_ext_longident DOT . LIDENT [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT COMMA COLONCOLON COLON CLASS BARRBRACKET BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 133
-- On LIDENT shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
type_longident -> mod_ext_longident DOT LIDENT . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT COMMA COLONCOLON COLON CLASS BARRBRACKET BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_longident -> mod_ext_longident DOT LIDENT

State 224:
## Known stack suffix:
## LIDENT
## LR(1) items:
core_type2 -> LIDENT . COLON core_type2 MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
type_longident -> LIDENT . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On COLON shift to state 225
## Reductions:
-- On error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production type_longident -> LIDENT

State 225:
## Known stack suffix:
## LIDENT COLON
## LR(1) items:
core_type2 -> LIDENT COLON . core_type2 MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## LIDENT COLON core_type2
## LR(1) items:
core_type2 -> LIDENT COLON core_type2 . MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## LIDENT COLON core_type2 MINUSGREATER
## LR(1) items:
core_type2 -> LIDENT COLON core_type2 MINUSGREATER . core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 MINUSGREATER . core_type2 [ MINUSGREATER ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 267
## Reductions:

State 228:
## Known stack suffix:
## LESS
## LR(1) items:
simple_core_type2 -> LESS . meth_list GREATER [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LESS . GREATER [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On LIDENT shift to state 103
-- On GREATER shift to state 229
-- On DOTDOT shift to state 105
-- On meth_list shift to state 230
-- On label shift to state 108
-- On field shift to state 193
## Reductions:

State 229:
## Known stack suffix:
## LESS GREATER
## LR(1) items:
simple_core_type2 -> LESS GREATER . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LESS GREATER

State 230:
## Known stack suffix:
## LESS meth_list
## LR(1) items:
simple_core_type2 -> LESS meth_list . GREATER [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On GREATER shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## LESS meth_list GREATER
## LR(1) items:
simple_core_type2 -> LESS meth_list GREATER . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LESS meth_list GREATER

State 232:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
simple_core_type2 -> LBRACKETLESS . opt_bar row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LBRACKETLESS . opt_bar row_field_list GREATER name_tag_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On BAR shift to state 113
-- On opt_bar shift to state 233
## Reductions:
-- On UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKET BACKQUOTE
--   reduce production opt_bar ->

State 233:
## Known stack suffix:
## LBRACKETLESS opt_bar
## LR(1) items:
simple_core_type2 -> LBRACKETLESS opt_bar . row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LBRACKETLESS opt_bar . row_field_list GREATER name_tag_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 122
-- On simple_core_type2 shift to state 123
-- On row_field_list shift to state 234
-- On row_field shift to state 162
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 234:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list
## LR(1) items:
row_field_list -> row_field_list . BAR row_field [ RBRACKET GREATER BAR ]
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list . RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list . GREATER name_tag_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RBRACKET shift to state 235
-- On GREATER shift to state 236
-- On BAR shift to state 138
## Reductions:

State 235:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list RBRACKET . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKETLESS opt_bar row_field_list RBRACKET

State 236:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list GREATER
## LR(1) items:
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list GREATER . name_tag_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On BACKQUOTE shift to state 69
-- On name_tag_list shift to state 237
-- On name_tag shift to state 76
## Reductions:

State 237:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list GREATER name_tag_list
## LR(1) items:
name_tag_list -> name_tag_list . name_tag [ RBRACKET BACKQUOTE ]
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list GREATER name_tag_list . RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RBRACKET shift to state 238
-- On BACKQUOTE shift to state 69
-- On name_tag shift to state 75
## Reductions:

State 238:
## Known stack suffix:
## LBRACKETLESS opt_bar row_field_list GREATER name_tag_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKETLESS opt_bar row_field_list GREATER name_tag_list RBRACKET . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKETLESS opt_bar row_field_list GREATER name_tag_list RBRACKET

State 239:
## Known stack suffix:
## LBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET . tag_field RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LBRACKET . BAR row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LBRACKET . row_field BAR row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LBRACKET . GREATER opt_bar row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LBRACKET . GREATER RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On GREATER shift to state 240
-- On BAR shift to state 245
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 248
-- On simple_core_type2 shift to state 123
-- On row_field shift to state 250
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 240:
## Known stack suffix:
## LBRACKET GREATER
## LR(1) items:
simple_core_type2 -> LBRACKET GREATER . opt_bar row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> LBRACKET GREATER . RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RBRACKET shift to state 241
-- On BAR shift to state 113
-- On opt_bar shift to state 242
## Reductions:
-- On UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKET BACKQUOTE
--   reduce production opt_bar ->

State 241:
## Known stack suffix:
## LBRACKET GREATER RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET GREATER RBRACKET . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET GREATER RBRACKET

State 242:
## Known stack suffix:
## LBRACKET GREATER opt_bar
## LR(1) items:
simple_core_type2 -> LBRACKET GREATER opt_bar . row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 122
-- On simple_core_type2 shift to state 123
-- On row_field_list shift to state 243
-- On row_field shift to state 162
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 243:
## Known stack suffix:
## LBRACKET GREATER opt_bar row_field_list
## LR(1) items:
row_field_list -> row_field_list . BAR row_field [ RBRACKET BAR ]
simple_core_type2 -> LBRACKET GREATER opt_bar row_field_list . RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RBRACKET shift to state 244
-- On BAR shift to state 138
## Reductions:

State 244:
## Known stack suffix:
## LBRACKET GREATER opt_bar row_field_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET GREATER opt_bar row_field_list RBRACKET . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET GREATER opt_bar row_field_list RBRACKET

State 245:
## Known stack suffix:
## LBRACKET BAR
## LR(1) items:
simple_core_type2 -> LBRACKET BAR . row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 122
-- On simple_core_type2 shift to state 123
-- On row_field_list shift to state 246
-- On row_field shift to state 162
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 246:
## Known stack suffix:
## LBRACKET BAR row_field_list
## LR(1) items:
row_field_list -> row_field_list . BAR row_field [ RBRACKET BAR ]
simple_core_type2 -> LBRACKET BAR row_field_list . RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RBRACKET shift to state 247
-- On BAR shift to state 138
## Reductions:

State 247:
## Known stack suffix:
## LBRACKET BAR row_field_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET BAR row_field_list RBRACKET . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET BAR row_field_list RBRACKET

State 248:
## Known stack suffix:
## LBRACKET tag_field
## LR(1) items:
row_field -> tag_field . [ BAR ]
simple_core_type2 -> LBRACKET tag_field . RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RBRACKET shift to state 249
## Reductions:
-- On BAR
--   reduce production row_field -> tag_field

State 249:
## Known stack suffix:
## LBRACKET tag_field RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET tag_field RBRACKET . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET tag_field RBRACKET

State 250:
## Known stack suffix:
## LBRACKET row_field
## LR(1) items:
simple_core_type2 -> LBRACKET row_field . BAR row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On BAR shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## LBRACKET row_field BAR
## LR(1) items:
simple_core_type2 -> LBRACKET row_field BAR . row_field_list RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 115
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 122
-- On simple_core_type2 shift to state 123
-- On row_field_list shift to state 252
-- On row_field shift to state 162
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
## Reductions:

State 252:
## Known stack suffix:
## LBRACKET row_field BAR row_field_list
## LR(1) items:
row_field_list -> row_field_list . BAR row_field [ RBRACKET BAR ]
simple_core_type2 -> LBRACKET row_field BAR row_field_list . RBRACKET [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RBRACKET shift to state 253
-- On BAR shift to state 138
## Reductions:

State 253:
## Known stack suffix:
## LBRACKET row_field BAR row_field_list RBRACKET
## LR(1) items:
simple_core_type2 -> LBRACKET row_field BAR row_field_list RBRACKET . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> LBRACKET row_field BAR row_field_list RBRACKET

State 254:
## Known stack suffix:
## type_longident
## LR(1) items:
simple_core_type2 -> type_longident . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> type_longident

State 255:
## Known stack suffix:
## simple_core_type_or_tuple
## LR(1) items:
core_type2 -> simple_core_type_or_tuple . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type2 -> simple_core_type_or_tuple

State 256:
## Known stack suffix:
## simple_core_type2
## LR(1) items:
simple_core_type -> simple_core_type2 . [ error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> simple_core_type2 . type_longident [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type2 -> simple_core_type2 . SHARP class_longident opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 60
-- On SHARP shift to state 257
-- On LIDENT shift to state 219
-- On type_longident shift to state 260
-- On mod_ext_longident shift to state 221
## Reductions:
-- On error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> simple_core_type2

State 257:
## Known stack suffix:
## simple_core_type2 SHARP
## LR(1) items:
simple_core_type2 -> simple_core_type2 SHARP . class_longident opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 62
-- On mod_longident shift to state 63
-- On class_longident shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## simple_core_type2 SHARP class_longident
## LR(1) items:
simple_core_type2 -> simple_core_type2 SHARP class_longident . opt_present [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On LBRACKET shift to state 67
-- On opt_present shift to state 259
## Reductions:
-- On error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production opt_present ->

State 259:
## Known stack suffix:
## simple_core_type2 SHARP class_longident opt_present
## LR(1) items:
simple_core_type2 -> simple_core_type2 SHARP class_longident opt_present . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> simple_core_type2 SHARP class_longident opt_present

State 260:
## Known stack suffix:
## simple_core_type2 type_longident
## LR(1) items:
simple_core_type2 -> simple_core_type2 type_longident . [ error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type2 -> simple_core_type2 type_longident

State 261:
## Known stack suffix:
## simple_core_type
## LR(1) items:
simple_core_type_or_tuple -> simple_core_type . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type_or_tuple -> simple_core_type . STAR core_type_list [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On STAR shift to state 262
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production simple_core_type_or_tuple -> simple_core_type

State 262:
## Known stack suffix:
## simple_core_type STAR
## LR(1) items:
simple_core_type_or_tuple -> simple_core_type STAR . core_type_list [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On LPAREN shift to state 213
-- On LIDENT shift to state 219
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 263
-- On mod_ext_longident shift to state 221
-- On core_type_list shift to state 264
## Reductions:

State 263:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type_list -> simple_core_type . [ error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type_list -> simple_core_type

State 264:
## Known stack suffix:
## simple_core_type STAR core_type_list
## LR(1) items:
core_type_list -> core_type_list . STAR simple_core_type [ error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type_or_tuple -> simple_core_type STAR core_type_list . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On STAR shift to state 265
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production simple_core_type_or_tuple -> simple_core_type STAR core_type_list

State 265:
## Known stack suffix:
## core_type_list STAR
## LR(1) items:
core_type_list -> core_type_list STAR . simple_core_type [ error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On LPAREN shift to state 213
-- On LIDENT shift to state 219
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 266
-- On mod_ext_longident shift to state 221
## Reductions:

State 266:
## Known stack suffix:
## core_type_list STAR simple_core_type
## LR(1) items:
core_type_list -> core_type_list STAR simple_core_type . [ error WITH VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type_list -> core_type_list STAR simple_core_type

State 267:
## Known stack suffix:
## LIDENT COLON core_type2 MINUSGREATER core_type2
## LR(1) items:
core_type2 -> LIDENT COLON core_type2 MINUSGREATER core_type2 . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 MINUSGREATER core_type2 . [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 268
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type2 -> LIDENT COLON core_type2 MINUSGREATER core_type2

State 268:
## Known stack suffix:
## core_type2 MINUSGREATER
## LR(1) items:
core_type2 -> core_type2 MINUSGREATER . core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## core_type2 MINUSGREATER core_type2
## LR(1) items:
core_type2 -> core_type2 . MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 MINUSGREATER core_type2 . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 268
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type2 -> core_type2 MINUSGREATER core_type2

State 270:
## Known stack suffix:
## OPTLABEL core_type2 MINUSGREATER core_type2
## LR(1) items:
core_type2 -> OPTLABEL core_type2 MINUSGREATER core_type2 . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 MINUSGREATER core_type2 . [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 268
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type2 -> OPTLABEL core_type2 MINUSGREATER core_type2

State 271:
## Known stack suffix:
## QUESTION LIDENT COLON core_type2 MINUSGREATER core_type2
## LR(1) items:
core_type2 -> QUESTION LIDENT COLON core_type2 MINUSGREATER core_type2 . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type2 -> core_type2 MINUSGREATER core_type2 . [ MINUSGREATER ]
## Transitions:
-- On MINUSGREATER shift to state 268
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type2 -> QUESTION LIDENT COLON core_type2 MINUSGREATER core_type2

State 272:
## Known stack suffix:
## core_type2
## LR(1) items:
core_type -> core_type2 . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AND ]
core_type -> core_type2 . AS QUOTE ident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AND ]
core_type2 -> core_type2 . MINUSGREATER core_type2 [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 268
-- On AS shift to state 273
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AND
--   reduce production core_type -> core_type2

State 273:
## Known stack suffix:
## core_type2 AS
## LR(1) items:
core_type -> core_type2 AS . QUOTE ident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AND ]
## Transitions:
-- On QUOTE shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## core_type2 AS QUOTE
## LR(1) items:
core_type -> core_type2 AS QUOTE . ident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 79
-- On LIDENT shift to state 80
-- On ident shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## core_type2 AS QUOTE ident
## LR(1) items:
core_type -> core_type2 AS QUOTE ident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type -> core_type2 AS QUOTE ident

State 276:
## Known stack suffix:
## VAL val_ident_colon core_type
## LR(1) items:
signature_item -> VAL val_ident_colon core_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> VAL val_ident_colon core_type

State 277:
## Known stack suffix:
## TYPE
## LR(1) items:
signature_item -> TYPE . type_declarations [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On LPAREN shift to state 280
-- On type_variance shift to state 281
-- On type_parameters shift to state 289
-- On type_parameter shift to state 342
-- On type_declarations shift to state 343
-- On type_declaration shift to state 346
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->
-- On QUOTE
--   reduce production type_variance ->

State 278:
## Known stack suffix:
## PLUS
## LR(1) items:
type_variance -> PLUS . [ QUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_variance -> PLUS

State 279:
## Known stack suffix:
## MINUS
## LR(1) items:
type_variance -> MINUS . [ QUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_variance -> MINUS

State 280:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_parameters -> LPAREN . type_parameter_list RPAREN [ UIDENT LIDENT ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On type_variance shift to state 281
-- On type_parameter_list shift to state 284
-- On type_parameter shift to state 288
## Reductions:
-- On QUOTE
--   reduce production type_variance ->

State 281:
## Known stack suffix:
## type_variance
## LR(1) items:
type_parameter -> type_variance . QUOTE ident [ UIDENT RPAREN RBRACKET LIDENT COMMA ]
## Transitions:
-- On QUOTE shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## type_variance QUOTE
## LR(1) items:
type_parameter -> type_variance QUOTE . ident [ UIDENT RPAREN RBRACKET LIDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## type_variance QUOTE ident
## LR(1) items:
type_parameter -> type_variance QUOTE ident . [ UIDENT RPAREN RBRACKET LIDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameter -> type_variance QUOTE ident

State 284:
## Known stack suffix:
## LPAREN type_parameter_list
## LR(1) items:
type_parameter_list -> type_parameter_list . COMMA type_parameter [ RPAREN COMMA ]
type_parameters -> LPAREN type_parameter_list . RPAREN [ UIDENT LIDENT ]
## Transitions:
-- On RPAREN shift to state 285
-- On COMMA shift to state 286
## Reductions:

State 285:
## Known stack suffix:
## LPAREN type_parameter_list RPAREN
## LR(1) items:
type_parameters -> LPAREN type_parameter_list RPAREN . [ UIDENT LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameters -> LPAREN type_parameter_list RPAREN

State 286:
## Known stack suffix:
## type_parameter_list COMMA
## LR(1) items:
type_parameter_list -> type_parameter_list COMMA . type_parameter [ RPAREN RBRACKET COMMA ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On type_variance shift to state 281
-- On type_parameter shift to state 287
## Reductions:
-- On QUOTE
--   reduce production type_variance ->

State 287:
## Known stack suffix:
## type_parameter_list COMMA type_parameter
## LR(1) items:
type_parameter_list -> type_parameter_list COMMA type_parameter . [ RPAREN RBRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameter_list -> type_parameter_list COMMA type_parameter

State 288:
## Known stack suffix:
## type_parameter
## LR(1) items:
type_parameter_list -> type_parameter . [ RPAREN RBRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameter_list -> type_parameter

State 289:
## Known stack suffix:
## type_parameters
## LR(1) items:
type_declaration -> type_parameters . LIDENT type_kind constraints [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LIDENT shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## type_parameters LIDENT
## LR(1) items:
type_declaration -> type_parameters LIDENT . type_kind constraints [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On EQUAL shift to state 291
-- On type_kind shift to state 335
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind ->

State 291:
## Known stack suffix:
## EQUAL
## LR(1) items:
type_kind -> EQUAL . core_type [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . PRIVATE constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . private_flag BAR constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . private_flag LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL private_flag opt_bar constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL private_flag LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 292
-- On TRUE shift to state 293
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On PRIVATE shift to state 294
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 308
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On FALSE shift to state 298
-- On COLONCOLON shift to state 299
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On private_flag shift to state 309
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 324
-- On constructor_declarations shift to state 334
-- On constructor_declaration shift to state 307
-- On constr_ident shift to state 303
## Reductions:
-- On LBRACE BAR
--   reduce production private_flag ->

State 292:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> UIDENT

State 293:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_ident -> TRUE . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> TRUE

State 294:
## Known stack suffix:
## EQUAL PRIVATE
## LR(1) items:
private_flag -> PRIVATE . [ LBRACE BAR ]
type_kind -> EQUAL PRIVATE . constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 295
-- On TRUE shift to state 293
-- On LPAREN shift to state 296
-- On FALSE shift to state 298
-- On COLONCOLON shift to state 299
-- On constructor_declarations shift to state 300
-- On constructor_declaration shift to state 307
-- On constr_ident shift to state 303
## Reductions:
-- On LBRACE BAR
--   reduce production private_flag -> PRIVATE

State 295:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> UIDENT

State 296:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RPAREN shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_ident -> LPAREN RPAREN . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> LPAREN RPAREN

State 298:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_ident -> FALSE . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> FALSE

State 299:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
constr_ident -> COLONCOLON . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> COLONCOLON

State 300:
## Known stack suffix:
## EQUAL PRIVATE constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL PRIVATE constructor_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 301
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL PRIVATE constructor_declarations

State 301:
## Known stack suffix:
## constructor_declarations BAR
## LR(1) items:
constructor_declarations -> constructor_declarations BAR . constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 295
-- On TRUE shift to state 293
-- On LPAREN shift to state 296
-- On FALSE shift to state 298
-- On COLONCOLON shift to state 299
-- On constructor_declaration shift to state 302
-- On constr_ident shift to state 303
## Reductions:

State 302:
## Known stack suffix:
## constructor_declarations BAR constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declarations BAR constructor_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declarations -> constructor_declarations BAR constructor_declaration

State 303:
## Known stack suffix:
## constr_ident
## LR(1) items:
constructor_declaration -> constr_ident . constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 304
-- On constructor_arguments shift to state 306
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constructor_arguments ->

State 304:
## Known stack suffix:
## OF
## LR(1) items:
constructor_arguments -> OF . core_type_list [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On LPAREN shift to state 213
-- On LIDENT shift to state 219
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 263
-- On mod_ext_longident shift to state 221
-- On core_type_list shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## OF core_type_list
## LR(1) items:
constructor_arguments -> OF core_type_list . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
core_type_list -> core_type_list . STAR simple_core_type [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On STAR shift to state 265
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constructor_arguments -> OF core_type_list

State 306:
## Known stack suffix:
## constr_ident constructor_arguments
## LR(1) items:
constructor_declaration -> constr_ident constructor_arguments . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declaration -> constr_ident constructor_arguments

State 307:
## Known stack suffix:
## constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declarations -> constructor_declaration

State 308:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN [ error VAL TYPE STAR SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN type_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN SHARP class_longident opt_present [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On RPAREN shift to state 297
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 214
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 309:
## Known stack suffix:
## EQUAL private_flag
## LR(1) items:
type_kind -> EQUAL private_flag . BAR constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL private_flag . LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On LBRACE shift to state 310
-- On BAR shift to state 322
## Reductions:

State 310:
## Known stack suffix:
## EQUAL private_flag LBRACE
## LR(1) items:
type_kind -> EQUAL private_flag LBRACE . label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 311
-- On mutable_flag shift to state 312
-- On label_declarations shift to state 316
-- On label_declaration shift to state 321
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 311:
## Known stack suffix:
## MUTABLE
## LR(1) items:
mutable_flag -> MUTABLE . [ LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mutable_flag -> MUTABLE

State 312:
## Known stack suffix:
## mutable_flag
## LR(1) items:
label_declaration -> mutable_flag . label COLON poly_type [ SEMI RBRACE ]
## Transitions:
-- On LIDENT shift to state 103
-- On label shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## mutable_flag label
## LR(1) items:
label_declaration -> mutable_flag label . COLON poly_type [ SEMI RBRACE ]
## Transitions:
-- On COLON shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## mutable_flag label COLON
## LR(1) items:
label_declaration -> mutable_flag label COLON . poly_type [ SEMI RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 110
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On typevar_list shift to state 186
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On poly_type shift to state 315
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 192
## Reductions:

State 315:
## Known stack suffix:
## mutable_flag label COLON poly_type
## LR(1) items:
label_declaration -> mutable_flag label COLON poly_type . [ SEMI RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_declaration -> mutable_flag label COLON poly_type

State 316:
## Known stack suffix:
## EQUAL private_flag LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL private_flag LBRACE label_declarations . opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 317
-- On opt_semi shift to state 319
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 317:
## Known stack suffix:
## label_declarations SEMI
## LR(1) items:
label_declarations -> label_declarations SEMI . label_declaration [ SEMI RBRACE ]
opt_semi -> SEMI . [ RBRACE ]
## Transitions:
-- On MUTABLE shift to state 311
-- On mutable_flag shift to state 312
-- On label_declaration shift to state 318
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->
-- On RBRACE
--   reduce production opt_semi -> SEMI

State 318:
## Known stack suffix:
## label_declarations SEMI label_declaration
## LR(1) items:
label_declarations -> label_declarations SEMI label_declaration . [ SEMI RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_declarations -> label_declarations SEMI label_declaration

State 319:
## Known stack suffix:
## EQUAL private_flag LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL private_flag LBRACE label_declarations opt_semi . RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## EQUAL private_flag LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL private_flag LBRACE label_declarations opt_semi RBRACE . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_kind -> EQUAL private_flag LBRACE label_declarations opt_semi RBRACE

State 321:
## Known stack suffix:
## label_declaration
## LR(1) items:
label_declarations -> label_declaration . [ SEMI RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_declarations -> label_declaration

State 322:
## Known stack suffix:
## EQUAL private_flag BAR
## LR(1) items:
type_kind -> EQUAL private_flag BAR . constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 295
-- On TRUE shift to state 293
-- On LPAREN shift to state 296
-- On FALSE shift to state 298
-- On COLONCOLON shift to state 299
-- On constructor_declarations shift to state 323
-- On constructor_declaration shift to state 307
-- On constr_ident shift to state 303
## Reductions:

State 323:
## Known stack suffix:
## EQUAL private_flag BAR constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL private_flag BAR constructor_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 301
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL private_flag BAR constructor_declarations

State 324:
## Known stack suffix:
## EQUAL core_type
## LR(1) items:
type_kind -> EQUAL core_type . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL private_flag opt_bar constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL private_flag LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On EQUAL shift to state 325
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type

State 325:
## Known stack suffix:
## EQUAL core_type EQUAL
## LR(1) items:
type_kind -> EQUAL core_type EQUAL . private_flag opt_bar constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type EQUAL . private_flag LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On PRIVATE shift to state 326
-- On private_flag shift to state 327
## Reductions:
-- On UIDENT TRUE LPAREN LBRACE FALSE COLONCOLON BAR
--   reduce production private_flag ->

State 326:
## Known stack suffix:
## PRIVATE
## LR(1) items:
private_flag -> PRIVATE . [ UIDENT TRUE LPAREN LIDENT LBRACE FALSE COLONCOLON BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production private_flag -> PRIVATE

State 327:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag . opt_bar constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type EQUAL private_flag . LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On LBRACE shift to state 328
-- On BAR shift to state 113
-- On opt_bar shift to state 332
## Reductions:
-- On UIDENT TRUE LPAREN FALSE COLONCOLON
--   reduce production opt_bar ->

State 328:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag LBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag LBRACE . label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 311
-- On mutable_flag shift to state 312
-- On label_declarations shift to state 329
-- On label_declaration shift to state 321
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 329:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL core_type EQUAL private_flag LBRACE label_declarations . opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 317
-- On opt_semi shift to state 330
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 330:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi . RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi RBRACE . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_kind -> EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi RBRACE

State 332:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag opt_bar
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag opt_bar . constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 295
-- On TRUE shift to state 293
-- On LPAREN shift to state 296
-- On FALSE shift to state 298
-- On COLONCOLON shift to state 299
-- On constructor_declarations shift to state 333
-- On constructor_declaration shift to state 307
-- On constr_ident shift to state 303
## Reductions:

State 333:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag opt_bar constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL core_type EQUAL private_flag opt_bar constructor_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 301
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type EQUAL private_flag opt_bar constructor_declarations

State 334:
## Known stack suffix:
## EQUAL constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL constructor_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 301
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL constructor_declarations

State 335:
## Known stack suffix:
## type_parameters LIDENT type_kind
## LR(1) items:
type_declaration -> type_parameters LIDENT type_kind . constraints [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On constraints shift to state 336
## Default reduction:
-- After reading the next token, reduce production constraints ->

State 336:
## Known stack suffix:
## type_parameters LIDENT type_kind constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_declaration -> type_parameters LIDENT type_kind constraints . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 337
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production type_declaration -> type_parameters LIDENT type_kind constraints

State 337:
## Known stack suffix:
## constraints CONSTRAINT
## LR(1) items:
constraints -> constraints CONSTRAINT . constrain [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 338
-- On constrain shift to state 341
## Reductions:

State 338:
## Known stack suffix:
## core_type
## LR(1) items:
constrain -> core_type . EQUAL core_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On EQUAL shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## core_type EQUAL
## LR(1) items:
constrain -> core_type EQUAL . core_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 340
## Reductions:

State 340:
## Known stack suffix:
## core_type EQUAL core_type
## LR(1) items:
constrain -> core_type EQUAL core_type . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constrain -> core_type EQUAL core_type

State 341:
## Known stack suffix:
## constraints CONSTRAINT constrain
## LR(1) items:
constraints -> constraints CONSTRAINT constrain . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constraints -> constraints CONSTRAINT constrain

State 342:
## Known stack suffix:
## type_parameter
## LR(1) items:
type_parameters -> type_parameter . [ UIDENT LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameters -> type_parameter

State 343:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
signature_item -> TYPE type_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
type_declarations -> type_declarations . AND type_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On AND shift to state 344
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> TYPE type_declarations

State 344:
## Known stack suffix:
## type_declarations AND
## LR(1) items:
type_declarations -> type_declarations AND . type_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On LPAREN shift to state 280
-- On type_variance shift to state 281
-- On type_parameters shift to state 289
-- On type_parameter shift to state 342
-- On type_declaration shift to state 345
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->
-- On QUOTE
--   reduce production type_variance ->

State 345:
## Known stack suffix:
## type_declarations AND type_declaration
## LR(1) items:
type_declarations -> type_declarations AND type_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> type_declarations AND type_declaration

State 346:
## Known stack suffix:
## type_declaration
## LR(1) items:
type_declarations -> type_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> type_declaration

State 347:
## Known stack suffix:
## OPEN
## LR(1) items:
signature_item -> OPEN . mod_longident [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 348
-- On mod_longident shift to state 349
## Reductions:

State 348:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_longident -> UIDENT . [ error VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_longident -> UIDENT

State 349:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END DOT CLASS ]
signature_item -> OPEN mod_longident . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On DOT shift to state 350
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> OPEN mod_longident

State 350:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ error VAL UNDERSCORE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN NATIVEINT MODULE MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END DOT COMMA COLONCOLON COLON CLASS CHAR BARRBRACKET BAR BACKQUOTE AS AND ]
## Transitions:
-- On UIDENT shift to state 351
## Reductions:

State 351:
## Known stack suffix:
## mod_longident DOT UIDENT
## LR(1) items:
mod_longident -> mod_longident DOT UIDENT . [ error VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_longident -> mod_longident DOT UIDENT

State 352:
## Known stack suffix:
## MODULE
## LR(1) items:
signature_item -> MODULE . UIDENT module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE . REC module_rec_declarations [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE . TYPE ident [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE . TYPE ident EQUAL module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 353
-- On TYPE shift to state 563
-- On REC shift to state 567
## Reductions:

State 353:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
signature_item -> MODULE UIDENT . module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 354
-- On COLON shift to state 559
-- On module_declaration shift to state 562
## Reductions:

State 354:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_declaration -> LPAREN . UIDENT COLON module_type RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_declaration -> LPAREN UIDENT . COLON module_type RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 356
## Reductions:

State 356:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON . module_type RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 557
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 357:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_type -> LPAREN . module_type RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
module_type -> LPAREN . module_type error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 554
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 358:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> UIDENT

State 359:
## Known stack suffix:
## SIG
## LR(1) items:
module_type -> SIG . signature END [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_type -> SIG . signature error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On signature shift to state 360
## Default reduction:
-- After reading the next token, reduce production signature ->

State 360:
## Known stack suffix:
## SIG signature
## LR(1) items:
module_type -> SIG signature . END [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_type -> SIG signature . error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
signature -> signature . signature_item [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature . signature_item SEMISEMI [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 361
-- On VAL shift to state 32
-- On TYPE shift to state 277
-- On OPEN shift to state 347
-- On MODULE shift to state 352
-- On INCLUDE shift to state 362
-- On EXTERNAL shift to state 442
-- On EXCEPTION shift to state 449
-- On END shift to state 452
-- On CLASS shift to state 453
-- On signature_item shift to state 552
## Reductions:

State 361:
## Known stack suffix:
## SIG signature error
## LR(1) items:
module_type -> SIG signature error . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> SIG signature error

State 362:
## Known stack suffix:
## INCLUDE
## LR(1) items:
signature_item -> INCLUDE . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 441
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 363:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_type -> LPAREN . module_type RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_type -> LPAREN . module_type error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 438
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 364:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_type -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LPAREN shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 366
## Reductions:

State 366:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On COLON shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 407
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 368:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_type -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 370
## Reductions:

State 370:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On COLON shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 373
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 372:
## Known stack suffix:
## mty_longident
## LR(1) items:
module_type -> mty_longident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> mty_longident

State 373:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 374
-- On RPAREN shift to state 399
## Reductions:

State 374:
## Known stack suffix:
## module_type WITH
## LR(1) items:
module_type -> module_type WITH . with_constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On TYPE shift to state 375
-- On MODULE shift to state 390
-- On with_constraints shift to state 395
-- On with_constraint shift to state 398
## Reductions:

State 375:
## Known stack suffix:
## TYPE
## LR(1) items:
with_constraint -> TYPE . type_parameters label_longident EQUAL core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On LPAREN shift to state 280
-- On type_variance shift to state 281
-- On type_parameters shift to state 376
-- On type_parameter shift to state 342
## Reductions:
-- On UIDENT LIDENT
--   reduce production type_parameters ->
-- On QUOTE
--   reduce production type_variance ->

State 376:
## Known stack suffix:
## TYPE type_parameters
## LR(1) items:
with_constraint -> TYPE type_parameters . label_longident EQUAL core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 377
-- On mod_longident shift to state 378
-- On label_longident shift to state 381
## Reductions:

State 377:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_longident -> LIDENT

State 378:
## Known stack suffix:
## mod_longident
## LR(1) items:
label_longident -> mod_longident . DOT LIDENT [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
label_longident -> mod_longident DOT . LIDENT [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 11
-- On LIDENT shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
label_longident -> mod_longident DOT LIDENT . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_longident -> mod_longident DOT LIDENT

State 381:
## Known stack suffix:
## TYPE type_parameters label_longident
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident . EQUAL core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident EQUAL . core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident EQUAL core_type . constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On constraints shift to state 384
## Default reduction:
-- After reading the next token, reduce production constraints ->

State 384:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 385
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints

State 385:
## Known stack suffix:
## constraints CONSTRAINT
## LR(1) items:
constraints -> constraints CONSTRAINT . constrain [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 386
-- On constrain shift to state 389
## Reductions:

State 386:
## Known stack suffix:
## core_type
## LR(1) items:
constrain -> core_type . EQUAL core_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On EQUAL shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## core_type EQUAL
## LR(1) items:
constrain -> core_type EQUAL . core_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## core_type EQUAL core_type
## LR(1) items:
constrain -> core_type EQUAL core_type . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constrain -> core_type EQUAL core_type

State 389:
## Known stack suffix:
## constraints CONSTRAINT constrain
## LR(1) items:
constraints -> constraints CONSTRAINT constrain . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constraints -> constraints CONSTRAINT constrain

State 390:
## Known stack suffix:
## MODULE
## LR(1) items:
with_constraint -> MODULE . mod_longident EQUAL mod_ext_longident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On mod_longident shift to state 391
## Reductions:

State 391:
## Known stack suffix:
## MODULE mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ EQUAL DOT ]
with_constraint -> MODULE mod_longident . EQUAL mod_ext_longident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 392
-- On DOT shift to state 394
## Reductions:

State 392:
## Known stack suffix:
## MODULE mod_longident EQUAL
## LR(1) items:
with_constraint -> MODULE mod_longident EQUAL . mod_ext_longident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 60
-- On mod_ext_longident shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## MODULE mod_longident EQUAL mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
with_constraint -> MODULE mod_longident EQUAL mod_ext_longident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 129
-- On DOT shift to state 132
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident

State 394:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ WHEN VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI RPAREN QUESTION OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT INCLUDE IN FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF DOT COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BAR BACKQUOTE AS AND ]
## Transitions:
-- On UIDENT shift to state 11
## Reductions:

State 395:
## Known stack suffix:
## module_type WITH with_constraints
## LR(1) items:
module_type -> module_type WITH with_constraints . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
with_constraints -> with_constraints . AND with_constraint [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On AND shift to state 396
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production module_type -> module_type WITH with_constraints

State 396:
## Known stack suffix:
## with_constraints AND
## LR(1) items:
with_constraints -> with_constraints AND . with_constraint [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On TYPE shift to state 375
-- On MODULE shift to state 390
-- On with_constraint shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## with_constraints AND with_constraint
## LR(1) items:
with_constraints -> with_constraints AND with_constraint . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_constraints -> with_constraints AND with_constraint

State 398:
## Known stack suffix:
## with_constraint
## LR(1) items:
with_constraints -> with_constraint . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_constraints -> with_constraint

State 399:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 401
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 401:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On WITH shift to state 374
## Reductions:
-- On VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type

State 402:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
mty_longident -> mod_ext_longident . DOT ident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 129
-- On DOT shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
mty_longident -> mod_ext_longident DOT . ident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 404
-- On LIDENT shift to state 71
-- On ident shift to state 405
## Reductions:

State 404:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
ident -> UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 405:
## Known stack suffix:
## mod_ext_longident DOT ident
## LR(1) items:
mty_longident -> mod_ext_longident DOT ident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mty_longident -> mod_ext_longident DOT ident

State 406:
## Known stack suffix:
## ident
## LR(1) items:
mty_longident -> ident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mty_longident -> ident

State 407:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 374
-- On RPAREN shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 409
## Reductions:

State 409:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 411
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 410:
## Known stack suffix:
## mty_longident
## LR(1) items:
module_type -> mty_longident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> mty_longident

State 411:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On WITH shift to state 412
## Reductions:
-- On error VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type

State 412:
## Known stack suffix:
## module_type WITH
## LR(1) items:
module_type -> module_type WITH . with_constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On TYPE shift to state 413
-- On MODULE shift to state 419
-- On with_constraints shift to state 429
-- On with_constraint shift to state 432
## Reductions:

State 413:
## Known stack suffix:
## TYPE
## LR(1) items:
with_constraint -> TYPE . type_parameters label_longident EQUAL core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On LPAREN shift to state 280
-- On type_variance shift to state 281
-- On type_parameters shift to state 414
-- On type_parameter shift to state 342
## Reductions:
-- On UIDENT LIDENT
--   reduce production type_parameters ->
-- On QUOTE
--   reduce production type_variance ->

State 414:
## Known stack suffix:
## TYPE type_parameters
## LR(1) items:
with_constraint -> TYPE type_parameters . label_longident EQUAL core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 377
-- On mod_longident shift to state 378
-- On label_longident shift to state 415
## Reductions:

State 415:
## Known stack suffix:
## TYPE type_parameters label_longident
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident . EQUAL core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On EQUAL shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident EQUAL . core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 417
## Reductions:

State 417:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident EQUAL core_type . constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On constraints shift to state 418
## Default reduction:
-- After reading the next token, reduce production constraints ->

State 418:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 337
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints

State 419:
## Known stack suffix:
## MODULE
## LR(1) items:
with_constraint -> MODULE . mod_longident EQUAL mod_ext_longident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On mod_longident shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## MODULE mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ EQUAL DOT ]
with_constraint -> MODULE mod_longident . EQUAL mod_ext_longident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On EQUAL shift to state 421
-- On DOT shift to state 394
## Reductions:

State 421:
## Known stack suffix:
## MODULE mod_longident EQUAL
## LR(1) items:
with_constraint -> MODULE mod_longident EQUAL . mod_ext_longident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 422
-- On mod_ext_longident shift to state 423
## Reductions:

State 422:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_ext_longident -> UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> UIDENT

State 423:
## Known stack suffix:
## MODULE mod_longident EQUAL mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
with_constraint -> MODULE mod_longident EQUAL mod_ext_longident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LPAREN shift to state 424
-- On DOT shift to state 427
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident

State 424:
## Known stack suffix:
## mod_ext_longident LPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN . mod_ext_longident RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 60
-- On mod_ext_longident shift to state 425
## Reductions:

State 425:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident . RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
-- On RPAREN shift to state 426
-- On LPAREN shift to state 129
-- On DOT shift to state 132
## Reductions:

State 426:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident RPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN

State 427:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 428
## Reductions:

State 428:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 429:
## Known stack suffix:
## module_type WITH with_constraints
## LR(1) items:
module_type -> module_type WITH with_constraints . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
with_constraints -> with_constraints . AND with_constraint [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On AND shift to state 430
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_type -> module_type WITH with_constraints

State 430:
## Known stack suffix:
## with_constraints AND
## LR(1) items:
with_constraints -> with_constraints AND . with_constraint [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On TYPE shift to state 413
-- On MODULE shift to state 419
-- On with_constraint shift to state 431
## Reductions:

State 431:
## Known stack suffix:
## with_constraints AND with_constraint
## LR(1) items:
with_constraints -> with_constraints AND with_constraint . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_constraints -> with_constraints AND with_constraint

State 432:
## Known stack suffix:
## with_constraint
## LR(1) items:
with_constraints -> with_constraint . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_constraints -> with_constraint

State 433:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
mty_longident -> mod_ext_longident . DOT ident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LPAREN shift to state 129
-- On DOT shift to state 434
## Reductions:

State 434:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
mty_longident -> mod_ext_longident DOT . ident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 435
-- On LIDENT shift to state 80
-- On ident shift to state 436
## Reductions:

State 435:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
ident -> UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 436:
## Known stack suffix:
## mod_ext_longident DOT ident
## LR(1) items:
mty_longident -> mod_ext_longident DOT ident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mty_longident -> mod_ext_longident DOT ident

State 437:
## Known stack suffix:
## ident
## LR(1) items:
mty_longident -> ident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mty_longident -> ident

State 438:
## Known stack suffix:
## LPAREN module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
module_type -> LPAREN module_type . RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_type -> LPAREN module_type . error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On error shift to state 439
-- On WITH shift to state 412
-- On RPAREN shift to state 440
## Reductions:

State 439:
## Known stack suffix:
## LPAREN module_type error
## LR(1) items:
module_type -> LPAREN module_type error . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> LPAREN module_type error

State 440:
## Known stack suffix:
## LPAREN module_type RPAREN
## LR(1) items:
module_type -> LPAREN module_type RPAREN . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> LPAREN module_type RPAREN

State 441:
## Known stack suffix:
## INCLUDE module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> INCLUDE module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 412
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> INCLUDE module_type

State 442:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
signature_item -> EXTERNAL . val_ident_colon core_type EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 33
-- On LIDENT shift to state 55
-- On LABEL shift to state 57
-- On val_ident_colon shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## EXTERNAL val_ident_colon
## LR(1) items:
signature_item -> EXTERNAL val_ident_colon . core_type EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 444
## Reductions:

State 444:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type
## LR(1) items:
signature_item -> EXTERNAL val_ident_colon core_type . EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On EQUAL shift to state 445
## Reductions:

State 445:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type EQUAL
## LR(1) items:
signature_item -> EXTERNAL val_ident_colon core_type EQUAL . primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On STRING shift to state 446
-- On primitive_declaration shift to state 448
## Reductions:

State 446:
## Known stack suffix:
## STRING
## LR(1) items:
primitive_declaration -> STRING . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
primitive_declaration -> STRING . primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On STRING shift to state 446
-- On primitive_declaration shift to state 447
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production primitive_declaration -> STRING

State 447:
## Known stack suffix:
## STRING primitive_declaration
## LR(1) items:
primitive_declaration -> STRING primitive_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_declaration -> STRING primitive_declaration

State 448:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type EQUAL primitive_declaration
## LR(1) items:
signature_item -> EXTERNAL val_ident_colon core_type EQUAL primitive_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> EXTERNAL val_ident_colon core_type EQUAL primitive_declaration

State 449:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
signature_item -> EXCEPTION . UIDENT constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 450
## Reductions:

State 450:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
signature_item -> EXCEPTION UIDENT . constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On OF shift to state 304
-- On constructor_arguments shift to state 451
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production constructor_arguments ->

State 451:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
signature_item -> EXCEPTION UIDENT constructor_arguments . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> EXCEPTION UIDENT constructor_arguments

State 452:
## Known stack suffix:
## SIG signature END
## LR(1) items:
module_type -> SIG signature END . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> SIG signature END

State 453:
## Known stack suffix:
## CLASS
## LR(1) items:
signature_item -> CLASS . class_descriptions [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> CLASS . TYPE class_type_declarations [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On TYPE shift to state 455
-- On virtual_flag shift to state 519
-- On class_descriptions shift to state 548
-- On class_description shift to state 551
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 454:
## Known stack suffix:
## VIRTUAL
## LR(1) items:
virtual_flag -> VIRTUAL . [ LIDENT LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production virtual_flag -> VIRTUAL

State 455:
## Known stack suffix:
## CLASS TYPE
## LR(1) items:
signature_item -> CLASS TYPE . class_type_declarations [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 456
-- On class_type_declarations shift to state 515
-- On class_type_declaration shift to state 518
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 456:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_type_declaration -> virtual_flag . class_type_parameters LIDENT EQUAL class_signature [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LBRACKET shift to state 457
-- On class_type_parameters shift to state 460
## Reductions:
-- On LIDENT
--   reduce production class_type_parameters ->

State 457:
## Known stack suffix:
## LBRACKET
## LR(1) items:
class_type_parameters -> LBRACKET . type_parameter_list RBRACKET [ LIDENT ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On type_variance shift to state 281
-- On type_parameter_list shift to state 458
-- On type_parameter shift to state 288
## Reductions:
-- On QUOTE
--   reduce production type_variance ->

State 458:
## Known stack suffix:
## LBRACKET type_parameter_list
## LR(1) items:
class_type_parameters -> LBRACKET type_parameter_list . RBRACKET [ LIDENT ]
type_parameter_list -> type_parameter_list . COMMA type_parameter [ RBRACKET COMMA ]
## Transitions:
-- On RBRACKET shift to state 459
-- On COMMA shift to state 286
## Reductions:

State 459:
## Known stack suffix:
## LBRACKET type_parameter_list RBRACKET
## LR(1) items:
class_type_parameters -> LBRACKET type_parameter_list RBRACKET . [ LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_parameters -> LBRACKET type_parameter_list RBRACKET

State 460:
## Known stack suffix:
## virtual_flag class_type_parameters
## LR(1) items:
class_type_declaration -> virtual_flag class_type_parameters . LIDENT EQUAL class_signature [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LIDENT shift to state 461
## Reductions:

State 461:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT
## LR(1) items:
class_type_declaration -> virtual_flag class_type_parameters LIDENT . EQUAL class_signature [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On EQUAL shift to state 462
## Reductions:

State 462:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT EQUAL
## LR(1) items:
class_type_declaration -> virtual_flag class_type_parameters LIDENT EQUAL . class_signature [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 60
-- On OBJECT shift to state 463
-- On LIDENT shift to state 500
-- On LBRACKET shift to state 501
-- On mod_ext_longident shift to state 504
-- On clty_longident shift to state 508
-- On class_signature shift to state 514
## Reductions:

State 463:
## Known stack suffix:
## OBJECT
## LR(1) items:
class_signature -> OBJECT . class_sig_body END [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
class_signature -> OBJECT . class_sig_body error [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On LPAREN shift to state 464
-- On class_sig_body shift to state 467
-- On class_self_type shift to state 470
## Reductions:
-- On error VAL METHOD INHERIT END CONSTRAINT
--   reduce production class_self_type ->

State 464:
## Known stack suffix:
## LPAREN
## LR(1) items:
class_self_type -> LPAREN . core_type RPAREN [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 465
## Reductions:

State 465:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
class_self_type -> LPAREN core_type . RPAREN [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On RPAREN shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
class_self_type -> LPAREN core_type RPAREN . [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_self_type -> LPAREN core_type RPAREN

State 467:
## Known stack suffix:
## OBJECT class_sig_body
## LR(1) items:
class_signature -> OBJECT class_sig_body . END [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
class_signature -> OBJECT class_sig_body . error [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On error shift to state 468
-- On END shift to state 469
## Reductions:

State 468:
## Known stack suffix:
## OBJECT class_sig_body error
## LR(1) items:
class_signature -> OBJECT class_sig_body error . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_signature -> OBJECT class_sig_body error

State 469:
## Known stack suffix:
## OBJECT class_sig_body END
## LR(1) items:
class_signature -> OBJECT class_sig_body END . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_signature -> OBJECT class_sig_body END

State 470:
## Known stack suffix:
## class_self_type
## LR(1) items:
class_sig_body -> class_self_type . class_sig_fields [ error END ]
## Transitions:
-- On class_sig_fields shift to state 471
## Default reduction:
-- After reading the next token, reduce production class_sig_fields ->

State 471:
## Known stack suffix:
## class_self_type class_sig_fields
## LR(1) items:
class_sig_body -> class_self_type class_sig_fields . [ error END ]
class_sig_fields -> class_sig_fields . INHERIT class_signature [ error VAL METHOD INHERIT END CONSTRAINT ]
class_sig_fields -> class_sig_fields . VAL value_type [ error VAL METHOD INHERIT END CONSTRAINT ]
class_sig_fields -> class_sig_fields . virtual_method [ error VAL METHOD INHERIT END CONSTRAINT ]
class_sig_fields -> class_sig_fields . method_type [ error VAL METHOD INHERIT END CONSTRAINT ]
class_sig_fields -> class_sig_fields . CONSTRAINT constrain [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On VAL shift to state 472
-- On METHOD shift to state 478
-- On INHERIT shift to state 499
-- On CONSTRAINT shift to state 510
-- On virtual_method shift to state 512
-- On method_type shift to state 513
## Reductions:
-- On error END
--   reduce production class_sig_body -> class_self_type class_sig_fields

State 472:
## Known stack suffix:
## class_sig_fields VAL
## LR(1) items:
class_sig_fields -> class_sig_fields VAL . value_type [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On MUTABLE shift to state 311
-- On value_type shift to state 473
-- On mutable_flag shift to state 474
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 473:
## Known stack suffix:
## class_sig_fields VAL value_type
## LR(1) items:
class_sig_fields -> class_sig_fields VAL value_type . [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_sig_fields -> class_sig_fields VAL value_type

State 474:
## Known stack suffix:
## mutable_flag
## LR(1) items:
value_type -> mutable_flag . label COLON core_type [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On LIDENT shift to state 103
-- On label shift to state 475
## Reductions:

State 475:
## Known stack suffix:
## mutable_flag label
## LR(1) items:
value_type -> mutable_flag label . COLON core_type [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On COLON shift to state 476
## Reductions:

State 476:
## Known stack suffix:
## mutable_flag label COLON
## LR(1) items:
value_type -> mutable_flag label COLON . core_type [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## mutable_flag label COLON core_type
## LR(1) items:
value_type -> mutable_flag label COLON core_type . [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value_type -> mutable_flag label COLON core_type

State 478:
## Known stack suffix:
## METHOD
## LR(1) items:
method_type -> METHOD . private_flag label COLON poly_type [ error VAL METHOD INHERIT END CONSTRAINT ]
virtual_method -> METHOD . PRIVATE VIRTUAL label COLON poly_type [ error VAL METHOD INHERIT END CONSTRAINT ]
virtual_method -> METHOD . VIRTUAL private_flag label COLON poly_type [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On VIRTUAL shift to state 479
-- On PRIVATE shift to state 490
-- On private_flag shift to state 495
## Reductions:
-- On LIDENT
--   reduce production private_flag ->

State 479:
## Known stack suffix:
## METHOD VIRTUAL
## LR(1) items:
virtual_method -> METHOD VIRTUAL . private_flag label COLON poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On PRIVATE shift to state 326
-- On private_flag shift to state 480
## Reductions:
-- On LIDENT
--   reduce production private_flag ->

State 480:
## Known stack suffix:
## METHOD VIRTUAL private_flag
## LR(1) items:
virtual_method -> METHOD VIRTUAL private_flag . label COLON poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On LIDENT shift to state 103
-- On label shift to state 481
## Reductions:

State 481:
## Known stack suffix:
## METHOD VIRTUAL private_flag label
## LR(1) items:
virtual_method -> METHOD VIRTUAL private_flag label . COLON poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On COLON shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## METHOD VIRTUAL private_flag label COLON
## LR(1) items:
virtual_method -> METHOD VIRTUAL private_flag label COLON . poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 483
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On typevar_list shift to state 485
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On poly_type shift to state 488
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 489
## Reductions:

State 483:
## Known stack suffix:
## QUOTE
## LR(1) items:
simple_core_type2 -> QUOTE . ident [ error VAL UIDENT STAR SHARP MINUSGREATER METHOD LIDENT INITIALIZER INHERIT END CONSTRAINT AS ]
typevar_list -> QUOTE . ident [ QUOTE DOT ]
## Transitions:
-- On UIDENT shift to state 79
-- On LIDENT shift to state 80
-- On ident shift to state 484
## Reductions:

State 484:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
simple_core_type2 -> QUOTE ident . [ error VAL UIDENT STAR SHARP MINUSGREATER METHOD LIDENT INITIALIZER INHERIT END CONSTRAINT AS ]
typevar_list -> QUOTE ident . [ QUOTE DOT ]
## Transitions:
## Reductions:
-- On error VAL UIDENT STAR SHARP MINUSGREATER METHOD LIDENT INITIALIZER INHERIT END CONSTRAINT AS
--   reduce production simple_core_type2 -> QUOTE ident
-- On QUOTE DOT
--   reduce production typevar_list -> QUOTE ident

State 485:
## Known stack suffix:
## typevar_list
## LR(1) items:
poly_type -> typevar_list . DOT core_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
typevar_list -> typevar_list . QUOTE ident [ QUOTE DOT ]
## Transitions:
-- On QUOTE shift to state 187
-- On DOT shift to state 486
## Reductions:

State 486:
## Known stack suffix:
## typevar_list DOT
## LR(1) items:
poly_type -> typevar_list DOT . core_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## typevar_list DOT core_type
## LR(1) items:
poly_type -> typevar_list DOT core_type . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production poly_type -> typevar_list DOT core_type

State 488:
## Known stack suffix:
## METHOD VIRTUAL private_flag label COLON poly_type
## LR(1) items:
virtual_method -> METHOD VIRTUAL private_flag label COLON poly_type . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production virtual_method -> METHOD VIRTUAL private_flag label COLON poly_type

State 489:
## Known stack suffix:
## core_type
## LR(1) items:
poly_type -> core_type . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production poly_type -> core_type

State 490:
## Known stack suffix:
## METHOD PRIVATE
## LR(1) items:
private_flag -> PRIVATE . [ LIDENT LABEL ]
virtual_method -> METHOD PRIVATE . VIRTUAL label COLON poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On VIRTUAL shift to state 491
## Reductions:
-- On LIDENT LABEL
--   reduce production private_flag -> PRIVATE

State 491:
## Known stack suffix:
## METHOD PRIVATE VIRTUAL
## LR(1) items:
virtual_method -> METHOD PRIVATE VIRTUAL . label COLON poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On LIDENT shift to state 103
-- On label shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## METHOD PRIVATE VIRTUAL label
## LR(1) items:
virtual_method -> METHOD PRIVATE VIRTUAL label . COLON poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On COLON shift to state 493
## Reductions:

State 493:
## Known stack suffix:
## METHOD PRIVATE VIRTUAL label COLON
## LR(1) items:
virtual_method -> METHOD PRIVATE VIRTUAL label COLON . poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 483
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On typevar_list shift to state 485
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On poly_type shift to state 494
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 489
## Reductions:

State 494:
## Known stack suffix:
## METHOD PRIVATE VIRTUAL label COLON poly_type
## LR(1) items:
virtual_method -> METHOD PRIVATE VIRTUAL label COLON poly_type . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production virtual_method -> METHOD PRIVATE VIRTUAL label COLON poly_type

State 495:
## Known stack suffix:
## METHOD private_flag
## LR(1) items:
method_type -> METHOD private_flag . label COLON poly_type [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On LIDENT shift to state 103
-- On label shift to state 496
## Reductions:

State 496:
## Known stack suffix:
## METHOD private_flag label
## LR(1) items:
method_type -> METHOD private_flag label . COLON poly_type [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On COLON shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## METHOD private_flag label COLON
## LR(1) items:
method_type -> METHOD private_flag label COLON . poly_type [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 483
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On typevar_list shift to state 485
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On poly_type shift to state 498
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 489
## Reductions:

State 498:
## Known stack suffix:
## METHOD private_flag label COLON poly_type
## LR(1) items:
method_type -> METHOD private_flag label COLON poly_type . [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_type -> METHOD private_flag label COLON poly_type

State 499:
## Known stack suffix:
## class_sig_fields INHERIT
## LR(1) items:
class_sig_fields -> class_sig_fields INHERIT . class_signature [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On UIDENT shift to state 60
-- On OBJECT shift to state 463
-- On LIDENT shift to state 500
-- On LBRACKET shift to state 501
-- On mod_ext_longident shift to state 504
-- On clty_longident shift to state 508
-- On class_signature shift to state 509
## Reductions:

State 500:
## Known stack suffix:
## LIDENT
## LR(1) items:
clty_longident -> LIDENT . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clty_longident -> LIDENT

State 501:
## Known stack suffix:
## LBRACKET
## LR(1) items:
class_signature -> LBRACKET . core_type_comma_list RBRACKET clty_longident [ error VAL TYPE SEMISEMI OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 502
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 502:
## Known stack suffix:
## LBRACKET core_type_comma_list
## LR(1) items:
class_signature -> LBRACKET core_type_comma_list . RBRACKET clty_longident [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RBRACKET COMMA ]
## Transitions:
-- On RBRACKET shift to state 503
-- On COMMA shift to state 178
## Reductions:

State 503:
## Known stack suffix:
## LBRACKET core_type_comma_list RBRACKET
## LR(1) items:
class_signature -> LBRACKET core_type_comma_list RBRACKET . clty_longident [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 60
-- On LIDENT shift to state 500
-- On mod_ext_longident shift to state 504
-- On clty_longident shift to state 507
## Reductions:

State 504:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
clty_longident -> mod_ext_longident . DOT LIDENT [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
## Transitions:
-- On LPAREN shift to state 129
-- On DOT shift to state 505
## Reductions:

State 505:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
clty_longident -> mod_ext_longident DOT . LIDENT [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
## Transitions:
-- On UIDENT shift to state 133
-- On LIDENT shift to state 506
## Reductions:

State 506:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
clty_longident -> mod_ext_longident DOT LIDENT . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clty_longident -> mod_ext_longident DOT LIDENT

State 507:
## Known stack suffix:
## LBRACKET core_type_comma_list RBRACKET clty_longident
## LR(1) items:
class_signature -> LBRACKET core_type_comma_list RBRACKET clty_longident . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_signature -> LBRACKET core_type_comma_list RBRACKET clty_longident

State 508:
## Known stack suffix:
## clty_longident
## LR(1) items:
class_signature -> clty_longident . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_signature -> clty_longident

State 509:
## Known stack suffix:
## class_sig_fields INHERIT class_signature
## LR(1) items:
class_sig_fields -> class_sig_fields INHERIT class_signature . [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_sig_fields -> class_sig_fields INHERIT class_signature

State 510:
## Known stack suffix:
## class_sig_fields CONSTRAINT
## LR(1) items:
class_sig_fields -> class_sig_fields CONSTRAINT . constrain [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 338
-- On constrain shift to state 511
## Reductions:

State 511:
## Known stack suffix:
## class_sig_fields CONSTRAINT constrain
## LR(1) items:
class_sig_fields -> class_sig_fields CONSTRAINT constrain . [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_sig_fields -> class_sig_fields CONSTRAINT constrain

State 512:
## Known stack suffix:
## class_sig_fields virtual_method
## LR(1) items:
class_sig_fields -> class_sig_fields virtual_method . [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_sig_fields -> class_sig_fields virtual_method

State 513:
## Known stack suffix:
## class_sig_fields method_type
## LR(1) items:
class_sig_fields -> class_sig_fields method_type . [ error VAL METHOD INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_sig_fields -> class_sig_fields method_type

State 514:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT EQUAL class_signature
## LR(1) items:
class_type_declaration -> virtual_flag class_type_parameters LIDENT EQUAL class_signature . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_declaration -> virtual_flag class_type_parameters LIDENT EQUAL class_signature

State 515:
## Known stack suffix:
## CLASS TYPE class_type_declarations
## LR(1) items:
class_type_declarations -> class_type_declarations . AND class_type_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
signature_item -> CLASS TYPE class_type_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On AND shift to state 516
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> CLASS TYPE class_type_declarations

State 516:
## Known stack suffix:
## class_type_declarations AND
## LR(1) items:
class_type_declarations -> class_type_declarations AND . class_type_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 456
-- On class_type_declaration shift to state 517
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 517:
## Known stack suffix:
## class_type_declarations AND class_type_declaration
## LR(1) items:
class_type_declarations -> class_type_declarations AND class_type_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_declarations -> class_type_declarations AND class_type_declaration

State 518:
## Known stack suffix:
## class_type_declaration
## LR(1) items:
class_type_declarations -> class_type_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_declarations -> class_type_declaration

State 519:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_description -> virtual_flag . class_type_parameters LIDENT COLON class_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LBRACKET shift to state 457
-- On class_type_parameters shift to state 520
## Reductions:
-- On LIDENT
--   reduce production class_type_parameters ->

State 520:
## Known stack suffix:
## virtual_flag class_type_parameters
## LR(1) items:
class_description -> virtual_flag class_type_parameters . LIDENT COLON class_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LIDENT shift to state 521
## Reductions:

State 521:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT
## LR(1) items:
class_description -> virtual_flag class_type_parameters LIDENT . COLON class_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On COLON shift to state 522
## Reductions:

State 522:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT COLON
## LR(1) items:
class_description -> virtual_flag class_type_parameters LIDENT COLON . class_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 523
-- On OPTLABEL shift to state 528
-- On OBJECT shift to state 463
-- On LPAREN shift to state 99
-- On LIDENT shift to state 531
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 535
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 537
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 539
-- On clty_longident shift to state 508
-- On class_type shift to state 547
-- On class_signature shift to state 543
## Reductions:

State 523:
## Known stack suffix:
## QUESTION
## LR(1) items:
class_type -> QUESTION . LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LIDENT shift to state 524
## Reductions:

State 524:
## Known stack suffix:
## QUESTION LIDENT
## LR(1) items:
class_type -> QUESTION LIDENT . COLON simple_core_type_or_tuple MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On COLON shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## QUESTION LIDENT COLON
## LR(1) items:
class_type -> QUESTION LIDENT COLON . simple_core_type_or_tuple MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 99
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 526
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
## Reductions:

State 526:
## Known stack suffix:
## QUESTION LIDENT COLON simple_core_type_or_tuple
## LR(1) items:
class_type -> QUESTION LIDENT COLON simple_core_type_or_tuple . MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 527
## Reductions:

State 527:
## Known stack suffix:
## QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER
## LR(1) items:
class_type -> QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER . class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 523
-- On OPTLABEL shift to state 528
-- On OBJECT shift to state 463
-- On LPAREN shift to state 99
-- On LIDENT shift to state 531
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 535
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 537
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 539
-- On clty_longident shift to state 508
-- On class_type shift to state 546
-- On class_signature shift to state 543
## Reductions:

State 528:
## Known stack suffix:
## OPTLABEL
## LR(1) items:
class_type -> OPTLABEL . simple_core_type_or_tuple MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 99
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 529
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
## Reductions:

State 529:
## Known stack suffix:
## OPTLABEL simple_core_type_or_tuple
## LR(1) items:
class_type -> OPTLABEL simple_core_type_or_tuple . MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 530
## Reductions:

State 530:
## Known stack suffix:
## OPTLABEL simple_core_type_or_tuple MINUSGREATER
## LR(1) items:
class_type -> OPTLABEL simple_core_type_or_tuple MINUSGREATER . class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 523
-- On OPTLABEL shift to state 528
-- On OBJECT shift to state 463
-- On LPAREN shift to state 99
-- On LIDENT shift to state 531
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 535
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 537
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 539
-- On clty_longident shift to state 508
-- On class_type shift to state 545
-- On class_signature shift to state 543
## Reductions:

State 531:
## Known stack suffix:
## LIDENT
## LR(1) items:
class_type -> LIDENT . COLON simple_core_type_or_tuple MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
clty_longident -> LIDENT . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
type_longident -> LIDENT . [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
-- On COLON shift to state 532
## Reductions:
-- On error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production clty_longident -> LIDENT
-- On UIDENT STAR SHARP MINUSGREATER LIDENT
--   reduce production type_longident -> LIDENT

State 532:
## Known stack suffix:
## LIDENT COLON
## LR(1) items:
class_type -> LIDENT COLON . simple_core_type_or_tuple MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 99
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 533
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
## Reductions:

State 533:
## Known stack suffix:
## LIDENT COLON simple_core_type_or_tuple
## LR(1) items:
class_type -> LIDENT COLON simple_core_type_or_tuple . MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 534
## Reductions:

State 534:
## Known stack suffix:
## LIDENT COLON simple_core_type_or_tuple MINUSGREATER
## LR(1) items:
class_type -> LIDENT COLON simple_core_type_or_tuple MINUSGREATER . class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 523
-- On OPTLABEL shift to state 528
-- On OBJECT shift to state 463
-- On LPAREN shift to state 99
-- On LIDENT shift to state 531
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 535
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 537
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 539
-- On clty_longident shift to state 508
-- On class_type shift to state 544
-- On class_signature shift to state 543
## Reductions:

State 535:
## Known stack suffix:
## LBRACKET
## LR(1) items:
class_signature -> LBRACKET . core_type_comma_list RBRACKET clty_longident [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
simple_core_type2 -> LBRACKET . tag_field RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
simple_core_type2 -> LBRACKET . BAR row_field_list RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
simple_core_type2 -> LBRACKET . row_field BAR row_field_list RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
simple_core_type2 -> LBRACKET . GREATER opt_bar row_field_list RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
simple_core_type2 -> LBRACKET . GREATER RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On GREATER shift to state 118
-- On BAR shift to state 163
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 166
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 536
-- On simple_core_type shift to state 146
-- On row_field shift to state 168
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 502
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 536:
## Known stack suffix:
## simple_core_type2
## LR(1) items:
row_field -> simple_core_type2 . [ BAR ]
simple_core_type -> simple_core_type2 . [ STAR RBRACKET MINUSGREATER COMMA AS ]
simple_core_type2 -> simple_core_type2 . type_longident [ UIDENT STAR SHARP RBRACKET MINUSGREATER LIDENT COMMA BAR AS ]
simple_core_type2 -> simple_core_type2 . SHARP class_longident opt_present [ UIDENT STAR SHARP RBRACKET MINUSGREATER LIDENT COMMA BAR AS ]
## Transitions:
-- On UIDENT shift to state 60
-- On SHARP shift to state 124
-- On LIDENT shift to state 117
-- On type_longident shift to state 127
-- On mod_ext_longident shift to state 128
## Reductions:
-- On BAR
--   reduce production row_field -> simple_core_type2
-- On STAR RBRACKET MINUSGREATER COMMA AS
--   reduce production simple_core_type -> simple_core_type2

State 537:
## Known stack suffix:
## simple_core_type_or_tuple
## LR(1) items:
class_type -> simple_core_type_or_tuple . MINUSGREATER class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 538
## Reductions:

State 538:
## Known stack suffix:
## simple_core_type_or_tuple MINUSGREATER
## LR(1) items:
class_type -> simple_core_type_or_tuple MINUSGREATER . class_type [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 523
-- On OPTLABEL shift to state 528
-- On OBJECT shift to state 463
-- On LPAREN shift to state 99
-- On LIDENT shift to state 531
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 535
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 537
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 539
-- On clty_longident shift to state 508
-- On class_type shift to state 542
-- On class_signature shift to state 543
## Reductions:

State 539:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
clty_longident -> mod_ext_longident . DOT LIDENT [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
type_longident -> mod_ext_longident . DOT LIDENT [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
-- On LPAREN shift to state 129
-- On DOT shift to state 540
## Reductions:

State 540:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
clty_longident -> mod_ext_longident DOT . LIDENT [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
type_longident -> mod_ext_longident DOT . LIDENT [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
-- On UIDENT shift to state 133
-- On LIDENT shift to state 541
## Reductions:

State 541:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
clty_longident -> mod_ext_longident DOT LIDENT . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
type_longident -> mod_ext_longident DOT LIDENT . [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production clty_longident -> mod_ext_longident DOT LIDENT
-- On UIDENT STAR SHARP MINUSGREATER LIDENT
--   reduce production type_longident -> mod_ext_longident DOT LIDENT

State 542:
## Known stack suffix:
## simple_core_type_or_tuple MINUSGREATER class_type
## LR(1) items:
class_type -> simple_core_type_or_tuple MINUSGREATER class_type . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> simple_core_type_or_tuple MINUSGREATER class_type

State 543:
## Known stack suffix:
## class_signature
## LR(1) items:
class_type -> class_signature . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> class_signature

State 544:
## Known stack suffix:
## LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type
## LR(1) items:
class_type -> LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type

State 545:
## Known stack suffix:
## OPTLABEL simple_core_type_or_tuple MINUSGREATER class_type
## LR(1) items:
class_type -> OPTLABEL simple_core_type_or_tuple MINUSGREATER class_type . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> OPTLABEL simple_core_type_or_tuple MINUSGREATER class_type

State 546:
## Known stack suffix:
## QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type
## LR(1) items:
class_type -> QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type

State 547:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT COLON class_type
## LR(1) items:
class_description -> virtual_flag class_type_parameters LIDENT COLON class_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_description -> virtual_flag class_type_parameters LIDENT COLON class_type

State 548:
## Known stack suffix:
## CLASS class_descriptions
## LR(1) items:
class_descriptions -> class_descriptions . AND class_description [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
signature_item -> CLASS class_descriptions . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On AND shift to state 549
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> CLASS class_descriptions

State 549:
## Known stack suffix:
## class_descriptions AND
## LR(1) items:
class_descriptions -> class_descriptions AND . class_description [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 519
-- On class_description shift to state 550
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 550:
## Known stack suffix:
## class_descriptions AND class_description
## LR(1) items:
class_descriptions -> class_descriptions AND class_description . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_descriptions -> class_descriptions AND class_description

State 551:
## Known stack suffix:
## class_description
## LR(1) items:
class_descriptions -> class_description . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_descriptions -> class_description

State 552:
## Known stack suffix:
## signature signature_item
## LR(1) items:
signature -> signature signature_item . [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature signature_item . SEMISEMI [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On SEMISEMI shift to state 553
## Reductions:
-- On error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature -> signature signature_item

State 553:
## Known stack suffix:
## signature signature_item SEMISEMI
## LR(1) items:
signature -> signature signature_item SEMISEMI . [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> signature signature_item SEMISEMI

State 554:
## Known stack suffix:
## LPAREN module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
module_type -> LPAREN module_type . RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
module_type -> LPAREN module_type . error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On error shift to state 555
-- On WITH shift to state 412
-- On RPAREN shift to state 556
## Reductions:

State 555:
## Known stack suffix:
## LPAREN module_type error
## LR(1) items:
module_type -> LPAREN module_type error . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> LPAREN module_type error

State 556:
## Known stack suffix:
## LPAREN module_type RPAREN
## LR(1) items:
module_type -> LPAREN module_type RPAREN . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> LPAREN module_type RPAREN

State 557:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type . RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 374
-- On RPAREN shift to state 558
## Reductions:

State 558:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN . module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 354
-- On COLON shift to state 559
-- On module_declaration shift to state 561
## Reductions:

State 559:
## Known stack suffix:
## COLON
## LR(1) items:
module_declaration -> COLON . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 560
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 560:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_declaration -> COLON module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 412
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_declaration -> COLON module_type

State 561:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_declaration
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration

State 562:
## Known stack suffix:
## MODULE UIDENT module_declaration
## LR(1) items:
signature_item -> MODULE UIDENT module_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> MODULE UIDENT module_declaration

State 563:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
signature_item -> MODULE TYPE . ident [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE TYPE . ident EQUAL module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 79
-- On LIDENT shift to state 80
-- On ident shift to state 564
## Reductions:

State 564:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
signature_item -> MODULE TYPE ident . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE TYPE ident . EQUAL module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On EQUAL shift to state 565
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> MODULE TYPE ident

State 565:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
signature_item -> MODULE TYPE ident EQUAL . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 566
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 566:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE TYPE ident EQUAL module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 412
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> MODULE TYPE ident EQUAL module_type

State 567:
## Known stack suffix:
## MODULE REC
## LR(1) items:
signature_item -> MODULE REC . module_rec_declarations [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 568
-- On module_rec_declarations shift to state 571
-- On module_rec_declaration shift to state 574
## Reductions:

State 568:
## Known stack suffix:
## UIDENT
## LR(1) items:
module_rec_declaration -> UIDENT . COLON module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On COLON shift to state 569
## Reductions:

State 569:
## Known stack suffix:
## UIDENT COLON
## LR(1) items:
module_rec_declaration -> UIDENT COLON . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 570
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 570:
## Known stack suffix:
## UIDENT COLON module_type
## LR(1) items:
module_rec_declaration -> UIDENT COLON module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On WITH shift to state 412
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production module_rec_declaration -> UIDENT COLON module_type

State 571:
## Known stack suffix:
## MODULE REC module_rec_declarations
## LR(1) items:
module_rec_declarations -> module_rec_declarations . AND module_rec_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
signature_item -> MODULE REC module_rec_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On AND shift to state 572
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> MODULE REC module_rec_declarations

State 572:
## Known stack suffix:
## module_rec_declarations AND
## LR(1) items:
module_rec_declarations -> module_rec_declarations AND . module_rec_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 568
-- On module_rec_declaration shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## module_rec_declarations AND module_rec_declaration
## LR(1) items:
module_rec_declarations -> module_rec_declarations AND module_rec_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_rec_declarations -> module_rec_declarations AND module_rec_declaration

State 574:
## Known stack suffix:
## module_rec_declaration
## LR(1) items:
module_rec_declarations -> module_rec_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_rec_declarations -> module_rec_declaration

State 575:
## Known stack suffix:
## SIG signature END
## LR(1) items:
module_type -> SIG signature END . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> SIG signature END

State 576:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type . RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 374
-- On RPAREN shift to state 577
## Reductions:

State 577:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN . module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 25
-- On EQUAL shift to state 578
-- On COLON shift to state 602
-- On module_binding shift to state 1468
## Reductions:

State 578:
## Known stack suffix:
## EQUAL
## LR(1) items:
module_binding -> EQUAL . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On STRUCT shift to state 579
-- On LPAREN shift to state 605
-- On FUNCTOR shift to state 1414
-- On module_expr shift to state 1467
-- On mod_longident shift to state 1426
## Reductions:

State 579:
## Known stack suffix:
## STRUCT
## LR(1) items:
module_expr -> STRUCT . structure END [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> STRUCT . structure error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TYPE shift to state 580
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SEMISEMI shift to state 607
-- On PREFIXOP shift to state 586
-- On OPEN shift to state 608
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MODULE shift to state 610
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 660
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On INCLUDE shift to state 1238
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On EXTERNAL shift to state 1240
-- On EXCEPTION shift to state 1245
-- On CLASS shift to state 1252
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On structure_tail shift to state 1401
-- On structure_item shift to state 1397
-- On structure shift to state 1464
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1405
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 580:
## Known stack suffix:
## TYPE
## LR(1) items:
structure_item -> TYPE . type_declarations [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On LPAREN shift to state 280
-- On type_variance shift to state 281
-- On type_parameters shift to state 289
-- On type_parameter shift to state 342
-- On type_declarations shift to state 581
-- On type_declaration shift to state 346
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->
-- On QUOTE
--   reduce production type_variance ->

State 581:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
structure_item -> TYPE type_declarations . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
type_declarations -> type_declarations . AND type_declaration [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On AND shift to state 344
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> TYPE type_declarations

State 582:
## Known stack suffix:
## TRY
## LR(1) items:
expr -> TRY . seq_expr WITH opt_bar match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> TRY . seq_expr WITH error [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1459
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 583:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi BARRBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . BARRBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BARRBRACKET shift to state 1454
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_semi_list shift to state 1455
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1202
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 584:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_longident -> TRUE . [ error VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> TRUE

State 585:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> STRING

State 586:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
simple_expr -> PREFIXOP . simple_expr [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 1446
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:

State 587:
## Known stack suffix:
## NEW
## LR(1) items:
simple_expr -> NEW . class_longident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 62
-- On mod_longident shift to state 63
-- On class_longident shift to state 588
## Reductions:

State 588:
## Known stack suffix:
## NEW class_longident
## LR(1) items:
simple_expr -> NEW class_longident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> NEW class_longident

State 589:
## Known stack suffix:
## NATIVEINT
## LR(1) items:
constant -> NATIVEINT . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> NATIVEINT

State 590:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr type_constraint RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
val_ident -> LPAREN . operator RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On STAR shift to state 34
-- On RPAREN shift to state 591
-- On PREFIXOP shift to state 592
-- On PLUS shift to state 36
-- On OR shift to state 37
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 1447
-- On MINUS shift to state 1448
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LESS shift to state 40
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On INFIXOP4 shift to state 41
-- On INFIXOP3 shift to state 42
-- On INFIXOP2 shift to state 43
-- On INFIXOP1 shift to state 44
-- On INFIXOP0 shift to state 45
-- On IF shift to state 818
-- On GREATER shift to state 46
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On EQUAL shift to state 47
-- On COLONEQUAL shift to state 48
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BARBAR shift to state 49
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On AMPERSAND shift to state 50
-- On AMPERAMPER shift to state 51
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1449
-- On operator shift to state 723
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 591:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_longident -> LPAREN RPAREN . [ error VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> LPAREN RPAREN

State 592:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
operator -> PREFIXOP . [ RPAREN ]
simple_expr -> PREFIXOP . simple_expr [ error UIDENT TRUE TILDE STRING STAR SHARP SEMI RPAREN QUESTION PREFIXOP PLUS OR OPTLABEL NEW NATIVEINT MINUSDOT MINUS LPAREN LIDENT LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER FLOAT FALSE EQUAL DOT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BEGIN BARBAR BACKQUOTE AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 1446
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:
-- On RPAREN
--   reduce production operator -> PREFIXOP

State 593:
## Known stack suffix:
## LIDENT
## LR(1) items:
val_ident -> LIDENT . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident -> LIDENT

State 594:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi BARRBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . BARRBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BARRBRACKET shift to state 1441
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_semi_list shift to state 1442
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1202
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 595:
## Known stack suffix:
## MATCH
## LR(1) items:
expr -> MATCH . seq_expr WITH opt_bar match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1437
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 596:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On RBRACKET shift to state 597
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_semi_list shift to state 1433
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1202
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 597:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_longident -> LBRACKET RBRACKET . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> LBRACKET RBRACKET

State 598:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ LESSMINUS ]
val_ident -> LIDENT . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On LESSMINUS
--   reduce production label -> LIDENT
-- On error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production val_ident -> LIDENT

State 599:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . rec_flag let_bindings IN seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> LET . MODULE UIDENT module_binding IN seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On REC shift to state 22
-- On MODULE shift to state 600
-- On rec_flag shift to state 1431
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production rec_flag ->

State 600:
## Known stack suffix:
## LET MODULE
## LR(1) items:
expr -> LET MODULE . UIDENT module_binding IN seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 601
## Reductions:

State 601:
## Known stack suffix:
## LET MODULE UIDENT
## LR(1) items:
expr -> LET MODULE UIDENT . module_binding IN seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 25
-- On EQUAL shift to state 578
-- On COLON shift to state 602
-- On module_binding shift to state 1428
## Reductions:

State 602:
## Known stack suffix:
## COLON
## LR(1) items:
module_binding -> COLON . module_type EQUAL module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 603
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 603:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_binding -> COLON module_type . EQUAL module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH EQUAL ]
## Transitions:
-- On WITH shift to state 374
-- On EQUAL shift to state 604
## Reductions:

State 604:
## Known stack suffix:
## COLON module_type EQUAL
## LR(1) items:
module_binding -> COLON module_type EQUAL . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On STRUCT shift to state 579
-- On LPAREN shift to state 605
-- On FUNCTOR shift to state 1414
-- On module_expr shift to state 1427
-- On mod_longident shift to state 1426
## Reductions:

State 605:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_expr -> LPAREN . module_expr COLON module_type RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> LPAREN . module_expr COLON module_type error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> LPAREN . module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> LPAREN . module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 348
-- On STRUCT shift to state 606
-- On LPAREN shift to state 618
-- On FUNCTOR shift to state 619
-- On module_expr shift to state 1407
-- On mod_longident shift to state 631
## Reductions:

State 606:
## Known stack suffix:
## STRUCT
## LR(1) items:
module_expr -> STRUCT . structure END [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> STRUCT . structure error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TYPE shift to state 580
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SEMISEMI shift to state 607
-- On PREFIXOP shift to state 586
-- On OPEN shift to state 608
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MODULE shift to state 610
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 660
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On INCLUDE shift to state 1238
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On EXTERNAL shift to state 1240
-- On EXCEPTION shift to state 1245
-- On CLASS shift to state 1252
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On structure_tail shift to state 1401
-- On structure_item shift to state 1397
-- On structure shift to state 1402
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1405
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 607:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
structure_tail -> SEMISEMI . [ error END ]
structure_tail -> SEMISEMI . seq_expr structure_tail [ error END ]
structure_tail -> SEMISEMI . structure_item structure_tail [ error END ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TYPE shift to state 580
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On OPEN shift to state 608
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MODULE shift to state 610
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 660
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On INCLUDE shift to state 1238
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On EXTERNAL shift to state 1240
-- On EXCEPTION shift to state 1245
-- On CLASS shift to state 1252
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On structure_item shift to state 1392
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1399
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:
-- On error END
--   reduce production structure_tail -> SEMISEMI

State 608:
## Known stack suffix:
## OPEN
## LR(1) items:
structure_item -> OPEN . mod_longident [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 348
-- On mod_longident shift to state 609
## Reductions:

State 609:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS ]
structure_item -> OPEN mod_longident . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On DOT shift to state 350
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> OPEN mod_longident

State 610:
## Known stack suffix:
## MODULE
## LR(1) items:
structure_item -> MODULE . UIDENT module_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
structure_item -> MODULE . REC module_rec_bindings [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
structure_item -> MODULE . TYPE ident EQUAL module_type [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 611
-- On TYPE shift to state 646
-- On REC shift to state 650
## Reductions:

State 611:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
structure_item -> MODULE UIDENT . module_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 612
-- On EQUAL shift to state 617
-- On COLON shift to state 640
-- On module_binding shift to state 645
## Reductions:

State 612:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_binding -> LPAREN . UIDENT COLON module_type RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 613
## Reductions:

State 613:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_binding -> LPAREN UIDENT . COLON module_type RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 614
## Reductions:

State 614:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_binding -> LPAREN UIDENT COLON . module_type RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 615
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 615:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type . RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 374
-- On RPAREN shift to state 616
## Reductions:

State 616:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN . module_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 612
-- On EQUAL shift to state 617
-- On COLON shift to state 640
-- On module_binding shift to state 644
## Reductions:

State 617:
## Known stack suffix:
## EQUAL
## LR(1) items:
module_binding -> EQUAL . module_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 348
-- On STRUCT shift to state 606
-- On LPAREN shift to state 618
-- On FUNCTOR shift to state 619
-- On module_expr shift to state 639
-- On mod_longident shift to state 631
## Reductions:

State 618:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_expr -> LPAREN . module_expr COLON module_type RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> LPAREN . module_expr COLON module_type error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> LPAREN . module_expr RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> LPAREN . module_expr error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On UIDENT shift to state 348
-- On STRUCT shift to state 606
-- On LPAREN shift to state 618
-- On FUNCTOR shift to state 619
-- On module_expr shift to state 632
-- On mod_longident shift to state 631
## Reductions:

State 619:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_expr -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On LPAREN shift to state 620
## Reductions:

State 620:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On UIDENT shift to state 621
## Reductions:

State 621:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On COLON shift to state 622
## Reductions:

State 622:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 623
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 623:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 374
-- On RPAREN shift to state 624
## Reductions:

State 624:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 625
## Reductions:

State 625:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On UIDENT shift to state 348
-- On STRUCT shift to state 606
-- On LPAREN shift to state 618
-- On FUNCTOR shift to state 619
-- On module_expr shift to state 626
-- On mod_longident shift to state 631
## Reductions:

State 626:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On LPAREN shift to state 627
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND
--   reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr

State 627:
## Known stack suffix:
## module_expr LPAREN
## LR(1) items:
module_expr -> module_expr LPAREN . module_expr RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> module_expr LPAREN . module_expr error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On UIDENT shift to state 348
-- On STRUCT shift to state 606
-- On LPAREN shift to state 618
-- On FUNCTOR shift to state 619
-- On module_expr shift to state 628
-- On mod_longident shift to state 631
## Reductions:

State 628:
## Known stack suffix:
## module_expr LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On error shift to state 629
-- On RPAREN shift to state 630
-- On LPAREN shift to state 627
## Reductions:

State 629:
## Known stack suffix:
## module_expr LPAREN module_expr error
## LR(1) items:
module_expr -> module_expr LPAREN module_expr error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> module_expr LPAREN module_expr error

State 630:
## Known stack suffix:
## module_expr LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> module_expr LPAREN module_expr RPAREN . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> module_expr LPAREN module_expr RPAREN

State 631:
## Known stack suffix:
## mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT COLON CLASS AND ]
module_expr -> mod_longident . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On DOT shift to state 350
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND
--   reduce production module_expr -> mod_longident

State 632:
## Known stack suffix:
## LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN COLON ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN COLON ]
module_expr -> LPAREN module_expr . COLON module_type RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> LPAREN module_expr . COLON module_type error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> LPAREN module_expr . RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> LPAREN module_expr . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On error shift to state 633
-- On RPAREN shift to state 634
-- On LPAREN shift to state 627
-- On COLON shift to state 635
## Reductions:

State 633:
## Known stack suffix:
## LPAREN module_expr error
## LR(1) items:
module_expr -> LPAREN module_expr error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr error

State 634:
## Known stack suffix:
## LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr RPAREN . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr RPAREN

State 635:
## Known stack suffix:
## LPAREN module_expr COLON
## LR(1) items:
module_expr -> LPAREN module_expr COLON . module_type RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> LPAREN module_expr COLON . module_type error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 636
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 636:
## Known stack suffix:
## LPAREN module_expr COLON module_type
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type . RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> LPAREN module_expr COLON module_type . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
## Transitions:
-- On error shift to state 637
-- On WITH shift to state 412
-- On RPAREN shift to state 638
## Reductions:

State 637:
## Known stack suffix:
## LPAREN module_expr COLON module_type error
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr COLON module_type error

State 638:
## Known stack suffix:
## LPAREN module_expr COLON module_type RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type RPAREN . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr COLON module_type RPAREN

State 639:
## Known stack suffix:
## EQUAL module_expr
## LR(1) items:
module_binding -> EQUAL module_expr . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 627
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_binding -> EQUAL module_expr

State 640:
## Known stack suffix:
## COLON
## LR(1) items:
module_binding -> COLON . module_type EQUAL module_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 641
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 641:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_binding -> COLON module_type . EQUAL module_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ WITH EQUAL ]
## Transitions:
-- On WITH shift to state 374
-- On EQUAL shift to state 642
## Reductions:

State 642:
## Known stack suffix:
## COLON module_type EQUAL
## LR(1) items:
module_binding -> COLON module_type EQUAL . module_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 348
-- On STRUCT shift to state 606
-- On LPAREN shift to state 618
-- On FUNCTOR shift to state 619
-- On module_expr shift to state 643
-- On mod_longident shift to state 631
## Reductions:

State 643:
## Known stack suffix:
## COLON module_type EQUAL module_expr
## LR(1) items:
module_binding -> COLON module_type EQUAL module_expr . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 627
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_binding -> COLON module_type EQUAL module_expr

State 644:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_binding
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding

State 645:
## Known stack suffix:
## MODULE UIDENT module_binding
## LR(1) items:
structure_item -> MODULE UIDENT module_binding . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> MODULE UIDENT module_binding

State 646:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
structure_item -> MODULE TYPE . ident EQUAL module_type [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 647
## Reductions:

State 647:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
structure_item -> MODULE TYPE ident . EQUAL module_type [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On EQUAL shift to state 648
## Reductions:

State 648:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
structure_item -> MODULE TYPE ident EQUAL . module_type [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 649
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 649:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
structure_item -> MODULE TYPE ident EQUAL module_type . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 412
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> MODULE TYPE ident EQUAL module_type

State 650:
## Known stack suffix:
## MODULE REC
## LR(1) items:
structure_item -> MODULE REC . module_rec_bindings [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 651
-- On module_rec_bindings shift to state 656
-- On module_rec_binding shift to state 659
## Reductions:

State 651:
## Known stack suffix:
## UIDENT
## LR(1) items:
module_rec_binding -> UIDENT . COLON module_type EQUAL module_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On COLON shift to state 652
## Reductions:

State 652:
## Known stack suffix:
## UIDENT COLON
## LR(1) items:
module_rec_binding -> UIDENT COLON . module_type EQUAL module_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 653
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 653:
## Known stack suffix:
## UIDENT COLON module_type
## LR(1) items:
module_rec_binding -> UIDENT COLON module_type . EQUAL module_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_type -> module_type . WITH with_constraints [ WITH EQUAL ]
## Transitions:
-- On WITH shift to state 374
-- On EQUAL shift to state 654
## Reductions:

State 654:
## Known stack suffix:
## UIDENT COLON module_type EQUAL
## LR(1) items:
module_rec_binding -> UIDENT COLON module_type EQUAL . module_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 348
-- On STRUCT shift to state 606
-- On LPAREN shift to state 618
-- On FUNCTOR shift to state 619
-- On module_expr shift to state 655
-- On mod_longident shift to state 631
## Reductions:

State 655:
## Known stack suffix:
## UIDENT COLON module_type EQUAL module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
module_rec_binding -> UIDENT COLON module_type EQUAL module_expr . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LPAREN shift to state 627
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production module_rec_binding -> UIDENT COLON module_type EQUAL module_expr

State 656:
## Known stack suffix:
## MODULE REC module_rec_bindings
## LR(1) items:
module_rec_bindings -> module_rec_bindings . AND module_rec_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
structure_item -> MODULE REC module_rec_bindings . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On AND shift to state 657
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> MODULE REC module_rec_bindings

State 657:
## Known stack suffix:
## module_rec_bindings AND
## LR(1) items:
module_rec_bindings -> module_rec_bindings AND . module_rec_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 651
-- On module_rec_binding shift to state 658
## Reductions:

State 658:
## Known stack suffix:
## module_rec_bindings AND module_rec_binding
## LR(1) items:
module_rec_bindings -> module_rec_bindings AND module_rec_binding . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_rec_bindings -> module_rec_bindings AND module_rec_binding

State 659:
## Known stack suffix:
## module_rec_binding
## LR(1) items:
module_rec_bindings -> module_rec_binding . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_rec_bindings -> module_rec_binding

State 660:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . rec_flag let_bindings IN seq_expr [ error TYPE STAR SEMISEMI SEMI PLUS OR OPEN MODULE MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET . MODULE UIDENT module_binding IN seq_expr [ error TYPE STAR SEMISEMI SEMI PLUS OR OPEN MODULE MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . rec_flag let_bindings [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On REC shift to state 22
-- On MODULE shift to state 600
-- On rec_flag shift to state 661
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production rec_flag ->

State 661:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr -> LET rec_flag . let_bindings IN seq_expr [ error TYPE STAR SEMISEMI SEMI PLUS OR OPEN MODULE MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET rec_flag . let_bindings [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 785
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1229
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_bindings shift to state 1232
-- On let_binding shift to state 1237
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 662:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> UNDERSCORE

State 663:
## Known stack suffix:
## SHARP
## LR(1) items:
simple_pattern -> SHARP . type_longident [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On UIDENT shift to state 60
-- On LIDENT shift to state 117
-- On type_longident shift to state 664
-- On mod_ext_longident shift to state 128
## Reductions:

State 664:
## Known stack suffix:
## SHARP type_longident
## LR(1) items:
simple_pattern -> SHARP type_longident . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> SHARP type_longident

State 665:
## Known stack suffix:
## MINUS
## LR(1) items:
signed_constant -> MINUS . INT [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
signed_constant -> MINUS . FLOAT [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
signed_constant -> MINUS . INT32 [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
signed_constant -> MINUS . INT64 [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
signed_constant -> MINUS . NATIVEINT [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On NATIVEINT shift to state 666
-- On INT64 shift to state 667
-- On INT32 shift to state 668
-- On INT shift to state 669
-- On FLOAT shift to state 670
## Reductions:

State 666:
## Known stack suffix:
## MINUS NATIVEINT
## LR(1) items:
signed_constant -> MINUS NATIVEINT . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS NATIVEINT

State 667:
## Known stack suffix:
## MINUS INT64
## LR(1) items:
signed_constant -> MINUS INT64 . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS INT64

State 668:
## Known stack suffix:
## MINUS INT32
## LR(1) items:
signed_constant -> MINUS INT32 . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS INT32

State 669:
## Known stack suffix:
## MINUS INT
## LR(1) items:
signed_constant -> MINUS INT . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS INT

State 670:
## Known stack suffix:
## MINUS FLOAT
## LR(1) items:
signed_constant -> MINUS FLOAT . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS FLOAT

State 671:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LPAREN . pattern RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LPAREN . pattern error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LPAREN . pattern COLON core_type RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LPAREN . pattern COLON core_type error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
val_ident -> LPAREN . operator RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On STAR shift to state 34
-- On SHARP shift to state 673
-- On RPAREN shift to state 675
-- On PREFIXOP shift to state 35
-- On PLUS shift to state 36
-- On OR shift to state 37
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 38
-- On MINUS shift to state 676
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LESS shift to state 40
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On INFIXOP4 shift to state 41
-- On INFIXOP3 shift to state 42
-- On INFIXOP2 shift to state 43
-- On INFIXOP1 shift to state 44
-- On INFIXOP0 shift to state 45
-- On GREATER shift to state 46
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On EQUAL shift to state 47
-- On COLONEQUAL shift to state 48
-- On CHAR shift to state 697
-- On BARBAR shift to state 49
-- On BACKQUOTE shift to state 700
-- On AMPERSAND shift to state 50
-- On AMPERAMPER shift to state 51
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 751
-- On operator shift to state 758
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 672:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> UNDERSCORE

State 673:
## Known stack suffix:
## SHARP
## LR(1) items:
simple_pattern -> SHARP . type_longident [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UIDENT shift to state 60
-- On LIDENT shift to state 219
-- On type_longident shift to state 674
-- On mod_ext_longident shift to state 221
## Reductions:

State 674:
## Known stack suffix:
## SHARP type_longident
## LR(1) items:
simple_pattern -> SHARP type_longident . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> SHARP type_longident

State 675:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_longident -> LPAREN RPAREN . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> LPAREN RPAREN

State 676:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
signed_constant -> MINUS . INT [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
signed_constant -> MINUS . FLOAT [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
signed_constant -> MINUS . INT32 [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
signed_constant -> MINUS . INT64 [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
signed_constant -> MINUS . NATIVEINT [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On NATIVEINT shift to state 677
-- On INT64 shift to state 678
-- On INT32 shift to state 679
-- On INT shift to state 680
-- On FLOAT shift to state 681
## Reductions:
-- On RPAREN
--   reduce production operator -> MINUS

State 677:
## Known stack suffix:
## MINUS NATIVEINT
## LR(1) items:
signed_constant -> MINUS NATIVEINT . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS NATIVEINT

State 678:
## Known stack suffix:
## MINUS INT64
## LR(1) items:
signed_constant -> MINUS INT64 . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS INT64

State 679:
## Known stack suffix:
## MINUS INT32
## LR(1) items:
signed_constant -> MINUS INT32 . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS INT32

State 680:
## Known stack suffix:
## MINUS INT
## LR(1) items:
signed_constant -> MINUS INT . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS INT

State 681:
## Known stack suffix:
## MINUS FLOAT
## LR(1) items:
signed_constant -> MINUS FLOAT . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> MINUS FLOAT

State 682:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ error UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE COMMA COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS ]
simple_pattern -> LPAREN . pattern RPAREN [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LPAREN . pattern error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type RPAREN [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
val_ident -> LPAREN . operator RPAREN [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On STAR shift to state 34
-- On SHARP shift to state 673
-- On RPAREN shift to state 591
-- On PREFIXOP shift to state 35
-- On PLUS shift to state 36
-- On OR shift to state 37
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 38
-- On MINUS shift to state 676
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LESS shift to state 40
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On INFIXOP4 shift to state 41
-- On INFIXOP3 shift to state 42
-- On INFIXOP2 shift to state 43
-- On INFIXOP1 shift to state 44
-- On INFIXOP0 shift to state 45
-- On GREATER shift to state 46
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On EQUAL shift to state 47
-- On COLONEQUAL shift to state 48
-- On CHAR shift to state 697
-- On BARBAR shift to state 49
-- On BACKQUOTE shift to state 700
-- On AMPERSAND shift to state 50
-- On AMPERAMPER shift to state 51
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 744
-- On operator shift to state 723
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 683:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
simple_pattern -> LBRACKETBAR . pattern_semi_list opt_semi BARRBRACKET [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACKETBAR . BARRBRACKET [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACKETBAR . pattern_semi_list opt_semi error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BARRBRACKET shift to state 739
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_semi_list shift to state 740
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 738
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 684:
## Known stack suffix:
## MINUS
## LR(1) items:
signed_constant -> MINUS . INT [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
signed_constant -> MINUS . FLOAT [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
signed_constant -> MINUS . INT32 [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
signed_constant -> MINUS . INT64 [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
signed_constant -> MINUS . NATIVEINT [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On NATIVEINT shift to state 677
-- On INT64 shift to state 678
-- On INT32 shift to state 679
-- On INT shift to state 680
-- On FLOAT shift to state 681
## Reductions:

State 685:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ error UNDERSCORE UIDENT TRUE STRING SHARP SEMI RPAREN RBRACKET RBRACE NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE COMMA COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi RBRACKET [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On RBRACKET shift to state 686
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_semi_list shift to state 732
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 738
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 686:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_longident -> LBRACKET RBRACKET . [ error VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> LBRACKET RBRACKET

State 687:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_pattern -> LBRACE . lbl_pattern_list opt_semi RBRACE [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 377
-- On mod_longident shift to state 378
-- On lbl_pattern_list shift to state 688
-- On label_longident shift to state 729
## Reductions:

State 688:
## Known stack suffix:
## LBRACE lbl_pattern_list
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list . SEMI label_longident EQUAL pattern [ error SEMI RBRACE ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi RBRACE [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On SEMI shift to state 689
-- On opt_semi shift to state 726
## Reductions:
-- On error RBRACE
--   reduce production opt_semi ->

State 689:
## Known stack suffix:
## lbl_pattern_list SEMI
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI . label_longident EQUAL pattern [ error SEMI RBRACE ]
opt_semi -> SEMI . [ error RBRACE ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 377
-- On mod_longident shift to state 378
-- On label_longident shift to state 690
## Reductions:
-- On error RBRACE
--   reduce production opt_semi -> SEMI

State 690:
## Known stack suffix:
## lbl_pattern_list SEMI label_longident
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI label_longident . EQUAL pattern [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 691
## Reductions:

State 691:
## Known stack suffix:
## lbl_pattern_list SEMI label_longident EQUAL
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL . pattern [ error SEMI RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 716
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 692:
## Known stack suffix:
## INT64
## LR(1) items:
constant -> INT64 . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT64

State 693:
## Known stack suffix:
## INT32
## LR(1) items:
constant -> INT32 . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT32

State 694:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT

State 695:
## Known stack suffix:
## FLOAT
## LR(1) items:
constant -> FLOAT . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> FLOAT

State 696:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_longident -> FALSE . [ error VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> FALSE

State 697:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On DOTDOT shift to state 698
## Reductions:
-- On error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS
--   reduce production constant -> CHAR

State 698:
## Known stack suffix:
## CHAR DOTDOT
## LR(1) items:
simple_pattern -> CHAR DOTDOT . CHAR [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On CHAR shift to state 699
## Reductions:

State 699:
## Known stack suffix:
## CHAR DOTDOT CHAR
## LR(1) items:
simple_pattern -> CHAR DOTDOT CHAR . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> CHAR DOTDOT CHAR

State 700:
## Known stack suffix:
## BACKQUOTE
## LR(1) items:
name_tag -> BACKQUOTE . ident [ error VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 79
-- On LIDENT shift to state 80
-- On ident shift to state 701
## Reductions:

State 701:
## Known stack suffix:
## BACKQUOTE ident
## LR(1) items:
name_tag -> BACKQUOTE ident . [ error VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name_tag -> BACKQUOTE ident

State 702:
## Known stack suffix:
## val_ident
## LR(1) items:
simple_pattern -> val_ident . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> val_ident

State 703:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> simple_pattern

State 704:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_pattern -> signed_constant . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> signed_constant

State 705:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
pattern -> pattern_comma_list . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern_comma_list . COMMA pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On COMMA shift to state 706
## Reductions:
-- On error SEMI RPAREN RBRACKET RBRACE COLONCOLON COLON BARRBRACKET BAR AS
--   reduce production pattern -> pattern_comma_list

State 706:
## Known stack suffix:
## pattern_comma_list COMMA
## LR(1) items:
pattern_comma_list -> pattern_comma_list COMMA . pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 707
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 707:
## Known stack suffix:
## pattern_comma_list COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern_comma_list COMMA pattern . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 708
## Reductions:
-- On error SEMI RPAREN RBRACKET RBRACE COMMA COLON BARRBRACKET BAR AS
--   reduce production pattern_comma_list -> pattern_comma_list COMMA pattern

State 708:
## Known stack suffix:
## pattern COLONCOLON
## LR(1) items:
pattern -> pattern COLONCOLON . pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 709
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 709:
## Known stack suffix:
## pattern COLONCOLON pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern COLONCOLON pattern . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 708
## Reductions:
-- On error SEMI RPAREN RBRACKET RBRACE COMMA COLON BARRBRACKET BAR AS
--   reduce production pattern -> pattern COLONCOLON pattern

State 710:
## Known stack suffix:
## name_tag
## LR(1) items:
pattern -> name_tag . pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> name_tag . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 711
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:
-- On error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS
--   reduce production simple_pattern -> name_tag

State 711:
## Known stack suffix:
## name_tag pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> name_tag pattern . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> name_tag pattern

State 712:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ error UNDERSCORE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN NATIVEINT MODULE MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END COMMA COLONCOLON COLON CLASS CHAR BARRBRACKET BAR BACKQUOTE AS ]
mod_longident -> mod_longident . DOT UIDENT [ error UNDERSCORE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN NATIVEINT MODULE MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END DOT COMMA COLONCOLON COLON CLASS CHAR BARRBRACKET BAR BACKQUOTE AS ]
## Transitions:
-- On DOT shift to state 350
## Reductions:
-- On error UNDERSCORE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN NATIVEINT MODULE MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END COMMA COLONCOLON COLON CLASS CHAR BARRBRACKET BAR BACKQUOTE AS
--   reduce production constr_longident -> mod_longident

State 713:
## Known stack suffix:
## constr_longident
## LR(1) items:
pattern -> constr_longident . pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> constr_longident . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 714
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:
-- On error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS
--   reduce production simple_pattern -> constr_longident

State 714:
## Known stack suffix:
## constr_longident pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> constr_longident pattern . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> constr_longident pattern

State 715:
## Known stack suffix:
## constant
## LR(1) items:
signed_constant -> constant . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> constant

State 716:
## Known stack suffix:
## lbl_pattern_list SEMI label_longident EQUAL pattern
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL pattern . [ error SEMI RBRACE ]
pattern -> pattern . AS val_ident [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 717
-- On COLONCOLON shift to state 708
-- On BAR shift to state 719
-- On AS shift to state 721
## Reductions:
-- On error SEMI RBRACE
--   reduce production lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL pattern

State 717:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
pattern_comma_list -> pattern COMMA . pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 718
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 718:
## Known stack suffix:
## pattern COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern COMMA pattern . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 708
## Reductions:
-- On error SEMI RPAREN RBRACKET RBRACE COMMA COLON BARRBRACKET BAR AS
--   reduce production pattern_comma_list -> pattern COMMA pattern

State 719:
## Known stack suffix:
## pattern BAR
## LR(1) items:
pattern -> pattern BAR . pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 720
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 720:
## Known stack suffix:
## pattern BAR pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern -> pattern BAR pattern . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On COMMA shift to state 717
-- On COLONCOLON shift to state 708
## Reductions:
-- On error SEMI RPAREN RBRACKET RBRACE COLON BARRBRACKET BAR AS
--   reduce production pattern -> pattern BAR pattern

State 721:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . val_ident [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On LPAREN shift to state 722
-- On LIDENT shift to state 593
-- On val_ident shift to state 725
## Reductions:

State 722:
## Known stack suffix:
## LPAREN
## LR(1) items:
val_ident -> LPAREN . operator RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 34
-- On PREFIXOP shift to state 35
-- On PLUS shift to state 36
-- On OR shift to state 37
-- On MINUSDOT shift to state 38
-- On MINUS shift to state 39
-- On LESS shift to state 40
-- On INFIXOP4 shift to state 41
-- On INFIXOP3 shift to state 42
-- On INFIXOP2 shift to state 43
-- On INFIXOP1 shift to state 44
-- On INFIXOP0 shift to state 45
-- On GREATER shift to state 46
-- On EQUAL shift to state 47
-- On COLONEQUAL shift to state 48
-- On BARBAR shift to state 49
-- On AMPERSAND shift to state 50
-- On AMPERAMPER shift to state 51
-- On operator shift to state 723
## Reductions:

State 723:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
val_ident -> LPAREN operator . RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 724
## Reductions:

State 724:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
val_ident -> LPAREN operator RPAREN . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident -> LPAREN operator RPAREN

State 725:
## Known stack suffix:
## pattern AS val_ident
## LR(1) items:
pattern -> pattern AS val_ident . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> pattern AS val_ident

State 726:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi . RBRACE [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list opt_semi . error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On error shift to state 727
-- On RBRACE shift to state 728
## Reductions:

State 727:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi error . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi error

State 728:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi RBRACE
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE

State 729:
## Known stack suffix:
## label_longident
## LR(1) items:
lbl_pattern_list -> label_longident . EQUAL pattern [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 730
## Reductions:

State 730:
## Known stack suffix:
## label_longident EQUAL
## LR(1) items:
lbl_pattern_list -> label_longident EQUAL . pattern [ error SEMI RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 731
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 731:
## Known stack suffix:
## label_longident EQUAL pattern
## LR(1) items:
lbl_pattern_list -> label_longident EQUAL pattern . [ error SEMI RBRACE ]
pattern -> pattern . AS val_ident [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 717
-- On COLONCOLON shift to state 708
-- On BAR shift to state 719
-- On AS shift to state 721
## Reductions:
-- On error SEMI RBRACE
--   reduce production lbl_pattern_list -> label_longident EQUAL pattern

State 732:
## Known stack suffix:
## LBRACKET pattern_semi_list
## LR(1) items:
pattern_semi_list -> pattern_semi_list . SEMI pattern [ error SEMI RBRACKET ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi RBRACKET [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On SEMI shift to state 733
-- On opt_semi shift to state 735
## Reductions:
-- On error RBRACKET
--   reduce production opt_semi ->

State 733:
## Known stack suffix:
## pattern_semi_list SEMI
## LR(1) items:
opt_semi -> SEMI . [ error RBRACKET BARRBRACKET ]
pattern_semi_list -> pattern_semi_list SEMI . pattern [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 734
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:
-- On error RBRACKET BARRBRACKET
--   reduce production opt_semi -> SEMI

State 734:
## Known stack suffix:
## pattern_semi_list SEMI pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RBRACKET COMMA COLONCOLON BARRBRACKET BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACKET COMMA COLONCOLON BARRBRACKET BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACKET COMMA COLONCOLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACKET COMMA COLONCOLON BARRBRACKET BAR AS ]
pattern_semi_list -> pattern_semi_list SEMI pattern . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On COMMA shift to state 717
-- On COLONCOLON shift to state 708
-- On BAR shift to state 719
-- On AS shift to state 721
## Reductions:
-- On error SEMI RBRACKET BARRBRACKET
--   reduce production pattern_semi_list -> pattern_semi_list SEMI pattern

State 735:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi . RBRACKET [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list opt_semi . error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On error shift to state 736
-- On RBRACKET shift to state 737
## Reductions:

State 736:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi error . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi error

State 737:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi RBRACKET
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET

State 738:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RBRACKET COMMA COLONCOLON BARRBRACKET BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACKET COMMA COLONCOLON BARRBRACKET BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACKET COMMA COLONCOLON BARRBRACKET BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACKET COMMA COLONCOLON BARRBRACKET BAR AS ]
pattern_semi_list -> pattern . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On COMMA shift to state 717
-- On COLONCOLON shift to state 708
-- On BAR shift to state 719
-- On AS shift to state 721
## Reductions:
-- On error SEMI RBRACKET BARRBRACKET
--   reduce production pattern_semi_list -> pattern

State 739:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
simple_pattern -> LBRACKETBAR BARRBRACKET . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKETBAR BARRBRACKET

State 740:
## Known stack suffix:
## LBRACKETBAR pattern_semi_list
## LR(1) items:
pattern_semi_list -> pattern_semi_list . SEMI pattern [ error SEMI BARRBRACKET ]
simple_pattern -> LBRACKETBAR pattern_semi_list . opt_semi BARRBRACKET [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACKETBAR pattern_semi_list . opt_semi error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On SEMI shift to state 733
-- On opt_semi shift to state 741
## Reductions:
-- On error BARRBRACKET
--   reduce production opt_semi ->

State 741:
## Known stack suffix:
## LBRACKETBAR pattern_semi_list opt_semi
## LR(1) items:
simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi . BARRBRACKET [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi . error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On error shift to state 742
-- On BARRBRACKET shift to state 743
## Reductions:

State 742:
## Known stack suffix:
## LBRACKETBAR pattern_semi_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi error . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi error

State 743:
## Known stack suffix:
## LBRACKETBAR pattern_semi_list opt_semi BARRBRACKET
## LR(1) items:
simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi BARRBRACKET . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi BARRBRACKET

State 744:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . RPAREN [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LPAREN pattern . error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type RPAREN [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On error shift to state 745
-- On RPAREN shift to state 746
-- On COMMA shift to state 717
-- On COLONCOLON shift to state 708
-- On COLON shift to state 747
-- On BAR shift to state 719
-- On AS shift to state 721
## Reductions:

State 745:
## Known stack suffix:
## LPAREN pattern error
## LR(1) items:
simple_pattern -> LPAREN pattern error . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern error

State 746:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern RPAREN . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern RPAREN

State 747:
## Known stack suffix:
## LPAREN pattern COLON
## LR(1) items:
simple_pattern -> LPAREN pattern COLON . core_type RPAREN [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LPAREN pattern COLON . core_type error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 748
## Reductions:

State 748:
## Known stack suffix:
## LPAREN pattern COLON core_type
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type . RPAREN [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
simple_pattern -> LPAREN pattern COLON core_type . error [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
-- On error shift to state 749
-- On RPAREN shift to state 750
## Reductions:

State 749:
## Known stack suffix:
## LPAREN pattern COLON core_type error
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type error . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern COLON core_type error

State 750:
## Known stack suffix:
## LPAREN pattern COLON core_type RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type RPAREN . [ error SEMI RPAREN RBRACKET RBRACE COMMA COLONCOLON COLON BARRBRACKET BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern COLON core_type RPAREN

State 751:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LPAREN pattern . error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LPAREN pattern . COLON core_type RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LPAREN pattern . COLON core_type error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On error shift to state 752
-- On RPAREN shift to state 753
-- On COMMA shift to state 717
-- On COLONCOLON shift to state 708
-- On COLON shift to state 754
-- On BAR shift to state 719
-- On AS shift to state 721
## Reductions:

State 752:
## Known stack suffix:
## LPAREN pattern error
## LR(1) items:
simple_pattern -> LPAREN pattern error . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern error

State 753:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern RPAREN . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern RPAREN

State 754:
## Known stack suffix:
## LPAREN pattern COLON
## LR(1) items:
simple_pattern -> LPAREN pattern COLON . core_type RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LPAREN pattern COLON . core_type error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On UNDERSCORE shift to state 59
-- On UIDENT shift to state 60
-- On SHARP shift to state 61
-- On QUOTE shift to state 78
-- On QUESTION shift to state 82
-- On OPTLABEL shift to state 210
-- On LPAREN shift to state 213
-- On LIDENT shift to state 224
-- On LESS shift to state 228
-- On LBRACKETLESS shift to state 232
-- On LBRACKET shift to state 239
-- On type_longident shift to state 254
-- On simple_core_type_or_tuple shift to state 255
-- On simple_core_type2 shift to state 256
-- On simple_core_type shift to state 261
-- On mod_ext_longident shift to state 221
-- On core_type2 shift to state 272
-- On core_type shift to state 755
## Reductions:

State 755:
## Known stack suffix:
## LPAREN pattern COLON core_type
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type . RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LPAREN pattern COLON core_type . error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On error shift to state 756
-- On RPAREN shift to state 757
## Reductions:

State 756:
## Known stack suffix:
## LPAREN pattern COLON core_type error
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type error . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern COLON core_type error

State 757:
## Known stack suffix:
## LPAREN pattern COLON core_type RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type RPAREN . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern COLON core_type RPAREN

State 758:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
val_ident -> LPAREN operator . RPAREN [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 759
## Reductions:

State 759:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
val_ident -> LPAREN operator RPAREN . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident -> LPAREN operator RPAREN

State 760:
## Known stack suffix:
## LIDENT
## LR(1) items:
val_ident -> LIDENT . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident -> LIDENT

State 761:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
simple_pattern -> LBRACKETBAR . pattern_semi_list opt_semi BARRBRACKET [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACKETBAR . BARRBRACKET [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACKETBAR . pattern_semi_list opt_semi error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BARRBRACKET shift to state 762
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_semi_list shift to state 763
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 738
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 762:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
simple_pattern -> LBRACKETBAR BARRBRACKET . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKETBAR BARRBRACKET

State 763:
## Known stack suffix:
## LBRACKETBAR pattern_semi_list
## LR(1) items:
pattern_semi_list -> pattern_semi_list . SEMI pattern [ error SEMI BARRBRACKET ]
simple_pattern -> LBRACKETBAR pattern_semi_list . opt_semi BARRBRACKET [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACKETBAR pattern_semi_list . opt_semi error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On SEMI shift to state 733
-- On opt_semi shift to state 764
## Reductions:
-- On error BARRBRACKET
--   reduce production opt_semi ->

State 764:
## Known stack suffix:
## LBRACKETBAR pattern_semi_list opt_semi
## LR(1) items:
simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi . BARRBRACKET [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi . error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On error shift to state 765
-- On BARRBRACKET shift to state 766
## Reductions:

State 765:
## Known stack suffix:
## LBRACKETBAR pattern_semi_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi error . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi error

State 766:
## Known stack suffix:
## LBRACKETBAR pattern_semi_list opt_semi BARRBRACKET
## LR(1) items:
simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi BARRBRACKET . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKETBAR pattern_semi_list opt_semi BARRBRACKET

State 767:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi RBRACKET [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On UNDERSCORE shift to state 672
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On SHARP shift to state 673
-- On RBRACKET shift to state 597
-- On NATIVEINT shift to state 589
-- On MINUS shift to state 684
-- On LPAREN shift to state 682
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 683
-- On LBRACKET shift to state 685
-- On LBRACE shift to state 687
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 697
-- On BACKQUOTE shift to state 700
-- On val_ident shift to state 702
-- On simple_pattern shift to state 703
-- On signed_constant shift to state 704
-- On pattern_semi_list shift to state 768
-- On pattern_comma_list shift to state 705
-- On pattern shift to state 738
-- On name_tag shift to state 710
-- On mod_longident shift to state 712
-- On constr_longident shift to state 713
-- On constant shift to state 715
## Reductions:

State 768:
## Known stack suffix:
## LBRACKET pattern_semi_list
## LR(1) items:
pattern_semi_list -> pattern_semi_list . SEMI pattern [ error SEMI RBRACKET ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi RBRACKET [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On SEMI shift to state 733
-- On opt_semi shift to state 769
## Reductions:
-- On error RBRACKET
--   reduce production opt_semi ->

State 769:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi . RBRACKET [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACKET pattern_semi_list opt_semi . error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On error shift to state 770
-- On RBRACKET shift to state 771
## Reductions:

State 770:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi error . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi error

State 771:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi RBRACKET
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET

State 772:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_pattern -> LBRACE . lbl_pattern_list opt_semi RBRACE [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 377
-- On mod_longident shift to state 378
-- On lbl_pattern_list shift to state 773
-- On label_longident shift to state 729
## Reductions:

State 773:
## Known stack suffix:
## LBRACE lbl_pattern_list
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list . SEMI label_longident EQUAL pattern [ error SEMI RBRACE ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi RBRACE [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On SEMI shift to state 689
-- On opt_semi shift to state 774
## Reductions:
-- On error RBRACE
--   reduce production opt_semi ->

State 774:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi . RBRACE [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> LBRACE lbl_pattern_list opt_semi . error [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On error shift to state 775
-- On RBRACE shift to state 776
## Reductions:

State 775:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi error . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi error

State 776:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi RBRACE
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE

State 777:
## Known stack suffix:
## INT64
## LR(1) items:
constant -> INT64 . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT64

State 778:
## Known stack suffix:
## INT32
## LR(1) items:
constant -> INT32 . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT32

State 779:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT

State 780:
## Known stack suffix:
## FLOAT
## LR(1) items:
constant -> FLOAT . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> FLOAT

State 781:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_longident -> FALSE . [ WITH WHEN UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> FALSE

State 782:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On DOTDOT shift to state 783
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS
--   reduce production constant -> CHAR

State 783:
## Known stack suffix:
## CHAR DOTDOT
## LR(1) items:
simple_pattern -> CHAR DOTDOT . CHAR [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On CHAR shift to state 784
## Reductions:

State 784:
## Known stack suffix:
## CHAR DOTDOT CHAR
## LR(1) items:
simple_pattern -> CHAR DOTDOT CHAR . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> CHAR DOTDOT CHAR

State 785:
## Known stack suffix:
## val_ident
## LR(1) items:
let_binding -> val_ident . fun_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION END CLASS AND ]
simple_pattern -> val_ident . [ EQUAL COMMA COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EQUAL shift to state 1212
-- On COLONGREATER shift to state 1214
-- On COLON shift to state 1217
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On type_constraint shift to state 1222
-- On strict_binding shift to state 1225
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1226
-- On fun_binding shift to state 1228
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:
-- On COMMA COLONCOLON BAR AS
--   reduce production simple_pattern -> val_ident

State 786:
## Known stack suffix:
## TILDE
## LR(1) items:
labeled_simple_pattern -> TILDE . LPAREN label_let_pattern RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
labeled_simple_pattern -> TILDE . label_var [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On LPAREN shift to state 787
-- On LIDENT shift to state 788
-- On label_var shift to state 794
## Reductions:

State 787:
## Known stack suffix:
## TILDE LPAREN
## LR(1) items:
labeled_simple_pattern -> TILDE LPAREN . label_let_pattern RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On LIDENT shift to state 788
-- On label_var shift to state 789
-- On label_let_pattern shift to state 792
## Reductions:

State 788:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_var -> LIDENT . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_var -> LIDENT

State 789:
## Known stack suffix:
## label_var
## LR(1) items:
label_let_pattern -> label_var . [ RPAREN EQUAL ]
label_let_pattern -> label_var . COLON core_type [ RPAREN EQUAL ]
## Transitions:
-- On COLON shift to state 790
## Reductions:
-- On RPAREN EQUAL
--   reduce production label_let_pattern -> label_var

State 790:
## Known stack suffix:
## label_var COLON
## LR(1) items:
label_let_pattern -> label_var COLON . core_type [ RPAREN EQUAL ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 791
## Reductions:

State 791:
## Known stack suffix:
## label_var COLON core_type
## LR(1) items:
label_let_pattern -> label_var COLON core_type . [ RPAREN EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_let_pattern -> label_var COLON core_type

State 792:
## Known stack suffix:
## TILDE LPAREN label_let_pattern
## LR(1) items:
labeled_simple_pattern -> TILDE LPAREN label_let_pattern . RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On RPAREN shift to state 793
## Reductions:

State 793:
## Known stack suffix:
## TILDE LPAREN label_let_pattern RPAREN
## LR(1) items:
labeled_simple_pattern -> TILDE LPAREN label_let_pattern RPAREN . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_pattern -> TILDE LPAREN label_let_pattern RPAREN

State 794:
## Known stack suffix:
## TILDE label_var
## LR(1) items:
labeled_simple_pattern -> TILDE label_var . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_pattern -> TILDE label_var

State 795:
## Known stack suffix:
## QUESTION
## LR(1) items:
labeled_simple_pattern -> QUESTION . LPAREN label_let_pattern opt_default RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
labeled_simple_pattern -> QUESTION . label_var [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On LPAREN shift to state 796
-- On LIDENT shift to state 788
-- On label_var shift to state 1211
## Reductions:

State 796:
## Known stack suffix:
## QUESTION LPAREN
## LR(1) items:
labeled_simple_pattern -> QUESTION LPAREN . label_let_pattern opt_default RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On LIDENT shift to state 788
-- On label_var shift to state 789
-- On label_let_pattern shift to state 797
## Reductions:

State 797:
## Known stack suffix:
## QUESTION LPAREN label_let_pattern
## LR(1) items:
labeled_simple_pattern -> QUESTION LPAREN label_let_pattern . opt_default RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On EQUAL shift to state 798
-- On opt_default shift to state 1209
## Reductions:
-- On RPAREN
--   reduce production opt_default ->

State 798:
## Known stack suffix:
## EQUAL
## LR(1) items:
opt_default -> EQUAL . seq_expr [ RPAREN ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1208
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 799:
## Known stack suffix:
## LBRACELESS
## LR(1) items:
simple_expr -> LBRACELESS . field_expr_list opt_semi GREATERRBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . field_expr_list opt_semi error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . GREATERRBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 103
-- On GREATERRBRACE shift to state 800
-- On label shift to state 801
-- On field_expr_list shift to state 1204
## Reductions:

State 800:
## Known stack suffix:
## LBRACELESS GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS GREATERRBRACE . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS GREATERRBRACE

State 801:
## Known stack suffix:
## label
## LR(1) items:
field_expr_list -> label . EQUAL expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On EQUAL shift to state 802
## Reductions:

State 802:
## Known stack suffix:
## label EQUAL
## LR(1) items:
field_expr_list -> label EQUAL . expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1203
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 803:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On RBRACKET shift to state 686
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_semi_list shift to state 1196
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1202
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 804:
## Known stack suffix:
## LBRACELESS
## LR(1) items:
simple_expr -> LBRACELESS . field_expr_list opt_semi GREATERRBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . field_expr_list opt_semi error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . GREATERRBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 103
-- On GREATERRBRACE shift to state 805
-- On label shift to state 801
-- On field_expr_list shift to state 806
## Reductions:

State 805:
## Known stack suffix:
## LBRACELESS GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS GREATERRBRACE . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS GREATERRBRACE

State 806:
## Known stack suffix:
## LBRACELESS field_expr_list
## LR(1) items:
field_expr_list -> field_expr_list . SEMI label EQUAL expr [ error SEMI GREATERRBRACE ]
simple_expr -> LBRACELESS field_expr_list . opt_semi GREATERRBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS field_expr_list . opt_semi error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 807
-- On opt_semi shift to state 1193
## Reductions:
-- On error GREATERRBRACE
--   reduce production opt_semi ->

State 807:
## Known stack suffix:
## field_expr_list SEMI
## LR(1) items:
field_expr_list -> field_expr_list SEMI . label EQUAL expr [ error SEMI GREATERRBRACE ]
opt_semi -> SEMI . [ error GREATERRBRACE ]
## Transitions:
-- On LIDENT shift to state 103
-- On label shift to state 808
## Reductions:
-- On error GREATERRBRACE
--   reduce production opt_semi -> SEMI

State 808:
## Known stack suffix:
## field_expr_list SEMI label
## LR(1) items:
field_expr_list -> field_expr_list SEMI label . EQUAL expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On EQUAL shift to state 809
## Reductions:

State 809:
## Known stack suffix:
## field_expr_list SEMI label EQUAL
## LR(1) items:
field_expr_list -> field_expr_list SEMI label EQUAL . expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1192
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 810:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_expr -> LBRACE . record_expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . record_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 811
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 1170
-- On record_expr shift to state 1189
-- On name_tag shift to state 880
-- On mod_longident shift to state 1184
-- On lbl_expr_list shift to state 1187
-- On label_longident shift to state 1178
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:

State 811:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ EQUAL ]
val_ident -> LIDENT . [ WITH SHARP DOT ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production label_longident -> LIDENT
-- On WITH SHARP DOT
--   reduce production val_ident -> LIDENT

State 812:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_expr -> LBRACE . record_expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . record_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 811
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 1170
-- On record_expr shift to state 1181
-- On name_tag shift to state 880
-- On mod_longident shift to state 1184
-- On lbl_expr_list shift to state 1187
-- On label_longident shift to state 1178
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:

State 813:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CHAR

State 814:
## Known stack suffix:
## BEGIN
## LR(1) items:
simple_expr -> BEGIN . seq_expr END [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN . END [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN . seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On END shift to state 1166
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1167
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 815:
## Known stack suffix:
## LAZY
## LR(1) items:
expr -> LAZY . simple_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 1165
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:

State 816:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CHAR

State 817:
## Known stack suffix:
## BEGIN
## LR(1) items:
simple_expr -> BEGIN . seq_expr END [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN . END [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN . seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On END shift to state 1161
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1162
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 818:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . seq_expr THEN expr ELSE expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> IF . seq_expr THEN expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1156
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 819:
## Known stack suffix:
## LAZY
## LR(1) items:
expr -> LAZY . simple_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 822
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:

State 820:
## Known stack suffix:
## val_longident
## LR(1) items:
simple_expr -> val_longident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> val_longident

State 821:
## Known stack suffix:
## val_ident
## LR(1) items:
val_longident -> val_ident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_longident -> val_ident

State 822:
## Known stack suffix:
## LAZY simple_expr
## LR(1) items:
expr -> LAZY simple_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 823
-- On DOT shift to state 825
## Reductions:
-- On WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> LAZY simple_expr

State 823:
## Known stack suffix:
## simple_expr SHARP
## LR(1) items:
simple_expr -> simple_expr SHARP . label [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 103
-- On label shift to state 824
## Reductions:

State 824:
## Known stack suffix:
## simple_expr SHARP label
## LR(1) items:
simple_expr -> simple_expr SHARP label . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr SHARP label

State 825:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
simple_expr -> simple_expr DOT . label_longident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACE expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACE expr_comma_list error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 826
-- On LIDENT shift to state 377
-- On LBRACKET shift to state 1149
-- On LBRACE shift to state 1152
-- On mod_longident shift to state 378
-- On label_longident shift to state 1155
## Reductions:

State 826:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1147
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 827:
## Known stack suffix:
## FUNCTION
## LR(1) items:
expr -> FUNCTION . opt_bar match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 113
-- On opt_bar shift to state 828
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production opt_bar ->

State 828:
## Known stack suffix:
## FUNCTION opt_bar
## LR(1) items:
expr -> FUNCTION opt_bar . match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 843
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On match_cases shift to state 1143
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 829:
## Known stack suffix:
## val_ident
## LR(1) items:
simple_pattern -> val_ident . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> val_ident

State 830:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> simple_pattern

State 831:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_pattern -> signed_constant . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> signed_constant

State 832:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
pattern -> pattern_comma_list . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern_comma_list . COMMA pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COMMA shift to state 833
## Reductions:
-- On WHEN RPAREN MINUSGREATER EQUAL COLONCOLON COLON BAR AS
--   reduce production pattern -> pattern_comma_list

State 833:
## Known stack suffix:
## pattern_comma_list COMMA
## LR(1) items:
pattern_comma_list -> pattern_comma_list COMMA . pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 834
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 834:
## Known stack suffix:
## pattern_comma_list COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern_comma_list COMMA pattern . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 835
## Reductions:
-- On WHEN RPAREN MINUSGREATER EQUAL COMMA COLON BAR AS
--   reduce production pattern_comma_list -> pattern_comma_list COMMA pattern

State 835:
## Known stack suffix:
## pattern COLONCOLON
## LR(1) items:
pattern -> pattern COLONCOLON . pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 836
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 836:
## Known stack suffix:
## pattern COLONCOLON pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern COLONCOLON pattern . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 835
## Reductions:
-- On WHEN RPAREN MINUSGREATER EQUAL COMMA COLON BAR AS
--   reduce production pattern -> pattern COLONCOLON pattern

State 837:
## Known stack suffix:
## name_tag
## LR(1) items:
pattern -> name_tag . pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> name_tag . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 838
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:
-- On WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> name_tag

State 838:
## Known stack suffix:
## name_tag pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> name_tag pattern . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> name_tag pattern

State 839:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ WHEN UNDERSCORE UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI RPAREN QUESTION OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BAR BACKQUOTE AS ]
mod_longident -> mod_longident . DOT UIDENT [ WHEN UNDERSCORE UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI RPAREN QUESTION OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF DOT COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BAR BACKQUOTE AS ]
## Transitions:
-- On DOT shift to state 394
## Reductions:
-- On WHEN UNDERSCORE UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI RPAREN QUESTION OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BAR BACKQUOTE AS
--   reduce production constr_longident -> mod_longident

State 840:
## Known stack suffix:
## constr_longident
## LR(1) items:
pattern -> constr_longident . pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> constr_longident . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 841
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:
-- On WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> constr_longident

State 841:
## Known stack suffix:
## constr_longident pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> constr_longident pattern . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> constr_longident pattern

State 842:
## Known stack suffix:
## constant
## LR(1) items:
signed_constant -> constant . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BAR BACKQUOTE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> constant

State 843:
## Known stack suffix:
## pattern
## LR(1) items:
match_cases -> pattern . match_action [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 844
-- On MINUSGREATER shift to state 901
-- On COMMA shift to state 854
-- On COLONCOLON shift to state 835
-- On BAR shift to state 858
-- On AS shift to state 860
-- On match_action shift to state 1142
## Reductions:

State 844:
## Known stack suffix:
## WHEN
## LR(1) items:
match_action -> WHEN . seq_expr MINUSGREATER seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1139
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 845:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . seq_expr THEN expr ELSE expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> IF . seq_expr THEN expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1134
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 846:
## Known stack suffix:
## FUNCTION
## LR(1) items:
expr -> FUNCTION . opt_bar match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 113
-- On opt_bar shift to state 847
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production opt_bar ->

State 847:
## Known stack suffix:
## FUNCTION opt_bar
## LR(1) items:
expr -> FUNCTION opt_bar . match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 848
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On match_cases shift to state 1130
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 848:
## Known stack suffix:
## pattern
## LR(1) items:
match_cases -> pattern . match_action [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 849
-- On MINUSGREATER shift to state 874
-- On COMMA shift to state 854
-- On COLONCOLON shift to state 835
-- On BAR shift to state 858
-- On AS shift to state 860
-- On match_action shift to state 1129
## Reductions:

State 849:
## Known stack suffix:
## WHEN
## LR(1) items:
match_action -> WHEN . seq_expr MINUSGREATER seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1126
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 850:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . labeled_simple_pattern fun_def [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 873
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 851:
## Known stack suffix:
## OPTLABEL
## LR(1) items:
labeled_simple_pattern -> OPTLABEL . LPAREN let_pattern opt_default RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
labeled_simple_pattern -> OPTLABEL . pattern_var [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On LPAREN shift to state 852
-- On LIDENT shift to state 866
-- On pattern_var shift to state 867
## Reductions:

State 852:
## Known stack suffix:
## OPTLABEL LPAREN
## LR(1) items:
labeled_simple_pattern -> OPTLABEL LPAREN . let_pattern opt_default RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 853
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_pattern shift to state 863
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 853:
## Known stack suffix:
## pattern
## LR(1) items:
let_pattern -> pattern . [ RPAREN EQUAL ]
let_pattern -> pattern . COLON core_type [ RPAREN EQUAL ]
pattern -> pattern . AS val_ident [ RPAREN EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ RPAREN EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ RPAREN EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ RPAREN EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COMMA shift to state 854
-- On COLONCOLON shift to state 835
-- On COLON shift to state 856
-- On BAR shift to state 858
-- On AS shift to state 860
## Reductions:
-- On RPAREN EQUAL
--   reduce production let_pattern -> pattern

State 854:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
pattern_comma_list -> pattern COMMA . pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 855
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 855:
## Known stack suffix:
## pattern COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern COMMA pattern . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 835
## Reductions:
-- On WHEN RPAREN MINUSGREATER EQUAL COMMA COLON BAR AS
--   reduce production pattern_comma_list -> pattern COMMA pattern

State 856:
## Known stack suffix:
## pattern COLON
## LR(1) items:
let_pattern -> pattern COLON . core_type [ RPAREN EQUAL ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 857
## Reductions:

State 857:
## Known stack suffix:
## pattern COLON core_type
## LR(1) items:
let_pattern -> pattern COLON core_type . [ RPAREN EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_pattern -> pattern COLON core_type

State 858:
## Known stack suffix:
## pattern BAR
## LR(1) items:
pattern -> pattern BAR . pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 859
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 859:
## Known stack suffix:
## pattern BAR pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern BAR pattern . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COMMA shift to state 854
-- On COLONCOLON shift to state 835
## Reductions:
-- On WHEN RPAREN MINUSGREATER EQUAL COLON BAR AS
--   reduce production pattern -> pattern BAR pattern

State 860:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . val_ident [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On LPAREN shift to state 861
-- On LIDENT shift to state 760
-- On val_ident shift to state 862
## Reductions:

State 861:
## Known stack suffix:
## LPAREN
## LR(1) items:
val_ident -> LPAREN . operator RPAREN [ WITH WHEN UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 34
-- On PREFIXOP shift to state 35
-- On PLUS shift to state 36
-- On OR shift to state 37
-- On MINUSDOT shift to state 38
-- On MINUS shift to state 39
-- On LESS shift to state 40
-- On INFIXOP4 shift to state 41
-- On INFIXOP3 shift to state 42
-- On INFIXOP2 shift to state 43
-- On INFIXOP1 shift to state 44
-- On INFIXOP0 shift to state 45
-- On GREATER shift to state 46
-- On EQUAL shift to state 47
-- On COLONEQUAL shift to state 48
-- On BARBAR shift to state 49
-- On AMPERSAND shift to state 50
-- On AMPERAMPER shift to state 51
-- On operator shift to state 758
## Reductions:

State 862:
## Known stack suffix:
## pattern AS val_ident
## LR(1) items:
pattern -> pattern AS val_ident . [ WHEN RPAREN MINUSGREATER EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> pattern AS val_ident

State 863:
## Known stack suffix:
## OPTLABEL LPAREN let_pattern
## LR(1) items:
labeled_simple_pattern -> OPTLABEL LPAREN let_pattern . opt_default RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On EQUAL shift to state 798
-- On opt_default shift to state 864
## Reductions:
-- On RPAREN
--   reduce production opt_default ->

State 864:
## Known stack suffix:
## OPTLABEL LPAREN let_pattern opt_default
## LR(1) items:
labeled_simple_pattern -> OPTLABEL LPAREN let_pattern opt_default . RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On RPAREN shift to state 865
## Reductions:

State 865:
## Known stack suffix:
## OPTLABEL LPAREN let_pattern opt_default RPAREN
## LR(1) items:
labeled_simple_pattern -> OPTLABEL LPAREN let_pattern opt_default RPAREN . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_pattern -> OPTLABEL LPAREN let_pattern opt_default RPAREN

State 866:
## Known stack suffix:
## LIDENT
## LR(1) items:
pattern_var -> LIDENT . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern_var -> LIDENT

State 867:
## Known stack suffix:
## OPTLABEL pattern_var
## LR(1) items:
labeled_simple_pattern -> OPTLABEL pattern_var . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_pattern -> OPTLABEL pattern_var

State 868:
## Known stack suffix:
## LABEL
## LR(1) items:
labeled_simple_pattern -> LABEL . simple_pattern [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 869
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 869:
## Known stack suffix:
## LABEL simple_pattern
## LR(1) items:
labeled_simple_pattern -> LABEL simple_pattern . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_pattern -> LABEL simple_pattern

State 870:
## Known stack suffix:
## name_tag
## LR(1) items:
simple_pattern -> name_tag . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> name_tag

State 871:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_pattern -> constr_longident . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> constr_longident

State 872:
## Known stack suffix:
## simple_pattern
## LR(1) items:
labeled_simple_pattern -> simple_pattern . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_pattern -> simple_pattern

State 873:
## Known stack suffix:
## FUN labeled_simple_pattern
## LR(1) items:
expr -> FUN labeled_simple_pattern . fun_def [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 849
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUSGREATER shift to state 874
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On match_action shift to state 1122
-- On labeled_simple_pattern shift to state 1123
-- On fun_def shift to state 1125
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 874:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
match_action -> MINUSGREATER . seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1121
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 875:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 861
-- On LIDENT shift to state 760
-- On val_ident shift to state 876
## Reductions:

State 876:
## Known stack suffix:
## FOR val_ident
## LR(1) items:
expr -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On EQUAL shift to state 877
## Reductions:

State 877:
## Known stack suffix:
## FOR val_ident EQUAL
## LR(1) items:
expr -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1115
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 878:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr -> ASSERT . simple_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 879
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:

State 879:
## Known stack suffix:
## ASSERT simple_expr
## LR(1) items:
expr -> ASSERT simple_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 823
-- On DOT shift to state 825
## Reductions:
-- On WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> ASSERT simple_expr

State 880:
## Known stack suffix:
## name_tag
## LR(1) items:
simple_expr -> name_tag . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> name_tag

State 881:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident . DOT val_ident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DOT shift to state 882
## Reductions:
-- On WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> mod_longident

State 882:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident DOT . val_ident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 11
-- On LPAREN shift to state 861
-- On LIDENT shift to state 760
-- On val_ident shift to state 883
## Reductions:

State 883:
## Known stack suffix:
## mod_longident DOT val_ident
## LR(1) items:
val_longident -> mod_longident DOT val_ident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_longident -> mod_longident DOT val_ident

State 884:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> constr_longident

State 885:
## Known stack suffix:
## constant
## LR(1) items:
simple_expr -> constant . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> constant

State 886:
## Known stack suffix:
## subtractive
## LR(1) items:
expr -> subtractive . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 1114
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 887:
## Known stack suffix:
## simple_expr
## LR(1) items:
expr -> simple_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . simple_labeled_expr_list [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT label_longident LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LPAREN seq_expr RPAREN LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LBRACE expr RBRACE LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 888
-- On STRING shift to state 5
-- On SHARP shift to state 823
-- On QUESTION shift to state 891
-- On PREFIXOP shift to state 6
-- On OPTLABEL shift to state 893
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LABEL shift to state 895
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On DOT shift to state 897
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_labeled_expr_list shift to state 1109
-- On simple_expr shift to state 1110
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On labeled_simple_expr shift to state 1113
-- On label_expr shift to state 1112
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:
-- On WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> simple_expr

State 888:
## Known stack suffix:
## TILDE
## LR(1) items:
label_expr -> TILDE . label_ident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 889
-- On label_ident shift to state 890
## Reductions:

State 889:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_ident -> LIDENT . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_ident -> LIDENT

State 890:
## Known stack suffix:
## TILDE label_ident
## LR(1) items:
label_expr -> TILDE label_ident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_expr -> TILDE label_ident

State 891:
## Known stack suffix:
## QUESTION
## LR(1) items:
label_expr -> QUESTION . label_ident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 889
-- On label_ident shift to state 892
## Reductions:

State 892:
## Known stack suffix:
## QUESTION label_ident
## LR(1) items:
label_expr -> QUESTION label_ident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_expr -> QUESTION label_ident

State 893:
## Known stack suffix:
## OPTLABEL
## LR(1) items:
label_expr -> OPTLABEL . simple_expr [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 894
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:

State 894:
## Known stack suffix:
## OPTLABEL simple_expr
## LR(1) items:
label_expr -> OPTLABEL simple_expr . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 823
-- On DOT shift to state 825
## Reductions:
-- On WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production label_expr -> OPTLABEL simple_expr

State 895:
## Known stack suffix:
## LABEL
## LR(1) items:
label_expr -> LABEL . simple_expr [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 896
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:

State 896:
## Known stack suffix:
## LABEL simple_expr
## LR(1) items:
label_expr -> LABEL simple_expr . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 823
-- On DOT shift to state 825
## Reductions:
-- On WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production label_expr -> LABEL simple_expr

State 897:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
expr -> simple_expr DOT . label_longident LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LPAREN seq_expr RPAREN LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LBRACE expr RBRACE LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . label_longident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACE expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACE expr_comma_list error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 898
-- On LIDENT shift to state 377
-- On LBRACKET shift to state 1093
-- On LBRACE shift to state 1099
-- On mod_longident shift to state 378
-- On label_longident shift to state 1106
## Reductions:

State 898:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
expr -> simple_expr DOT LPAREN . seq_expr RPAREN LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1088
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 899:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . labeled_simple_pattern fun_def [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 900
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 900:
## Known stack suffix:
## FUN labeled_simple_pattern
## LR(1) items:
expr -> FUN labeled_simple_pattern . fun_def [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 844
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUSGREATER shift to state 901
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On match_action shift to state 1084
-- On labeled_simple_pattern shift to state 1085
-- On fun_def shift to state 1087
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 901:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
match_action -> MINUSGREATER . seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1083
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 902:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 861
-- On LIDENT shift to state 760
-- On val_ident shift to state 903
## Reductions:

State 903:
## Known stack suffix:
## FOR val_ident
## LR(1) items:
expr -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On EQUAL shift to state 904
## Reductions:

State 904:
## Known stack suffix:
## FOR val_ident EQUAL
## LR(1) items:
expr -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 905
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 905:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On TO shift to state 906
-- On DOWNTO shift to state 907
-- On direction_flag shift to state 908
## Reductions:

State 906:
## Known stack suffix:
## TO
## LR(1) items:
direction_flag -> TO . [ WHILE UIDENT TRY TRUE STRING PREFIXOP NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BACKQUOTE ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direction_flag -> TO

State 907:
## Known stack suffix:
## DOWNTO
## LR(1) items:
direction_flag -> DOWNTO . [ WHILE UIDENT TRY TRUE STRING PREFIXOP NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BACKQUOTE ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direction_flag -> DOWNTO

State 908:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 909
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 909:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 910
## Reductions:

State 910:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 911
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 911:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DONE shift to state 912
## Reductions:

State 912:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE

State 913:
## Known stack suffix:
## name_tag
## LR(1) items:
expr -> name_tag . simple_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> name_tag . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 914
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:
-- On WITH TYPE TO TILDE THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PLUS OR OPTLABEL OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS LABEL INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> name_tag

State 914:
## Known stack suffix:
## name_tag simple_expr
## LR(1) items:
expr -> name_tag simple_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 823
-- On DOT shift to state 825
## Reductions:
-- On WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> name_tag simple_expr

State 915:
## Known stack suffix:
## label
## LR(1) items:
expr -> label . LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 916
## Reductions:

State 916:
## Known stack suffix:
## label LESSMINUS
## LR(1) items:
expr -> label LESSMINUS . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 956
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 917:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
expr -> expr_comma_list . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 918
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr_comma_list

State 918:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 919
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 919:
## Known stack suffix:
## expr_comma_list COMMA expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list COMMA expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BAR AND
--   reduce production expr_comma_list -> expr_comma_list COMMA expr

State 920:
## Known stack suffix:
## expr STAR
## LR(1) items:
expr -> expr STAR . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 921
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 921:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr STAR expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 922
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr STAR expr

State 922:
## Known stack suffix:
## expr INFIXOP4
## LR(1) items:
expr -> expr INFIXOP4 . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 923
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 923:
## Known stack suffix:
## expr INFIXOP4 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP4 expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 922
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP4 expr

State 924:
## Known stack suffix:
## constr_longident
## LR(1) items:
expr -> constr_longident . simple_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> constr_longident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 925
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:
-- On WITH TYPE TO TILDE THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PLUS OR OPTLABEL OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS LABEL INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> constr_longident

State 925:
## Known stack suffix:
## constr_longident simple_expr
## LR(1) items:
expr -> constr_longident simple_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 823
-- On DOT shift to state 825
## Reductions:
-- On WITH TYPE TO THEN STAR SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> constr_longident simple_expr

State 926:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 927
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 927:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr PLUS expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr PLUS expr

State 928:
## Known stack suffix:
## expr INFIXOP3
## LR(1) items:
expr -> expr INFIXOP3 . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 929
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 929:
## Known stack suffix:
## expr INFIXOP3 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP3 expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 922
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP3 expr

State 930:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 931
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 931:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr OR expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BAR AND
--   reduce production expr -> expr OR expr

State 932:
## Known stack suffix:
## expr MINUSDOT
## LR(1) items:
expr -> expr MINUSDOT . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 933
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 933:
## Known stack suffix:
## expr MINUSDOT expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr MINUSDOT expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr MINUSDOT expr

State 934:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 935
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 935:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr MINUS expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr MINUS expr

State 936:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 937
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 937:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr LESS expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On COLONCOLON shift to state 942
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OR OPEN MODULE MINUSGREATER LET LESS INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr LESS expr

State 938:
## Known stack suffix:
## expr INFIXOP2
## LR(1) items:
expr -> expr INFIXOP2 . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 939
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 939:
## Known stack suffix:
## expr INFIXOP2 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP2 expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP2 expr

State 940:
## Known stack suffix:
## expr INFIXOP1
## LR(1) items:
expr -> expr INFIXOP1 . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 941
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 941:
## Known stack suffix:
## expr INFIXOP1 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP1 expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On COLONCOLON shift to state 942
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OR OPEN MODULE MINUSGREATER LET LESS INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP1 expr

State 942:
## Known stack suffix:
## expr COLONCOLON
## LR(1) items:
expr -> expr COLONCOLON . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 943
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 943:
## Known stack suffix:
## expr COLONCOLON expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr COLONCOLON expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On COLONCOLON shift to state 942
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OR OPEN MODULE MINUSGREATER LET LESS INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr COLONCOLON expr

State 944:
## Known stack suffix:
## expr INFIXOP0
## LR(1) items:
expr -> expr INFIXOP0 . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 945
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 945:
## Known stack suffix:
## expr INFIXOP0 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP0 expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On COLONCOLON shift to state 942
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OR OPEN MODULE MINUSGREATER LET LESS INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP0 expr

State 946:
## Known stack suffix:
## expr GREATER
## LR(1) items:
expr -> expr GREATER . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 947
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 947:
## Known stack suffix:
## expr GREATER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr GREATER expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On COLONCOLON shift to state 942
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OR OPEN MODULE MINUSGREATER LET LESS INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr GREATER expr

State 948:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 949
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 949:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr EQUAL expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On COLONCOLON shift to state 942
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OR OPEN MODULE MINUSGREATER LET LESS INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr EQUAL expr

State 950:
## Known stack suffix:
## expr BARBAR
## LR(1) items:
expr -> expr BARBAR . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 951
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 951:
## Known stack suffix:
## expr BARBAR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr BARBAR expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BAR AND
--   reduce production expr -> expr BARBAR expr

State 952:
## Known stack suffix:
## expr AMPERSAND
## LR(1) items:
expr -> expr AMPERSAND . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 953
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 953:
## Known stack suffix:
## expr AMPERSAND expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr AMPERSAND expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COLONCOLON shift to state 942
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OR OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BARBAR BAR AND
--   reduce production expr -> expr AMPERSAND expr

State 954:
## Known stack suffix:
## expr AMPERAMPER
## LR(1) items:
expr -> expr AMPERAMPER . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 955
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 955:
## Known stack suffix:
## expr AMPERAMPER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr AMPERAMPER expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COLONCOLON shift to state 942
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OR OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BARBAR BAR AND
--   reduce production expr -> expr AMPERAMPER expr

State 956:
## Known stack suffix:
## label LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> label LESSMINUS expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 957
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO CLASS BAR AND
--   reduce production expr -> label LESSMINUS expr

State 957:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_comma_list -> expr COMMA . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 958
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 958:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr COMMA expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL CLASS BAR AND
--   reduce production expr_comma_list -> expr COMMA expr

State 959:
## Known stack suffix:
## expr COLONEQUAL
## LR(1) items:
expr -> expr COLONEQUAL . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 960
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 960:
## Known stack suffix:
## expr COLONEQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr COLONEQUAL expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 957
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO CLASS BAR AND
--   reduce production expr -> expr COLONEQUAL expr

State 961:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On SEMI shift to state 962
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 957
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO CLASS BAR AND
--   reduce production seq_expr -> expr

State 962:
## Known stack suffix:
## expr SEMI
## LR(1) items:
seq_expr -> expr SEMI . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr SEMI . seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 963
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production seq_expr -> expr SEMI

State 963:
## Known stack suffix:
## expr SEMI seq_expr
## LR(1) items:
seq_expr -> expr SEMI seq_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production seq_expr -> expr SEMI seq_expr

State 964:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr -> ASSERT . simple_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 967
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:

State 965:
## Known stack suffix:
## val_longident
## LR(1) items:
simple_expr -> val_longident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> val_longident

State 966:
## Known stack suffix:
## val_ident
## LR(1) items:
val_longident -> val_ident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_longident -> val_ident

State 967:
## Known stack suffix:
## ASSERT simple_expr
## LR(1) items:
expr -> ASSERT simple_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 968
-- On DOT shift to state 971
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> ASSERT simple_expr

State 968:
## Known stack suffix:
## simple_expr SHARP
## LR(1) items:
simple_expr -> simple_expr SHARP . label [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 969
-- On label shift to state 970
## Reductions:

State 969:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label -> LIDENT

State 970:
## Known stack suffix:
## simple_expr SHARP label
## LR(1) items:
simple_expr -> simple_expr SHARP label . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr SHARP label

State 971:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
simple_expr -> simple_expr DOT . label_longident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACE expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACE expr_comma_list error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 972
-- On LIDENT shift to state 1048
-- On LBRACKET shift to state 1076
-- On LBRACE shift to state 1079
-- On mod_longident shift to state 1062
-- On label_longident shift to state 1082
## Reductions:

State 972:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1074
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 973:
## Known stack suffix:
## subtractive
## LR(1) items:
expr -> subtractive . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1073
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 974:
## Known stack suffix:
## simple_expr
## LR(1) items:
expr -> simple_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . simple_labeled_expr_list [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT label_longident LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LPAREN seq_expr RPAREN LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LBRACE expr RBRACE LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On TILDE shift to state 975
-- On STRING shift to state 585
-- On SHARP shift to state 968
-- On QUESTION shift to state 978
-- On PREFIXOP shift to state 586
-- On OPTLABEL shift to state 980
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LABEL shift to state 988
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On DOT shift to state 990
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_labeled_expr_list shift to state 1068
-- On simple_expr shift to state 1069
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On labeled_simple_expr shift to state 1072
-- On label_expr shift to state 1071
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> simple_expr

State 975:
## Known stack suffix:
## TILDE
## LR(1) items:
label_expr -> TILDE . label_ident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 976
-- On label_ident shift to state 977
## Reductions:

State 976:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_ident -> LIDENT . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_ident -> LIDENT

State 977:
## Known stack suffix:
## TILDE label_ident
## LR(1) items:
label_expr -> TILDE label_ident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_expr -> TILDE label_ident

State 978:
## Known stack suffix:
## QUESTION
## LR(1) items:
label_expr -> QUESTION . label_ident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 976
-- On label_ident shift to state 979
## Reductions:

State 979:
## Known stack suffix:
## QUESTION label_ident
## LR(1) items:
label_expr -> QUESTION label_ident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_expr -> QUESTION label_ident

State 980:
## Known stack suffix:
## OPTLABEL
## LR(1) items:
label_expr -> OPTLABEL . simple_expr [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 981
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:

State 981:
## Known stack suffix:
## OPTLABEL simple_expr
## LR(1) items:
label_expr -> OPTLABEL simple_expr . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 968
-- On DOT shift to state 971
## Reductions:
-- On error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
--   reduce production label_expr -> OPTLABEL simple_expr

State 982:
## Known stack suffix:
## name_tag
## LR(1) items:
simple_expr -> name_tag . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> name_tag

State 983:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident . DOT val_ident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DOT shift to state 984
## Reductions:
-- On error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> mod_longident

State 984:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident DOT . val_ident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 351
-- On LPAREN shift to state 722
-- On LIDENT shift to state 593
-- On val_ident shift to state 985
## Reductions:

State 985:
## Known stack suffix:
## mod_longident DOT val_ident
## LR(1) items:
val_longident -> mod_longident DOT val_ident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_longident -> mod_longident DOT val_ident

State 986:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> constr_longident

State 987:
## Known stack suffix:
## constant
## LR(1) items:
simple_expr -> constant . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> constant

State 988:
## Known stack suffix:
## LABEL
## LR(1) items:
label_expr -> LABEL . simple_expr [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 989
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:

State 989:
## Known stack suffix:
## LABEL simple_expr
## LR(1) items:
label_expr -> LABEL simple_expr . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 968
-- On DOT shift to state 971
## Reductions:
-- On error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
--   reduce production label_expr -> LABEL simple_expr

State 990:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
expr -> simple_expr DOT . label_longident LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LPAREN seq_expr RPAREN LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LBRACE expr RBRACE LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . label_longident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACE expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACE expr_comma_list error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 991
-- On LIDENT shift to state 1048
-- On LBRACKET shift to state 1049
-- On LBRACE shift to state 1055
-- On mod_longident shift to state 1062
-- On label_longident shift to state 1065
## Reductions:

State 991:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
expr -> simple_expr DOT LPAREN . seq_expr RPAREN LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 992
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 992:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr . RPAREN LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 993
-- On RPAREN shift to state 994
## Reductions:

State 993:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr error . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LPAREN seq_expr error

State 994:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr RPAREN . LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 995
## Reductions:
-- On error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 995:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1044
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 996:
## Known stack suffix:
## name_tag
## LR(1) items:
expr -> name_tag . simple_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> name_tag . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 997
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:
-- On error VAL TYPE TILDE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PLUS OR OPTLABEL OPEN MODULE MINUSDOT MINUS METHOD LET LESS LABEL INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> name_tag

State 997:
## Known stack suffix:
## name_tag simple_expr
## LR(1) items:
expr -> name_tag simple_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 968
-- On DOT shift to state 971
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> name_tag simple_expr

State 998:
## Known stack suffix:
## label
## LR(1) items:
expr -> label . LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 999
## Reductions:

State 999:
## Known stack suffix:
## label LESSMINUS
## LR(1) items:
expr -> label LESSMINUS . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1039
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1000:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
expr -> expr_comma_list . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 1001
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr_comma_list

State 1001:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1002
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1002:
## Known stack suffix:
## expr_comma_list COMMA expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list COMMA expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BAR AND
--   reduce production expr_comma_list -> expr_comma_list COMMA expr

State 1003:
## Known stack suffix:
## expr STAR
## LR(1) items:
expr -> expr STAR . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1004
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1004:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr STAR expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 1005
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr STAR expr

State 1005:
## Known stack suffix:
## expr INFIXOP4
## LR(1) items:
expr -> expr INFIXOP4 . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1006
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1006:
## Known stack suffix:
## expr INFIXOP4 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP4 expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 1005
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP4 expr

State 1007:
## Known stack suffix:
## constr_longident
## LR(1) items:
expr -> constr_longident . simple_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> constr_longident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 1008
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:
-- On error VAL TYPE TILDE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PLUS OR OPTLABEL OPEN MODULE MINUSDOT MINUS METHOD LET LESS LABEL INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> constr_longident

State 1008:
## Known stack suffix:
## constr_longident simple_expr
## LR(1) items:
expr -> constr_longident simple_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 968
-- On DOT shift to state 971
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> constr_longident simple_expr

State 1009:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1010
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1010:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr PLUS expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr PLUS expr

State 1011:
## Known stack suffix:
## expr INFIXOP3
## LR(1) items:
expr -> expr INFIXOP3 . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1012
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1012:
## Known stack suffix:
## expr INFIXOP3 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP3 expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 1005
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP3 expr

State 1013:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1014
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1014:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr OR expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> expr OR expr

State 1015:
## Known stack suffix:
## expr MINUSDOT
## LR(1) items:
expr -> expr MINUSDOT . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1016
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1016:
## Known stack suffix:
## expr MINUSDOT expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr MINUSDOT expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr MINUSDOT expr

State 1017:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1018
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1018:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr MINUS expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr MINUS expr

State 1019:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1020
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1020:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr LESS expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On COLONCOLON shift to state 1025
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE METHOD LET LESS INITIALIZER INHERIT INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr LESS expr

State 1021:
## Known stack suffix:
## expr INFIXOP2
## LR(1) items:
expr -> expr INFIXOP2 . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1022
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1022:
## Known stack suffix:
## expr INFIXOP2 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP2 expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP2 expr

State 1023:
## Known stack suffix:
## expr INFIXOP1
## LR(1) items:
expr -> expr INFIXOP1 . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1024
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1024:
## Known stack suffix:
## expr INFIXOP1 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP1 expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On COLONCOLON shift to state 1025
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE METHOD LET LESS INITIALIZER INHERIT INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP1 expr

State 1025:
## Known stack suffix:
## expr COLONCOLON
## LR(1) items:
expr -> expr COLONCOLON . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1026
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1026:
## Known stack suffix:
## expr COLONCOLON expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr COLONCOLON expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On COLONCOLON shift to state 1025
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE METHOD LET LESS INITIALIZER INHERIT INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr COLONCOLON expr

State 1027:
## Known stack suffix:
## expr INFIXOP0
## LR(1) items:
expr -> expr INFIXOP0 . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1028
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1028:
## Known stack suffix:
## expr INFIXOP0 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP0 expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On COLONCOLON shift to state 1025
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE METHOD LET LESS INITIALIZER INHERIT INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr INFIXOP0 expr

State 1029:
## Known stack suffix:
## expr GREATER
## LR(1) items:
expr -> expr GREATER . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1030
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1030:
## Known stack suffix:
## expr GREATER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr GREATER expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On COLONCOLON shift to state 1025
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE METHOD LET LESS INITIALIZER INHERIT INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr GREATER expr

State 1031:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1032
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1032:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr EQUAL expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On COLONCOLON shift to state 1025
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE METHOD LET LESS INITIALIZER INHERIT INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr EQUAL expr

State 1033:
## Known stack suffix:
## expr BARBAR
## LR(1) items:
expr -> expr BARBAR . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1034
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1034:
## Known stack suffix:
## expr BARBAR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr BARBAR expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> expr BARBAR expr

State 1035:
## Known stack suffix:
## expr AMPERSAND
## LR(1) items:
expr -> expr AMPERSAND . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1036
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1036:
## Known stack suffix:
## expr AMPERSAND expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr AMPERSAND expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COLONCOLON shift to state 1025
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND
--   reduce production expr -> expr AMPERSAND expr

State 1037:
## Known stack suffix:
## expr AMPERAMPER
## LR(1) items:
expr -> expr AMPERAMPER . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1038
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1038:
## Known stack suffix:
## expr AMPERAMPER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr AMPERAMPER expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COLONCOLON shift to state 1025
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND
--   reduce production expr -> expr AMPERAMPER expr

State 1039:
## Known stack suffix:
## label LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> label LESSMINUS expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> label LESSMINUS expr

State 1040:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_comma_list -> expr COMMA . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1041
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1041:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr COMMA expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BAR AND
--   reduce production expr_comma_list -> expr COMMA expr

State 1042:
## Known stack suffix:
## expr COLONEQUAL
## LR(1) items:
expr -> expr COLONEQUAL . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1043
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1043:
## Known stack suffix:
## expr COLONEQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr COLONEQUAL expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> expr COLONEQUAL expr

State 1044:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr

State 1045:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On SEMI shift to state 1046
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production seq_expr -> expr

State 1046:
## Known stack suffix:
## expr SEMI
## LR(1) items:
seq_expr -> expr SEMI . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr SEMI . seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1047
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE METHOD LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production seq_expr -> expr SEMI

State 1047:
## Known stack suffix:
## expr SEMI seq_expr
## LR(1) items:
seq_expr -> expr SEMI seq_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production seq_expr -> expr SEMI seq_expr

State 1048:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_longident -> LIDENT

State 1049:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1050
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1050:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1051
-- On RBRACKET shift to state 1052
## Reductions:

State 1051:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr error . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr error

State 1052:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 1053
## Reductions:
-- On error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 1053:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1054
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1054:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr

State 1055:
## Known stack suffix:
## simple_expr DOT LBRACE
## LR(1) items:
expr -> simple_expr DOT LBRACE . expr RBRACE LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE . expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE . expr_comma_list error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 1056
-- On expr shift to state 1058
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1056:
## Known stack suffix:
## simple_expr DOT LBRACE expr_comma_list
## LR(1) items:
expr -> expr_comma_list . [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list . COMMA expr [ error STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE expr_comma_list . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1057
-- On COMMA shift to state 1001
## Reductions:
-- On STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER
--   reduce production expr -> expr_comma_list

State 1057:
## Known stack suffix:
## simple_expr DOT LBRACE expr_comma_list error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACE expr_comma_list error . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACE expr_comma_list error

State 1058:
## Known stack suffix:
## simple_expr DOT LBRACE expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LBRACE expr . RBRACE LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE expr . RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On RBRACE shift to state 1059
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:

State 1059:
## Known stack suffix:
## simple_expr DOT LBRACE expr RBRACE
## LR(1) items:
expr -> simple_expr DOT LBRACE expr RBRACE . LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE expr RBRACE . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 1060
## Reductions:
-- On error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACE expr RBRACE

State 1060:
## Known stack suffix:
## simple_expr DOT LBRACE expr RBRACE LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LBRACE expr RBRACE LESSMINUS . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1061
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1061:
## Known stack suffix:
## simple_expr DOT LBRACE expr RBRACE LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LBRACE expr RBRACE LESSMINUS expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> simple_expr DOT LBRACE expr RBRACE LESSMINUS expr

State 1062:
## Known stack suffix:
## mod_longident
## LR(1) items:
label_longident -> mod_longident . DOT LIDENT [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 1063
## Reductions:

State 1063:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
label_longident -> mod_longident DOT . LIDENT [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 11
-- On LIDENT shift to state 1064
## Reductions:

State 1064:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
label_longident -> mod_longident DOT LIDENT . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_longident -> mod_longident DOT LIDENT

State 1065:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
expr -> simple_expr DOT label_longident . LESSMINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT label_longident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 1066
## Reductions:
-- On error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT label_longident

State 1066:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS
## LR(1) items:
expr -> simple_expr DOT label_longident LESSMINUS . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1067
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1067:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT label_longident LESSMINUS expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> simple_expr DOT label_longident LESSMINUS expr

State 1068:
## Known stack suffix:
## simple_expr simple_labeled_expr_list
## LR(1) items:
expr -> simple_expr simple_labeled_expr_list . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_labeled_expr_list -> simple_labeled_expr_list . labeled_simple_expr [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On TILDE shift to state 975
-- On STRING shift to state 585
-- On QUESTION shift to state 978
-- On PREFIXOP shift to state 586
-- On OPTLABEL shift to state 980
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LABEL shift to state 988
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 1069
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On labeled_simple_expr shift to state 1070
-- On label_expr shift to state 1071
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> simple_expr simple_labeled_expr_list

State 1069:
## Known stack suffix:
## simple_expr
## LR(1) items:
labeled_simple_expr -> simple_expr . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 968
-- On DOT shift to state 971
## Reductions:
-- On error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER
--   reduce production labeled_simple_expr -> simple_expr

State 1070:
## Known stack suffix:
## simple_labeled_expr_list labeled_simple_expr
## LR(1) items:
simple_labeled_expr_list -> simple_labeled_expr_list labeled_simple_expr . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_labeled_expr_list -> simple_labeled_expr_list labeled_simple_expr

State 1071:
## Known stack suffix:
## label_expr
## LR(1) items:
labeled_simple_expr -> label_expr . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_expr -> label_expr

State 1072:
## Known stack suffix:
## labeled_simple_expr
## LR(1) items:
simple_labeled_expr_list -> labeled_simple_expr . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_labeled_expr_list -> labeled_simple_expr

State 1073:
## Known stack suffix:
## subtractive expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> subtractive expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> subtractive expr

State 1074:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 993
-- On RPAREN shift to state 1075
## Reductions:

State 1075:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 1076:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1077
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1077:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1051
-- On RBRACKET shift to state 1078
## Reductions:

State 1078:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 1079:
## Known stack suffix:
## simple_expr DOT LBRACE
## LR(1) items:
simple_expr -> simple_expr DOT LBRACE . expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE . expr_comma_list error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 1056
-- On expr shift to state 1080
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1080:
## Known stack suffix:
## simple_expr DOT LBRACE expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE expr . RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On RBRACE shift to state 1081
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:

State 1081:
## Known stack suffix:
## simple_expr DOT LBRACE expr RBRACE
## LR(1) items:
simple_expr -> simple_expr DOT LBRACE expr RBRACE . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACE expr RBRACE

State 1082:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
simple_expr -> simple_expr DOT label_longident . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT label_longident

State 1083:
## Known stack suffix:
## MINUSGREATER seq_expr
## LR(1) items:
match_action -> MINUSGREATER seq_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_action -> MINUSGREATER seq_expr

State 1084:
## Known stack suffix:
## match_action
## LR(1) items:
fun_def -> match_action . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_def -> match_action

State 1085:
## Known stack suffix:
## labeled_simple_pattern
## LR(1) items:
fun_def -> labeled_simple_pattern . fun_def [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 844
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUSGREATER shift to state 901
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On match_action shift to state 1084
-- On labeled_simple_pattern shift to state 1085
-- On fun_def shift to state 1086
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 1086:
## Known stack suffix:
## labeled_simple_pattern fun_def
## LR(1) items:
fun_def -> labeled_simple_pattern fun_def . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_def -> labeled_simple_pattern fun_def

State 1087:
## Known stack suffix:
## FUN labeled_simple_pattern fun_def
## LR(1) items:
expr -> FUN labeled_simple_pattern fun_def . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FUN labeled_simple_pattern fun_def

State 1088:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr . RPAREN LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1089
-- On RPAREN shift to state 1090
## Reductions:

State 1089:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr error . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LPAREN seq_expr error

State 1090:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr RPAREN . LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 1091
## Reductions:
-- On WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 1091:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 1092
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1092:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 957
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO CLASS BAR AND
--   reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr

State 1093:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1094
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1094:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1095
-- On RBRACKET shift to state 1096
## Reductions:

State 1095:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr error . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr error

State 1096:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 1097
## Reductions:
-- On WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 1097:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 1098
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1098:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 957
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO CLASS BAR AND
--   reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr

State 1099:
## Known stack suffix:
## simple_expr DOT LBRACE
## LR(1) items:
expr -> simple_expr DOT LBRACE . expr RBRACE LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE . expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE . expr_comma_list error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 1100
-- On expr shift to state 1102
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1100:
## Known stack suffix:
## simple_expr DOT LBRACE expr_comma_list
## LR(1) items:
expr -> expr_comma_list . [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list . COMMA expr [ error STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE expr_comma_list . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1101
-- On COMMA shift to state 1001
## Reductions:
-- On STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER
--   reduce production expr -> expr_comma_list

State 1101:
## Known stack suffix:
## simple_expr DOT LBRACE expr_comma_list error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACE expr_comma_list error . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACE expr_comma_list error

State 1102:
## Known stack suffix:
## simple_expr DOT LBRACE expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LBRACE expr . RBRACE LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE expr . RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On RBRACE shift to state 1103
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:

State 1103:
## Known stack suffix:
## simple_expr DOT LBRACE expr RBRACE
## LR(1) items:
expr -> simple_expr DOT LBRACE expr RBRACE . LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE expr RBRACE . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 1104
## Reductions:
-- On WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACE expr RBRACE

State 1104:
## Known stack suffix:
## simple_expr DOT LBRACE expr RBRACE LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LBRACE expr RBRACE LESSMINUS . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 1105
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1105:
## Known stack suffix:
## simple_expr DOT LBRACE expr RBRACE LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LBRACE expr RBRACE LESSMINUS expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 957
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO CLASS BAR AND
--   reduce production expr -> simple_expr DOT LBRACE expr RBRACE LESSMINUS expr

State 1106:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
expr -> simple_expr DOT label_longident . LESSMINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT label_longident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 1107
## Reductions:
-- On WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT label_longident

State 1107:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS
## LR(1) items:
expr -> simple_expr DOT label_longident LESSMINUS . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 1108
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1108:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT label_longident LESSMINUS expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 957
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO CLASS BAR AND
--   reduce production expr -> simple_expr DOT label_longident LESSMINUS expr

State 1109:
## Known stack suffix:
## simple_expr simple_labeled_expr_list
## LR(1) items:
expr -> simple_expr simple_labeled_expr_list . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_labeled_expr_list -> simple_labeled_expr_list . labeled_simple_expr [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 888
-- On STRING shift to state 5
-- On QUESTION shift to state 891
-- On PREFIXOP shift to state 6
-- On OPTLABEL shift to state 893
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LABEL shift to state 895
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 1110
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On labeled_simple_expr shift to state 1111
-- On label_expr shift to state 1112
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> simple_expr simple_labeled_expr_list

State 1110:
## Known stack suffix:
## simple_expr
## LR(1) items:
labeled_simple_expr -> simple_expr . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 823
-- On DOT shift to state 825
## Reductions:
-- On WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER
--   reduce production labeled_simple_expr -> simple_expr

State 1111:
## Known stack suffix:
## simple_labeled_expr_list labeled_simple_expr
## LR(1) items:
simple_labeled_expr_list -> simple_labeled_expr_list labeled_simple_expr . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_labeled_expr_list -> simple_labeled_expr_list labeled_simple_expr

State 1112:
## Known stack suffix:
## label_expr
## LR(1) items:
labeled_simple_expr -> label_expr . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_expr -> label_expr

State 1113:
## Known stack suffix:
## labeled_simple_expr
## LR(1) items:
simple_labeled_expr_list -> labeled_simple_expr . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_labeled_expr_list -> labeled_simple_expr

State 1114:
## Known stack suffix:
## subtractive expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> subtractive expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> subtractive expr

State 1115:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On TO shift to state 906
-- On DOWNTO shift to state 907
-- On direction_flag shift to state 1116
## Reductions:

State 1116:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1117
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1117:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 1118
## Reductions:

State 1118:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1119
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1119:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DONE shift to state 1120
## Reductions:

State 1120:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE

State 1121:
## Known stack suffix:
## MINUSGREATER seq_expr
## LR(1) items:
match_action -> MINUSGREATER seq_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_action -> MINUSGREATER seq_expr

State 1122:
## Known stack suffix:
## match_action
## LR(1) items:
fun_def -> match_action . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_def -> match_action

State 1123:
## Known stack suffix:
## labeled_simple_pattern
## LR(1) items:
fun_def -> labeled_simple_pattern . fun_def [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 849
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUSGREATER shift to state 874
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On match_action shift to state 1122
-- On labeled_simple_pattern shift to state 1123
-- On fun_def shift to state 1124
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 1124:
## Known stack suffix:
## labeled_simple_pattern fun_def
## LR(1) items:
fun_def -> labeled_simple_pattern fun_def . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_def -> labeled_simple_pattern fun_def

State 1125:
## Known stack suffix:
## FUN labeled_simple_pattern fun_def
## LR(1) items:
expr -> FUN labeled_simple_pattern fun_def . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FUN labeled_simple_pattern fun_def

State 1126:
## Known stack suffix:
## WHEN seq_expr
## LR(1) items:
match_action -> WHEN seq_expr . MINUSGREATER seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 1127
## Reductions:

State 1127:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER . seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1128
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1128:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER seq_expr
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER seq_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_action -> WHEN seq_expr MINUSGREATER seq_expr

State 1129:
## Known stack suffix:
## pattern match_action
## LR(1) items:
match_cases -> pattern match_action . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> pattern match_action

State 1130:
## Known stack suffix:
## FUNCTION opt_bar match_cases
## LR(1) items:
expr -> FUNCTION opt_bar match_cases . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1131
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> FUNCTION opt_bar match_cases

State 1131:
## Known stack suffix:
## match_cases BAR
## LR(1) items:
match_cases -> match_cases BAR . pattern match_action [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1132
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1132:
## Known stack suffix:
## match_cases BAR pattern
## LR(1) items:
match_cases -> match_cases BAR pattern . match_action [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 849
-- On MINUSGREATER shift to state 874
-- On COMMA shift to state 854
-- On COLONCOLON shift to state 835
-- On BAR shift to state 858
-- On AS shift to state 860
-- On match_action shift to state 1133
## Reductions:

State 1133:
## Known stack suffix:
## match_cases BAR pattern match_action
## LR(1) items:
match_cases -> match_cases BAR pattern match_action . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> match_cases BAR pattern match_action

State 1134:
## Known stack suffix:
## IF seq_expr
## LR(1) items:
expr -> IF seq_expr . THEN expr ELSE expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr . THEN expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On THEN shift to state 1135
## Reductions:

State 1135:
## Known stack suffix:
## IF seq_expr THEN
## LR(1) items:
expr -> IF seq_expr THEN . expr ELSE expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr THEN . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 1136
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1136:
## Known stack suffix:
## IF seq_expr THEN expr
## LR(1) items:
expr -> IF seq_expr THEN expr . ELSE expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr THEN expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On ELSE shift to state 1137
-- On COMMA shift to state 957
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF DOWNTO DONE DO CLASS BAR AND
--   reduce production expr -> IF seq_expr THEN expr

State 1137:
## Known stack suffix:
## IF seq_expr THEN expr ELSE
## LR(1) items:
expr -> IF seq_expr THEN expr ELSE . expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 1138
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1138:
## Known stack suffix:
## IF seq_expr THEN expr ELSE expr
## LR(1) items:
expr -> IF seq_expr THEN expr ELSE expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONCOLON expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 957
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER LET INCLUDE IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DONE DO CLASS BAR AND
--   reduce production expr -> IF seq_expr THEN expr ELSE expr

State 1139:
## Known stack suffix:
## WHEN seq_expr
## LR(1) items:
match_action -> WHEN seq_expr . MINUSGREATER seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 1140
## Reductions:

State 1140:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER . seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1141
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1141:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER seq_expr
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER seq_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_action -> WHEN seq_expr MINUSGREATER seq_expr

State 1142:
## Known stack suffix:
## pattern match_action
## LR(1) items:
match_cases -> pattern match_action . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> pattern match_action

State 1143:
## Known stack suffix:
## FUNCTION opt_bar match_cases
## LR(1) items:
expr -> FUNCTION opt_bar match_cases . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1144
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> FUNCTION opt_bar match_cases

State 1144:
## Known stack suffix:
## match_cases BAR
## LR(1) items:
match_cases -> match_cases BAR . pattern match_action [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1145
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1145:
## Known stack suffix:
## match_cases BAR pattern
## LR(1) items:
match_cases -> match_cases BAR pattern . match_action [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 844
-- On MINUSGREATER shift to state 901
-- On COMMA shift to state 854
-- On COLONCOLON shift to state 835
-- On BAR shift to state 858
-- On AS shift to state 860
-- On match_action shift to state 1146
## Reductions:

State 1146:
## Known stack suffix:
## match_cases BAR pattern match_action
## LR(1) items:
match_cases -> match_cases BAR pattern match_action . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> match_cases BAR pattern match_action

State 1147:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1089
-- On RPAREN shift to state 1148
## Reductions:

State 1148:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 1149:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1150
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1150:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1095
-- On RBRACKET shift to state 1151
## Reductions:

State 1151:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 1152:
## Known stack suffix:
## simple_expr DOT LBRACE
## LR(1) items:
simple_expr -> simple_expr DOT LBRACE . expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE . expr_comma_list error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 1100
-- On expr shift to state 1153
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1153:
## Known stack suffix:
## simple_expr DOT LBRACE expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACE expr . RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 920
-- On RBRACE shift to state 1154
-- On PLUS shift to state 926
-- On OR shift to state 930
-- On MINUSDOT shift to state 932
-- On MINUS shift to state 934
-- On LESS shift to state 936
-- On INFIXOP4 shift to state 922
-- On INFIXOP3 shift to state 928
-- On INFIXOP2 shift to state 938
-- On INFIXOP1 shift to state 940
-- On INFIXOP0 shift to state 944
-- On GREATER shift to state 946
-- On EQUAL shift to state 948
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 959
-- On COLONCOLON shift to state 942
-- On BARBAR shift to state 950
-- On AMPERSAND shift to state 952
-- On AMPERAMPER shift to state 954
## Reductions:

State 1154:
## Known stack suffix:
## simple_expr DOT LBRACE expr RBRACE
## LR(1) items:
simple_expr -> simple_expr DOT LBRACE expr RBRACE . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACE expr RBRACE

State 1155:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
simple_expr -> simple_expr DOT label_longident . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT label_longident

State 1156:
## Known stack suffix:
## IF seq_expr
## LR(1) items:
expr -> IF seq_expr . THEN expr ELSE expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr . THEN expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On THEN shift to state 1157
## Reductions:

State 1157:
## Known stack suffix:
## IF seq_expr THEN
## LR(1) items:
expr -> IF seq_expr THEN . expr ELSE expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr THEN . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1158
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1158:
## Known stack suffix:
## IF seq_expr THEN expr
## LR(1) items:
expr -> IF seq_expr THEN expr . ELSE expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr THEN expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On ELSE shift to state 1159
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END CONSTRAINT COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> IF seq_expr THEN expr

State 1159:
## Known stack suffix:
## IF seq_expr THEN expr ELSE
## LR(1) items:
expr -> IF seq_expr THEN expr ELSE . expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1160
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1160:
## Known stack suffix:
## IF seq_expr THEN expr ELSE expr
## LR(1) items:
expr -> IF seq_expr THEN expr ELSE expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONCOLON expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error VAL TYPE SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN GREATERRBRACE EXTERNAL EXCEPTION END ELSE CONSTRAINT COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production expr -> IF seq_expr THEN expr ELSE expr

State 1161:
## Known stack suffix:
## BEGIN END
## LR(1) items:
simple_expr -> BEGIN END . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN END

State 1162:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
simple_expr -> BEGIN seq_expr . END [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN seq_expr . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1163
-- On END shift to state 1164
## Reductions:

State 1163:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
simple_expr -> BEGIN seq_expr error . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN seq_expr error

State 1164:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
simple_expr -> BEGIN seq_expr END . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN seq_expr END

State 1165:
## Known stack suffix:
## LAZY simple_expr
## LR(1) items:
expr -> LAZY simple_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 968
-- On DOT shift to state 971
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> LAZY simple_expr

State 1166:
## Known stack suffix:
## BEGIN END
## LR(1) items:
simple_expr -> BEGIN END . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN END

State 1167:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
simple_expr -> BEGIN seq_expr . END [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN seq_expr . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1168
-- On END shift to state 1169
## Reductions:

State 1168:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
simple_expr -> BEGIN seq_expr error . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN seq_expr error

State 1169:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
simple_expr -> BEGIN seq_expr END . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN seq_expr END

State 1170:
## Known stack suffix:
## simple_expr
## LR(1) items:
record_expr -> simple_expr . WITH lbl_expr_list opt_semi [ error RBRACE ]
simple_expr -> simple_expr . DOT label_longident [ WITH SHARP DOT ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH SHARP DOT ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH SHARP DOT ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH SHARP DOT ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH SHARP DOT ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH SHARP DOT ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH SHARP DOT ]
simple_expr -> simple_expr . SHARP label [ WITH SHARP DOT ]
## Transitions:
-- On WITH shift to state 1171
-- On SHARP shift to state 823
-- On DOT shift to state 825
## Reductions:

State 1171:
## Known stack suffix:
## simple_expr WITH
## LR(1) items:
record_expr -> simple_expr WITH . lbl_expr_list opt_semi [ error RBRACE ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 377
-- On mod_longident shift to state 378
-- On lbl_expr_list shift to state 1172
-- On label_longident shift to state 1178
## Reductions:

State 1172:
## Known stack suffix:
## simple_expr WITH lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . SEMI label_longident EQUAL expr [ error SEMI RBRACE ]
record_expr -> simple_expr WITH lbl_expr_list . opt_semi [ error RBRACE ]
## Transitions:
-- On SEMI shift to state 1173
-- On opt_semi shift to state 1177
## Reductions:
-- On error RBRACE
--   reduce production opt_semi ->

State 1173:
## Known stack suffix:
## lbl_expr_list SEMI
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI . label_longident EQUAL expr [ error SEMI RBRACE ]
opt_semi -> SEMI . [ error RBRACE ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 377
-- On mod_longident shift to state 378
-- On label_longident shift to state 1174
## Reductions:
-- On error RBRACE
--   reduce production opt_semi -> SEMI

State 1174:
## Known stack suffix:
## lbl_expr_list SEMI label_longident
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI label_longident . EQUAL expr [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 1175
## Reductions:

State 1175:
## Known stack suffix:
## lbl_expr_list SEMI label_longident EQUAL
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL . expr [ error SEMI RBRACE ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1176
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1176:
## Known stack suffix:
## lbl_expr_list SEMI label_longident EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr . [ error SEMI RBRACE ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error SEMI RBRACE
--   reduce production lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr

State 1177:
## Known stack suffix:
## simple_expr WITH lbl_expr_list opt_semi
## LR(1) items:
record_expr -> simple_expr WITH lbl_expr_list opt_semi . [ error RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_expr -> simple_expr WITH lbl_expr_list opt_semi

State 1178:
## Known stack suffix:
## label_longident
## LR(1) items:
lbl_expr_list -> label_longident . EQUAL expr [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 1179
## Reductions:

State 1179:
## Known stack suffix:
## label_longident EQUAL
## LR(1) items:
lbl_expr_list -> label_longident EQUAL . expr [ error SEMI RBRACE ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1180
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1180:
## Known stack suffix:
## label_longident EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR SEMI RBRACE PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
lbl_expr_list -> label_longident EQUAL expr . [ error SEMI RBRACE ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error SEMI RBRACE
--   reduce production lbl_expr_list -> label_longident EQUAL expr

State 1181:
## Known stack suffix:
## LBRACE record_expr
## LR(1) items:
simple_expr -> LBRACE record_expr . RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE record_expr . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1182
-- On RBRACE shift to state 1183
## Reductions:

State 1182:
## Known stack suffix:
## LBRACE record_expr error
## LR(1) items:
simple_expr -> LBRACE record_expr error . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACE record_expr error

State 1183:
## Known stack suffix:
## LBRACE record_expr RBRACE
## LR(1) items:
simple_expr -> LBRACE record_expr RBRACE . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACE record_expr RBRACE

State 1184:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ WITH SHARP DOT ]
label_longident -> mod_longident . DOT LIDENT [ EQUAL ]
mod_longident -> mod_longident . DOT UIDENT [ WITH SHARP DOT ]
val_longident -> mod_longident . DOT val_ident [ WITH SHARP DOT ]
## Transitions:
-- On DOT shift to state 1185
## Reductions:
-- On WITH SHARP
--   reduce production constr_longident -> mod_longident

State 1185:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
label_longident -> mod_longident DOT . LIDENT [ EQUAL ]
mod_longident -> mod_longident DOT . UIDENT [ WITH SHARP DOT ]
val_longident -> mod_longident DOT . val_ident [ WITH SHARP DOT ]
## Transitions:
-- On UIDENT shift to state 11
-- On LPAREN shift to state 861
-- On LIDENT shift to state 1186
-- On val_ident shift to state 883
## Reductions:

State 1186:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
label_longident -> mod_longident DOT LIDENT . [ EQUAL ]
val_ident -> LIDENT . [ WITH SHARP DOT ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production label_longident -> mod_longident DOT LIDENT
-- On WITH SHARP DOT
--   reduce production val_ident -> LIDENT

State 1187:
## Known stack suffix:
## lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . SEMI label_longident EQUAL expr [ error SEMI RBRACE ]
record_expr -> lbl_expr_list . opt_semi [ error RBRACE ]
## Transitions:
-- On SEMI shift to state 1173
-- On opt_semi shift to state 1188
## Reductions:
-- On error RBRACE
--   reduce production opt_semi ->

State 1188:
## Known stack suffix:
## lbl_expr_list opt_semi
## LR(1) items:
record_expr -> lbl_expr_list opt_semi . [ error RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_expr -> lbl_expr_list opt_semi

State 1189:
## Known stack suffix:
## LBRACE record_expr
## LR(1) items:
simple_expr -> LBRACE record_expr . RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE record_expr . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1190
-- On RBRACE shift to state 1191
## Reductions:

State 1190:
## Known stack suffix:
## LBRACE record_expr error
## LR(1) items:
simple_expr -> LBRACE record_expr error . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACE record_expr error

State 1191:
## Known stack suffix:
## LBRACE record_expr RBRACE
## LR(1) items:
simple_expr -> LBRACE record_expr RBRACE . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACE record_expr RBRACE

State 1192:
## Known stack suffix:
## field_expr_list SEMI label EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
field_expr_list -> field_expr_list SEMI label EQUAL expr . [ error SEMI GREATERRBRACE ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error SEMI GREATERRBRACE
--   reduce production field_expr_list -> field_expr_list SEMI label EQUAL expr

State 1193:
## Known stack suffix:
## LBRACELESS field_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACELESS field_expr_list opt_semi . GREATERRBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS field_expr_list opt_semi . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1194
-- On GREATERRBRACE shift to state 1195
## Reductions:

State 1194:
## Known stack suffix:
## LBRACELESS field_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACELESS field_expr_list opt_semi error . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS field_expr_list opt_semi error

State 1195:
## Known stack suffix:
## LBRACELESS field_expr_list opt_semi GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS field_expr_list opt_semi GREATERRBRACE . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS field_expr_list opt_semi GREATERRBRACE

State 1196:
## Known stack suffix:
## LBRACKET expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI RBRACKET ]
simple_expr -> LBRACKET expr_semi_list . opt_semi RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list . opt_semi error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1199
## Reductions:
-- On error RBRACKET
--   reduce production opt_semi ->

State 1197:
## Known stack suffix:
## expr_semi_list SEMI
## LR(1) items:
expr_semi_list -> expr_semi_list SEMI . expr [ error SEMI RBRACKET BARRBRACKET ]
opt_semi -> SEMI . [ error RBRACKET BARRBRACKET ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1198
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:
-- On error RBRACKET BARRBRACKET
--   reduce production opt_semi -> SEMI

State 1198:
## Known stack suffix:
## expr_semi_list SEMI expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr_semi_list -> expr_semi_list SEMI expr . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error SEMI RBRACKET BARRBRACKET
--   reduce production expr_semi_list -> expr_semi_list SEMI expr

State 1199:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi . RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list opt_semi . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1200
-- On RBRACKET shift to state 1201
## Reductions:

State 1200:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi error . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKET expr_semi_list opt_semi error

State 1201:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi RBRACKET
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET

State 1202:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR SEMI RBRACKET PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr_semi_list -> expr . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error SEMI RBRACKET BARRBRACKET
--   reduce production expr_semi_list -> expr

State 1203:
## Known stack suffix:
## label EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . PLUS expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUS expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . MINUSDOT expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error STAR SEMI PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
field_expr_list -> label EQUAL expr . [ error SEMI GREATERRBRACE ]
## Transitions:
-- On STAR shift to state 1003
-- On PLUS shift to state 1009
-- On OR shift to state 1013
-- On MINUSDOT shift to state 1015
-- On MINUS shift to state 1017
-- On LESS shift to state 1019
-- On INFIXOP4 shift to state 1005
-- On INFIXOP3 shift to state 1011
-- On INFIXOP2 shift to state 1021
-- On INFIXOP1 shift to state 1023
-- On INFIXOP0 shift to state 1027
-- On GREATER shift to state 1029
-- On EQUAL shift to state 1031
-- On COMMA shift to state 1040
-- On COLONEQUAL shift to state 1042
-- On COLONCOLON shift to state 1025
-- On BARBAR shift to state 1033
-- On AMPERSAND shift to state 1035
-- On AMPERAMPER shift to state 1037
## Reductions:
-- On error SEMI GREATERRBRACE
--   reduce production field_expr_list -> label EQUAL expr

State 1204:
## Known stack suffix:
## LBRACELESS field_expr_list
## LR(1) items:
field_expr_list -> field_expr_list . SEMI label EQUAL expr [ error SEMI GREATERRBRACE ]
simple_expr -> LBRACELESS field_expr_list . opt_semi GREATERRBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS field_expr_list . opt_semi error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 807
-- On opt_semi shift to state 1205
## Reductions:
-- On error GREATERRBRACE
--   reduce production opt_semi ->

State 1205:
## Known stack suffix:
## LBRACELESS field_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACELESS field_expr_list opt_semi . GREATERRBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS field_expr_list opt_semi . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1206
-- On GREATERRBRACE shift to state 1207
## Reductions:

State 1206:
## Known stack suffix:
## LBRACELESS field_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACELESS field_expr_list opt_semi error . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS field_expr_list opt_semi error

State 1207:
## Known stack suffix:
## LBRACELESS field_expr_list opt_semi GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS field_expr_list opt_semi GREATERRBRACE . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS field_expr_list opt_semi GREATERRBRACE

State 1208:
## Known stack suffix:
## EQUAL seq_expr
## LR(1) items:
opt_default -> EQUAL seq_expr . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_default -> EQUAL seq_expr

State 1209:
## Known stack suffix:
## QUESTION LPAREN label_let_pattern opt_default
## LR(1) items:
labeled_simple_pattern -> QUESTION LPAREN label_let_pattern opt_default . RPAREN [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
-- On RPAREN shift to state 1210
## Reductions:

State 1210:
## Known stack suffix:
## QUESTION LPAREN label_let_pattern opt_default RPAREN
## LR(1) items:
labeled_simple_pattern -> QUESTION LPAREN label_let_pattern opt_default RPAREN . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_pattern -> QUESTION LPAREN label_let_pattern opt_default RPAREN

State 1211:
## Known stack suffix:
## QUESTION label_var
## LR(1) items:
labeled_simple_pattern -> QUESTION label_var . [ WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_simple_pattern -> QUESTION label_var

State 1212:
## Known stack suffix:
## EQUAL
## LR(1) items:
strict_binding -> EQUAL . seq_expr [ error VAL TYPE SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1213
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1213:
## Known stack suffix:
## EQUAL seq_expr
## LR(1) items:
strict_binding -> EQUAL seq_expr . [ error VAL TYPE SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production strict_binding -> EQUAL seq_expr

State 1214:
## Known stack suffix:
## COLONGREATER
## LR(1) items:
type_constraint -> COLONGREATER . core_type [ RPAREN EQUAL ]
type_constraint -> COLONGREATER . error [ RPAREN EQUAL ]
## Transitions:
-- On error shift to state 1215
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 1216
## Reductions:

State 1215:
## Known stack suffix:
## COLONGREATER error
## LR(1) items:
type_constraint -> COLONGREATER error . [ RPAREN EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_constraint -> COLONGREATER error

State 1216:
## Known stack suffix:
## COLONGREATER core_type
## LR(1) items:
type_constraint -> COLONGREATER core_type . [ RPAREN EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_constraint -> COLONGREATER core_type

State 1217:
## Known stack suffix:
## COLON
## LR(1) items:
type_constraint -> COLON . core_type [ RPAREN EQUAL ]
type_constraint -> COLON . core_type COLONGREATER core_type [ RPAREN EQUAL ]
type_constraint -> COLON . error [ RPAREN EQUAL ]
## Transitions:
-- On error shift to state 1218
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 1219
## Reductions:

State 1218:
## Known stack suffix:
## COLON error
## LR(1) items:
type_constraint -> COLON error . [ RPAREN EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_constraint -> COLON error

State 1219:
## Known stack suffix:
## COLON core_type
## LR(1) items:
type_constraint -> COLON core_type . [ RPAREN EQUAL ]
type_constraint -> COLON core_type . COLONGREATER core_type [ RPAREN EQUAL ]
## Transitions:
-- On COLONGREATER shift to state 1220
## Reductions:
-- On RPAREN EQUAL
--   reduce production type_constraint -> COLON core_type

State 1220:
## Known stack suffix:
## COLON core_type COLONGREATER
## LR(1) items:
type_constraint -> COLON core_type COLONGREATER . core_type [ RPAREN EQUAL ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 1221
## Reductions:

State 1221:
## Known stack suffix:
## COLON core_type COLONGREATER core_type
## LR(1) items:
type_constraint -> COLON core_type COLONGREATER core_type . [ RPAREN EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_constraint -> COLON core_type COLONGREATER core_type

State 1222:
## Known stack suffix:
## type_constraint
## LR(1) items:
fun_binding -> type_constraint . EQUAL seq_expr [ error VAL TYPE SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1223
## Reductions:

State 1223:
## Known stack suffix:
## type_constraint EQUAL
## LR(1) items:
fun_binding -> type_constraint EQUAL . seq_expr [ error VAL TYPE SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1224
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1224:
## Known stack suffix:
## type_constraint EQUAL seq_expr
## LR(1) items:
fun_binding -> type_constraint EQUAL seq_expr . [ error VAL TYPE SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> type_constraint EQUAL seq_expr

State 1225:
## Known stack suffix:
## strict_binding
## LR(1) items:
fun_binding -> strict_binding . [ error VAL TYPE SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> strict_binding

State 1226:
## Known stack suffix:
## labeled_simple_pattern
## LR(1) items:
strict_binding -> labeled_simple_pattern . fun_binding [ error VAL TYPE SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EQUAL shift to state 1212
-- On COLONGREATER shift to state 1214
-- On COLON shift to state 1217
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On type_constraint shift to state 1222
-- On strict_binding shift to state 1225
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1226
-- On fun_binding shift to state 1227
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 1227:
## Known stack suffix:
## labeled_simple_pattern fun_binding
## LR(1) items:
strict_binding -> labeled_simple_pattern fun_binding . [ error VAL TYPE SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production strict_binding -> labeled_simple_pattern fun_binding

State 1228:
## Known stack suffix:
## val_ident fun_binding
## LR(1) items:
let_binding -> val_ident fun_binding . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> val_ident fun_binding

State 1229:
## Known stack suffix:
## pattern
## LR(1) items:
let_binding -> pattern . EQUAL seq_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION END CLASS AND ]
pattern -> pattern . AS val_ident [ EQUAL COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ EQUAL COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ EQUAL COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ EQUAL COMMA COLONCOLON BAR AS ]
## Transitions:
-- On EQUAL shift to state 1230
-- On COMMA shift to state 854
-- On COLONCOLON shift to state 835
-- On BAR shift to state 858
-- On AS shift to state 860
## Reductions:

State 1230:
## Known stack suffix:
## pattern EQUAL
## LR(1) items:
let_binding -> pattern EQUAL . seq_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1231
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1231:
## Known stack suffix:
## pattern EQUAL seq_expr
## LR(1) items:
let_binding -> pattern EQUAL seq_expr . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> pattern EQUAL seq_expr

State 1232:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr -> LET rec_flag let_bindings . IN seq_expr [ error TYPE STAR SEMISEMI SEMI PLUS OR OPEN MODULE MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION END CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On IN shift to state 1233
-- On AND shift to state 1235
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> LET rec_flag let_bindings

State 1233:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
expr -> LET rec_flag let_bindings IN . seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1234
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1234:
## Known stack suffix:
## LET rec_flag let_bindings IN seq_expr
## LR(1) items:
expr -> LET rec_flag let_bindings IN seq_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET rec_flag let_bindings IN seq_expr

State 1235:
## Known stack suffix:
## let_bindings AND
## LR(1) items:
let_bindings -> let_bindings AND . let_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 785
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1229
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_binding shift to state 1236
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1236:
## Known stack suffix:
## let_bindings AND let_binding
## LR(1) items:
let_bindings -> let_bindings AND let_binding . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_bindings -> let_bindings AND let_binding

State 1237:
## Known stack suffix:
## let_binding
## LR(1) items:
let_bindings -> let_binding . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_bindings -> let_binding

State 1238:
## Known stack suffix:
## INCLUDE
## LR(1) items:
structure_item -> INCLUDE . module_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 348
-- On STRUCT shift to state 606
-- On LPAREN shift to state 618
-- On FUNCTOR shift to state 619
-- On module_expr shift to state 1239
-- On mod_longident shift to state 631
## Reductions:

State 1239:
## Known stack suffix:
## INCLUDE module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
structure_item -> INCLUDE module_expr . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 627
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> INCLUDE module_expr

State 1240:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
structure_item -> EXTERNAL . val_ident_colon core_type EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 33
-- On LIDENT shift to state 55
-- On LABEL shift to state 57
-- On val_ident_colon shift to state 1241
## Reductions:

State 1241:
## Known stack suffix:
## EXTERNAL val_ident_colon
## LR(1) items:
structure_item -> EXTERNAL val_ident_colon . core_type EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 1242
## Reductions:

State 1242:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type
## LR(1) items:
structure_item -> EXTERNAL val_ident_colon core_type . EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On EQUAL shift to state 1243
## Reductions:

State 1243:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type EQUAL
## LR(1) items:
structure_item -> EXTERNAL val_ident_colon core_type EQUAL . primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On STRING shift to state 446
-- On primitive_declaration shift to state 1244
## Reductions:

State 1244:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type EQUAL primitive_declaration
## LR(1) items:
structure_item -> EXTERNAL val_ident_colon core_type EQUAL primitive_declaration . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXTERNAL val_ident_colon core_type EQUAL primitive_declaration

State 1245:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
structure_item -> EXCEPTION . UIDENT constructor_arguments [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
structure_item -> EXCEPTION . UIDENT EQUAL constr_longident [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1246
## Reductions:

State 1246:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
structure_item -> EXCEPTION UIDENT . constructor_arguments [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
structure_item -> EXCEPTION UIDENT . EQUAL constr_longident [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On OF shift to state 304
-- On EQUAL shift to state 1247
-- On constructor_arguments shift to state 1251
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production constructor_arguments ->

State 1247:
## Known stack suffix:
## EXCEPTION UIDENT EQUAL
## LR(1) items:
structure_item -> EXCEPTION UIDENT EQUAL . constr_longident [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On LPAREN shift to state 1248
-- On LBRACKET shift to state 1249
-- On FALSE shift to state 696
-- On mod_longident shift to state 712
-- On constr_longident shift to state 1250
## Reductions:

State 1248:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On RPAREN shift to state 591
## Reductions:

State 1249:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On RBRACKET shift to state 686
## Reductions:

State 1250:
## Known stack suffix:
## EXCEPTION UIDENT EQUAL constr_longident
## LR(1) items:
structure_item -> EXCEPTION UIDENT EQUAL constr_longident . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXCEPTION UIDENT EQUAL constr_longident

State 1251:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
structure_item -> EXCEPTION UIDENT constructor_arguments . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXCEPTION UIDENT constructor_arguments

State 1252:
## Known stack suffix:
## CLASS
## LR(1) items:
structure_item -> CLASS . class_declarations [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
structure_item -> CLASS . TYPE class_type_declarations [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On TYPE shift to state 1253
-- On virtual_flag shift to state 1255
-- On class_declarations shift to state 1388
-- On class_declaration shift to state 1391
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1253:
## Known stack suffix:
## CLASS TYPE
## LR(1) items:
structure_item -> CLASS TYPE . class_type_declarations [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 456
-- On class_type_declarations shift to state 1254
-- On class_type_declaration shift to state 518
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1254:
## Known stack suffix:
## CLASS TYPE class_type_declarations
## LR(1) items:
class_type_declarations -> class_type_declarations . AND class_type_declaration [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
structure_item -> CLASS TYPE class_type_declarations . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On AND shift to state 516
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> CLASS TYPE class_type_declarations

State 1255:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_declaration -> virtual_flag . class_type_parameters LIDENT class_fun_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LBRACKET shift to state 457
-- On class_type_parameters shift to state 1256
## Reductions:
-- On LIDENT
--   reduce production class_type_parameters ->

State 1256:
## Known stack suffix:
## virtual_flag class_type_parameters
## LR(1) items:
class_declaration -> virtual_flag class_type_parameters . LIDENT class_fun_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LIDENT shift to state 1257
## Reductions:

State 1257:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT
## LR(1) items:
class_declaration -> virtual_flag class_type_parameters LIDENT . class_fun_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EQUAL shift to state 1258
-- On COLON shift to state 1346
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1385
-- On constr_longident shift to state 871
-- On constant shift to state 842
-- On class_fun_binding shift to state 1387
## Reductions:

State 1258:
## Known stack suffix:
## EQUAL
## LR(1) items:
class_fun_binding -> EQUAL . class_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1259
-- On LPAREN shift to state 1295
-- On LIDENT shift to state 62
-- On LET shift to state 1296
-- On LBRACKET shift to state 1313
-- On FUN shift to state 1317
-- On mod_longident shift to state 63
-- On class_simple_expr shift to state 1320
-- On class_longident shift to state 1322
-- On class_expr shift to state 1345
## Reductions:

State 1259:
## Known stack suffix:
## OBJECT
## LR(1) items:
class_simple_expr -> OBJECT . class_structure END [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> OBJECT . class_structure error [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
-- On LPAREN shift to state 1260
-- On class_structure shift to state 1266
-- On class_self_pattern shift to state 1269
## Reductions:
-- On error VAL METHOD INITIALIZER INHERIT END CONSTRAINT
--   reduce production class_self_pattern ->

State 1260:
## Known stack suffix:
## LPAREN
## LR(1) items:
class_self_pattern -> LPAREN . pattern RPAREN [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
class_self_pattern -> LPAREN . pattern COLON core_type RPAREN [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1261
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1261:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
class_self_pattern -> LPAREN pattern . RPAREN [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
class_self_pattern -> LPAREN pattern . COLON core_type RPAREN [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
pattern -> pattern . AS val_ident [ RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ RPAREN COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On RPAREN shift to state 1262
-- On COMMA shift to state 854
-- On COLONCOLON shift to state 835
-- On COLON shift to state 1263
-- On BAR shift to state 858
-- On AS shift to state 860
## Reductions:

State 1262:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
class_self_pattern -> LPAREN pattern RPAREN . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_self_pattern -> LPAREN pattern RPAREN

State 1263:
## Known stack suffix:
## LPAREN pattern COLON
## LR(1) items:
class_self_pattern -> LPAREN pattern COLON . core_type RPAREN [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 1264
## Reductions:

State 1264:
## Known stack suffix:
## LPAREN pattern COLON core_type
## LR(1) items:
class_self_pattern -> LPAREN pattern COLON core_type . RPAREN [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On RPAREN shift to state 1265
## Reductions:

State 1265:
## Known stack suffix:
## LPAREN pattern COLON core_type RPAREN
## LR(1) items:
class_self_pattern -> LPAREN pattern COLON core_type RPAREN . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_self_pattern -> LPAREN pattern COLON core_type RPAREN

State 1266:
## Known stack suffix:
## OBJECT class_structure
## LR(1) items:
class_simple_expr -> OBJECT class_structure . END [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> OBJECT class_structure . error [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
-- On error shift to state 1267
-- On END shift to state 1268
## Reductions:

State 1267:
## Known stack suffix:
## OBJECT class_structure error
## LR(1) items:
class_simple_expr -> OBJECT class_structure error . [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> OBJECT class_structure error

State 1268:
## Known stack suffix:
## OBJECT class_structure END
## LR(1) items:
class_simple_expr -> OBJECT class_structure END . [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> OBJECT class_structure END

State 1269:
## Known stack suffix:
## class_self_pattern
## LR(1) items:
class_structure -> class_self_pattern . class_fields [ error END ]
## Transitions:
-- On class_fields shift to state 1270
## Default reduction:
-- After reading the next token, reduce production class_fields ->

State 1270:
## Known stack suffix:
## class_self_pattern class_fields
## LR(1) items:
class_fields -> class_fields . INHERIT class_expr parent_binder [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
class_fields -> class_fields . VAL value [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
class_fields -> class_fields . virtual_method [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
class_fields -> class_fields . concrete_method [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
class_fields -> class_fields . CONSTRAINT constrain [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
class_fields -> class_fields . INITIALIZER seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
class_structure -> class_self_pattern class_fields . [ error END ]
## Transitions:
-- On VAL shift to state 1271
-- On METHOD shift to state 1280
-- On INITIALIZER shift to state 1292
-- On INHERIT shift to state 1294
-- On CONSTRAINT shift to state 1341
-- On virtual_method shift to state 1343
-- On concrete_method shift to state 1344
## Reductions:
-- On error END
--   reduce production class_structure -> class_self_pattern class_fields

State 1271:
## Known stack suffix:
## class_fields VAL
## LR(1) items:
class_fields -> class_fields VAL . value [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On MUTABLE shift to state 311
-- On value shift to state 1272
-- On mutable_flag shift to state 1273
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1272:
## Known stack suffix:
## class_fields VAL value
## LR(1) items:
class_fields -> class_fields VAL value . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields VAL value

State 1273:
## Known stack suffix:
## mutable_flag
## LR(1) items:
value -> mutable_flag . label EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
value -> mutable_flag . label type_constraint EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On LIDENT shift to state 103
-- On label shift to state 1274
## Reductions:

State 1274:
## Known stack suffix:
## mutable_flag label
## LR(1) items:
value -> mutable_flag label . EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
value -> mutable_flag label . type_constraint EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On EQUAL shift to state 1275
-- On COLONGREATER shift to state 1214
-- On COLON shift to state 1217
-- On type_constraint shift to state 1277
## Reductions:

State 1275:
## Known stack suffix:
## mutable_flag label EQUAL
## LR(1) items:
value -> mutable_flag label EQUAL . seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1276
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1276:
## Known stack suffix:
## mutable_flag label EQUAL seq_expr
## LR(1) items:
value -> mutable_flag label EQUAL seq_expr . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value -> mutable_flag label EQUAL seq_expr

State 1277:
## Known stack suffix:
## mutable_flag label type_constraint
## LR(1) items:
value -> mutable_flag label type_constraint . EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On EQUAL shift to state 1278
## Reductions:

State 1278:
## Known stack suffix:
## mutable_flag label type_constraint EQUAL
## LR(1) items:
value -> mutable_flag label type_constraint EQUAL . seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1279
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1279:
## Known stack suffix:
## mutable_flag label type_constraint EQUAL seq_expr
## LR(1) items:
value -> mutable_flag label type_constraint EQUAL seq_expr . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value -> mutable_flag label type_constraint EQUAL seq_expr

State 1280:
## Known stack suffix:
## METHOD
## LR(1) items:
concrete_method -> METHOD . private_flag label strict_binding [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
concrete_method -> METHOD . private_flag label COLON poly_type EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
concrete_method -> METHOD . private_flag LABEL poly_type EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
virtual_method -> METHOD . PRIVATE VIRTUAL label COLON poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
virtual_method -> METHOD . VIRTUAL private_flag label COLON poly_type [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On VIRTUAL shift to state 479
-- On PRIVATE shift to state 490
-- On private_flag shift to state 1281
## Reductions:
-- On LIDENT LABEL
--   reduce production private_flag ->

State 1281:
## Known stack suffix:
## METHOD private_flag
## LR(1) items:
concrete_method -> METHOD private_flag . label strict_binding [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
concrete_method -> METHOD private_flag . label COLON poly_type EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
concrete_method -> METHOD private_flag . LABEL poly_type EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On LIDENT shift to state 103
-- On LABEL shift to state 1282
-- On label shift to state 1286
## Reductions:

State 1282:
## Known stack suffix:
## METHOD private_flag LABEL
## LR(1) items:
concrete_method -> METHOD private_flag LABEL . poly_type EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 110
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On typevar_list shift to state 186
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On poly_type shift to state 1283
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 192
## Reductions:

State 1283:
## Known stack suffix:
## METHOD private_flag LABEL poly_type
## LR(1) items:
concrete_method -> METHOD private_flag LABEL poly_type . EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On EQUAL shift to state 1284
## Reductions:

State 1284:
## Known stack suffix:
## METHOD private_flag LABEL poly_type EQUAL
## LR(1) items:
concrete_method -> METHOD private_flag LABEL poly_type EQUAL . seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1285
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1285:
## Known stack suffix:
## METHOD private_flag LABEL poly_type EQUAL seq_expr
## LR(1) items:
concrete_method -> METHOD private_flag LABEL poly_type EQUAL seq_expr . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production concrete_method -> METHOD private_flag LABEL poly_type EQUAL seq_expr

State 1286:
## Known stack suffix:
## METHOD private_flag label
## LR(1) items:
concrete_method -> METHOD private_flag label . strict_binding [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
concrete_method -> METHOD private_flag label . COLON poly_type EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EQUAL shift to state 1212
-- On COLON shift to state 1287
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On strict_binding shift to state 1291
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1226
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 1287:
## Known stack suffix:
## METHOD private_flag label COLON
## LR(1) items:
concrete_method -> METHOD private_flag label COLON . poly_type EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 110
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On typevar_list shift to state 186
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On poly_type shift to state 1288
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 192
## Reductions:

State 1288:
## Known stack suffix:
## METHOD private_flag label COLON poly_type
## LR(1) items:
concrete_method -> METHOD private_flag label COLON poly_type . EQUAL seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On EQUAL shift to state 1289
## Reductions:

State 1289:
## Known stack suffix:
## METHOD private_flag label COLON poly_type EQUAL
## LR(1) items:
concrete_method -> METHOD private_flag label COLON poly_type EQUAL . seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1290
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1290:
## Known stack suffix:
## METHOD private_flag label COLON poly_type EQUAL seq_expr
## LR(1) items:
concrete_method -> METHOD private_flag label COLON poly_type EQUAL seq_expr . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production concrete_method -> METHOD private_flag label COLON poly_type EQUAL seq_expr

State 1291:
## Known stack suffix:
## METHOD private_flag label strict_binding
## LR(1) items:
concrete_method -> METHOD private_flag label strict_binding . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production concrete_method -> METHOD private_flag label strict_binding

State 1292:
## Known stack suffix:
## class_fields INITIALIZER
## LR(1) items:
class_fields -> class_fields INITIALIZER . seq_expr [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1293
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1293:
## Known stack suffix:
## class_fields INITIALIZER seq_expr
## LR(1) items:
class_fields -> class_fields INITIALIZER seq_expr . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields INITIALIZER seq_expr

State 1294:
## Known stack suffix:
## class_fields INHERIT
## LR(1) items:
class_fields -> class_fields INHERIT . class_expr parent_binder [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1259
-- On LPAREN shift to state 1295
-- On LIDENT shift to state 62
-- On LET shift to state 1296
-- On LBRACKET shift to state 1313
-- On FUN shift to state 1317
-- On mod_longident shift to state 63
-- On class_simple_expr shift to state 1320
-- On class_longident shift to state 1322
-- On class_expr shift to state 1337
## Reductions:

State 1295:
## Known stack suffix:
## LPAREN
## LR(1) items:
class_simple_expr -> LPAREN . class_expr COLON class_type RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> LPAREN . class_expr COLON class_type error [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> LPAREN . class_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> LPAREN . class_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1259
-- On LPAREN shift to state 1295
-- On LIDENT shift to state 62
-- On LET shift to state 1296
-- On LBRACKET shift to state 1313
-- On FUN shift to state 1317
-- On mod_longident shift to state 63
-- On class_simple_expr shift to state 1320
-- On class_longident shift to state 1322
-- On class_expr shift to state 1330
## Reductions:

State 1296:
## Known stack suffix:
## LET
## LR(1) items:
class_expr -> LET . rec_flag let_bindings IN class_expr [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
-- On REC shift to state 22
-- On rec_flag shift to state 1297
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production rec_flag ->

State 1297:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
class_expr -> LET rec_flag . let_bindings IN class_expr [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 1298
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1308
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_bindings shift to state 1311
-- On let_binding shift to state 1329
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1298:
## Known stack suffix:
## val_ident
## LR(1) items:
let_binding -> val_ident . fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
simple_pattern -> val_ident . [ EQUAL COMMA COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EQUAL shift to state 1299
-- On COLONGREATER shift to state 1214
-- On COLON shift to state 1217
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On type_constraint shift to state 1301
-- On strict_binding shift to state 1304
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1305
-- On fun_binding shift to state 1307
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:
-- On COMMA COLONCOLON BAR AS
--   reduce production simple_pattern -> val_ident

State 1299:
## Known stack suffix:
## EQUAL
## LR(1) items:
strict_binding -> EQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1300
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1300:
## Known stack suffix:
## EQUAL seq_expr
## LR(1) items:
strict_binding -> EQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production strict_binding -> EQUAL seq_expr

State 1301:
## Known stack suffix:
## type_constraint
## LR(1) items:
fun_binding -> type_constraint . EQUAL seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1302
## Reductions:

State 1302:
## Known stack suffix:
## type_constraint EQUAL
## LR(1) items:
fun_binding -> type_constraint EQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1303
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1303:
## Known stack suffix:
## type_constraint EQUAL seq_expr
## LR(1) items:
fun_binding -> type_constraint EQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> type_constraint EQUAL seq_expr

State 1304:
## Known stack suffix:
## strict_binding
## LR(1) items:
fun_binding -> strict_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> strict_binding

State 1305:
## Known stack suffix:
## labeled_simple_pattern
## LR(1) items:
strict_binding -> labeled_simple_pattern . fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EQUAL shift to state 1299
-- On COLONGREATER shift to state 1214
-- On COLON shift to state 1217
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On type_constraint shift to state 1301
-- On strict_binding shift to state 1304
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1305
-- On fun_binding shift to state 1306
-- On constr_longident shift to state 871
-- On constant shift to state 842
## Reductions:

State 1306:
## Known stack suffix:
## labeled_simple_pattern fun_binding
## LR(1) items:
strict_binding -> labeled_simple_pattern fun_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production strict_binding -> labeled_simple_pattern fun_binding

State 1307:
## Known stack suffix:
## val_ident fun_binding
## LR(1) items:
let_binding -> val_ident fun_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> val_ident fun_binding

State 1308:
## Known stack suffix:
## pattern
## LR(1) items:
let_binding -> pattern . EQUAL seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
pattern -> pattern . AS val_ident [ EQUAL COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ EQUAL COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ EQUAL COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ EQUAL COMMA COLONCOLON BAR AS ]
## Transitions:
-- On EQUAL shift to state 1309
-- On COMMA shift to state 854
-- On COLONCOLON shift to state 835
-- On BAR shift to state 858
-- On AS shift to state 860
## Reductions:

State 1309:
## Known stack suffix:
## pattern EQUAL
## LR(1) items:
let_binding -> pattern EQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1310
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1310:
## Known stack suffix:
## pattern EQUAL seq_expr
## LR(1) items:
let_binding -> pattern EQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> pattern EQUAL seq_expr

State 1311:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
class_expr -> LET rec_flag let_bindings . IN class_expr [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
let_bindings -> let_bindings . AND let_binding [ IN AND ]
## Transitions:
-- On IN shift to state 1312
-- On AND shift to state 1327
## Reductions:

State 1312:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
class_expr -> LET rec_flag let_bindings IN . class_expr [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1259
-- On LPAREN shift to state 1295
-- On LIDENT shift to state 62
-- On LET shift to state 1296
-- On LBRACKET shift to state 1313
-- On FUN shift to state 1317
-- On mod_longident shift to state 63
-- On class_simple_expr shift to state 1320
-- On class_longident shift to state 1322
-- On class_expr shift to state 1326
## Reductions:

State 1313:
## Known stack suffix:
## LBRACKET
## LR(1) items:
class_simple_expr -> LBRACKET . core_type_comma_list RBRACKET class_longident [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 1314
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 1314:
## Known stack suffix:
## LBRACKET core_type_comma_list
## LR(1) items:
class_simple_expr -> LBRACKET core_type_comma_list . RBRACKET class_longident [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RBRACKET COMMA ]
## Transitions:
-- On RBRACKET shift to state 1315
-- On COMMA shift to state 178
## Reductions:

State 1315:
## Known stack suffix:
## LBRACKET core_type_comma_list RBRACKET
## LR(1) items:
class_simple_expr -> LBRACKET core_type_comma_list RBRACKET . class_longident [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 62
-- On mod_longident shift to state 63
-- On class_longident shift to state 1316
## Reductions:

State 1316:
## Known stack suffix:
## LBRACKET core_type_comma_list RBRACKET class_longident
## LR(1) items:
class_simple_expr -> LBRACKET core_type_comma_list RBRACKET class_longident . [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LBRACKET core_type_comma_list RBRACKET class_longident

State 1317:
## Known stack suffix:
## FUN
## LR(1) items:
class_expr -> FUN . class_fun_def [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1318
-- On constr_longident shift to state 871
-- On constant shift to state 842
-- On class_fun_def shift to state 1325
## Reductions:

State 1318:
## Known stack suffix:
## labeled_simple_pattern
## LR(1) items:
class_fun_def -> labeled_simple_pattern . MINUSGREATER class_expr [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
class_fun_def -> labeled_simple_pattern . class_fun_def [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUSGREATER shift to state 1319
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1318
-- On constr_longident shift to state 871
-- On constant shift to state 842
-- On class_fun_def shift to state 1324
## Reductions:

State 1319:
## Known stack suffix:
## labeled_simple_pattern MINUSGREATER
## LR(1) items:
class_fun_def -> labeled_simple_pattern MINUSGREATER . class_expr [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1259
-- On LPAREN shift to state 1295
-- On LIDENT shift to state 62
-- On LET shift to state 1296
-- On LBRACKET shift to state 1313
-- On FUN shift to state 1317
-- On mod_longident shift to state 63
-- On class_simple_expr shift to state 1320
-- On class_longident shift to state 1322
-- On class_expr shift to state 1323
## Reductions:

State 1320:
## Known stack suffix:
## class_simple_expr
## LR(1) items:
class_expr -> class_simple_expr . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
class_expr -> class_simple_expr . simple_labeled_expr_list [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On TILDE shift to state 975
-- On STRING shift to state 585
-- On QUESTION shift to state 978
-- On PREFIXOP shift to state 586
-- On OPTLABEL shift to state 980
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LABEL shift to state 988
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_labeled_expr_list shift to state 1321
-- On simple_expr shift to state 1069
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On labeled_simple_expr shift to state 1072
-- On label_expr shift to state 1071
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:
-- On error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND
--   reduce production class_expr -> class_simple_expr

State 1321:
## Known stack suffix:
## class_simple_expr simple_labeled_expr_list
## LR(1) items:
class_expr -> class_simple_expr simple_labeled_expr_list . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
simple_labeled_expr_list -> simple_labeled_expr_list . labeled_simple_expr [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
-- On UIDENT shift to state 348
-- On TRUE shift to state 584
-- On TILDE shift to state 975
-- On STRING shift to state 585
-- On QUESTION shift to state 978
-- On PREFIXOP shift to state 586
-- On OPTLABEL shift to state 980
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On LPAREN shift to state 590
-- On LIDENT shift to state 593
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LABEL shift to state 988
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On simple_expr shift to state 1069
-- On name_tag shift to state 982
-- On mod_longident shift to state 983
-- On labeled_simple_expr shift to state 1070
-- On label_expr shift to state 1071
-- On constr_longident shift to state 986
-- On constant shift to state 987
## Reductions:
-- On error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND
--   reduce production class_expr -> class_simple_expr simple_labeled_expr_list

State 1322:
## Known stack suffix:
## class_longident
## LR(1) items:
class_simple_expr -> class_longident . [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> class_longident

State 1323:
## Known stack suffix:
## labeled_simple_pattern MINUSGREATER class_expr
## LR(1) items:
class_fun_def -> labeled_simple_pattern MINUSGREATER class_expr . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_def -> labeled_simple_pattern MINUSGREATER class_expr

State 1324:
## Known stack suffix:
## labeled_simple_pattern class_fun_def
## LR(1) items:
class_fun_def -> labeled_simple_pattern class_fun_def . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_def -> labeled_simple_pattern class_fun_def

State 1325:
## Known stack suffix:
## FUN class_fun_def
## LR(1) items:
class_expr -> FUN class_fun_def . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_expr -> FUN class_fun_def

State 1326:
## Known stack suffix:
## LET rec_flag let_bindings IN class_expr
## LR(1) items:
class_expr -> LET rec_flag let_bindings IN class_expr . [ error VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_expr -> LET rec_flag let_bindings IN class_expr

State 1327:
## Known stack suffix:
## let_bindings AND
## LR(1) items:
let_bindings -> let_bindings AND . let_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 1298
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1308
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_binding shift to state 1328
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1328:
## Known stack suffix:
## let_bindings AND let_binding
## LR(1) items:
let_bindings -> let_bindings AND let_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_bindings -> let_bindings AND let_binding

State 1329:
## Known stack suffix:
## let_binding
## LR(1) items:
let_bindings -> let_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_bindings -> let_binding

State 1330:
## Known stack suffix:
## LPAREN class_expr
## LR(1) items:
class_simple_expr -> LPAREN class_expr . COLON class_type RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> LPAREN class_expr . COLON class_type error [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> LPAREN class_expr . RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> LPAREN class_expr . error [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
-- On error shift to state 1331
-- On RPAREN shift to state 1332
-- On COLON shift to state 1333
## Reductions:

State 1331:
## Known stack suffix:
## LPAREN class_expr error
## LR(1) items:
class_simple_expr -> LPAREN class_expr error . [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LPAREN class_expr error

State 1332:
## Known stack suffix:
## LPAREN class_expr RPAREN
## LR(1) items:
class_simple_expr -> LPAREN class_expr RPAREN . [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LPAREN class_expr RPAREN

State 1333:
## Known stack suffix:
## LPAREN class_expr COLON
## LR(1) items:
class_simple_expr -> LPAREN class_expr COLON . class_type RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> LPAREN class_expr COLON . class_type error [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 523
-- On OPTLABEL shift to state 528
-- On OBJECT shift to state 463
-- On LPAREN shift to state 99
-- On LIDENT shift to state 531
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 535
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 537
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 539
-- On clty_longident shift to state 508
-- On class_type shift to state 1334
-- On class_signature shift to state 543
## Reductions:

State 1334:
## Known stack suffix:
## LPAREN class_expr COLON class_type
## LR(1) items:
class_simple_expr -> LPAREN class_expr COLON class_type . RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
class_simple_expr -> LPAREN class_expr COLON class_type . error [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
-- On error shift to state 1335
-- On RPAREN shift to state 1336
## Reductions:

State 1335:
## Known stack suffix:
## LPAREN class_expr COLON class_type error
## LR(1) items:
class_simple_expr -> LPAREN class_expr COLON class_type error . [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LPAREN class_expr COLON class_type error

State 1336:
## Known stack suffix:
## LPAREN class_expr COLON class_type RPAREN
## LR(1) items:
class_simple_expr -> LPAREN class_expr COLON class_type RPAREN . [ error VAL UIDENT TYPE TRUE TILDE STRING SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION END CONSTRAINT COLON CLASS CHAR BEGIN BACKQUOTE AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LPAREN class_expr COLON class_type RPAREN

State 1337:
## Known stack suffix:
## class_fields INHERIT class_expr
## LR(1) items:
class_fields -> class_fields INHERIT class_expr . parent_binder [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On AS shift to state 1338
-- On parent_binder shift to state 1340
## Reductions:
-- On error VAL METHOD INITIALIZER INHERIT END CONSTRAINT
--   reduce production parent_binder ->

State 1338:
## Known stack suffix:
## AS
## LR(1) items:
parent_binder -> AS . LIDENT [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On LIDENT shift to state 1339
## Reductions:

State 1339:
## Known stack suffix:
## AS LIDENT
## LR(1) items:
parent_binder -> AS LIDENT . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parent_binder -> AS LIDENT

State 1340:
## Known stack suffix:
## class_fields INHERIT class_expr parent_binder
## LR(1) items:
class_fields -> class_fields INHERIT class_expr parent_binder . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields INHERIT class_expr parent_binder

State 1341:
## Known stack suffix:
## class_fields CONSTRAINT
## LR(1) items:
class_fields -> class_fields CONSTRAINT . constrain [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 338
-- On constrain shift to state 1342
## Reductions:

State 1342:
## Known stack suffix:
## class_fields CONSTRAINT constrain
## LR(1) items:
class_fields -> class_fields CONSTRAINT constrain . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields CONSTRAINT constrain

State 1343:
## Known stack suffix:
## class_fields virtual_method
## LR(1) items:
class_fields -> class_fields virtual_method . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields virtual_method

State 1344:
## Known stack suffix:
## class_fields concrete_method
## LR(1) items:
class_fields -> class_fields concrete_method . [ error VAL METHOD INITIALIZER INHERIT END CONSTRAINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields concrete_method

State 1345:
## Known stack suffix:
## EQUAL class_expr
## LR(1) items:
class_fun_binding -> EQUAL class_expr . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_binding -> EQUAL class_expr

State 1346:
## Known stack suffix:
## COLON
## LR(1) items:
class_fun_binding -> COLON . class_type EQUAL class_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 1347
-- On OPTLABEL shift to state 1352
-- On OBJECT shift to state 1355
-- On LPAREN shift to state 99
-- On LIDENT shift to state 1359
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 1363
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1371
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 1373
-- On clty_longident shift to state 1376
-- On class_type shift to state 1382
-- On class_signature shift to state 1378
## Reductions:

State 1347:
## Known stack suffix:
## QUESTION
## LR(1) items:
class_type -> QUESTION . LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 1348
## Reductions:

State 1348:
## Known stack suffix:
## QUESTION LIDENT
## LR(1) items:
class_type -> QUESTION LIDENT . COLON simple_core_type_or_tuple MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On COLON shift to state 1349
## Reductions:

State 1349:
## Known stack suffix:
## QUESTION LIDENT COLON
## LR(1) items:
class_type -> QUESTION LIDENT COLON . simple_core_type_or_tuple MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 99
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1350
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
## Reductions:

State 1350:
## Known stack suffix:
## QUESTION LIDENT COLON simple_core_type_or_tuple
## LR(1) items:
class_type -> QUESTION LIDENT COLON simple_core_type_or_tuple . MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 1351
## Reductions:

State 1351:
## Known stack suffix:
## QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER
## LR(1) items:
class_type -> QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER . class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 1347
-- On OPTLABEL shift to state 1352
-- On OBJECT shift to state 1355
-- On LPAREN shift to state 99
-- On LIDENT shift to state 1359
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 1363
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1371
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 1373
-- On clty_longident shift to state 1376
-- On class_type shift to state 1381
-- On class_signature shift to state 1378
## Reductions:

State 1352:
## Known stack suffix:
## OPTLABEL
## LR(1) items:
class_type -> OPTLABEL . simple_core_type_or_tuple MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 99
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1353
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
## Reductions:

State 1353:
## Known stack suffix:
## OPTLABEL simple_core_type_or_tuple
## LR(1) items:
class_type -> OPTLABEL simple_core_type_or_tuple . MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 1354
## Reductions:

State 1354:
## Known stack suffix:
## OPTLABEL simple_core_type_or_tuple MINUSGREATER
## LR(1) items:
class_type -> OPTLABEL simple_core_type_or_tuple MINUSGREATER . class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 1347
-- On OPTLABEL shift to state 1352
-- On OBJECT shift to state 1355
-- On LPAREN shift to state 99
-- On LIDENT shift to state 1359
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 1363
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1371
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 1373
-- On clty_longident shift to state 1376
-- On class_type shift to state 1380
-- On class_signature shift to state 1378
## Reductions:

State 1355:
## Known stack suffix:
## OBJECT
## LR(1) items:
class_signature -> OBJECT . class_sig_body END [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
class_signature -> OBJECT . class_sig_body error [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 464
-- On class_sig_body shift to state 1356
-- On class_self_type shift to state 470
## Reductions:
-- On error VAL METHOD INHERIT END CONSTRAINT
--   reduce production class_self_type ->

State 1356:
## Known stack suffix:
## OBJECT class_sig_body
## LR(1) items:
class_signature -> OBJECT class_sig_body . END [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
class_signature -> OBJECT class_sig_body . error [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On error shift to state 1357
-- On END shift to state 1358
## Reductions:

State 1357:
## Known stack suffix:
## OBJECT class_sig_body error
## LR(1) items:
class_signature -> OBJECT class_sig_body error . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_signature -> OBJECT class_sig_body error

State 1358:
## Known stack suffix:
## OBJECT class_sig_body END
## LR(1) items:
class_signature -> OBJECT class_sig_body END . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_signature -> OBJECT class_sig_body END

State 1359:
## Known stack suffix:
## LIDENT
## LR(1) items:
class_type -> LIDENT . COLON simple_core_type_or_tuple MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
clty_longident -> LIDENT . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
type_longident -> LIDENT . [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
-- On COLON shift to state 1360
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production clty_longident -> LIDENT
-- On UIDENT STAR SHARP MINUSGREATER LIDENT
--   reduce production type_longident -> LIDENT

State 1360:
## Known stack suffix:
## LIDENT COLON
## LR(1) items:
class_type -> LIDENT COLON . simple_core_type_or_tuple MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 99
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1361
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
## Reductions:

State 1361:
## Known stack suffix:
## LIDENT COLON simple_core_type_or_tuple
## LR(1) items:
class_type -> LIDENT COLON simple_core_type_or_tuple . MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 1362
## Reductions:

State 1362:
## Known stack suffix:
## LIDENT COLON simple_core_type_or_tuple MINUSGREATER
## LR(1) items:
class_type -> LIDENT COLON simple_core_type_or_tuple MINUSGREATER . class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 1347
-- On OPTLABEL shift to state 1352
-- On OBJECT shift to state 1355
-- On LPAREN shift to state 99
-- On LIDENT shift to state 1359
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 1363
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1371
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 1373
-- On clty_longident shift to state 1376
-- On class_type shift to state 1379
-- On class_signature shift to state 1378
## Reductions:

State 1363:
## Known stack suffix:
## LBRACKET
## LR(1) items:
class_signature -> LBRACKET . core_type_comma_list RBRACKET clty_longident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
simple_core_type2 -> LBRACKET . tag_field RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
simple_core_type2 -> LBRACKET . BAR row_field_list RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
simple_core_type2 -> LBRACKET . row_field BAR row_field_list RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
simple_core_type2 -> LBRACKET . GREATER opt_bar row_field_list RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
simple_core_type2 -> LBRACKET . GREATER RBRACKET [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On GREATER shift to state 118
-- On BAR shift to state 163
-- On BACKQUOTE shift to state 69
-- On type_longident shift to state 121
-- On tag_field shift to state 166
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 536
-- On simple_core_type shift to state 146
-- On row_field shift to state 168
-- On name_tag shift to state 140
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 1364
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 1364:
## Known stack suffix:
## LBRACKET core_type_comma_list
## LR(1) items:
class_signature -> LBRACKET core_type_comma_list . RBRACKET clty_longident [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RBRACKET COMMA ]
## Transitions:
-- On RBRACKET shift to state 1365
-- On COMMA shift to state 178
## Reductions:

State 1365:
## Known stack suffix:
## LBRACKET core_type_comma_list RBRACKET
## LR(1) items:
class_signature -> LBRACKET core_type_comma_list RBRACKET . clty_longident [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 60
-- On LIDENT shift to state 1366
-- On mod_ext_longident shift to state 1367
-- On clty_longident shift to state 1370
## Reductions:

State 1366:
## Known stack suffix:
## LIDENT
## LR(1) items:
clty_longident -> LIDENT . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clty_longident -> LIDENT

State 1367:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
clty_longident -> mod_ext_longident . DOT LIDENT [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
## Transitions:
-- On LPAREN shift to state 129
-- On DOT shift to state 1368
## Reductions:

State 1368:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
clty_longident -> mod_ext_longident DOT . LIDENT [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
## Transitions:
-- On UIDENT shift to state 133
-- On LIDENT shift to state 1369
## Reductions:

State 1369:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
clty_longident -> mod_ext_longident DOT LIDENT . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clty_longident -> mod_ext_longident DOT LIDENT

State 1370:
## Known stack suffix:
## LBRACKET core_type_comma_list RBRACKET clty_longident
## LR(1) items:
class_signature -> LBRACKET core_type_comma_list RBRACKET clty_longident . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_signature -> LBRACKET core_type_comma_list RBRACKET clty_longident

State 1371:
## Known stack suffix:
## simple_core_type_or_tuple
## LR(1) items:
class_type -> simple_core_type_or_tuple . MINUSGREATER class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 1372
## Reductions:

State 1372:
## Known stack suffix:
## simple_core_type_or_tuple MINUSGREATER
## LR(1) items:
class_type -> simple_core_type_or_tuple MINUSGREATER . class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 1347
-- On OPTLABEL shift to state 1352
-- On OBJECT shift to state 1355
-- On LPAREN shift to state 99
-- On LIDENT shift to state 1359
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 1363
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1371
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 1373
-- On clty_longident shift to state 1376
-- On class_type shift to state 1377
-- On class_signature shift to state 1378
## Reductions:

State 1373:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
clty_longident -> mod_ext_longident . DOT LIDENT [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
type_longident -> mod_ext_longident . DOT LIDENT [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
-- On LPAREN shift to state 129
-- On DOT shift to state 1374
## Reductions:

State 1374:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
clty_longident -> mod_ext_longident DOT . LIDENT [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
type_longident -> mod_ext_longident DOT . LIDENT [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
-- On UIDENT shift to state 133
-- On LIDENT shift to state 1375
## Reductions:

State 1375:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
clty_longident -> mod_ext_longident DOT LIDENT . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
type_longident -> mod_ext_longident DOT LIDENT . [ UIDENT STAR SHARP MINUSGREATER LIDENT ]
## Transitions:
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production clty_longident -> mod_ext_longident DOT LIDENT
-- On UIDENT STAR SHARP MINUSGREATER LIDENT
--   reduce production type_longident -> mod_ext_longident DOT LIDENT

State 1376:
## Known stack suffix:
## clty_longident
## LR(1) items:
class_signature -> clty_longident . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_signature -> clty_longident

State 1377:
## Known stack suffix:
## simple_core_type_or_tuple MINUSGREATER class_type
## LR(1) items:
class_type -> simple_core_type_or_tuple MINUSGREATER class_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> simple_core_type_or_tuple MINUSGREATER class_type

State 1378:
## Known stack suffix:
## class_signature
## LR(1) items:
class_type -> class_signature . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> class_signature

State 1379:
## Known stack suffix:
## LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type
## LR(1) items:
class_type -> LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type

State 1380:
## Known stack suffix:
## OPTLABEL simple_core_type_or_tuple MINUSGREATER class_type
## LR(1) items:
class_type -> OPTLABEL simple_core_type_or_tuple MINUSGREATER class_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> OPTLABEL simple_core_type_or_tuple MINUSGREATER class_type

State 1381:
## Known stack suffix:
## QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type
## LR(1) items:
class_type -> QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type -> QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type

State 1382:
## Known stack suffix:
## COLON class_type
## LR(1) items:
class_fun_binding -> COLON class_type . EQUAL class_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1383
## Reductions:

State 1383:
## Known stack suffix:
## COLON class_type EQUAL
## LR(1) items:
class_fun_binding -> COLON class_type EQUAL . class_expr [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1259
-- On LPAREN shift to state 1295
-- On LIDENT shift to state 62
-- On LET shift to state 1296
-- On LBRACKET shift to state 1313
-- On FUN shift to state 1317
-- On mod_longident shift to state 63
-- On class_simple_expr shift to state 1320
-- On class_longident shift to state 1322
-- On class_expr shift to state 1384
## Reductions:

State 1384:
## Known stack suffix:
## COLON class_type EQUAL class_expr
## LR(1) items:
class_fun_binding -> COLON class_type EQUAL class_expr . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_binding -> COLON class_type EQUAL class_expr

State 1385:
## Known stack suffix:
## labeled_simple_pattern
## LR(1) items:
class_fun_binding -> labeled_simple_pattern . class_fun_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EQUAL shift to state 1258
-- On COLON shift to state 1346
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1385
-- On constr_longident shift to state 871
-- On constant shift to state 842
-- On class_fun_binding shift to state 1386
## Reductions:

State 1386:
## Known stack suffix:
## labeled_simple_pattern class_fun_binding
## LR(1) items:
class_fun_binding -> labeled_simple_pattern class_fun_binding . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_binding -> labeled_simple_pattern class_fun_binding

State 1387:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT class_fun_binding
## LR(1) items:
class_declaration -> virtual_flag class_type_parameters LIDENT class_fun_binding . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_declaration -> virtual_flag class_type_parameters LIDENT class_fun_binding

State 1388:
## Known stack suffix:
## CLASS class_declarations
## LR(1) items:
class_declarations -> class_declarations . AND class_declaration [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
structure_item -> CLASS class_declarations . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On AND shift to state 1389
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> CLASS class_declarations

State 1389:
## Known stack suffix:
## class_declarations AND
## LR(1) items:
class_declarations -> class_declarations AND . class_declaration [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 1255
-- On class_declaration shift to state 1390
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1390:
## Known stack suffix:
## class_declarations AND class_declaration
## LR(1) items:
class_declarations -> class_declarations AND class_declaration . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_declarations -> class_declarations AND class_declaration

State 1391:
## Known stack suffix:
## class_declaration
## LR(1) items:
class_declarations -> class_declaration . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_declarations -> class_declaration

State 1392:
## Known stack suffix:
## SEMISEMI structure_item
## LR(1) items:
structure_tail -> SEMISEMI structure_item . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 580
-- On SEMISEMI shift to state 607
-- On OPEN shift to state 608
-- On MODULE shift to state 610
-- On LET shift to state 1393
-- On INCLUDE shift to state 1238
-- On EXTERNAL shift to state 1240
-- On EXCEPTION shift to state 1245
-- On CLASS shift to state 1252
-- On structure_tail shift to state 1396
-- On structure_item shift to state 1397
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1393:
## Known stack suffix:
## LET
## LR(1) items:
structure_item -> LET . rec_flag let_bindings [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On REC shift to state 22
-- On rec_flag shift to state 1394
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production rec_flag ->

State 1394:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
structure_item -> LET rec_flag . let_bindings [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 785
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1229
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_bindings shift to state 1395
-- On let_binding shift to state 1237
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1395:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On AND shift to state 1235
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> LET rec_flag let_bindings

State 1396:
## Known stack suffix:
## SEMISEMI structure_item structure_tail
## LR(1) items:
structure_tail -> SEMISEMI structure_item structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> SEMISEMI structure_item structure_tail

State 1397:
## Known stack suffix:
## structure_item
## LR(1) items:
structure_tail -> structure_item . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 580
-- On SEMISEMI shift to state 607
-- On OPEN shift to state 608
-- On MODULE shift to state 610
-- On LET shift to state 1393
-- On INCLUDE shift to state 1238
-- On EXTERNAL shift to state 1240
-- On EXCEPTION shift to state 1245
-- On CLASS shift to state 1252
-- On structure_tail shift to state 1398
-- On structure_item shift to state 1397
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1398:
## Known stack suffix:
## structure_item structure_tail
## LR(1) items:
structure_tail -> structure_item structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> structure_item structure_tail

State 1399:
## Known stack suffix:
## SEMISEMI seq_expr
## LR(1) items:
structure_tail -> SEMISEMI seq_expr . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 580
-- On SEMISEMI shift to state 607
-- On OPEN shift to state 608
-- On MODULE shift to state 610
-- On LET shift to state 1393
-- On INCLUDE shift to state 1238
-- On EXTERNAL shift to state 1240
-- On EXCEPTION shift to state 1245
-- On CLASS shift to state 1252
-- On structure_tail shift to state 1400
-- On structure_item shift to state 1397
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1400:
## Known stack suffix:
## SEMISEMI seq_expr structure_tail
## LR(1) items:
structure_tail -> SEMISEMI seq_expr structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> SEMISEMI seq_expr structure_tail

State 1401:
## Known stack suffix:
## structure_tail
## LR(1) items:
structure -> structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure -> structure_tail

State 1402:
## Known stack suffix:
## STRUCT structure
## LR(1) items:
module_expr -> STRUCT structure . END [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
module_expr -> STRUCT structure . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
-- On error shift to state 1403
-- On END shift to state 1404
## Reductions:

State 1403:
## Known stack suffix:
## STRUCT structure error
## LR(1) items:
module_expr -> STRUCT structure error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> STRUCT structure error

State 1404:
## Known stack suffix:
## STRUCT structure END
## LR(1) items:
module_expr -> STRUCT structure END . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END COLON CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> STRUCT structure END

State 1405:
## Known stack suffix:
## seq_expr
## LR(1) items:
structure -> seq_expr . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 580
-- On SEMISEMI shift to state 607
-- On OPEN shift to state 608
-- On MODULE shift to state 610
-- On LET shift to state 1393
-- On INCLUDE shift to state 1238
-- On EXTERNAL shift to state 1240
-- On EXCEPTION shift to state 1245
-- On CLASS shift to state 1252
-- On structure_tail shift to state 1406
-- On structure_item shift to state 1397
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1406:
## Known stack suffix:
## seq_expr structure_tail
## LR(1) items:
structure -> seq_expr structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure -> seq_expr structure_tail

State 1407:
## Known stack suffix:
## LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN COLON ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN COLON ]
module_expr -> LPAREN module_expr . COLON module_type RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> LPAREN module_expr . COLON module_type error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> LPAREN module_expr . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> LPAREN module_expr . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On error shift to state 1408
-- On RPAREN shift to state 1409
-- On LPAREN shift to state 627
-- On COLON shift to state 1410
## Reductions:

State 1408:
## Known stack suffix:
## LPAREN module_expr error
## LR(1) items:
module_expr -> LPAREN module_expr error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr error

State 1409:
## Known stack suffix:
## LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr RPAREN . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr RPAREN

State 1410:
## Known stack suffix:
## LPAREN module_expr COLON
## LR(1) items:
module_expr -> LPAREN module_expr COLON . module_type RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> LPAREN module_expr COLON . module_type error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 358
-- On SIG shift to state 359
-- On LPAREN shift to state 363
-- On LIDENT shift to state 80
-- On FUNCTOR shift to state 364
-- On mty_longident shift to state 410
-- On module_type shift to state 1411
-- On mod_ext_longident shift to state 433
-- On ident shift to state 437
## Reductions:

State 1411:
## Known stack suffix:
## LPAREN module_expr COLON module_type
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> LPAREN module_expr COLON module_type . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
## Transitions:
-- On error shift to state 1412
-- On WITH shift to state 412
-- On RPAREN shift to state 1413
## Reductions:

State 1412:
## Known stack suffix:
## LPAREN module_expr COLON module_type error
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr COLON module_type error

State 1413:
## Known stack suffix:
## LPAREN module_expr COLON module_type RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type RPAREN . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr COLON module_type RPAREN

State 1414:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_expr -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 1415
## Reductions:

State 1415:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1416
## Reductions:

State 1416:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On COLON shift to state 1417
## Reductions:

State 1417:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 1418
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 1418:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 374
-- On RPAREN shift to state 1419
## Reductions:

State 1419:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 1420
## Reductions:

State 1420:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On STRUCT shift to state 579
-- On LPAREN shift to state 605
-- On FUNCTOR shift to state 1414
-- On module_expr shift to state 1421
-- On mod_longident shift to state 1426
## Reductions:

State 1421:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 1422
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr

State 1422:
## Known stack suffix:
## module_expr LPAREN
## LR(1) items:
module_expr -> module_expr LPAREN . module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> module_expr LPAREN . module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 348
-- On STRUCT shift to state 606
-- On LPAREN shift to state 618
-- On FUNCTOR shift to state 619
-- On module_expr shift to state 1423
-- On mod_longident shift to state 631
## Reductions:

State 1423:
## Known stack suffix:
## module_expr LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On error shift to state 1424
-- On RPAREN shift to state 1425
-- On LPAREN shift to state 627
## Reductions:

State 1424:
## Known stack suffix:
## module_expr LPAREN module_expr error
## LR(1) items:
module_expr -> module_expr LPAREN module_expr error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> module_expr LPAREN module_expr error

State 1425:
## Known stack suffix:
## module_expr LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> module_expr LPAREN module_expr RPAREN . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> module_expr LPAREN module_expr RPAREN

State 1426:
## Known stack suffix:
## mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF DOT CLASS AND ]
module_expr -> mod_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On DOT shift to state 394
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production module_expr -> mod_longident

State 1427:
## Known stack suffix:
## COLON module_type EQUAL module_expr
## LR(1) items:
module_binding -> COLON module_type EQUAL module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1422
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_binding -> COLON module_type EQUAL module_expr

State 1428:
## Known stack suffix:
## LET MODULE UIDENT module_binding
## LR(1) items:
expr -> LET MODULE UIDENT module_binding . IN seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On IN shift to state 1429
## Reductions:

State 1429:
## Known stack suffix:
## LET MODULE UIDENT module_binding IN
## LR(1) items:
expr -> LET MODULE UIDENT module_binding IN . seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 16
-- On UIDENT shift to state 348
-- On TRY shift to state 582
-- On TRUE shift to state 584
-- On STRING shift to state 585
-- On PREFIXOP shift to state 586
-- On NEW shift to state 587
-- On NATIVEINT shift to state 589
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 595
-- On LPAREN shift to state 590
-- On LIDENT shift to state 598
-- On LET shift to state 599
-- On LBRACKETBAR shift to state 594
-- On LBRACKET shift to state 803
-- On LBRACELESS shift to state 804
-- On LBRACE shift to state 810
-- On LAZY shift to state 815
-- On INT64 shift to state 692
-- On INT32 shift to state 693
-- On INT shift to state 694
-- On IF shift to state 818
-- On FUNCTION shift to state 827
-- On FUN shift to state 899
-- On FOR shift to state 902
-- On FLOAT shift to state 695
-- On FALSE shift to state 696
-- On CHAR shift to state 816
-- On BEGIN shift to state 817
-- On BACKQUOTE shift to state 700
-- On ASSERT shift to state 964
-- On val_longident shift to state 965
-- On val_ident shift to state 966
-- On subtractive shift to state 973
-- On simple_expr shift to state 974
-- On seq_expr shift to state 1430
-- On name_tag shift to state 996
-- On mod_longident shift to state 983
-- On label shift to state 998
-- On expr_comma_list shift to state 1000
-- On expr shift to state 1045
-- On constr_longident shift to state 1007
-- On constant shift to state 987
## Reductions:

State 1430:
## Known stack suffix:
## LET MODULE UIDENT module_binding IN seq_expr
## LR(1) items:
expr -> LET MODULE UIDENT module_binding IN seq_expr . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET MODULE UIDENT module_binding IN seq_expr

State 1431:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr -> LET rec_flag . let_bindings IN seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 1298
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1308
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_bindings shift to state 1432
-- On let_binding shift to state 1329
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1432:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr -> LET rec_flag let_bindings . IN seq_expr [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ IN AND ]
## Transitions:
-- On IN shift to state 1233
-- On AND shift to state 1327
## Reductions:

State 1433:
## Known stack suffix:
## LBRACKET expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI RBRACKET ]
simple_expr -> LBRACKET expr_semi_list . opt_semi RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list . opt_semi error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1434
## Reductions:
-- On error RBRACKET
--   reduce production opt_semi ->

State 1434:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi . RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list opt_semi . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1435
-- On RBRACKET shift to state 1436
## Reductions:

State 1435:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi error . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKET expr_semi_list opt_semi error

State 1436:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi RBRACKET
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET

State 1437:
## Known stack suffix:
## MATCH seq_expr
## LR(1) items:
expr -> MATCH seq_expr . WITH opt_bar match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WITH shift to state 1438
## Reductions:

State 1438:
## Known stack suffix:
## MATCH seq_expr WITH
## LR(1) items:
expr -> MATCH seq_expr WITH . opt_bar match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 113
-- On opt_bar shift to state 1439
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production opt_bar ->

State 1439:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar
## LR(1) items:
expr -> MATCH seq_expr WITH opt_bar . match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 843
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On match_cases shift to state 1440
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1440:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar match_cases
## LR(1) items:
expr -> MATCH seq_expr WITH opt_bar match_cases . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1144
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> MATCH seq_expr WITH opt_bar match_cases

State 1441:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR BARRBRACKET . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR BARRBRACKET

State 1442:
## Known stack suffix:
## LBRACKETBAR expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI BARRBRACKET ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi BARRBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1443
## Reductions:
-- On error BARRBRACKET
--   reduce production opt_semi ->

State 1443:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . BARRBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1444
-- On BARRBRACKET shift to state 1445
## Reductions:

State 1444:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi error . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi error

State 1445:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET

State 1446:
## Known stack suffix:
## PREFIXOP simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> PREFIXOP simple_expr . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> PREFIXOP simple_expr

State 1447:
## Known stack suffix:
## MINUSDOT
## LR(1) items:
operator -> MINUSDOT . [ RPAREN ]
subtractive -> MINUSDOT . [ WHILE UIDENT TRY TRUE STRING PREFIXOP NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BACKQUOTE ASSERT ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> MINUSDOT
-- On WHILE UIDENT TRY TRUE STRING PREFIXOP NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BACKQUOTE ASSERT
--   reduce production subtractive -> MINUSDOT

State 1448:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
subtractive -> MINUS . [ WHILE UIDENT TRY TRUE STRING PREFIXOP NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BACKQUOTE ASSERT ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> MINUS
-- On WHILE UIDENT TRY TRUE STRING PREFIXOP NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN BACKQUOTE ASSERT
--   reduce production subtractive -> MINUS

State 1449:
## Known stack suffix:
## LPAREN seq_expr
## LR(1) items:
simple_expr -> LPAREN seq_expr . RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . error [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . type_constraint RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1450
-- On RPAREN shift to state 1451
-- On COLONGREATER shift to state 1214
-- On COLON shift to state 1217
-- On type_constraint shift to state 1452
## Reductions:

State 1450:
## Known stack suffix:
## LPAREN seq_expr error
## LR(1) items:
simple_expr -> LPAREN seq_expr error . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr error

State 1451:
## Known stack suffix:
## LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr RPAREN . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr RPAREN

State 1452:
## Known stack suffix:
## LPAREN seq_expr type_constraint
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint . RPAREN [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 1453
## Reductions:

State 1453:
## Known stack suffix:
## LPAREN seq_expr type_constraint RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint RPAREN . [ error VAL UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL END ELSE DOT CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BACKQUOTE AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr type_constraint RPAREN

State 1454:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR BARRBRACKET . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR BARRBRACKET

State 1455:
## Known stack suffix:
## LBRACKETBAR expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI BARRBRACKET ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi BARRBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1456
## Reductions:
-- On error BARRBRACKET
--   reduce production opt_semi ->

State 1456:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . BARRBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1457
-- On BARRBRACKET shift to state 1458
## Reductions:

State 1457:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi error . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi error

State 1458:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET

State 1459:
## Known stack suffix:
## TRY seq_expr
## LR(1) items:
expr -> TRY seq_expr . WITH opt_bar match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr . WITH error [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WITH shift to state 1460
## Reductions:

State 1460:
## Known stack suffix:
## TRY seq_expr WITH
## LR(1) items:
expr -> TRY seq_expr WITH . opt_bar match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr WITH . error [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1461
-- On BAR shift to state 113
-- On opt_bar shift to state 1462
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production opt_bar ->

State 1461:
## Known stack suffix:
## TRY seq_expr WITH error
## LR(1) items:
expr -> TRY seq_expr WITH error . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRY seq_expr WITH error

State 1462:
## Known stack suffix:
## TRY seq_expr WITH opt_bar
## LR(1) items:
expr -> TRY seq_expr WITH opt_bar . match_cases [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 843
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On match_cases shift to state 1463
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1463:
## Known stack suffix:
## TRY seq_expr WITH opt_bar match_cases
## LR(1) items:
expr -> TRY seq_expr WITH opt_bar match_cases . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1144
## Reductions:
-- On error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> TRY seq_expr WITH opt_bar match_cases

State 1464:
## Known stack suffix:
## STRUCT structure
## LR(1) items:
module_expr -> STRUCT structure . END [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> STRUCT structure . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On error shift to state 1465
-- On END shift to state 1466
## Reductions:

State 1465:
## Known stack suffix:
## STRUCT structure error
## LR(1) items:
module_expr -> STRUCT structure error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> STRUCT structure error

State 1466:
## Known stack suffix:
## STRUCT structure END
## LR(1) items:
module_expr -> STRUCT structure END . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> STRUCT structure END

State 1467:
## Known stack suffix:
## EQUAL module_expr
## LR(1) items:
module_binding -> EQUAL module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1422
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_binding -> EQUAL module_expr

State 1468:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_binding
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding

State 1469:
## Known stack suffix:
## LET MODULE UIDENT module_binding
## LR(1) items:
expr -> LET MODULE UIDENT module_binding . IN seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On IN shift to state 1470
## Reductions:

State 1470:
## Known stack suffix:
## LET MODULE UIDENT module_binding IN
## LR(1) items:
expr -> LET MODULE UIDENT module_binding IN . seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1471
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1471:
## Known stack suffix:
## LET MODULE UIDENT module_binding IN seq_expr
## LR(1) items:
expr -> LET MODULE UIDENT module_binding IN seq_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET MODULE UIDENT module_binding IN seq_expr

State 1472:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr -> LET rec_flag . let_bindings IN seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 1298
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1308
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_bindings shift to state 1473
-- On let_binding shift to state 1329
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1473:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr -> LET rec_flag let_bindings . IN seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ IN AND ]
## Transitions:
-- On IN shift to state 1474
-- On AND shift to state 1327
## Reductions:

State 1474:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
expr -> LET rec_flag let_bindings IN . seq_expr [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1475
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1475:
## Known stack suffix:
## LET rec_flag let_bindings IN seq_expr
## LR(1) items:
expr -> LET rec_flag let_bindings IN seq_expr . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET rec_flag let_bindings IN seq_expr

State 1476:
## Known stack suffix:
## MATCH seq_expr
## LR(1) items:
expr -> MATCH seq_expr . WITH opt_bar match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WITH shift to state 1477
## Reductions:

State 1477:
## Known stack suffix:
## MATCH seq_expr WITH
## LR(1) items:
expr -> MATCH seq_expr WITH . opt_bar match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 113
-- On opt_bar shift to state 1478
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production opt_bar ->

State 1478:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar
## LR(1) items:
expr -> MATCH seq_expr WITH opt_bar . match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 848
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On match_cases shift to state 1479
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1479:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar match_cases
## LR(1) items:
expr -> MATCH seq_expr WITH opt_bar match_cases . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1131
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> MATCH seq_expr WITH opt_bar match_cases

State 1480:
## Known stack suffix:
## WHILE seq_expr
## LR(1) items:
expr -> WHILE seq_expr . DO seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 1481
## Reductions:

State 1481:
## Known stack suffix:
## WHILE seq_expr DO
## LR(1) items:
expr -> WHILE seq_expr DO . seq_expr DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1482
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1482:
## Known stack suffix:
## WHILE seq_expr DO seq_expr
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr . DONE [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DONE shift to state 1483
## Reductions:

State 1483:
## Known stack suffix:
## WHILE seq_expr DO seq_expr DONE
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr DONE . [ error VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE PLUS OR OPEN MODULE MINUSDOT MINUS METHOD LET LESS INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL END ELSE CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> WHILE seq_expr DO seq_expr DONE

State 1484:
## Known stack suffix:
## LPAREN seq_expr
## LR(1) items:
simple_expr -> LPAREN seq_expr . RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . type_constraint RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1485
-- On RPAREN shift to state 1486
-- On COLONGREATER shift to state 1214
-- On COLON shift to state 1217
-- On type_constraint shift to state 1487
## Reductions:

State 1485:
## Known stack suffix:
## LPAREN seq_expr error
## LR(1) items:
simple_expr -> LPAREN seq_expr error . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr error

State 1486:
## Known stack suffix:
## LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr RPAREN . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr RPAREN

State 1487:
## Known stack suffix:
## LPAREN seq_expr type_constraint
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint . RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 1488
## Reductions:

State 1488:
## Known stack suffix:
## LPAREN seq_expr type_constraint RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint RPAREN . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr type_constraint RPAREN

State 1489:
## Known stack suffix:
## PREFIXOP simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr RBRACE [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACE expr_comma_list error [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> PREFIXOP simple_expr . [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DONE DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR BACKQUOTE AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> PREFIXOP simple_expr

State 1490:
## Known stack suffix:
## TRY seq_expr
## LR(1) items:
expr -> TRY seq_expr . WITH opt_bar match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr . WITH error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WITH shift to state 1491
## Reductions:

State 1491:
## Known stack suffix:
## TRY seq_expr WITH
## LR(1) items:
expr -> TRY seq_expr WITH . opt_bar match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr WITH . error [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1492
-- On BAR shift to state 113
-- On opt_bar shift to state 1493
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production opt_bar ->

State 1492:
## Known stack suffix:
## TRY seq_expr WITH error
## LR(1) items:
expr -> TRY seq_expr WITH error . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRY seq_expr WITH error

State 1493:
## Known stack suffix:
## TRY seq_expr WITH opt_bar
## LR(1) items:
expr -> TRY seq_expr WITH opt_bar . match_cases [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 848
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On match_cases shift to state 1494
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1494:
## Known stack suffix:
## TRY seq_expr WITH opt_bar match_cases
## LR(1) items:
expr -> TRY seq_expr WITH opt_bar match_cases . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1131
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> TRY seq_expr WITH opt_bar match_cases

State 1495:
## Known stack suffix:
## WHILE seq_expr
## LR(1) items:
expr -> WHILE seq_expr . DO seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 1496
## Reductions:

State 1496:
## Known stack suffix:
## WHILE seq_expr DO
## LR(1) items:
expr -> WHILE seq_expr DO . seq_expr DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 21
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1497
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1497:
## Known stack suffix:
## WHILE seq_expr DO seq_expr
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr . DONE [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DONE shift to state 1498
## Reductions:

State 1498:
## Known stack suffix:
## WHILE seq_expr DO seq_expr DONE
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr DONE . [ WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACE PLUS OR OPEN MODULE MINUSGREATER MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DONE DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> WHILE seq_expr DO seq_expr DONE

State 1499:
## Known stack suffix:
## TYPE
## LR(1) items:
structure_item -> TYPE . type_declarations [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On LPAREN shift to state 280
-- On type_variance shift to state 281
-- On type_parameters shift to state 1500
-- On type_parameter shift to state 342
-- On type_declarations shift to state 1539
-- On type_declaration shift to state 1542
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->
-- On QUOTE
--   reduce production type_variance ->

State 1500:
## Known stack suffix:
## type_parameters
## LR(1) items:
type_declaration -> type_parameters . LIDENT type_kind constraints [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 1501
## Reductions:

State 1501:
## Known stack suffix:
## type_parameters LIDENT
## LR(1) items:
type_declaration -> type_parameters LIDENT . type_kind constraints [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1502
-- On type_kind shift to state 1537
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind ->

State 1502:
## Known stack suffix:
## EQUAL
## LR(1) items:
type_kind -> EQUAL . core_type [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . PRIVATE constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . private_flag BAR constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . private_flag LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL private_flag opt_bar constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL private_flag LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 1503
-- On TRUE shift to state 1504
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On PRIVATE shift to state 1505
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 1519
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On FALSE shift to state 1509
-- On COLONCOLON shift to state 1510
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On private_flag shift to state 1520
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 1527
-- On constructor_declarations shift to state 1536
-- On constructor_declaration shift to state 1518
-- On constr_ident shift to state 1514
## Reductions:
-- On LBRACE BAR
--   reduce production private_flag ->

State 1503:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> UIDENT

State 1504:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_ident -> TRUE . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> TRUE

State 1505:
## Known stack suffix:
## EQUAL PRIVATE
## LR(1) items:
private_flag -> PRIVATE . [ LBRACE BAR ]
type_kind -> EQUAL PRIVATE . constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1506
-- On TRUE shift to state 1504
-- On LPAREN shift to state 1507
-- On FALSE shift to state 1509
-- On COLONCOLON shift to state 1510
-- On constructor_declarations shift to state 1511
-- On constructor_declaration shift to state 1518
-- On constr_ident shift to state 1514
## Reductions:
-- On LBRACE BAR
--   reduce production private_flag -> PRIVATE

State 1506:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> UIDENT

State 1507:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RPAREN shift to state 1508
## Reductions:

State 1508:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_ident -> LPAREN RPAREN . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> LPAREN RPAREN

State 1509:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_ident -> FALSE . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> FALSE

State 1510:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
constr_ident -> COLONCOLON . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> COLONCOLON

State 1511:
## Known stack suffix:
## EQUAL PRIVATE constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL PRIVATE constructor_declarations . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1512
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL PRIVATE constructor_declarations

State 1512:
## Known stack suffix:
## constructor_declarations BAR
## LR(1) items:
constructor_declarations -> constructor_declarations BAR . constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 1506
-- On TRUE shift to state 1504
-- On LPAREN shift to state 1507
-- On FALSE shift to state 1509
-- On COLONCOLON shift to state 1510
-- On constructor_declaration shift to state 1513
-- On constr_ident shift to state 1514
## Reductions:

State 1513:
## Known stack suffix:
## constructor_declarations BAR constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declarations BAR constructor_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declarations -> constructor_declarations BAR constructor_declaration

State 1514:
## Known stack suffix:
## constr_ident
## LR(1) items:
constructor_declaration -> constr_ident . constructor_arguments [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 1515
-- On constructor_arguments shift to state 1517
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constructor_arguments ->

State 1515:
## Known stack suffix:
## OF
## LR(1) items:
constructor_arguments -> OF . core_type_list [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On LPAREN shift to state 99
-- On LIDENT shift to state 117
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 148
-- On mod_ext_longident shift to state 128
-- On core_type_list shift to state 1516
## Reductions:

State 1516:
## Known stack suffix:
## OF core_type_list
## LR(1) items:
constructor_arguments -> OF core_type_list . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
core_type_list -> core_type_list . STAR simple_core_type [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On STAR shift to state 150
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constructor_arguments -> OF core_type_list

State 1517:
## Known stack suffix:
## constr_ident constructor_arguments
## LR(1) items:
constructor_declaration -> constr_ident constructor_arguments . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declaration -> constr_ident constructor_arguments

State 1518:
## Known stack suffix:
## constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declarations -> constructor_declaration

State 1519:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN type_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
simple_core_type2 -> LPAREN . core_type_comma_list RPAREN SHARP class_longident opt_present [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On RPAREN shift to state 1508
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 200
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 1520:
## Known stack suffix:
## EQUAL private_flag
## LR(1) items:
type_kind -> EQUAL private_flag . BAR constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL private_flag . LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On LBRACE shift to state 1521
-- On BAR shift to state 1525
## Reductions:

State 1521:
## Known stack suffix:
## EQUAL private_flag LBRACE
## LR(1) items:
type_kind -> EQUAL private_flag LBRACE . label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 311
-- On mutable_flag shift to state 312
-- On label_declarations shift to state 1522
-- On label_declaration shift to state 321
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1522:
## Known stack suffix:
## EQUAL private_flag LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL private_flag LBRACE label_declarations . opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 317
-- On opt_semi shift to state 1523
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 1523:
## Known stack suffix:
## EQUAL private_flag LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL private_flag LBRACE label_declarations opt_semi . RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 1524
## Reductions:

State 1524:
## Known stack suffix:
## EQUAL private_flag LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL private_flag LBRACE label_declarations opt_semi RBRACE . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_kind -> EQUAL private_flag LBRACE label_declarations opt_semi RBRACE

State 1525:
## Known stack suffix:
## EQUAL private_flag BAR
## LR(1) items:
type_kind -> EQUAL private_flag BAR . constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1506
-- On TRUE shift to state 1504
-- On LPAREN shift to state 1507
-- On FALSE shift to state 1509
-- On COLONCOLON shift to state 1510
-- On constructor_declarations shift to state 1526
-- On constructor_declaration shift to state 1518
-- On constr_ident shift to state 1514
## Reductions:

State 1526:
## Known stack suffix:
## EQUAL private_flag BAR constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL private_flag BAR constructor_declarations . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1512
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL private_flag BAR constructor_declarations

State 1527:
## Known stack suffix:
## EQUAL core_type
## LR(1) items:
type_kind -> EQUAL core_type . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL private_flag opt_bar constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL private_flag LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1528
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type

State 1528:
## Known stack suffix:
## EQUAL core_type EQUAL
## LR(1) items:
type_kind -> EQUAL core_type EQUAL . private_flag opt_bar constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type EQUAL . private_flag LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On PRIVATE shift to state 326
-- On private_flag shift to state 1529
## Reductions:
-- On UIDENT TRUE LPAREN LBRACE FALSE COLONCOLON BAR
--   reduce production private_flag ->

State 1529:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag . opt_bar constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type EQUAL private_flag . LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On LBRACE shift to state 1530
-- On BAR shift to state 113
-- On opt_bar shift to state 1534
## Reductions:
-- On UIDENT TRUE LPAREN FALSE COLONCOLON
--   reduce production opt_bar ->

State 1530:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag LBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag LBRACE . label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 311
-- On mutable_flag shift to state 312
-- On label_declarations shift to state 1531
-- On label_declaration shift to state 321
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1531:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL core_type EQUAL private_flag LBRACE label_declarations . opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 317
-- On opt_semi shift to state 1532
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 1532:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi . RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 1533
## Reductions:

State 1533:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi RBRACE . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_kind -> EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi RBRACE

State 1534:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag opt_bar
## LR(1) items:
type_kind -> EQUAL core_type EQUAL private_flag opt_bar . constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1506
-- On TRUE shift to state 1504
-- On LPAREN shift to state 1507
-- On FALSE shift to state 1509
-- On COLONCOLON shift to state 1510
-- On constructor_declarations shift to state 1535
-- On constructor_declaration shift to state 1518
-- On constr_ident shift to state 1514
## Reductions:

State 1535:
## Known stack suffix:
## EQUAL core_type EQUAL private_flag opt_bar constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL core_type EQUAL private_flag opt_bar constructor_declarations . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1512
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type EQUAL private_flag opt_bar constructor_declarations

State 1536:
## Known stack suffix:
## EQUAL constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL constructor_declarations . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1512
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL constructor_declarations

State 1537:
## Known stack suffix:
## type_parameters LIDENT type_kind
## LR(1) items:
type_declaration -> type_parameters LIDENT type_kind . constraints [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On constraints shift to state 1538
## Default reduction:
-- After reading the next token, reduce production constraints ->

State 1538:
## Known stack suffix:
## type_parameters LIDENT type_kind constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_declaration -> type_parameters LIDENT type_kind constraints . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 385
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production type_declaration -> type_parameters LIDENT type_kind constraints

State 1539:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
structure_item -> TYPE type_declarations . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
type_declarations -> type_declarations . AND type_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On AND shift to state 1540
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> TYPE type_declarations

State 1540:
## Known stack suffix:
## type_declarations AND
## LR(1) items:
type_declarations -> type_declarations AND . type_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On LPAREN shift to state 280
-- On type_variance shift to state 281
-- On type_parameters shift to state 1500
-- On type_parameter shift to state 342
-- On type_declaration shift to state 1541
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->
-- On QUOTE
--   reduce production type_variance ->

State 1541:
## Known stack suffix:
## type_declarations AND type_declaration
## LR(1) items:
type_declarations -> type_declarations AND type_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> type_declarations AND type_declaration

State 1542:
## Known stack suffix:
## type_declaration
## LR(1) items:
type_declarations -> type_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> type_declaration

State 1543:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
structure_tail -> SEMISEMI . [ EOF ]
structure_tail -> SEMISEMI . seq_expr structure_tail [ EOF ]
structure_tail -> SEMISEMI . structure_item structure_tail [ EOF ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 1499
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On OPEN shift to state 1544
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MODULE shift to state 1546
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 1563
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On INCLUDE shift to state 1566
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On CLASS shift to state 1582
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On subtractive shift to state 886
-- On structure_item shift to state 1640
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1647
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:
-- On EOF
--   reduce production structure_tail -> SEMISEMI

State 1544:
## Known stack suffix:
## OPEN
## LR(1) items:
structure_item -> OPEN . mod_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On mod_longident shift to state 1545
## Reductions:

State 1545:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DOT CLASS ]
structure_item -> OPEN mod_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On DOT shift to state 394
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> OPEN mod_longident

State 1546:
## Known stack suffix:
## MODULE
## LR(1) items:
structure_item -> MODULE . UIDENT module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> MODULE . REC module_rec_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> MODULE . TYPE ident EQUAL module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1547
-- On TYPE shift to state 1549
-- On REC shift to state 1553
## Reductions:

State 1547:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
structure_item -> MODULE UIDENT . module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 25
-- On EQUAL shift to state 578
-- On COLON shift to state 602
-- On module_binding shift to state 1548
## Reductions:

State 1548:
## Known stack suffix:
## MODULE UIDENT module_binding
## LR(1) items:
structure_item -> MODULE UIDENT module_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> MODULE UIDENT module_binding

State 1549:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
structure_item -> MODULE TYPE . ident EQUAL module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 1550
## Reductions:

State 1550:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
structure_item -> MODULE TYPE ident . EQUAL module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On EQUAL shift to state 1551
## Reductions:

State 1551:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
structure_item -> MODULE TYPE ident EQUAL . module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 1552
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 1552:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ WITH TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> MODULE TYPE ident EQUAL module_type . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 374
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> MODULE TYPE ident EQUAL module_type

State 1553:
## Known stack suffix:
## MODULE REC
## LR(1) items:
structure_item -> MODULE REC . module_rec_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1554
-- On module_rec_bindings shift to state 1559
-- On module_rec_binding shift to state 1562
## Reductions:

State 1554:
## Known stack suffix:
## UIDENT
## LR(1) items:
module_rec_binding -> UIDENT . COLON module_type EQUAL module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On COLON shift to state 1555
## Reductions:

State 1555:
## Known stack suffix:
## UIDENT COLON
## LR(1) items:
module_rec_binding -> UIDENT COLON . module_type EQUAL module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 1556
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 1556:
## Known stack suffix:
## UIDENT COLON module_type
## LR(1) items:
module_rec_binding -> UIDENT COLON module_type . EQUAL module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
module_type -> module_type . WITH with_constraints [ WITH EQUAL ]
## Transitions:
-- On WITH shift to state 374
-- On EQUAL shift to state 1557
## Reductions:

State 1557:
## Known stack suffix:
## UIDENT COLON module_type EQUAL
## LR(1) items:
module_rec_binding -> UIDENT COLON module_type EQUAL . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On STRUCT shift to state 579
-- On LPAREN shift to state 605
-- On FUNCTOR shift to state 1414
-- On module_expr shift to state 1558
-- On mod_longident shift to state 1426
## Reductions:

State 1558:
## Known stack suffix:
## UIDENT COLON module_type EQUAL module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
module_rec_binding -> UIDENT COLON module_type EQUAL module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 1422
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production module_rec_binding -> UIDENT COLON module_type EQUAL module_expr

State 1559:
## Known stack suffix:
## MODULE REC module_rec_bindings
## LR(1) items:
module_rec_bindings -> module_rec_bindings . AND module_rec_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
structure_item -> MODULE REC module_rec_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On AND shift to state 1560
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> MODULE REC module_rec_bindings

State 1560:
## Known stack suffix:
## module_rec_bindings AND
## LR(1) items:
module_rec_bindings -> module_rec_bindings AND . module_rec_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1554
-- On module_rec_binding shift to state 1561
## Reductions:

State 1561:
## Known stack suffix:
## module_rec_bindings AND module_rec_binding
## LR(1) items:
module_rec_bindings -> module_rec_bindings AND module_rec_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_rec_bindings -> module_rec_bindings AND module_rec_binding

State 1562:
## Known stack suffix:
## module_rec_binding
## LR(1) items:
module_rec_bindings -> module_rec_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_rec_bindings -> module_rec_binding

State 1563:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . rec_flag let_bindings IN seq_expr [ TYPE STAR SHARP SEMISEMI SEMI PLUS OR OPEN MODULE MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET . MODULE UIDENT module_binding IN seq_expr [ TYPE STAR SHARP SEMISEMI SEMI PLUS OR OPEN MODULE MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . rec_flag let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On REC shift to state 22
-- On MODULE shift to state 23
-- On rec_flag shift to state 1564
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production rec_flag ->

State 1564:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr -> LET rec_flag . let_bindings IN seq_expr [ TYPE STAR SHARP SEMISEMI SEMI PLUS OR OPEN MODULE MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET rec_flag . let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 1298
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1308
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_bindings shift to state 1565
-- On let_binding shift to state 1329
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1565:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr -> LET rec_flag let_bindings . IN seq_expr [ TYPE STAR SHARP SEMISEMI SEMI PLUS OR OPEN MODULE MINUSDOT MINUS LET LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On IN shift to state 1474
-- On AND shift to state 1327
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> LET rec_flag let_bindings

State 1566:
## Known stack suffix:
## INCLUDE
## LR(1) items:
structure_item -> INCLUDE . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On STRUCT shift to state 579
-- On LPAREN shift to state 605
-- On FUNCTOR shift to state 1414
-- On module_expr shift to state 1567
-- On mod_longident shift to state 1426
## Reductions:

State 1567:
## Known stack suffix:
## INCLUDE module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> INCLUDE module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1422
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> INCLUDE module_expr

State 1568:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
structure_item -> EXTERNAL . val_ident_colon core_type EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 33
-- On LIDENT shift to state 55
-- On LABEL shift to state 57
-- On val_ident_colon shift to state 1569
## Reductions:

State 1569:
## Known stack suffix:
## EXTERNAL val_ident_colon
## LR(1) items:
structure_item -> EXTERNAL val_ident_colon . core_type EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 1570
## Reductions:

State 1570:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type
## LR(1) items:
structure_item -> EXTERNAL val_ident_colon core_type . EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On EQUAL shift to state 1571
## Reductions:

State 1571:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type EQUAL
## LR(1) items:
structure_item -> EXTERNAL val_ident_colon core_type EQUAL . primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On STRING shift to state 1572
-- On primitive_declaration shift to state 1574
## Reductions:

State 1572:
## Known stack suffix:
## STRING
## LR(1) items:
primitive_declaration -> STRING . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
primitive_declaration -> STRING . primitive_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On STRING shift to state 1572
-- On primitive_declaration shift to state 1573
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production primitive_declaration -> STRING

State 1573:
## Known stack suffix:
## STRING primitive_declaration
## LR(1) items:
primitive_declaration -> STRING primitive_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_declaration -> STRING primitive_declaration

State 1574:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type EQUAL primitive_declaration
## LR(1) items:
structure_item -> EXTERNAL val_ident_colon core_type EQUAL primitive_declaration . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXTERNAL val_ident_colon core_type EQUAL primitive_declaration

State 1575:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
structure_item -> EXCEPTION . UIDENT constructor_arguments [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> EXCEPTION . UIDENT EQUAL constr_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1576
## Reductions:

State 1576:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
structure_item -> EXCEPTION UIDENT . constructor_arguments [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> EXCEPTION UIDENT . EQUAL constr_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On OF shift to state 1515
-- On EQUAL shift to state 1577
-- On constructor_arguments shift to state 1581
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production constructor_arguments ->

State 1577:
## Known stack suffix:
## EXCEPTION UIDENT EQUAL
## LR(1) items:
structure_item -> EXCEPTION UIDENT EQUAL . constr_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On LPAREN shift to state 1578
-- On LBRACKET shift to state 1579
-- On FALSE shift to state 781
-- On mod_longident shift to state 839
-- On constr_longident shift to state 1580
## Reductions:

State 1578:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On RPAREN shift to state 675
## Reductions:

State 1579:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On RBRACKET shift to state 597
## Reductions:

State 1580:
## Known stack suffix:
## EXCEPTION UIDENT EQUAL constr_longident
## LR(1) items:
structure_item -> EXCEPTION UIDENT EQUAL constr_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXCEPTION UIDENT EQUAL constr_longident

State 1581:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
structure_item -> EXCEPTION UIDENT constructor_arguments . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXCEPTION UIDENT constructor_arguments

State 1582:
## Known stack suffix:
## CLASS
## LR(1) items:
structure_item -> CLASS . class_declarations [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> CLASS . TYPE class_type_declarations [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On TYPE shift to state 1583
-- On virtual_flag shift to state 1594
-- On class_declarations shift to state 1636
-- On class_declaration shift to state 1639
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1583:
## Known stack suffix:
## CLASS TYPE
## LR(1) items:
structure_item -> CLASS TYPE . class_type_declarations [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 1584
-- On class_type_declarations shift to state 1590
-- On class_type_declaration shift to state 1593
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1584:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_type_declaration -> virtual_flag . class_type_parameters LIDENT EQUAL class_signature [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LBRACKET shift to state 457
-- On class_type_parameters shift to state 1585
## Reductions:
-- On LIDENT
--   reduce production class_type_parameters ->

State 1585:
## Known stack suffix:
## virtual_flag class_type_parameters
## LR(1) items:
class_type_declaration -> virtual_flag class_type_parameters . LIDENT EQUAL class_signature [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 1586
## Reductions:

State 1586:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT
## LR(1) items:
class_type_declaration -> virtual_flag class_type_parameters LIDENT . EQUAL class_signature [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1587
## Reductions:

State 1587:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT EQUAL
## LR(1) items:
class_type_declaration -> virtual_flag class_type_parameters LIDENT EQUAL . class_signature [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 60
-- On OBJECT shift to state 1355
-- On LIDENT shift to state 1366
-- On LBRACKET shift to state 1588
-- On mod_ext_longident shift to state 1367
-- On clty_longident shift to state 1376
-- On class_signature shift to state 1589
## Reductions:

State 1588:
## Known stack suffix:
## LBRACKET
## LR(1) items:
class_signature -> LBRACKET . core_type_comma_list RBRACKET clty_longident [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 1364
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 1589:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT EQUAL class_signature
## LR(1) items:
class_type_declaration -> virtual_flag class_type_parameters LIDENT EQUAL class_signature . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_declaration -> virtual_flag class_type_parameters LIDENT EQUAL class_signature

State 1590:
## Known stack suffix:
## CLASS TYPE class_type_declarations
## LR(1) items:
class_type_declarations -> class_type_declarations . AND class_type_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
structure_item -> CLASS TYPE class_type_declarations . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On AND shift to state 1591
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> CLASS TYPE class_type_declarations

State 1591:
## Known stack suffix:
## class_type_declarations AND
## LR(1) items:
class_type_declarations -> class_type_declarations AND . class_type_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 1584
-- On class_type_declaration shift to state 1592
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1592:
## Known stack suffix:
## class_type_declarations AND class_type_declaration
## LR(1) items:
class_type_declarations -> class_type_declarations AND class_type_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_declarations -> class_type_declarations AND class_type_declaration

State 1593:
## Known stack suffix:
## class_type_declaration
## LR(1) items:
class_type_declarations -> class_type_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_declarations -> class_type_declaration

State 1594:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_declaration -> virtual_flag . class_type_parameters LIDENT class_fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LBRACKET shift to state 457
-- On class_type_parameters shift to state 1595
## Reductions:
-- On LIDENT
--   reduce production class_type_parameters ->

State 1595:
## Known stack suffix:
## virtual_flag class_type_parameters
## LR(1) items:
class_declaration -> virtual_flag class_type_parameters . LIDENT class_fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 1596
## Reductions:

State 1596:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT
## LR(1) items:
class_declaration -> virtual_flag class_type_parameters LIDENT . class_fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EQUAL shift to state 1597
-- On COLON shift to state 1629
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1633
-- On constr_longident shift to state 871
-- On constant shift to state 842
-- On class_fun_binding shift to state 1635
## Reductions:

State 1597:
## Known stack suffix:
## EQUAL
## LR(1) items:
class_fun_binding -> EQUAL . class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1598
-- On LPAREN shift to state 1602
-- On LIDENT shift to state 8
-- On LET shift to state 1610
-- On LBRACKET shift to state 1614
-- On FUN shift to state 1618
-- On mod_longident shift to state 9
-- On class_simple_expr shift to state 1621
-- On class_longident shift to state 1623
-- On class_expr shift to state 1628
## Reductions:

State 1598:
## Known stack suffix:
## OBJECT
## LR(1) items:
class_simple_expr -> OBJECT . class_structure END [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> OBJECT . class_structure error [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
-- On LPAREN shift to state 1260
-- On class_structure shift to state 1599
-- On class_self_pattern shift to state 1269
## Reductions:
-- On error VAL METHOD INITIALIZER INHERIT END CONSTRAINT
--   reduce production class_self_pattern ->

State 1599:
## Known stack suffix:
## OBJECT class_structure
## LR(1) items:
class_simple_expr -> OBJECT class_structure . END [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> OBJECT class_structure . error [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
-- On error shift to state 1600
-- On END shift to state 1601
## Reductions:

State 1600:
## Known stack suffix:
## OBJECT class_structure error
## LR(1) items:
class_simple_expr -> OBJECT class_structure error . [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> OBJECT class_structure error

State 1601:
## Known stack suffix:
## OBJECT class_structure END
## LR(1) items:
class_simple_expr -> OBJECT class_structure END . [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> OBJECT class_structure END

State 1602:
## Known stack suffix:
## LPAREN
## LR(1) items:
class_simple_expr -> LPAREN . class_expr COLON class_type RPAREN [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> LPAREN . class_expr COLON class_type error [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> LPAREN . class_expr RPAREN [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> LPAREN . class_expr error [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1259
-- On LPAREN shift to state 1295
-- On LIDENT shift to state 62
-- On LET shift to state 1296
-- On LBRACKET shift to state 1313
-- On FUN shift to state 1317
-- On mod_longident shift to state 63
-- On class_simple_expr shift to state 1320
-- On class_longident shift to state 1322
-- On class_expr shift to state 1603
## Reductions:

State 1603:
## Known stack suffix:
## LPAREN class_expr
## LR(1) items:
class_simple_expr -> LPAREN class_expr . COLON class_type RPAREN [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> LPAREN class_expr . COLON class_type error [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> LPAREN class_expr . RPAREN [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> LPAREN class_expr . error [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
-- On error shift to state 1604
-- On RPAREN shift to state 1605
-- On COLON shift to state 1606
## Reductions:

State 1604:
## Known stack suffix:
## LPAREN class_expr error
## LR(1) items:
class_simple_expr -> LPAREN class_expr error . [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LPAREN class_expr error

State 1605:
## Known stack suffix:
## LPAREN class_expr RPAREN
## LR(1) items:
class_simple_expr -> LPAREN class_expr RPAREN . [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LPAREN class_expr RPAREN

State 1606:
## Known stack suffix:
## LPAREN class_expr COLON
## LR(1) items:
class_simple_expr -> LPAREN class_expr COLON . class_type RPAREN [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> LPAREN class_expr COLON . class_type error [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 523
-- On OPTLABEL shift to state 528
-- On OBJECT shift to state 463
-- On LPAREN shift to state 99
-- On LIDENT shift to state 531
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 535
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 537
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 539
-- On clty_longident shift to state 508
-- On class_type shift to state 1607
-- On class_signature shift to state 543
## Reductions:

State 1607:
## Known stack suffix:
## LPAREN class_expr COLON class_type
## LR(1) items:
class_simple_expr -> LPAREN class_expr COLON class_type . RPAREN [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
class_simple_expr -> LPAREN class_expr COLON class_type . error [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
-- On error shift to state 1608
-- On RPAREN shift to state 1609
## Reductions:

State 1608:
## Known stack suffix:
## LPAREN class_expr COLON class_type error
## LR(1) items:
class_simple_expr -> LPAREN class_expr COLON class_type error . [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LPAREN class_expr COLON class_type error

State 1609:
## Known stack suffix:
## LPAREN class_expr COLON class_type RPAREN
## LR(1) items:
class_simple_expr -> LPAREN class_expr COLON class_type RPAREN . [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LPAREN class_expr COLON class_type RPAREN

State 1610:
## Known stack suffix:
## LET
## LR(1) items:
class_expr -> LET . rec_flag let_bindings IN class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On REC shift to state 22
-- On rec_flag shift to state 1611
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production rec_flag ->

State 1611:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
class_expr -> LET rec_flag . let_bindings IN class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 1298
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1308
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_bindings shift to state 1612
-- On let_binding shift to state 1329
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1612:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
class_expr -> LET rec_flag let_bindings . IN class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
let_bindings -> let_bindings . AND let_binding [ IN AND ]
## Transitions:
-- On IN shift to state 1613
-- On AND shift to state 1327
## Reductions:

State 1613:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
class_expr -> LET rec_flag let_bindings IN . class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1598
-- On LPAREN shift to state 1602
-- On LIDENT shift to state 8
-- On LET shift to state 1610
-- On LBRACKET shift to state 1614
-- On FUN shift to state 1618
-- On mod_longident shift to state 9
-- On class_simple_expr shift to state 1621
-- On class_longident shift to state 1623
-- On class_expr shift to state 1627
## Reductions:

State 1614:
## Known stack suffix:
## LBRACKET
## LR(1) items:
class_simple_expr -> LBRACKET . core_type_comma_list RBRACKET class_longident [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type_comma_list shift to state 1615
-- On core_type2 shift to state 152
-- On core_type shift to state 180
## Reductions:

State 1615:
## Known stack suffix:
## LBRACKET core_type_comma_list
## LR(1) items:
class_simple_expr -> LBRACKET core_type_comma_list . RBRACKET class_longident [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RBRACKET COMMA ]
## Transitions:
-- On RBRACKET shift to state 1616
-- On COMMA shift to state 178
## Reductions:

State 1616:
## Known stack suffix:
## LBRACKET core_type_comma_list RBRACKET
## LR(1) items:
class_simple_expr -> LBRACKET core_type_comma_list RBRACKET . class_longident [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 8
-- On mod_longident shift to state 9
-- On class_longident shift to state 1617
## Reductions:

State 1617:
## Known stack suffix:
## LBRACKET core_type_comma_list RBRACKET class_longident
## LR(1) items:
class_simple_expr -> LBRACKET core_type_comma_list RBRACKET class_longident . [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> LBRACKET core_type_comma_list RBRACKET class_longident

State 1618:
## Known stack suffix:
## FUN
## LR(1) items:
class_expr -> FUN . class_fun_def [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1619
-- On constr_longident shift to state 871
-- On constant shift to state 842
-- On class_fun_def shift to state 1626
## Reductions:

State 1619:
## Known stack suffix:
## labeled_simple_pattern
## LR(1) items:
class_fun_def -> labeled_simple_pattern . MINUSGREATER class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
class_fun_def -> labeled_simple_pattern . class_fun_def [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUSGREATER shift to state 1620
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1619
-- On constr_longident shift to state 871
-- On constant shift to state 842
-- On class_fun_def shift to state 1625
## Reductions:

State 1620:
## Known stack suffix:
## labeled_simple_pattern MINUSGREATER
## LR(1) items:
class_fun_def -> labeled_simple_pattern MINUSGREATER . class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1598
-- On LPAREN shift to state 1602
-- On LIDENT shift to state 8
-- On LET shift to state 1610
-- On LBRACKET shift to state 1614
-- On FUN shift to state 1618
-- On mod_longident shift to state 9
-- On class_simple_expr shift to state 1621
-- On class_longident shift to state 1623
-- On class_expr shift to state 1624
## Reductions:

State 1621:
## Known stack suffix:
## class_simple_expr
## LR(1) items:
class_expr -> class_simple_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
class_expr -> class_simple_expr . simple_labeled_expr_list [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 888
-- On STRING shift to state 5
-- On QUESTION shift to state 891
-- On PREFIXOP shift to state 6
-- On OPTLABEL shift to state 893
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LABEL shift to state 895
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_labeled_expr_list shift to state 1622
-- On simple_expr shift to state 1110
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On labeled_simple_expr shift to state 1113
-- On label_expr shift to state 1112
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production class_expr -> class_simple_expr

State 1622:
## Known stack suffix:
## class_simple_expr simple_labeled_expr_list
## LR(1) items:
class_expr -> class_simple_expr simple_labeled_expr_list . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
simple_labeled_expr_list -> simple_labeled_expr_list . labeled_simple_expr [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 888
-- On STRING shift to state 5
-- On QUESTION shift to state 891
-- On PREFIXOP shift to state 6
-- On OPTLABEL shift to state 893
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On LPAREN shift to state 15
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LABEL shift to state 895
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On simple_expr shift to state 1110
-- On name_tag shift to state 880
-- On mod_longident shift to state 881
-- On labeled_simple_expr shift to state 1111
-- On label_expr shift to state 1112
-- On constr_longident shift to state 884
-- On constant shift to state 885
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production class_expr -> class_simple_expr simple_labeled_expr_list

State 1623:
## Known stack suffix:
## class_longident
## LR(1) items:
class_simple_expr -> class_longident . [ UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EOF CLASS CHAR BEGIN BACKQUOTE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_simple_expr -> class_longident

State 1624:
## Known stack suffix:
## labeled_simple_pattern MINUSGREATER class_expr
## LR(1) items:
class_fun_def -> labeled_simple_pattern MINUSGREATER class_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_def -> labeled_simple_pattern MINUSGREATER class_expr

State 1625:
## Known stack suffix:
## labeled_simple_pattern class_fun_def
## LR(1) items:
class_fun_def -> labeled_simple_pattern class_fun_def . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_def -> labeled_simple_pattern class_fun_def

State 1626:
## Known stack suffix:
## FUN class_fun_def
## LR(1) items:
class_expr -> FUN class_fun_def . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_expr -> FUN class_fun_def

State 1627:
## Known stack suffix:
## LET rec_flag let_bindings IN class_expr
## LR(1) items:
class_expr -> LET rec_flag let_bindings IN class_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_expr -> LET rec_flag let_bindings IN class_expr

State 1628:
## Known stack suffix:
## EQUAL class_expr
## LR(1) items:
class_fun_binding -> EQUAL class_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_binding -> EQUAL class_expr

State 1629:
## Known stack suffix:
## COLON
## LR(1) items:
class_fun_binding -> COLON . class_type EQUAL class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 1347
-- On OPTLABEL shift to state 1352
-- On OBJECT shift to state 1355
-- On LPAREN shift to state 99
-- On LIDENT shift to state 1359
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 1363
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1371
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 1373
-- On clty_longident shift to state 1376
-- On class_type shift to state 1630
-- On class_signature shift to state 1378
## Reductions:

State 1630:
## Known stack suffix:
## COLON class_type
## LR(1) items:
class_fun_binding -> COLON class_type . EQUAL class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1631
## Reductions:

State 1631:
## Known stack suffix:
## COLON class_type EQUAL
## LR(1) items:
class_fun_binding -> COLON class_type EQUAL . class_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On OBJECT shift to state 1598
-- On LPAREN shift to state 1602
-- On LIDENT shift to state 8
-- On LET shift to state 1610
-- On LBRACKET shift to state 1614
-- On FUN shift to state 1618
-- On mod_longident shift to state 9
-- On class_simple_expr shift to state 1621
-- On class_longident shift to state 1623
-- On class_expr shift to state 1632
## Reductions:

State 1632:
## Known stack suffix:
## COLON class_type EQUAL class_expr
## LR(1) items:
class_fun_binding -> COLON class_type EQUAL class_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_binding -> COLON class_type EQUAL class_expr

State 1633:
## Known stack suffix:
## labeled_simple_pattern
## LR(1) items:
class_fun_binding -> labeled_simple_pattern . class_fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On TILDE shift to state 786
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On QUESTION shift to state 795
-- On OPTLABEL shift to state 851
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On LABEL shift to state 868
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EQUAL shift to state 1597
-- On COLON shift to state 1629
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 829
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 831
-- On name_tag shift to state 870
-- On mod_longident shift to state 839
-- On labeled_simple_pattern shift to state 1633
-- On constr_longident shift to state 871
-- On constant shift to state 842
-- On class_fun_binding shift to state 1634
## Reductions:

State 1634:
## Known stack suffix:
## labeled_simple_pattern class_fun_binding
## LR(1) items:
class_fun_binding -> labeled_simple_pattern class_fun_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fun_binding -> labeled_simple_pattern class_fun_binding

State 1635:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT class_fun_binding
## LR(1) items:
class_declaration -> virtual_flag class_type_parameters LIDENT class_fun_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_declaration -> virtual_flag class_type_parameters LIDENT class_fun_binding

State 1636:
## Known stack suffix:
## CLASS class_declarations
## LR(1) items:
class_declarations -> class_declarations . AND class_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
structure_item -> CLASS class_declarations . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On AND shift to state 1637
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> CLASS class_declarations

State 1637:
## Known stack suffix:
## class_declarations AND
## LR(1) items:
class_declarations -> class_declarations AND . class_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 1594
-- On class_declaration shift to state 1638
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1638:
## Known stack suffix:
## class_declarations AND class_declaration
## LR(1) items:
class_declarations -> class_declarations AND class_declaration . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_declarations -> class_declarations AND class_declaration

State 1639:
## Known stack suffix:
## class_declaration
## LR(1) items:
class_declarations -> class_declaration . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_declarations -> class_declaration

State 1640:
## Known stack suffix:
## SEMISEMI structure_item
## LR(1) items:
structure_tail -> SEMISEMI structure_item . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 1499
-- On SEMISEMI shift to state 1543
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On CLASS shift to state 1582
-- On structure_tail shift to state 1644
-- On structure_item shift to state 1645
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1641:
## Known stack suffix:
## LET
## LR(1) items:
structure_item -> LET . rec_flag let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On REC shift to state 22
-- On rec_flag shift to state 1642
## Reductions:
-- On UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
--   reduce production rec_flag ->

State 1642:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
structure_item -> LET rec_flag . let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 662
-- On UIDENT shift to state 2
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 663
-- On NATIVEINT shift to state 14
-- On MINUS shift to state 665
-- On LPAREN shift to state 671
-- On LIDENT shift to state 760
-- On LBRACKETBAR shift to state 761
-- On LBRACKET shift to state 767
-- On LBRACE shift to state 772
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On CHAR shift to state 782
-- On BACKQUOTE shift to state 69
-- On val_ident shift to state 1298
-- On simple_pattern shift to state 830
-- On signed_constant shift to state 831
-- On pattern_comma_list shift to state 832
-- On pattern shift to state 1308
-- On name_tag shift to state 837
-- On mod_longident shift to state 839
-- On let_bindings shift to state 1643
-- On let_binding shift to state 1329
-- On constr_longident shift to state 840
-- On constant shift to state 842
## Reductions:

State 1643:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On AND shift to state 1327
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> LET rec_flag let_bindings

State 1644:
## Known stack suffix:
## SEMISEMI structure_item structure_tail
## LR(1) items:
structure_tail -> SEMISEMI structure_item structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> SEMISEMI structure_item structure_tail

State 1645:
## Known stack suffix:
## structure_item
## LR(1) items:
structure_tail -> structure_item . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 1499
-- On SEMISEMI shift to state 1543
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On CLASS shift to state 1582
-- On structure_tail shift to state 1646
-- On structure_item shift to state 1645
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1646:
## Known stack suffix:
## structure_item structure_tail
## LR(1) items:
structure_tail -> structure_item structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> structure_item structure_tail

State 1647:
## Known stack suffix:
## SEMISEMI seq_expr
## LR(1) items:
structure_tail -> SEMISEMI seq_expr . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 1499
-- On SEMISEMI shift to state 1543
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On CLASS shift to state 1582
-- On structure_tail shift to state 1648
-- On structure_item shift to state 1645
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1648:
## Known stack suffix:
## SEMISEMI seq_expr structure_tail
## LR(1) items:
structure_tail -> SEMISEMI seq_expr structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> SEMISEMI seq_expr structure_tail

State 1649:
## Known stack suffix:
## structure_tail
## LR(1) items:
structure -> structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure -> structure_tail

State 1650:
## Known stack suffix:
## structure
## LR(1) items:
implementation -> structure . EOF [ # ]
## Transitions:
-- On EOF shift to state 1651
## Reductions:

State 1651:
## Known stack suffix:
## structure EOF
## LR(1) items:
implementation -> structure EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production implementation -> structure EOF

State 1652:
## Known stack suffix:
## seq_expr
## LR(1) items:
structure -> seq_expr . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 1499
-- On SEMISEMI shift to state 1543
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On CLASS shift to state 1582
-- On structure_tail shift to state 1653
-- On structure_item shift to state 1645
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1653:
## Known stack suffix:
## seq_expr structure_tail
## LR(1) items:
structure -> seq_expr structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure -> seq_expr structure_tail

State 1654:
## Known stack suffix:
## implementation
## LR(1) items:
implementation' -> implementation . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept implementation

State 1655:
## Known stack suffix:
##
## LR(1) items:
interface' -> . interface [ # ]
## Transitions:
-- On signature shift to state 1656
-- On interface shift to state 1712
## Default reduction:
-- After reading the next token, reduce production signature ->

State 1656:
## Known stack suffix:
## signature
## LR(1) items:
interface -> signature . EOF [ # ]
signature -> signature . signature_item [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature -> signature . signature_item SEMISEMI [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VAL shift to state 1657
-- On TYPE shift to state 1660
-- On OPEN shift to state 1662
-- On MODULE shift to state 1664
-- On INCLUDE shift to state 1687
-- On EXTERNAL shift to state 1689
-- On EXCEPTION shift to state 1694
-- On EOF shift to state 1697
-- On CLASS shift to state 1698
-- On signature_item shift to state 1710
## Reductions:

State 1657:
## Known stack suffix:
## VAL
## LR(1) items:
signature_item -> VAL . val_ident_colon core_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 33
-- On LIDENT shift to state 55
-- On LABEL shift to state 57
-- On val_ident_colon shift to state 1658
## Reductions:

State 1658:
## Known stack suffix:
## VAL val_ident_colon
## LR(1) items:
signature_item -> VAL val_ident_colon . core_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 1659
## Reductions:

State 1659:
## Known stack suffix:
## VAL val_ident_colon core_type
## LR(1) items:
signature_item -> VAL val_ident_colon core_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> VAL val_ident_colon core_type

State 1660:
## Known stack suffix:
## TYPE
## LR(1) items:
signature_item -> TYPE . type_declarations [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On PLUS shift to state 278
-- On MINUS shift to state 279
-- On LPAREN shift to state 280
-- On type_variance shift to state 281
-- On type_parameters shift to state 1500
-- On type_parameter shift to state 342
-- On type_declarations shift to state 1661
-- On type_declaration shift to state 1542
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->
-- On QUOTE
--   reduce production type_variance ->

State 1661:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
signature_item -> TYPE type_declarations . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
type_declarations -> type_declarations . AND type_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On AND shift to state 1540
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> TYPE type_declarations

State 1662:
## Known stack suffix:
## OPEN
## LR(1) items:
signature_item -> OPEN . mod_longident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On mod_longident shift to state 1663
## Reductions:

State 1663:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF DOT CLASS ]
signature_item -> OPEN mod_longident . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On DOT shift to state 394
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> OPEN mod_longident

State 1664:
## Known stack suffix:
## MODULE
## LR(1) items:
signature_item -> MODULE . UIDENT module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE . REC module_rec_declarations [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE . TYPE ident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE . TYPE ident EQUAL module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1665
-- On TYPE shift to state 1675
-- On REC shift to state 1679
## Reductions:

State 1665:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
signature_item -> MODULE UIDENT . module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1666
-- On COLON shift to state 1671
-- On module_declaration shift to state 1674
## Reductions:

State 1666:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_declaration -> LPAREN . UIDENT COLON module_type RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1667
## Reductions:

State 1667:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_declaration -> LPAREN UIDENT . COLON module_type RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1668
## Reductions:

State 1668:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON . module_type RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 1669
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 1669:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type . RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 374
-- On RPAREN shift to state 1670
## Reductions:

State 1670:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN . module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1666
-- On COLON shift to state 1671
-- On module_declaration shift to state 1673
## Reductions:

State 1671:
## Known stack suffix:
## COLON
## LR(1) items:
module_declaration -> COLON . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 1672
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 1672:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_declaration -> COLON module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 374
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_declaration -> COLON module_type

State 1673:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_declaration
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration

State 1674:
## Known stack suffix:
## MODULE UIDENT module_declaration
## LR(1) items:
signature_item -> MODULE UIDENT module_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> MODULE UIDENT module_declaration

State 1675:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
signature_item -> MODULE TYPE . ident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE TYPE . ident EQUAL module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 1676
## Reductions:

State 1676:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
signature_item -> MODULE TYPE ident . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE TYPE ident . EQUAL module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On EQUAL shift to state 1677
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> MODULE TYPE ident

State 1677:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
signature_item -> MODULE TYPE ident EQUAL . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 1678
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 1678:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE TYPE ident EQUAL module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 374
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> MODULE TYPE ident EQUAL module_type

State 1679:
## Known stack suffix:
## MODULE REC
## LR(1) items:
signature_item -> MODULE REC . module_rec_declarations [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1680
-- On module_rec_declarations shift to state 1683
-- On module_rec_declaration shift to state 1686
## Reductions:

State 1680:
## Known stack suffix:
## UIDENT
## LR(1) items:
module_rec_declaration -> UIDENT . COLON module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On COLON shift to state 1681
## Reductions:

State 1681:
## Known stack suffix:
## UIDENT COLON
## LR(1) items:
module_rec_declaration -> UIDENT COLON . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 1682
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 1682:
## Known stack suffix:
## UIDENT COLON module_type
## LR(1) items:
module_rec_declaration -> UIDENT COLON module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On WITH shift to state 374
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production module_rec_declaration -> UIDENT COLON module_type

State 1683:
## Known stack suffix:
## MODULE REC module_rec_declarations
## LR(1) items:
module_rec_declarations -> module_rec_declarations . AND module_rec_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
signature_item -> MODULE REC module_rec_declarations . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On AND shift to state 1684
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> MODULE REC module_rec_declarations

State 1684:
## Known stack suffix:
## module_rec_declarations AND
## LR(1) items:
module_rec_declarations -> module_rec_declarations AND . module_rec_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1680
-- On module_rec_declaration shift to state 1685
## Reductions:

State 1685:
## Known stack suffix:
## module_rec_declarations AND module_rec_declaration
## LR(1) items:
module_rec_declarations -> module_rec_declarations AND module_rec_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_rec_declarations -> module_rec_declarations AND module_rec_declaration

State 1686:
## Known stack suffix:
## module_rec_declaration
## LR(1) items:
module_rec_declarations -> module_rec_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_rec_declarations -> module_rec_declaration

State 1687:
## Known stack suffix:
## INCLUDE
## LR(1) items:
signature_item -> INCLUDE . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 28
-- On SIG shift to state 29
-- On LPAREN shift to state 357
-- On LIDENT shift to state 71
-- On FUNCTOR shift to state 368
-- On mty_longident shift to state 372
-- On module_type shift to state 1688
-- On mod_ext_longident shift to state 402
-- On ident shift to state 406
## Reductions:

State 1688:
## Known stack suffix:
## INCLUDE module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> INCLUDE module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 374
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> INCLUDE module_type

State 1689:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
signature_item -> EXTERNAL . val_ident_colon core_type EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 33
-- On LIDENT shift to state 55
-- On LABEL shift to state 57
-- On val_ident_colon shift to state 1690
## Reductions:

State 1690:
## Known stack suffix:
## EXTERNAL val_ident_colon
## LR(1) items:
signature_item -> EXTERNAL val_ident_colon . core_type EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 95
-- On OPTLABEL shift to state 98
-- On LPAREN shift to state 99
-- On LIDENT shift to state 100
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 116
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 144
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 128
-- On core_type2 shift to state 152
-- On core_type shift to state 1691
## Reductions:

State 1691:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type
## LR(1) items:
signature_item -> EXTERNAL val_ident_colon core_type . EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On EQUAL shift to state 1692
## Reductions:

State 1692:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type EQUAL
## LR(1) items:
signature_item -> EXTERNAL val_ident_colon core_type EQUAL . primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On STRING shift to state 1572
-- On primitive_declaration shift to state 1693
## Reductions:

State 1693:
## Known stack suffix:
## EXTERNAL val_ident_colon core_type EQUAL primitive_declaration
## LR(1) items:
signature_item -> EXTERNAL val_ident_colon core_type EQUAL primitive_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> EXTERNAL val_ident_colon core_type EQUAL primitive_declaration

State 1694:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
signature_item -> EXCEPTION . UIDENT constructor_arguments [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1695
## Reductions:

State 1695:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
signature_item -> EXCEPTION UIDENT . constructor_arguments [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On OF shift to state 1515
-- On constructor_arguments shift to state 1696
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production constructor_arguments ->

State 1696:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
signature_item -> EXCEPTION UIDENT constructor_arguments . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> EXCEPTION UIDENT constructor_arguments

State 1697:
## Known stack suffix:
## signature EOF
## LR(1) items:
interface -> signature EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interface -> signature EOF

State 1698:
## Known stack suffix:
## CLASS
## LR(1) items:
signature_item -> CLASS . class_descriptions [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> CLASS . TYPE class_type_declarations [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On TYPE shift to state 1699
-- On virtual_flag shift to state 1701
-- On class_descriptions shift to state 1706
-- On class_description shift to state 1709
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1699:
## Known stack suffix:
## CLASS TYPE
## LR(1) items:
signature_item -> CLASS TYPE . class_type_declarations [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 1584
-- On class_type_declarations shift to state 1700
-- On class_type_declaration shift to state 1593
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1700:
## Known stack suffix:
## CLASS TYPE class_type_declarations
## LR(1) items:
class_type_declarations -> class_type_declarations . AND class_type_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
signature_item -> CLASS TYPE class_type_declarations . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On AND shift to state 1591
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> CLASS TYPE class_type_declarations

State 1701:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_description -> virtual_flag . class_type_parameters LIDENT COLON class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LBRACKET shift to state 457
-- On class_type_parameters shift to state 1702
## Reductions:
-- On LIDENT
--   reduce production class_type_parameters ->

State 1702:
## Known stack suffix:
## virtual_flag class_type_parameters
## LR(1) items:
class_description -> virtual_flag class_type_parameters . LIDENT COLON class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 1703
## Reductions:

State 1703:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT
## LR(1) items:
class_description -> virtual_flag class_type_parameters LIDENT . COLON class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On COLON shift to state 1704
## Reductions:

State 1704:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT COLON
## LR(1) items:
class_description -> virtual_flag class_type_parameters LIDENT COLON . class_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 85
-- On UIDENT shift to state 60
-- On SHARP shift to state 86
-- On QUOTE shift to state 93
-- On QUESTION shift to state 1347
-- On OPTLABEL shift to state 1352
-- On OBJECT shift to state 1355
-- On LPAREN shift to state 99
-- On LIDENT shift to state 1359
-- On LESS shift to state 102
-- On LBRACKETLESS shift to state 112
-- On LBRACKET shift to state 1363
-- On type_longident shift to state 121
-- On simple_core_type_or_tuple shift to state 1371
-- On simple_core_type2 shift to state 145
-- On simple_core_type shift to state 146
-- On mod_ext_longident shift to state 1373
-- On clty_longident shift to state 1376
-- On class_type shift to state 1705
-- On class_signature shift to state 1378
## Reductions:

State 1705:
## Known stack suffix:
## virtual_flag class_type_parameters LIDENT COLON class_type
## LR(1) items:
class_description -> virtual_flag class_type_parameters LIDENT COLON class_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_description -> virtual_flag class_type_parameters LIDENT COLON class_type

State 1706:
## Known stack suffix:
## CLASS class_descriptions
## LR(1) items:
class_descriptions -> class_descriptions . AND class_description [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
signature_item -> CLASS class_descriptions . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On AND shift to state 1707
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> CLASS class_descriptions

State 1707:
## Known stack suffix:
## class_descriptions AND
## LR(1) items:
class_descriptions -> class_descriptions AND . class_description [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On VIRTUAL shift to state 454
-- On virtual_flag shift to state 1701
-- On class_description shift to state 1708
## Reductions:
-- On LIDENT LBRACKET
--   reduce production virtual_flag ->

State 1708:
## Known stack suffix:
## class_descriptions AND class_description
## LR(1) items:
class_descriptions -> class_descriptions AND class_description . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_descriptions -> class_descriptions AND class_description

State 1709:
## Known stack suffix:
## class_description
## LR(1) items:
class_descriptions -> class_description . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_descriptions -> class_description

State 1710:
## Known stack suffix:
## signature signature_item
## LR(1) items:
signature -> signature signature_item . [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature -> signature signature_item . SEMISEMI [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On SEMISEMI shift to state 1711
## Reductions:
-- On VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature -> signature signature_item

State 1711:
## Known stack suffix:
## signature signature_item SEMISEMI
## LR(1) items:
signature -> signature signature_item SEMISEMI . [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> signature signature_item SEMISEMI

State 1712:
## Known stack suffix:
## interface
## LR(1) items:
interface' -> interface . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept interface

State 1713:
## Known stack suffix:
##
## LR(1) items:
toplevel_phrase' -> . toplevel_phrase [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 1499
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 1714
-- On PREFIXOP shift to state 6
-- On OPEN shift to state 1544
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MODULE shift to state 1546
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 1563
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On INCLUDE shift to state 1566
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On EOF shift to state 1722
-- On CLASS shift to state 1582
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On toplevel_phrase shift to state 1723
-- On toplevel_directive shift to state 1724
-- On top_structure shift to state 1726
-- On subtractive shift to state 886
-- On structure_item shift to state 1728
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1730
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1714:
## Known stack suffix:
## SHARP
## LR(1) items:
toplevel_directive -> SHARP . ident [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP . ident STRING [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP . ident INT [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP . ident val_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP . ident FALSE [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP . ident TRUE [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 70
-- On LIDENT shift to state 71
-- On ident shift to state 1715
## Reductions:

State 1715:
## Known stack suffix:
## SHARP ident
## LR(1) items:
toplevel_directive -> SHARP ident . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP ident . STRING [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP ident . INT [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP ident . val_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP ident . FALSE [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP ident . TRUE [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 1716
-- On STRING shift to state 1717
-- On LPAREN shift to state 861
-- On LIDENT shift to state 760
-- On INT shift to state 1718
-- On FALSE shift to state 1719
-- On val_longident shift to state 1720
-- On val_ident shift to state 821
-- On mod_longident shift to state 1721
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production toplevel_directive -> SHARP ident

State 1716:
## Known stack suffix:
## SHARP ident TRUE
## LR(1) items:
toplevel_directive -> SHARP ident TRUE . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production toplevel_directive -> SHARP ident TRUE

State 1717:
## Known stack suffix:
## SHARP ident STRING
## LR(1) items:
toplevel_directive -> SHARP ident STRING . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production toplevel_directive -> SHARP ident STRING

State 1718:
## Known stack suffix:
## SHARP ident INT
## LR(1) items:
toplevel_directive -> SHARP ident INT . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production toplevel_directive -> SHARP ident INT

State 1719:
## Known stack suffix:
## SHARP ident FALSE
## LR(1) items:
toplevel_directive -> SHARP ident FALSE . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production toplevel_directive -> SHARP ident FALSE

State 1720:
## Known stack suffix:
## SHARP ident val_longident
## LR(1) items:
toplevel_directive -> SHARP ident val_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production toplevel_directive -> SHARP ident val_longident

State 1721:
## Known stack suffix:
## mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
val_longident -> mod_longident . DOT val_ident [ TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On DOT shift to state 882
## Reductions:

State 1722:
## Known stack suffix:
## EOF
## LR(1) items:
toplevel_phrase -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel_phrase -> EOF

State 1723:
## Known stack suffix:
## toplevel_phrase
## LR(1) items:
toplevel_phrase' -> toplevel_phrase . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept toplevel_phrase

State 1724:
## Known stack suffix:
## toplevel_directive
## LR(1) items:
toplevel_phrase -> toplevel_directive . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 1725
## Reductions:

State 1725:
## Known stack suffix:
## toplevel_directive SEMISEMI
## LR(1) items:
toplevel_phrase -> toplevel_directive SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel_phrase -> toplevel_directive SEMISEMI

State 1726:
## Known stack suffix:
## top_structure
## LR(1) items:
toplevel_phrase -> top_structure . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 1727
## Reductions:

State 1727:
## Known stack suffix:
## top_structure SEMISEMI
## LR(1) items:
toplevel_phrase -> top_structure SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel_phrase -> top_structure SEMISEMI

State 1728:
## Known stack suffix:
## structure_item
## LR(1) items:
top_structure -> structure_item . [ SEMISEMI ]
top_structure -> structure_item . top_structure [ SEMISEMI ]
## Transitions:
-- On TYPE shift to state 1499
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On CLASS shift to state 1582
-- On top_structure shift to state 1729
-- On structure_item shift to state 1728
## Reductions:
-- On SEMISEMI
--   reduce production top_structure -> structure_item

State 1729:
## Known stack suffix:
## structure_item top_structure
## LR(1) items:
top_structure -> structure_item top_structure . [ SEMISEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_structure -> structure_item top_structure

State 1730:
## Known stack suffix:
## seq_expr
## LR(1) items:
toplevel_phrase -> seq_expr . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 1731
## Reductions:

State 1731:
## Known stack suffix:
## seq_expr SEMISEMI
## LR(1) items:
toplevel_phrase -> seq_expr SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel_phrase -> seq_expr SEMISEMI

State 1732:
## Known stack suffix:
##
## LR(1) items:
use_file' -> . use_file [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 1499
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 1714
-- On SEMISEMI shift to state 1733
-- On PREFIXOP shift to state 6
-- On OPEN shift to state 1544
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MODULE shift to state 1546
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 1563
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On INCLUDE shift to state 1566
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On EOF shift to state 1736
-- On CLASS shift to state 1582
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On use_file_tail shift to state 1746
-- On use_file shift to state 1747
-- On toplevel_directive shift to state 1738
-- On subtractive shift to state 886
-- On structure_item shift to state 1740
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1748
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1733:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
use_file_tail -> SEMISEMI . EOF [ # ]
use_file_tail -> SEMISEMI . seq_expr use_file_tail [ # ]
use_file_tail -> SEMISEMI . structure_item use_file_tail [ # ]
use_file_tail -> SEMISEMI . toplevel_directive use_file_tail [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 1499
-- On TRY shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On SHARP shift to state 1714
-- On PREFIXOP shift to state 6
-- On OPEN shift to state 1544
-- On NEW shift to state 7
-- On NATIVEINT shift to state 14
-- On MODULE shift to state 1546
-- On MINUSDOT shift to state 17
-- On MINUS shift to state 18
-- On MATCH shift to state 19
-- On LPAREN shift to state 15
-- On LIDENT shift to state 20
-- On LET shift to state 1563
-- On LBRACKETBAR shift to state 583
-- On LBRACKET shift to state 596
-- On LBRACELESS shift to state 799
-- On LBRACE shift to state 812
-- On LAZY shift to state 819
-- On INT64 shift to state 777
-- On INT32 shift to state 778
-- On INT shift to state 779
-- On INCLUDE shift to state 1566
-- On IF shift to state 845
-- On FUNCTION shift to state 846
-- On FUN shift to state 850
-- On FOR shift to state 875
-- On FLOAT shift to state 780
-- On FALSE shift to state 781
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On EOF shift to state 1734
-- On CLASS shift to state 1582
-- On CHAR shift to state 813
-- On BEGIN shift to state 814
-- On BACKQUOTE shift to state 69
-- On ASSERT shift to state 878
-- On val_longident shift to state 820
-- On val_ident shift to state 821
-- On toplevel_directive shift to state 1735
-- On subtractive shift to state 886
-- On structure_item shift to state 1742
-- On simple_expr shift to state 887
-- On seq_expr shift to state 1744
-- On name_tag shift to state 913
-- On mod_longident shift to state 881
-- On label shift to state 915
-- On expr_comma_list shift to state 917
-- On expr shift to state 961
-- On constr_longident shift to state 924
-- On constant shift to state 885
## Reductions:

State 1734:
## Known stack suffix:
## SEMISEMI EOF
## LR(1) items:
use_file_tail -> SEMISEMI EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> SEMISEMI EOF

State 1735:
## Known stack suffix:
## SEMISEMI toplevel_directive
## LR(1) items:
use_file_tail -> SEMISEMI toplevel_directive . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1499
-- On SHARP shift to state 1714
-- On SEMISEMI shift to state 1733
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On EOF shift to state 1736
-- On CLASS shift to state 1582
-- On use_file_tail shift to state 1737
-- On toplevel_directive shift to state 1738
-- On structure_item shift to state 1740
## Reductions:

State 1736:
## Known stack suffix:
## EOF
## LR(1) items:
use_file_tail -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> EOF

State 1737:
## Known stack suffix:
## SEMISEMI toplevel_directive use_file_tail
## LR(1) items:
use_file_tail -> SEMISEMI toplevel_directive use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> SEMISEMI toplevel_directive use_file_tail

State 1738:
## Known stack suffix:
## toplevel_directive
## LR(1) items:
use_file_tail -> toplevel_directive . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1499
-- On SHARP shift to state 1714
-- On SEMISEMI shift to state 1733
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On EOF shift to state 1736
-- On CLASS shift to state 1582
-- On use_file_tail shift to state 1739
-- On toplevel_directive shift to state 1738
-- On structure_item shift to state 1740
## Reductions:

State 1739:
## Known stack suffix:
## toplevel_directive use_file_tail
## LR(1) items:
use_file_tail -> toplevel_directive use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> toplevel_directive use_file_tail

State 1740:
## Known stack suffix:
## structure_item
## LR(1) items:
use_file_tail -> structure_item . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1499
-- On SHARP shift to state 1714
-- On SEMISEMI shift to state 1733
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On EOF shift to state 1736
-- On CLASS shift to state 1582
-- On use_file_tail shift to state 1741
-- On toplevel_directive shift to state 1738
-- On structure_item shift to state 1740
## Reductions:

State 1741:
## Known stack suffix:
## structure_item use_file_tail
## LR(1) items:
use_file_tail -> structure_item use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> structure_item use_file_tail

State 1742:
## Known stack suffix:
## SEMISEMI structure_item
## LR(1) items:
use_file_tail -> SEMISEMI structure_item . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1499
-- On SHARP shift to state 1714
-- On SEMISEMI shift to state 1733
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On EOF shift to state 1736
-- On CLASS shift to state 1582
-- On use_file_tail shift to state 1743
-- On toplevel_directive shift to state 1738
-- On structure_item shift to state 1740
## Reductions:

State 1743:
## Known stack suffix:
## SEMISEMI structure_item use_file_tail
## LR(1) items:
use_file_tail -> SEMISEMI structure_item use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> SEMISEMI structure_item use_file_tail

State 1744:
## Known stack suffix:
## SEMISEMI seq_expr
## LR(1) items:
use_file_tail -> SEMISEMI seq_expr . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1499
-- On SHARP shift to state 1714
-- On SEMISEMI shift to state 1733
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On EOF shift to state 1736
-- On CLASS shift to state 1582
-- On use_file_tail shift to state 1745
-- On toplevel_directive shift to state 1738
-- On structure_item shift to state 1740
## Reductions:

State 1745:
## Known stack suffix:
## SEMISEMI seq_expr use_file_tail
## LR(1) items:
use_file_tail -> SEMISEMI seq_expr use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> SEMISEMI seq_expr use_file_tail

State 1746:
## Known stack suffix:
## use_file_tail
## LR(1) items:
use_file -> use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file -> use_file_tail

State 1747:
## Known stack suffix:
## use_file
## LR(1) items:
use_file' -> use_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept use_file

State 1748:
## Known stack suffix:
## seq_expr
## LR(1) items:
use_file -> seq_expr . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1499
-- On SHARP shift to state 1714
-- On SEMISEMI shift to state 1733
-- On OPEN shift to state 1544
-- On MODULE shift to state 1546
-- On LET shift to state 1641
-- On INCLUDE shift to state 1566
-- On EXTERNAL shift to state 1568
-- On EXCEPTION shift to state 1575
-- On EOF shift to state 1736
-- On CLASS shift to state 1582
-- On use_file_tail shift to state 1749
-- On toplevel_directive shift to state 1738
-- On structure_item shift to state 1740
## Reductions:

State 1749:
## Known stack suffix:
## seq_expr use_file_tail
## LR(1) items:
use_file -> seq_expr use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file -> seq_expr use_file_tail

