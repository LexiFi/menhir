File "rml.1.09.05-parser.mly", line 230, characters 7-22:
Warning: the token GREATERRBRACKET is unused.
File "rml.1.09.05-parser.mly", line 275, characters 7-23:
Warning: the token QUESTIONQUESTION is unused.
%{
open Location
open Asttypes
open Longident
open Parsetree

let mktyp d =
  { ptyp_desc = d; ptyp_loc = symbol_rloc() }
let mkpat d =
  { ppat_desc = d; ppat_loc = symbol_rloc() }
let mkexp d =
  { pexp_desc = d; pexp_loc = symbol_rloc() }
let mkmty d =
  { pmty_desc = d; pmty_loc = symbol_rloc() }
let mksig d =
  { psig_desc = d; psig_loc = symbol_rloc() }
let mkmod d =
  { pmod_desc = d; pmod_loc = symbol_rloc() }
let mkstr d =
  { pstr_desc = d; pstr_loc = symbol_rloc() }
let mkfield d =
  { pfield_desc = d; pfield_loc = symbol_rloc() }
let mkclass d =
  { pcl_desc = d; pcl_loc = symbol_rloc() }
let mkcty d =
  { pcty_desc = d; pcty_loc = symbol_rloc() }

let reloc_pat x = { x with ppat_loc = symbol_rloc () };;
let reloc_exp x = { x with pexp_loc = symbol_rloc () };;

let mkoperator name pos =
  { pexp_desc = Pexp_ident(Lident name); pexp_loc = rhs_loc pos }

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitely in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -stypes option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp d = { pexp_desc = d; pexp_loc = symbol_gloc () };;
let ghpat d = { ppat_desc = d; ppat_loc = symbol_gloc () };;
let ghtyp d = { ptyp_desc = d; ptyp_loc = symbol_gloc () };;

let mkassert e =
  match e with
  | {pexp_desc = Pexp_construct (Lident "false", None, false) } ->
         mkexp (Pexp_assertfalse)
  | _ -> mkexp (Pexp_assert (e))
;;

let mkinfix arg1 name arg2 =
  mkexp(Pexp_apply(mkoperator name 2, ["", arg1; "", arg2]))

let neg_float_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Const_int n) ->
      mkexp(Pexp_constant(Const_int(-n)))
  | "-", Pexp_constant(Const_int32 n) ->
      mkexp(Pexp_constant(Const_int32(Int32.neg n)))
  | "-", Pexp_constant(Const_int64 n) ->
      mkexp(Pexp_constant(Const_int64(Int64.neg n)))
  | "-", Pexp_constant(Const_nativeint n) ->
      mkexp(Pexp_constant(Const_nativeint(Nativeint.neg n)))
  | _, Pexp_constant(Const_float f) ->
      mkexp(Pexp_constant(Const_float(neg_float_string f)))
  | _ ->
      mkexp(Pexp_apply(mkoperator ("~" ^ name) 1, ["", arg]))

let rec mktailexp = function
    [] ->
      ghexp(Pexp_construct(Lident "[]", None, false))
  | e1 :: el ->
      let exp_el = mktailexp el in
      let l = {loc_start = e1.pexp_loc.loc_start;
               loc_end = exp_el.pexp_loc.loc_end;
               loc_ghost = true}
      in
      let arg = {pexp_desc = Pexp_tuple [e1; exp_el]; pexp_loc = l} in
      {pexp_desc = Pexp_construct(Lident "::", Some arg, false); pexp_loc = l}

let rec mktailpat = function
    [] ->
      ghpat(Ppat_construct(Lident "[]", None, false))
  | p1 :: pl ->
      let pat_pl = mktailpat pl in
      let l = {loc_start = p1.ppat_loc.loc_start;
               loc_end = pat_pl.ppat_loc.loc_end;
               loc_ghost = true}
      in
      let arg = {ppat_desc = Ppat_tuple [p1; pat_pl]; ppat_loc = l} in
      {ppat_desc = Ppat_construct(Lident "::", Some arg, false); ppat_loc = l}

let ghstrexp e =
  { pstr_desc = Pstr_eval e; pstr_loc = {e.pexp_loc with loc_ghost = true} }

let array_function str name =
  Ldot(Lident str, (if !Clflags.fast then "unsafe_" ^ name else name))

let rec deep_mkrangepat c1 c2 =
  if c1 = c2 then ghpat(Ppat_constant(Const_char c1)) else
  ghpat(Ppat_or(ghpat(Ppat_constant(Const_char c1)),
                deep_mkrangepat (Char.chr(Char.code c1 + 1)) c2))

let rec mkrangepat c1 c2 =
  if c1 > c2 then mkrangepat c2 c1 else
  if c1 = c2 then mkpat(Ppat_constant(Const_char c1)) else
  reloc_pat (deep_mkrangepat c1 c2)

let syntax_error () =
  raise Syntaxerr.Escape_error

let unclosed opening_name opening_num closing_name closing_num =
  raise(Syntaxerr.Error(Syntaxerr.Unclosed(rhs_loc opening_num, opening_name,
                                           rhs_loc closing_num, closing_name)))

let bigarray_function str name =
  Ldot(Ldot(Lident "Bigarray", str), name)

let bigarray_untuplify = function
    { pexp_desc = Pexp_tuple explist} -> explist
  | exp -> [exp]

let bigarray_get arr arg =
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" "get")),
                       ["", arr; "", c1]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" "get")),
                       ["", arr; "", c1; "", c2]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" "get")),
                       ["", arr; "", c1; "", c2; "", c3]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
                       ["", arr; "", ghexp(Pexp_array coords)]))

let bigarray_set arr arg newval =
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" "set")),
                       ["", arr; "", c1; "", newval]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" "set")),
                       ["", arr; "", c1; "", c2; "", newval]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" "set")),
                       ["", arr; "", c1; "", c2; "", c3; "", newval]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
                       ["", arr;
                        "", ghexp(Pexp_array coords);
                        "", newval]))
%}
%start implementation
%start interface
%start toplevel_phrase
%start use_file
%token AMPERAMPER
%token AMPERSAND
%token AND
%token AS
%token ASSERT
%token BACKQUOTE
%token BAR
%token BARBAR
%token BARRBRACKET
%token BEGIN
%token <char> CHAR
%token CLASS
%token COLON
%token COLONCOLON
%token COLONEQUAL
%token COLONGREATER
%token COMMA
%token CONSTRAINT
%token DO
%token DONE
%token DOT
%token DOTDOT
%token DOWNTO
%token ELSE
%token END
%token EOF
%token EQUAL
%token EXCEPTION
%token EXTERNAL
%token FALSE
%token <string> FLOAT
%token FOR
%token FUN
%token FUNCTION
%token FUNCTOR
%token GREATER
%token GREATERRBRACE
%token GREATERRBRACKET
%token IF
%token IN
%token INCLUDE
%token <string> INFIXOP0
%token <string> INFIXOP1
%token <string> INFIXOP2
%token <string> INFIXOP3
%token <string> INFIXOP4
%token INHERIT
%token INITIALIZER
%token <int> INT
%token <int32> INT32
%token <int64> INT64
%token <string> LABEL
%token LAZY
%token LBRACE
%token LBRACELESS
%token LBRACKET
%token LBRACKETBAR
%token LBRACKETLESS
%token LESS
%token LESSMINUS
%token LET
%token <string> LIDENT
%token LPAREN
%token MATCH
%token METHOD
%token MINUS
%token MINUSDOT
%token MINUSGREATER
%token MODULE
%token MUTABLE
%token <nativeint> NATIVEINT
%token NEW
%token OBJECT
%token OF
%token OPEN
%token <string> OPTLABEL
%token OR
%token PLUS
%token <string> PREFIXOP
%token PRIVATE
%token QUESTION
%token QUESTIONQUESTION
%token QUOTE
%token RBRACE
%token RBRACKET
%token REC
%token RPAREN
%token SEMI
%token SEMISEMI
%token SHARP
%token SIG
%token STAR
%token <string> STRING
%token STRUCT
%token THEN
%token TILDE
%token TO
%token TRUE
%token TRY
%token TYPE
%token <string> UIDENT
%token UNDERSCORE
%token VAL
%token VIRTUAL
%token WHEN
%token WHILE
%token WITH
%nonassoc IN
%nonassoc below_SEMI
%nonassoc SEMI
%nonassoc LET
%nonassoc below_WITH
%nonassoc FUNCTION WITH
%nonassoc AND
%nonassoc THEN
%nonassoc ELSE
%nonassoc LESSMINUS
%right COLONEQUAL
%nonassoc AS
%left BAR
%nonassoc below_COMMA
%left COMMA
%right MINUSGREATER
%right BARBAR OR
%right AMPERAMPER AMPERSAND
%nonassoc below_EQUAL
%left EQUAL GREATER INFIXOP0 LESS
%right INFIXOP1
%right COLONCOLON
%left INFIXOP2 MINUS MINUSDOT PLUS
%left INFIXOP3 STAR
%right INFIXOP4
%nonassoc prec_unary_minus
%nonassoc prec_constant_constructor
%nonassoc prec_constr_appl
%nonassoc below_SHARP
%nonassoc SHARP
%nonassoc below_DOT
%nonassoc DOT
%nonassoc BACKQUOTE BEGIN CHAR FALSE FLOAT INT INT32 INT64 LBRACE LBRACELESS LBRACKET LBRACKETBAR LIDENT LPAREN NATIVEINT NEW PREFIXOP STRING TRUE UIDENT
%type <Parsetree.structure> implementation
%type <Parsetree.signature> interface
%type <Parsetree.toplevel_phrase> toplevel_phrase
%type <Parsetree.toplevel_phrase list> use_file
%%

implementation:
  _1 = structure _2 = EOF
    {                                         ( _1 )}

interface:
  _1 = signature _2 = EOF
    {                                         ( List.rev _1 )}

toplevel_phrase:
  _1 = top_structure _2 = SEMISEMI
    {                                         ( Ptop_def _1 )}
| _1 = seq_expr _2 = SEMISEMI
    {                                         ( Ptop_def[ghstrexp _1] )}
| _1 = toplevel_directive _2 = SEMISEMI
    {                                         ( _1 )}
| _1 = EOF
    {                                         ( raise End_of_file )}

top_structure:
  _1 = structure_item
    {                                         ( [_1] )}
| _1 = structure_item _2 = top_structure
    {                                         ( _1 :: _2 )}

use_file:
  _1 = use_file_tail
    {                                         ( _1 )}
| _1 = seq_expr _2 = use_file_tail
    {                                         ( Ptop_def[ghstrexp _1] :: _2 )}

use_file_tail:
  _1 = EOF
    {                                                ( [] )}
| _1 = SEMISEMI _2 = EOF
    {                                                ( [] )}
| _1 = SEMISEMI _2 = seq_expr _3 = use_file_tail
    {                                                ( Ptop_def[ghstrexp _2] :: _3 )}
| _1 = SEMISEMI _2 = structure_item _3 = use_file_tail
    {                                                ( Ptop_def[_2] :: _3 )}
| _1 = SEMISEMI _2 = toplevel_directive _3 = use_file_tail
    {                                                ( _2 :: _3 )}
| _1 = structure_item _2 = use_file_tail
    {                                                ( Ptop_def[_1] :: _2 )}
| _1 = toplevel_directive _2 = use_file_tail
    {                                                ( _1 :: _2 )}

module_expr:
  _1 = mod_longident
    {      ( mkmod(Pmod_ident _1) )}
| _1 = STRUCT _2 = structure _3 = END
    {      ( mkmod(Pmod_structure(_2)) )}
| _1 = STRUCT _2 = structure _3 = error
    {      ( unclosed "struct" 1 "end" 3 )}
| _1 = FUNCTOR _2 = LPAREN _3 = UIDENT _4 = COLON _5 = module_type _6 = RPAREN _7 = MINUSGREATER _8 = module_expr
    {      ( mkmod(Pmod_functor(_3, _5, _8)) )}
| _1 = module_expr _2 = LPAREN _3 = module_expr _4 = RPAREN
    {      ( mkmod(Pmod_apply(_1, _3)) )}
| _1 = module_expr _2 = LPAREN _3 = module_expr _4 = error
    {      ( unclosed "(" 2 ")" 4 )}
| _1 = LPAREN _2 = module_expr _3 = COLON _4 = module_type _5 = RPAREN
    {      ( mkmod(Pmod_constraint(_2, _4)) )}
| _1 = LPAREN _2 = module_expr _3 = COLON _4 = module_type _5 = error
    {      ( unclosed "(" 1 ")" 5 )}
| _1 = LPAREN _2 = module_expr _3 = RPAREN
    {      ( _2 )}
| _1 = LPAREN _2 = module_expr _3 = error
    {      ( unclosed "(" 1 ")" 3 )}

structure:
  _1 = structure_tail
    {                                                ( _1 )}
| _1 = seq_expr _2 = structure_tail
    {                                                ( ghstrexp _1 :: _2 )}

structure_tail:
  
    {                                                ( [] )}
| _1 = SEMISEMI
    {                                                ( [] )}
| _1 = SEMISEMI _2 = seq_expr _3 = structure_tail
    {                                                ( ghstrexp _2 :: _3 )}
| _1 = SEMISEMI _2 = structure_item _3 = structure_tail
    {                                                ( _2 :: _3 )}
| _1 = structure_item _2 = structure_tail
    {                                                ( _1 :: _2 )}

structure_item:
  _1 = LET _2 = rec_flag _3 = let_bindings
    {      ( match _3 with
          [{ppat_desc = Ppat_any}, exp] -> mkstr(Pstr_eval exp)
        | _ -> mkstr(Pstr_value(_2, List.rev _3)) )}
| _1 = EXTERNAL _2 = val_ident_colon _3 = core_type _4 = EQUAL _5 = primitive_declaration
    {      ( mkstr(Pstr_primitive(_2, {pval_type = _3; pval_prim = _5})) )}
| _1 = TYPE _2 = type_declarations
    {      ( mkstr(Pstr_type(List.rev _2)) )}
| _1 = EXCEPTION _2 = UIDENT _3 = constructor_arguments
    {      ( mkstr(Pstr_exception(_2, _3)) )}
| _1 = EXCEPTION _2 = UIDENT _3 = EQUAL _4 = constr_longident
    {      ( mkstr(Pstr_exn_rebind(_2, _4)) )}
| _1 = MODULE _2 = UIDENT _3 = module_binding
    {      ( mkstr(Pstr_module(_2, _3)) )}
| _1 = MODULE _2 = REC _3 = module_rec_bindings
    {      ( mkstr(Pstr_recmodule(List.rev _3)) )}
| _1 = MODULE _2 = TYPE _3 = ident _4 = EQUAL _5 = module_type
    {      ( mkstr(Pstr_modtype(_3, _5)) )}
| _1 = OPEN _2 = mod_longident
    {      ( mkstr(Pstr_open _2) )}
| _1 = CLASS _2 = class_declarations
    {      ( mkstr(Pstr_class (List.rev _2)) )}
| _1 = CLASS _2 = TYPE _3 = class_type_declarations
    {      ( mkstr(Pstr_class_type (List.rev _3)) )}
| _1 = INCLUDE _2 = module_expr
    {      ( mkstr(Pstr_include _2) )}

module_binding:
  _1 = EQUAL _2 = module_expr
    {      ( _2 )}
| _1 = COLON _2 = module_type _3 = EQUAL _4 = module_expr
    {      ( mkmod(Pmod_constraint(_4, _2)) )}
| _1 = LPAREN _2 = UIDENT _3 = COLON _4 = module_type _5 = RPAREN _6 = module_binding
    {      ( mkmod(Pmod_functor(_2, _4, _6)) )}

module_rec_bindings:
  _1 = module_rec_binding
    {                                                  ( [_1] )}
| _1 = module_rec_bindings _2 = AND _3 = module_rec_binding
    {                                                  ( _3 :: _1 )}

module_rec_binding:
  _1 = UIDENT _2 = COLON _3 = module_type _4 = EQUAL _5 = module_expr
    {                                                  ( (_1, _3, _5) )}

module_type:
  _1 = mty_longident
    {      ( mkmty(Pmty_ident _1) )}
| _1 = SIG _2 = signature _3 = END
    {      ( mkmty(Pmty_signature(List.rev _2)) )}
| _1 = SIG _2 = signature _3 = error
    {      ( unclosed "sig" 1 "end" 3 )}
| _1 = FUNCTOR _2 = LPAREN _3 = UIDENT _4 = COLON _5 = module_type _6 = RPAREN _7 = MINUSGREATER _8 = module_type %prec below_WITH
    {      ( mkmty(Pmty_functor(_3, _5, _8)) )}
| _1 = module_type _2 = WITH _3 = with_constraints
    {      ( mkmty(Pmty_with(_1, List.rev _3)) )}
| _1 = LPAREN _2 = module_type _3 = RPAREN
    {      ( _2 )}
| _1 = LPAREN _2 = module_type _3 = error
    {      ( unclosed "(" 1 ")" 3 )}

signature:
  
    {                                                ( [] )}
| _1 = signature _2 = signature_item
    {                                                ( _2 :: _1 )}
| _1 = signature _2 = signature_item _3 = SEMISEMI
    {                                                ( _2 :: _1 )}

signature_item:
  _1 = VAL _2 = val_ident_colon _3 = core_type
    {      ( mksig(Psig_value(_2, {pval_type = _3; pval_prim = []})) )}
| _1 = EXTERNAL _2 = val_ident_colon _3 = core_type _4 = EQUAL _5 = primitive_declaration
    {      ( mksig(Psig_value(_2, {pval_type = _3; pval_prim = _5})) )}
| _1 = TYPE _2 = type_declarations
    {      ( mksig(Psig_type(List.rev _2)) )}
| _1 = EXCEPTION _2 = UIDENT _3 = constructor_arguments
    {      ( mksig(Psig_exception(_2, _3)) )}
| _1 = MODULE _2 = UIDENT _3 = module_declaration
    {      ( mksig(Psig_module(_2, _3)) )}
| _1 = MODULE _2 = REC _3 = module_rec_declarations
    {      ( mksig(Psig_recmodule(List.rev _3)) )}
| _1 = MODULE _2 = TYPE _3 = ident
    {      ( mksig(Psig_modtype(_3, Pmodtype_abstract)) )}
| _1 = MODULE _2 = TYPE _3 = ident _4 = EQUAL _5 = module_type
    {      ( mksig(Psig_modtype(_3, Pmodtype_manifest _5)) )}
| _1 = OPEN _2 = mod_longident
    {      ( mksig(Psig_open _2) )}
| _1 = INCLUDE _2 = module_type
    {      ( mksig(Psig_include _2) )}
| _1 = CLASS _2 = class_descriptions
    {      ( mksig(Psig_class (List.rev _2)) )}
| _1 = CLASS _2 = TYPE _3 = class_type_declarations
    {      ( mksig(Psig_class_type (List.rev _3)) )}

module_declaration:
  _1 = COLON _2 = module_type
    {      ( _2 )}
| _1 = LPAREN _2 = UIDENT _3 = COLON _4 = module_type _5 = RPAREN _6 = module_declaration
    {      ( mkmty(Pmty_functor(_2, _4, _6)) )}

module_rec_declarations:
  _1 = module_rec_declaration
    {                                                        ( [_1] )}
| _1 = module_rec_declarations _2 = AND _3 = module_rec_declaration
    {                                                        ( _3 :: _1 )}

module_rec_declaration:
  _1 = UIDENT _2 = COLON _3 = module_type
    {                                                        ( (_1, _3) )}

class_declarations:
  _1 = class_declarations _2 = AND _3 = class_declaration
    {                                                ( _3 :: _1 )}
| _1 = class_declaration
    {                                                ( [_1] )}

class_declaration:
  _1 = virtual_flag _2 = class_type_parameters _3 = LIDENT _4 = class_fun_binding
    {      ( let params, variance = List.split (fst _2) in
        {pci_virt = _1; pci_params = params, snd _2;
         pci_name = _3; pci_expr = _4; pci_variance = variance;
         pci_loc = symbol_rloc ()} )}

class_fun_binding:
  _1 = EQUAL _2 = class_expr
    {      ( _2 )}
| _1 = COLON _2 = class_type _3 = EQUAL _4 = class_expr
    {      ( mkclass(Pcl_constraint(_4, _2)) )}
| _1 = labeled_simple_pattern _2 = class_fun_binding
    {      ( let (l,o,p) = _1 in mkclass(Pcl_fun(l, o, p, _2)) )}

class_type_parameters:
  
    {                                                ( [], symbol_gloc () )}
| _1 = LBRACKET _2 = type_parameter_list _3 = RBRACKET
    {                                                ( List.rev _2, symbol_rloc () )}

class_fun_def:
  _1 = labeled_simple_pattern _2 = MINUSGREATER _3 = class_expr
    {      ( let (l,o,p) = _1 in mkclass(Pcl_fun(l, o, p, _3)) )}
| _1 = labeled_simple_pattern _2 = class_fun_def
    {      ( let (l,o,p) = _1 in mkclass(Pcl_fun(l, o, p, _2)) )}

class_expr:
  _1 = class_simple_expr
    {      ( _1 )}
| _1 = FUN _2 = class_fun_def
    {      ( _2 )}
| _1 = class_simple_expr _2 = simple_labeled_expr_list
    {      ( mkclass(Pcl_apply(_1, List.rev _2)) )}
| _1 = LET _2 = rec_flag _3 = let_bindings _4 = IN _5 = class_expr
    {      ( mkclass(Pcl_let (_2, List.rev _3, _5)) )}

class_simple_expr:
  _1 = LBRACKET _2 = core_type_comma_list _3 = RBRACKET _4 = class_longident
    {      ( mkclass(Pcl_constr(_4, List.rev _2)) )}
| _1 = class_longident
    {      ( mkclass(Pcl_constr(_1, [])) )}
| _1 = OBJECT _2 = class_structure _3 = END
    {      ( mkclass(Pcl_structure(_2)) )}
| _1 = OBJECT _2 = class_structure _3 = error
    {      ( unclosed "class" 1 "end" 3 )}
| _1 = LPAREN _2 = class_expr _3 = COLON _4 = class_type _5 = RPAREN
    {      ( mkclass(Pcl_constraint(_2, _4)) )}
| _1 = LPAREN _2 = class_expr _3 = COLON _4 = class_type _5 = error
    {      ( unclosed "(" 1 ")" 5 )}
| _1 = LPAREN _2 = class_expr _3 = RPAREN
    {      ( _2 )}
| _1 = LPAREN _2 = class_expr _3 = error
    {      ( unclosed "(" 1 ")" 3 )}

class_structure:
  _1 = class_self_pattern _2 = class_fields
    {      ( _1, List.rev _2 )}

class_self_pattern:
  _1 = LPAREN _2 = pattern _3 = RPAREN
    {      ( reloc_pat _2 )}
| _1 = LPAREN _2 = pattern _3 = COLON _4 = core_type _5 = RPAREN
    {      ( mkpat(Ppat_constraint(_2, _4)) )}
| 
    {      ( ghpat(Ppat_any) )}

class_fields:
  
    {      ( [] )}
| _1 = class_fields _2 = INHERIT _3 = class_expr _4 = parent_binder
    {      ( Pcf_inher (_3, _4) :: _1 )}
| _1 = class_fields _2 = VAL _3 = value
    {      ( Pcf_val _3 :: _1 )}
| _1 = class_fields _2 = virtual_method
    {      ( Pcf_virt _2 :: _1 )}
| _1 = class_fields _2 = concrete_method
    {      ( Pcf_meth _2 :: _1 )}
| _1 = class_fields _2 = CONSTRAINT _3 = constrain
    {      ( Pcf_cstr _3 :: _1 )}
| _1 = class_fields _2 = INITIALIZER _3 = seq_expr
    {      ( Pcf_init _3 :: _1 )}

parent_binder:
  _1 = AS _2 = LIDENT
    {          ( Some _2 )}
| 
    {          (None)}

value:
  _1 = mutable_flag _2 = label _3 = EQUAL _4 = seq_expr
    {          ( _2, _1, _4, symbol_rloc () )}
| _1 = mutable_flag _2 = label _3 = type_constraint _4 = EQUAL _5 = seq_expr
    {          ( _2, _1, (let (t, t') = _3 in ghexp(Pexp_constraint(_5, t, t'))),
            symbol_rloc () )}

virtual_method:
  _1 = METHOD _2 = PRIVATE _3 = VIRTUAL _4 = label _5 = COLON _6 = poly_type
    {      ( _4, Private, _6, symbol_rloc () )}
| _1 = METHOD _2 = VIRTUAL _3 = private_flag _4 = label _5 = COLON _6 = poly_type
    {      ( _4, _3, _6, symbol_rloc () )}

concrete_method:
  _1 = METHOD _2 = private_flag _3 = label _4 = strict_binding
    {      ( _3, _2, ghexp(Pexp_poly (_4, None)), symbol_rloc () )}
| _1 = METHOD _2 = private_flag _3 = label _4 = COLON _5 = poly_type _6 = EQUAL _7 = seq_expr
    {      ( _3, _2, ghexp(Pexp_poly(_7,Some _5)), symbol_rloc () )}
| _1 = METHOD _2 = private_flag _3 = LABEL _4 = poly_type _5 = EQUAL _6 = seq_expr
    {      ( _3, _2, ghexp(Pexp_poly(_6,Some _4)), symbol_rloc () )}

class_type:
  _1 = class_signature
    {      ( _1 )}
| _1 = QUESTION _2 = LIDENT _3 = COLON _4 = simple_core_type_or_tuple _5 = MINUSGREATER _6 = class_type
    {      ( mkcty(Pcty_fun("?" ^ _2 ,
                       {ptyp_desc = Ptyp_constr(Lident "option", [_4]);
                        ptyp_loc = _4.ptyp_loc},
                       _6)) )}
| _1 = OPTLABEL _2 = simple_core_type_or_tuple _3 = MINUSGREATER _4 = class_type
    {      ( mkcty(Pcty_fun("?" ^ _1 ,
                       {ptyp_desc = Ptyp_constr(Lident "option", [_2]);
                        ptyp_loc = _2.ptyp_loc},
                       _4)) )}
| _1 = LIDENT _2 = COLON _3 = simple_core_type_or_tuple _4 = MINUSGREATER _5 = class_type
    {      ( mkcty(Pcty_fun(_1, _3, _5)) )}
| _1 = simple_core_type_or_tuple _2 = MINUSGREATER _3 = class_type
    {      ( mkcty(Pcty_fun("", _1, _3)) )}

class_signature:
  _1 = LBRACKET _2 = core_type_comma_list _3 = RBRACKET _4 = clty_longident
    {      ( mkcty(Pcty_constr (_4, List.rev _2)) )}
| _1 = clty_longident
    {      ( mkcty(Pcty_constr (_1, [])) )}
| _1 = OBJECT _2 = class_sig_body _3 = END
    {      ( mkcty(Pcty_signature _2) )}
| _1 = OBJECT _2 = class_sig_body _3 = error
    {      ( unclosed "sig" 1 "end" 3 )}

class_sig_body:
  _1 = class_self_type _2 = class_sig_fields
    {      ( _1, List.rev _2 )}

class_self_type:
  _1 = LPAREN _2 = core_type _3 = RPAREN
    {      ( _2 )}
| 
    {      ( mktyp(Ptyp_any) )}

class_sig_fields:
  
    {                                                ( [] )}
| _1 = class_sig_fields _2 = INHERIT _3 = class_signature
    {                                                ( Pctf_inher _3 :: _1 )}
| _1 = class_sig_fields _2 = VAL _3 = value_type
    {                                                ( Pctf_val   _3 :: _1 )}
| _1 = class_sig_fields _2 = virtual_method
    {                                                ( Pctf_virt  _2 :: _1 )}
| _1 = class_sig_fields _2 = method_type
    {                                                ( Pctf_meth  _2 :: _1 )}
| _1 = class_sig_fields _2 = CONSTRAINT _3 = constrain
    {                                                ( Pctf_cstr  _3 :: _1 )}

value_type:
  _1 = mutable_flag _2 = label _3 = COLON _4 = core_type
    {      ( _2, _1, Some _4, symbol_rloc () )}

method_type:
  _1 = METHOD _2 = private_flag _3 = label _4 = COLON _5 = poly_type
    {      ( _3, _2, _5, symbol_rloc () )}

constrain:
  _1 = core_type _2 = EQUAL _3 = core_type
    {                                           ( _1, _3, symbol_rloc () )}

class_descriptions:
  _1 = class_descriptions _2 = AND _3 = class_description
    {                                                ( _3 :: _1 )}
| _1 = class_description
    {                                                ( [_1] )}

class_description:
  _1 = virtual_flag _2 = class_type_parameters _3 = LIDENT _4 = COLON _5 = class_type
    {      ( let params, variance = List.split (fst _2) in
        {pci_virt = _1; pci_params = params, snd _2;
         pci_name = _3; pci_expr = _5; pci_variance = variance;
         pci_loc = symbol_rloc ()} )}

class_type_declarations:
  _1 = class_type_declarations _2 = AND _3 = class_type_declaration
    {                                                        ( _3 :: _1 )}
| _1 = class_type_declaration
    {                                                        ( [_1] )}

class_type_declaration:
  _1 = virtual_flag _2 = class_type_parameters _3 = LIDENT _4 = EQUAL _5 = class_signature
    {      ( let params, variance = List.split (fst _2) in
        {pci_virt = _1; pci_params = params, snd _2;
         pci_name = _3; pci_expr = _5; pci_variance = variance;
         pci_loc = symbol_rloc ()} )}

seq_expr:
  _1 = expr %prec below_SEMI
    {                                  ( _1 )}
| _1 = expr _2 = SEMI
    {                                  ( reloc_exp _1 )}
| _1 = expr _2 = SEMI _3 = seq_expr
    {                                  ( mkexp(Pexp_sequence(_1, _3)) )}

labeled_simple_pattern:
  _1 = QUESTION _2 = LPAREN _3 = label_let_pattern _4 = opt_default _5 = RPAREN
    {      ( ("?" ^ fst _3, _4, snd _3) )}
| _1 = QUESTION _2 = label_var
    {      ( ("?" ^ fst _2, None, snd _2) )}
| _1 = OPTLABEL _2 = LPAREN _3 = let_pattern _4 = opt_default _5 = RPAREN
    {      ( ("?" ^ _1, _4, _3) )}
| _1 = OPTLABEL _2 = pattern_var
    {      ( ("?" ^ _1, None, _2) )}
| _1 = TILDE _2 = LPAREN _3 = label_let_pattern _4 = RPAREN
    {      ( (fst _3, None, snd _3) )}
| _1 = TILDE _2 = label_var
    {      ( (fst _2, None, snd _2) )}
| _1 = LABEL _2 = simple_pattern
    {      ( (_1, None, _2) )}
| _1 = simple_pattern
    {      ( ("", None, _1) )}

pattern_var:
  _1 = LIDENT
    {              ( mkpat(Ppat_var _1) )}

opt_default:
  
    {                                        ( None )}
| _1 = EQUAL _2 = seq_expr
    {                                        ( Some _2 )}

label_let_pattern:
  _1 = label_var
    {      ( _1 )}
| _1 = label_var _2 = COLON _3 = core_type
    {      ( let (lab, pat) = _1 in (lab, mkpat(Ppat_constraint(pat, _3))) )}

label_var:
  _1 = LIDENT
    {              ( (_1, mkpat(Ppat_var _1)) )}

let_pattern:
  _1 = pattern
    {      ( _1 )}
| _1 = pattern _2 = COLON _3 = core_type
    {      ( mkpat(Ppat_constraint(_1, _3)) )}

expr:
  _1 = simple_expr %prec below_SHARP
    {      ( _1 )}
| _1 = simple_expr _2 = simple_labeled_expr_list
    {      ( mkexp(Pexp_apply(_1, List.rev _2)) )}
| _1 = LET _2 = rec_flag _3 = let_bindings _4 = IN _5 = seq_expr
    {      ( mkexp(Pexp_let(_2, List.rev _3, _5)) )}
| _1 = LET _2 = MODULE _3 = UIDENT _4 = module_binding _5 = IN _6 = seq_expr
    {      ( mkexp(Pexp_letmodule(_3, _4, _6)) )}
| _1 = FUNCTION _2 = opt_bar _3 = match_cases
    {      ( mkexp(Pexp_function("", None, List.rev _3)) )}
| _1 = FUN _2 = labeled_simple_pattern _3 = fun_def
    {      ( let (l,o,p) = _2 in mkexp(Pexp_function(l, o, [p, _3])) )}
| _1 = MATCH _2 = seq_expr _3 = WITH _4 = opt_bar _5 = match_cases
    {      ( mkexp(Pexp_match(_2, List.rev _5)) )}
| _1 = TRY _2 = seq_expr _3 = WITH _4 = opt_bar _5 = match_cases
    {      ( mkexp(Pexp_try(_2, List.rev _5)) )}
| _1 = TRY _2 = seq_expr _3 = WITH _4 = error
    {      ( syntax_error() )}
| _1 = expr_comma_list %prec below_COMMA
    {      ( mkexp(Pexp_tuple(List.rev _1)) )}
| _1 = constr_longident _2 = simple_expr %prec below_SHARP
    {      ( mkexp(Pexp_construct(_1, Some _2, false)) )}
| _1 = name_tag _2 = simple_expr %prec below_SHARP
    {      ( mkexp(Pexp_variant(_1, Some _2)) )}
| _1 = IF _2 = seq_expr _3 = THEN _4 = expr _5 = ELSE _6 = expr
    {      ( mkexp(Pexp_ifthenelse(_2, _4, Some _6)) )}
| _1 = IF _2 = seq_expr _3 = THEN _4 = expr
    {      ( mkexp(Pexp_ifthenelse(_2, _4, None)) )}
| _1 = WHILE _2 = seq_expr _3 = DO _4 = seq_expr _5 = DONE
    {      ( mkexp(Pexp_while(_2, _4)) )}
| _1 = FOR _2 = val_ident _3 = EQUAL _4 = seq_expr _5 = direction_flag _6 = seq_expr _7 = DO _8 = seq_expr _9 = DONE
    {      ( mkexp(Pexp_for(_2, _4, _6, _5, _8)) )}
| _1 = expr _2 = COLONCOLON _3 = expr
    {      ( mkexp(Pexp_construct(Lident "::",
                             Some(ghexp(Pexp_tuple[_1;_3])),
                             false)) )}
| _1 = expr _2 = INFIXOP0 _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP1 _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP2 _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP3 _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = INFIXOP4 _3 = expr
    {      ( mkinfix _1 _2 _3 )}
| _1 = expr _2 = PLUS _3 = expr
    {      ( mkinfix _1 "+" _3 )}
| _1 = expr _2 = MINUS _3 = expr
    {      ( mkinfix _1 "-" _3 )}
| _1 = expr _2 = MINUSDOT _3 = expr
    {      ( mkinfix _1 "-." _3 )}
| _1 = expr _2 = STAR _3 = expr
    {      ( mkinfix _1 "*" _3 )}
| _1 = expr _2 = EQUAL _3 = expr
    {      ( mkinfix _1 "=" _3 )}
| _1 = expr _2 = LESS _3 = expr
    {      ( mkinfix _1 "<" _3 )}
| _1 = expr _2 = GREATER _3 = expr
    {      ( mkinfix _1 ">" _3 )}
| _1 = expr _2 = OR _3 = expr
    {      ( mkinfix _1 "or" _3 )}
| _1 = expr _2 = BARBAR _3 = expr
    {      ( mkinfix _1 "||" _3 )}
| _1 = expr _2 = AMPERSAND _3 = expr
    {      ( mkinfix _1 "&" _3 )}
| _1 = expr _2 = AMPERAMPER _3 = expr
    {      ( mkinfix _1 "&&" _3 )}
| _1 = expr _2 = COLONEQUAL _3 = expr
    {      ( mkinfix _1 ":=" _3 )}
| _1 = subtractive _2 = expr %prec prec_unary_minus
    {      ( mkuminus _1 _2 )}
| _1 = simple_expr _2 = DOT _3 = label_longident _4 = LESSMINUS _5 = expr
    {      ( mkexp(Pexp_setfield(_1, _3, _5)) )}
| _1 = simple_expr _2 = DOT _3 = LPAREN _4 = seq_expr _5 = RPAREN _6 = LESSMINUS _7 = expr
    {      ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "Array" "set")),
                         ["",_1; "",_4; "",_7])) )}
| _1 = simple_expr _2 = DOT _3 = LBRACKET _4 = seq_expr _5 = RBRACKET _6 = LESSMINUS _7 = expr
    {      ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "String" "set")),
                         ["",_1; "",_4; "",_7])) )}
| _1 = simple_expr _2 = DOT _3 = LBRACE _4 = expr _5 = RBRACE _6 = LESSMINUS _7 = expr
    {      ( bigarray_set _1 _4 _7 )}
| _1 = label _2 = LESSMINUS _3 = expr
    {      ( mkexp(Pexp_setinstvar(_1, _3)) )}
| _1 = ASSERT _2 = simple_expr %prec below_SHARP
    {      ( mkassert _2 )}
| _1 = LAZY _2 = simple_expr %prec below_SHARP
    {      ( mkexp (Pexp_lazy (_2)) )}

simple_expr:
  _1 = val_longident
    {      ( mkexp(Pexp_ident _1) )}
| _1 = constant
    {      ( mkexp(Pexp_constant _1) )}
| _1 = constr_longident %prec prec_constant_constructor
    {      ( mkexp(Pexp_construct(_1, None, false)) )}
| _1 = name_tag %prec prec_constant_constructor
    {      ( mkexp(Pexp_variant(_1, None)) )}
| _1 = LPAREN _2 = seq_expr _3 = RPAREN
    {      ( reloc_exp _2 )}
| _1 = LPAREN _2 = seq_expr _3 = error
    {      ( unclosed "(" 1 ")" 3 )}
| _1 = BEGIN _2 = seq_expr _3 = END
    {      ( reloc_exp _2 )}
| _1 = BEGIN _2 = END
    {      ( mkexp (Pexp_construct (Lident "()", None, false)) )}
| _1 = BEGIN _2 = seq_expr _3 = error
    {      ( unclosed "begin" 1 "end" 3 )}
| _1 = LPAREN _2 = seq_expr _3 = type_constraint _4 = RPAREN
    {      ( let (t, t') = _3 in mkexp(Pexp_constraint(_2, t, t')) )}
| _1 = simple_expr _2 = DOT _3 = label_longident
    {      ( mkexp(Pexp_field(_1, _3)) )}
| _1 = simple_expr _2 = DOT _3 = LPAREN _4 = seq_expr _5 = RPAREN
    {      ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "Array" "get")),
                         ["",_1; "",_4])) )}
| _1 = simple_expr _2 = DOT _3 = LPAREN _4 = seq_expr _5 = error
    {      ( unclosed "(" 3 ")" 5 )}
| _1 = simple_expr _2 = DOT _3 = LBRACKET _4 = seq_expr _5 = RBRACKET
    {      ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "String" "get")),
                         ["",_1; "",_4])) )}
| _1 = simple_expr _2 = DOT _3 = LBRACKET _4 = seq_expr _5 = error
    {      ( unclosed "[" 3 "]" 5 )}
| _1 = simple_expr _2 = DOT _3 = LBRACE _4 = expr _5 = RBRACE
    {      ( bigarray_get _1 _4 )}
| _1 = simple_expr _2 = DOT _3 = LBRACE _4 = expr_comma_list _5 = error
    {      ( unclosed "{" 3 "}" 5 )}
| _1 = LBRACE _2 = record_expr _3 = RBRACE
    {      ( let (exten, fields) = _2 in mkexp(Pexp_record(fields, exten)) )}
| _1 = LBRACE _2 = record_expr _3 = error
    {      ( unclosed "{" 1 "}" 5 )}
| _1 = LBRACKETBAR _2 = expr_semi_list _3 = opt_semi _4 = BARRBRACKET
    {      ( mkexp(Pexp_array(List.rev _2)) )}
| _1 = LBRACKETBAR _2 = expr_semi_list _3 = opt_semi _4 = error
    {      ( unclosed "[|" 1 "|]" 4 )}
| _1 = LBRACKETBAR _2 = BARRBRACKET
    {      ( mkexp(Pexp_array []) )}
| _1 = LBRACKET _2 = expr_semi_list _3 = opt_semi _4 = RBRACKET
    {      ( reloc_exp (mktailexp (List.rev _2)) )}
| _1 = LBRACKET _2 = expr_semi_list _3 = opt_semi _4 = error
    {      ( unclosed "[" 1 "]" 4 )}
| _1 = PREFIXOP _2 = simple_expr
    {      ( mkexp(Pexp_apply(mkoperator _1 1, ["",_2])) )}
| _1 = NEW _2 = class_longident
    {      ( mkexp(Pexp_new(_2)) )}
| _1 = LBRACELESS _2 = field_expr_list _3 = opt_semi _4 = GREATERRBRACE
    {      ( mkexp(Pexp_override(List.rev _2)) )}
| _1 = LBRACELESS _2 = field_expr_list _3 = opt_semi _4 = error
    {      ( unclosed "{<" 1 ">}" 4 )}
| _1 = LBRACELESS _2 = GREATERRBRACE
    {      ( mkexp(Pexp_override []) )}
| _1 = simple_expr _2 = SHARP _3 = label
    {      ( mkexp(Pexp_send(_1, _3)) )}

simple_labeled_expr_list:
  _1 = labeled_simple_expr
    {      ( [_1] )}
| _1 = simple_labeled_expr_list _2 = labeled_simple_expr
    {      ( _2 :: _1 )}

labeled_simple_expr:
  _1 = simple_expr %prec below_SHARP
    {      ( ("", _1) )}
| _1 = label_expr
    {      ( _1 )}

label_expr:
  _1 = LABEL _2 = simple_expr %prec below_SHARP
    {      ( (_1, _2) )}
| _1 = TILDE _2 = label_ident
    {      ( _2 )}
| _1 = QUESTION _2 = label_ident
    {      ( ("?" ^ fst _2, snd _2) )}
| _1 = OPTLABEL _2 = simple_expr %prec below_SHARP
    {      ( ("?" ^ _1, _2) )}

label_ident:
  _1 = LIDENT
    {             ( (_1, mkexp(Pexp_ident(Lident _1))) )}

let_bindings:
  _1 = let_binding
    {                                                ( [_1] )}
| _1 = let_bindings _2 = AND _3 = let_binding
    {                                                ( _3 :: _1 )}

let_binding:
  _1 = val_ident _2 = fun_binding
    {      ( ({ppat_desc = Ppat_var _1; ppat_loc = rhs_loc 1}, _2) )}
| _1 = pattern _2 = EQUAL _3 = seq_expr
    {      ( (_1, _3) )}

fun_binding:
  _1 = strict_binding
    {      ( _1 )}
| _1 = type_constraint _2 = EQUAL _3 = seq_expr
    {      ( let (t, t') = _1 in ghexp(Pexp_constraint(_3, t, t')) )}

strict_binding:
  _1 = EQUAL _2 = seq_expr
    {      ( _2 )}
| _1 = labeled_simple_pattern _2 = fun_binding
    {      ( let (l, o, p) = _1 in ghexp(Pexp_function(l, o, [p, _2])) )}

match_cases:
  _1 = pattern _2 = match_action
    {                                                ( [_1, _2] )}
| _1 = match_cases _2 = BAR _3 = pattern _4 = match_action
    {                                                ( (_3, _4) :: _1 )}

fun_def:
  _1 = match_action
    {                                                ( _1 )}
| _1 = labeled_simple_pattern _2 = fun_def
    {      ( let (l,o,p) = _1 in ghexp(Pexp_function(l, o, [p, _2])) )}

match_action:
  _1 = MINUSGREATER _2 = seq_expr
    {                                                ( _2 )}
| _1 = WHEN _2 = seq_expr _3 = MINUSGREATER _4 = seq_expr
    {                                                ( mkexp(Pexp_when(_2, _4)) )}

expr_comma_list:
  _1 = expr_comma_list _2 = COMMA _3 = expr
    {                                                ( _3 :: _1 )}
| _1 = expr _2 = COMMA _3 = expr
    {                                                ( [_3; _1] )}

record_expr:
  _1 = simple_expr _2 = WITH _3 = lbl_expr_list _4 = opt_semi
    {                                                ( (Some _1, List.rev _3) )}
| _1 = lbl_expr_list _2 = opt_semi
    {                                                ( (None, List.rev _1) )}

lbl_expr_list:
  _1 = label_longident _2 = EQUAL _3 = expr
    {      ( [_1,_3] )}
| _1 = lbl_expr_list _2 = SEMI _3 = label_longident _4 = EQUAL _5 = expr
    {      ( (_3, _5) :: _1 )}

field_expr_list:
  _1 = label _2 = EQUAL _3 = expr
    {      ( [_1,_3] )}
| _1 = field_expr_list _2 = SEMI _3 = label _4 = EQUAL _5 = expr
    {      ( (_3, _5) :: _1 )}

expr_semi_list:
  _1 = expr
    {                                                ( [_1] )}
| _1 = expr_semi_list _2 = SEMI _3 = expr
    {                                                ( _3 :: _1 )}

type_constraint:
  _1 = COLON _2 = core_type
    {                                                ( (Some _2, None) )}
| _1 = COLON _2 = core_type _3 = COLONGREATER _4 = core_type
    {                                                ( (Some _2, Some _4) )}
| _1 = COLONGREATER _2 = core_type
    {                                                ( (None, Some _2) )}
| _1 = COLON _2 = error
    {                                                ( syntax_error() )}
| _1 = COLONGREATER _2 = error
    {                                                ( syntax_error() )}

pattern:
  _1 = simple_pattern
    {      ( _1 )}
| _1 = pattern _2 = AS _3 = val_ident
    {      ( mkpat(Ppat_alias(_1, _3)) )}
| _1 = pattern_comma_list %prec below_COMMA
    {      ( mkpat(Ppat_tuple(List.rev _1)) )}
| _1 = constr_longident _2 = pattern %prec prec_constr_appl
    {      ( mkpat(Ppat_construct(_1, Some _2, false)) )}
| _1 = name_tag _2 = pattern %prec prec_constr_appl
    {      ( mkpat(Ppat_variant(_1, Some _2)) )}
| _1 = pattern _2 = COLONCOLON _3 = pattern
    {      ( mkpat(Ppat_construct(Lident "::", Some(ghpat(Ppat_tuple[_1;_3])),
                             false)) )}
| _1 = pattern _2 = BAR _3 = pattern
    {      ( mkpat(Ppat_or(_1, _3)) )}

simple_pattern:
  _1 = val_ident %prec below_EQUAL
    {      ( mkpat(Ppat_var _1) )}
| _1 = UNDERSCORE
    {      ( mkpat(Ppat_any) )}
| _1 = signed_constant
    {      ( mkpat(Ppat_constant _1) )}
| _1 = CHAR _2 = DOTDOT _3 = CHAR
    {      ( mkrangepat _1 _3 )}
| _1 = constr_longident
    {      ( mkpat(Ppat_construct(_1, None, false)) )}
| _1 = name_tag
    {      ( mkpat(Ppat_variant(_1, None)) )}
| _1 = SHARP _2 = type_longident
    {      ( mkpat(Ppat_type _2) )}
| _1 = LBRACE _2 = lbl_pattern_list _3 = opt_semi _4 = RBRACE
    {      ( mkpat(Ppat_record(List.rev _2)) )}
| _1 = LBRACE _2 = lbl_pattern_list _3 = opt_semi _4 = error
    {      ( unclosed "{" 1 "}" 4 )}
| _1 = LBRACKET _2 = pattern_semi_list _3 = opt_semi _4 = RBRACKET
    {      ( reloc_pat (mktailpat (List.rev _2)) )}
| _1 = LBRACKET _2 = pattern_semi_list _3 = opt_semi _4 = error
    {      ( unclosed "[" 1 "]" 4 )}
| _1 = LBRACKETBAR _2 = pattern_semi_list _3 = opt_semi _4 = BARRBRACKET
    {      ( mkpat(Ppat_array(List.rev _2)) )}
| _1 = LBRACKETBAR _2 = BARRBRACKET
    {      ( mkpat(Ppat_array []) )}
| _1 = LBRACKETBAR _2 = pattern_semi_list _3 = opt_semi _4 = error
    {      ( unclosed "[|" 1 "|]" 4 )}
| _1 = LPAREN _2 = pattern _3 = RPAREN
    {      ( reloc_pat _2 )}
| _1 = LPAREN _2 = pattern _3 = error
    {      ( unclosed "(" 1 ")" 3 )}
| _1 = LPAREN _2 = pattern _3 = COLON _4 = core_type _5 = RPAREN
    {      ( mkpat(Ppat_constraint(_2, _4)) )}
| _1 = LPAREN _2 = pattern _3 = COLON _4 = core_type _5 = error
    {      ( unclosed "(" 1 ")" 5 )}

pattern_comma_list:
  _1 = pattern_comma_list _2 = COMMA _3 = pattern
    {                                                ( _3 :: _1 )}
| _1 = pattern _2 = COMMA _3 = pattern
    {                                                ( [_3; _1] )}

pattern_semi_list:
  _1 = pattern
    {                                                ( [_1] )}
| _1 = pattern_semi_list _2 = SEMI _3 = pattern
    {                                                ( _3 :: _1 )}

lbl_pattern_list:
  _1 = label_longident _2 = EQUAL _3 = pattern
    {                                                ( [(_1, _3)] )}
| _1 = lbl_pattern_list _2 = SEMI _3 = label_longident _4 = EQUAL _5 = pattern
    {                                                        ( (_3, _5) :: _1 )}

primitive_declaration:
  _1 = STRING
    {                                                ( [_1] )}
| _1 = STRING _2 = primitive_declaration
    {                                                ( _1 :: _2 )}

type_declarations:
  _1 = type_declaration
    {                                                ( [_1] )}
| _1 = type_declarations _2 = AND _3 = type_declaration
    {                                                ( _3 :: _1 )}

type_declaration:
  _1 = type_parameters _2 = LIDENT _3 = type_kind _4 = constraints
    {      ( let (params, variance) = List.split _1 in
        let (kind, manifest) = _3 in
        (_2, {ptype_params = params;
              ptype_cstrs = List.rev _4;
              ptype_kind = kind;
              ptype_manifest = manifest;
              ptype_variance = variance;
              ptype_loc = symbol_rloc()}) )}

constraints:
  _1 = constraints _2 = CONSTRAINT _3 = constrain
    {                                                ( _3 :: _1 )}
| 
    {                                                ( [] )}

type_kind:
  
    {      ( (Ptype_abstract, None) )}
| _1 = EQUAL _2 = core_type
    {      ( (Ptype_abstract, Some _2) )}
| _1 = EQUAL _2 = constructor_declarations
    {      ( (Ptype_variant(List.rev _2, Public), None) )}
| _1 = EQUAL _2 = PRIVATE _3 = constructor_declarations
    {      ( (Ptype_variant(List.rev _3, Private), None) )}
| _1 = EQUAL _2 = private_flag _3 = BAR _4 = constructor_declarations
    {      ( (Ptype_variant(List.rev _4, _2), None) )}
| _1 = EQUAL _2 = private_flag _3 = LBRACE _4 = label_declarations _5 = opt_semi _6 = RBRACE
    {      ( (Ptype_record(List.rev _4, _2), None) )}
| _1 = EQUAL _2 = core_type _3 = EQUAL _4 = private_flag _5 = opt_bar _6 = constructor_declarations
    {      ( (Ptype_variant(List.rev _6, _4), Some _2) )}
| _1 = EQUAL _2 = core_type _3 = EQUAL _4 = private_flag _5 = LBRACE _6 = label_declarations _7 = opt_semi _8 = RBRACE
    {      ( (Ptype_record(List.rev _6, _4), Some _2) )}

type_parameters:
  
    {                                                ( [] )}
| _1 = type_parameter
    {                                                ( [_1] )}
| _1 = LPAREN _2 = type_parameter_list _3 = RPAREN
    {                                                ( List.rev _2 )}

type_parameter:
  _1 = type_variance _2 = QUOTE _3 = ident
    {                                                ( _3, _1 )}

type_variance:
  
    {                                                ( false, false )}
| _1 = PLUS
    {                                                ( true, false )}
| _1 = MINUS
    {                                                ( false, true )}

type_parameter_list:
  _1 = type_parameter
    {                                                ( [_1] )}
| _1 = type_parameter_list _2 = COMMA _3 = type_parameter
    {                                                ( _3 :: _1 )}

constructor_declarations:
  _1 = constructor_declaration
    {                                                ( [_1] )}
| _1 = constructor_declarations _2 = BAR _3 = constructor_declaration
    {                                                         ( _3 :: _1 )}

constructor_declaration:
  _1 = constr_ident _2 = constructor_arguments
    {                                                ( (_1, _2) )}

constructor_arguments:
  
    {                                                ( [] )}
| _1 = OF _2 = core_type_list
    {                                                ( List.rev _2 )}

label_declarations:
  _1 = label_declaration
    {                                                ( [_1] )}
| _1 = label_declarations _2 = SEMI _3 = label_declaration
    {                                                ( _3 :: _1 )}

label_declaration:
  _1 = mutable_flag _2 = label _3 = COLON _4 = poly_type
    {                                                ( (_2, _1, _4) )}

with_constraints:
  _1 = with_constraint
    {                                                ( [_1] )}
| _1 = with_constraints _2 = AND _3 = with_constraint
    {                                                ( _3 :: _1 )}

with_constraint:
  _1 = TYPE _2 = type_parameters _3 = label_longident _4 = EQUAL _5 = core_type _6 = constraints
    {      ( let params, variance = List.split _2 in
        (_3, Pwith_type {ptype_params = params;
                         ptype_cstrs = List.rev _6;
                         ptype_kind = Ptype_abstract;
                         ptype_manifest = Some _5;
                         ptype_variance = variance;
                         ptype_loc = symbol_rloc()}) )}
| _1 = MODULE _2 = mod_longident _3 = EQUAL _4 = mod_ext_longident
    {      ( (_2, Pwith_module _4) )}

typevar_list:
  _1 = QUOTE _2 = ident
    {                                                ( [_2] )}
| _1 = typevar_list _2 = QUOTE _3 = ident
    {                                                ( _3 :: _1 )}

poly_type:
  _1 = core_type
    {          ( mktyp(Ptyp_poly([], _1)) )}
| _1 = typevar_list _2 = DOT _3 = core_type
    {          ( mktyp(Ptyp_poly(List.rev _1, _3)) )}

core_type:
  _1 = core_type2
    {      ( _1 )}
| _1 = core_type2 _2 = AS _3 = QUOTE _4 = ident
    {      ( mktyp(Ptyp_alias(_1, _4)) )}

core_type2:
  _1 = simple_core_type_or_tuple
    {      ( _1 )}
| _1 = QUESTION _2 = LIDENT _3 = COLON _4 = core_type2 _5 = MINUSGREATER _6 = core_type2
    {      ( mktyp(Ptyp_arrow("?" ^ _2 ,
               {ptyp_desc = Ptyp_constr(Lident "option", [_4]);
                ptyp_loc = _4.ptyp_loc}, _6)) )}
| _1 = OPTLABEL _2 = core_type2 _3 = MINUSGREATER _4 = core_type2
    {      ( mktyp(Ptyp_arrow("?" ^ _1 ,
               {ptyp_desc = Ptyp_constr(Lident "option", [_2]);
                ptyp_loc = _2.ptyp_loc}, _4)) )}
| _1 = LIDENT _2 = COLON _3 = core_type2 _4 = MINUSGREATER _5 = core_type2
    {      ( mktyp(Ptyp_arrow(_1, _3, _5)) )}
| _1 = core_type2 _2 = MINUSGREATER _3 = core_type2
    {      ( mktyp(Ptyp_arrow("", _1, _3)) )}

simple_core_type:
  _1 = simple_core_type2 %prec below_SHARP
    {      ( _1 )}
| _1 = LPAREN _2 = core_type_comma_list _3 = RPAREN %prec below_SHARP
    {      ( match _2 with [sty] -> sty | _ -> raise Parse_error )}

simple_core_type2:
  _1 = QUOTE _2 = ident
    {      ( mktyp(Ptyp_var _2) )}
| _1 = UNDERSCORE
    {      ( mktyp(Ptyp_any) )}
| _1 = type_longident
    {      ( mktyp(Ptyp_constr(_1, [])) )}
| _1 = simple_core_type2 _2 = type_longident
    {      ( mktyp(Ptyp_constr(_2, [_1])) )}
| _1 = LPAREN _2 = core_type_comma_list _3 = RPAREN _4 = type_longident
    {      ( mktyp(Ptyp_constr(_4, List.rev _2)) )}
| _1 = LESS _2 = meth_list _3 = GREATER
    {      ( mktyp(Ptyp_object _2) )}
| _1 = LESS _2 = GREATER
    {      ( mktyp(Ptyp_object []) )}
| _1 = SHARP _2 = class_longident _3 = opt_present
    {      ( mktyp(Ptyp_class(_2, [], _3)) )}
| _1 = simple_core_type2 _2 = SHARP _3 = class_longident _4 = opt_present
    {      ( mktyp(Ptyp_class(_3, [_1], _4)) )}
| _1 = LPAREN _2 = core_type_comma_list _3 = RPAREN _4 = SHARP _5 = class_longident _6 = opt_present
    {      ( mktyp(Ptyp_class(_5, List.rev _2, _6)) )}
| _1 = LBRACKET _2 = tag_field _3 = RBRACKET
    {      ( mktyp(Ptyp_variant([_2], true, None)) )}
| _1 = LBRACKET _2 = BAR _3 = row_field_list _4 = RBRACKET
    {      ( mktyp(Ptyp_variant(List.rev _3, true, None)) )}
| _1 = LBRACKET _2 = row_field _3 = BAR _4 = row_field_list _5 = RBRACKET
    {      ( mktyp(Ptyp_variant(_2 :: List.rev _4, true, None)) )}
| _1 = LBRACKET _2 = GREATER _3 = opt_bar _4 = row_field_list _5 = RBRACKET
    {      ( mktyp(Ptyp_variant(List.rev _4, false, None)) )}
| _1 = LBRACKET _2 = GREATER _3 = RBRACKET
    {      ( mktyp(Ptyp_variant([], false, None)) )}
| _1 = LBRACKETLESS _2 = opt_bar _3 = row_field_list _4 = RBRACKET
    {      ( mktyp(Ptyp_variant(List.rev _3, true, Some [])) )}
| _1 = LBRACKETLESS _2 = opt_bar _3 = row_field_list _4 = GREATER _5 = name_tag_list _6 = RBRACKET
    {      ( mktyp(Ptyp_variant(List.rev _3, true, Some (List.rev _5))) )}

row_field_list:
  _1 = row_field
    {                                                ( [_1] )}
| _1 = row_field_list _2 = BAR _3 = row_field
    {                                                ( _3 :: _1 )}

row_field:
  _1 = tag_field
    {                                                ( _1 )}
| _1 = simple_core_type2
    {                                                ( Rinherit _1 )}

tag_field:
  _1 = name_tag _2 = OF _3 = opt_ampersand _4 = amper_type_list
    {      ( Rtag (_1, _3, List.rev _4) )}
| _1 = name_tag
    {      ( Rtag (_1, true, []) )}

opt_ampersand:
  _1 = AMPERSAND
    {                                                ( true )}
| 
    {                                                ( false )}

amper_type_list:
  _1 = core_type
    {                                                ( [_1] )}
| _1 = amper_type_list _2 = AMPERSAND _3 = core_type
    {                                                ( _3 :: _1 )}

opt_present:
  _1 = LBRACKET _2 = GREATER _3 = name_tag_list _4 = RBRACKET
    {                                                ( List.rev _3 )}
| 
    {                                                ( [] )}

name_tag_list:
  _1 = name_tag
    {                                                ( [_1] )}
| _1 = name_tag_list _2 = name_tag
    {                                                ( _2 :: _1 )}

simple_core_type_or_tuple:
  _1 = simple_core_type
    {                                                ( _1 )}
| _1 = simple_core_type _2 = STAR _3 = core_type_list
    {      ( mktyp(Ptyp_tuple(_1 :: List.rev _3)) )}

core_type_comma_list:
  _1 = core_type
    {                                                ( [_1] )}
| _1 = core_type_comma_list _2 = COMMA _3 = core_type
    {                                                ( _3 :: _1 )}

core_type_list:
  _1 = simple_core_type
    {                                                ( [_1] )}
| _1 = core_type_list _2 = STAR _3 = simple_core_type
    {                                                ( _3 :: _1 )}

meth_list:
  _1 = field _2 = SEMI _3 = meth_list
    {                                                ( _1 :: _3 )}
| _1 = field _2 = opt_semi
    {                                                ( [_1] )}
| _1 = DOTDOT
    {                                                ( [mkfield Pfield_var] )}

field:
  _1 = label _2 = COLON _3 = poly_type
    {                                                ( mkfield(Pfield(_1, _3)) )}

label:
  _1 = LIDENT
    {                                                ( _1 )}

constant:
  _1 = INT
    {                                                ( Const_int _1 )}
| _1 = CHAR
    {                                                ( Const_char _1 )}
| _1 = STRING
    {                                                ( Const_string _1 )}
| _1 = FLOAT
    {                                                ( Const_float _1 )}
| _1 = INT32
    {                                                ( Const_int32 _1 )}
| _1 = INT64
    {                                                ( Const_int64 _1 )}
| _1 = NATIVEINT
    {                                                ( Const_nativeint _1 )}

signed_constant:
  _1 = constant
    {                                                ( _1 )}
| _1 = MINUS _2 = INT
    {                                                ( Const_int(- _2) )}
| _1 = MINUS _2 = FLOAT
    {                                                ( Const_float("-" ^ _2) )}
| _1 = MINUS _2 = INT32
    {                                                ( Const_int32(Int32.neg _2) )}
| _1 = MINUS _2 = INT64
    {                                                ( Const_int64(Int64.neg _2) )}
| _1 = MINUS _2 = NATIVEINT
    {                                                ( Const_nativeint(Nativeint.neg _2) )}

ident:
  _1 = UIDENT
    {                                                ( _1 )}
| _1 = LIDENT
    {                                                ( _1 )}

val_ident:
  _1 = LIDENT
    {                                                ( _1 )}
| _1 = LPAREN _2 = operator _3 = RPAREN
    {                                                ( _2 )}

val_ident_colon:
  _1 = LIDENT _2 = COLON
    {                                                ( _1 )}
| _1 = LPAREN _2 = operator _3 = RPAREN _4 = COLON
    {                                                ( _2 )}
| _1 = LABEL
    {                                                ( _1 )}

operator:
  _1 = PREFIXOP
    {                                                ( _1 )}
| _1 = INFIXOP0
    {                                                ( _1 )}
| _1 = INFIXOP1
    {                                                ( _1 )}
| _1 = INFIXOP2
    {                                                ( _1 )}
| _1 = INFIXOP3
    {                                                ( _1 )}
| _1 = INFIXOP4
    {                                                ( _1 )}
| _1 = PLUS
    {                                                ( "+" )}
| _1 = MINUS
    {                                                ( "-" )}
| _1 = MINUSDOT
    {                                                ( "-." )}
| _1 = STAR
    {                                                ( "*" )}
| _1 = EQUAL
    {                                                ( "=" )}
| _1 = LESS
    {                                                ( "<" )}
| _1 = GREATER
    {                                                ( ">" )}
| _1 = OR
    {                                                ( "or" )}
| _1 = BARBAR
    {                                                ( "||" )}
| _1 = AMPERSAND
    {                                                ( "&" )}
| _1 = AMPERAMPER
    {                                                ( "&&" )}
| _1 = COLONEQUAL
    {                                                ( ":=" )}

constr_ident:
  _1 = UIDENT
    {                                                ( _1 )}
| _1 = LPAREN _2 = RPAREN
    {                                                ( "()" )}
| _1 = COLONCOLON
    {                                                ( "::" )}
| _1 = FALSE
    {                                                ( "false" )}
| _1 = TRUE
    {                                                ( "true" )}

val_longident:
  _1 = val_ident
    {                                                ( Lident _1 )}
| _1 = mod_longident _2 = DOT _3 = val_ident
    {                                                ( Ldot(_1, _3) )}

constr_longident:
  _1 = mod_longident %prec below_DOT
    {                                                ( _1 )}
| _1 = LBRACKET _2 = RBRACKET
    {                                                ( Lident "[]" )}
| _1 = LPAREN _2 = RPAREN
    {                                                ( Lident "()" )}
| _1 = FALSE
    {                                                ( Lident "false" )}
| _1 = TRUE
    {                                                ( Lident "true" )}

label_longident:
  _1 = LIDENT
    {                                                ( Lident _1 )}
| _1 = mod_longident _2 = DOT _3 = LIDENT
    {                                                ( Ldot(_1, _3) )}

type_longident:
  _1 = LIDENT
    {                                                ( Lident _1 )}
| _1 = mod_ext_longident _2 = DOT _3 = LIDENT
    {                                                ( Ldot(_1, _3) )}

mod_longident:
  _1 = UIDENT
    {                                                ( Lident _1 )}
| _1 = mod_longident _2 = DOT _3 = UIDENT
    {                                                ( Ldot(_1, _3) )}

mod_ext_longident:
  _1 = UIDENT
    {                                                ( Lident _1 )}
| _1 = mod_ext_longident _2 = DOT _3 = UIDENT
    {                                                ( Ldot(_1, _3) )}
| _1 = mod_ext_longident _2 = LPAREN _3 = mod_ext_longident _4 = RPAREN
    {                                                      ( Lapply(_1, _3) )}

mty_longident:
  _1 = ident
    {                                                ( Lident _1 )}
| _1 = mod_ext_longident _2 = DOT _3 = ident
    {                                                ( Ldot(_1, _3) )}

clty_longident:
  _1 = LIDENT
    {                                                ( Lident _1 )}
| _1 = mod_ext_longident _2 = DOT _3 = LIDENT
    {                                                ( Ldot(_1, _3) )}

class_longident:
  _1 = LIDENT
    {                                                ( Lident _1 )}
| _1 = mod_longident _2 = DOT _3 = LIDENT
    {                                                ( Ldot(_1, _3) )}

toplevel_directive:
  _1 = SHARP _2 = ident
    {                                ( Ptop_dir(_2, Pdir_none) )}
| _1 = SHARP _2 = ident _3 = STRING
    {                                ( Ptop_dir(_2, Pdir_string _3) )}
| _1 = SHARP _2 = ident _3 = INT
    {                                ( Ptop_dir(_2, Pdir_int _3) )}
| _1 = SHARP _2 = ident _3 = val_longident
    {                                ( Ptop_dir(_2, Pdir_ident _3) )}
| _1 = SHARP _2 = ident _3 = FALSE
    {                                ( Ptop_dir(_2, Pdir_bool false) )}
| _1 = SHARP _2 = ident _3 = TRUE
    {                                ( Ptop_dir(_2, Pdir_bool true) )}

name_tag:
  _1 = BACKQUOTE _2 = ident
    {                                                ( _2 )}

rec_flag:
  
    {                                                ( Nonrecursive )}
| _1 = REC
    {                                                ( Recursive )}

direction_flag:
  _1 = TO
    {                                                ( Upto )}
| _1 = DOWNTO
    {                                                ( Downto )}

private_flag:
  
    {                                                ( Public )}
| _1 = PRIVATE
    {                                                ( Private )}

mutable_flag:
  
    {                                                ( Immutable )}
| _1 = MUTABLE
    {                                                ( Mutable )}

virtual_flag:
  
    {                                                ( Concrete )}
| _1 = VIRTUAL
    {                                                ( Virtual )}

opt_bar:
  
    {                                                ( () )}
| _1 = BAR
    {                                                ( () )}

opt_semi:
  
    {                                                ( () )}
| _1 = SEMI
    {                                                ( () )}

subtractive:
  _1 = MINUS
    {                                                ( "-" )}
| _1 = MINUSDOT
    {                                                ( "-." )}

%%


