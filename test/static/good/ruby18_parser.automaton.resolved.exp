State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On program_e1 shift to state 1
-- On program shift to state 1468
## Default reduction:
-- After reading the next token, reduce production program_e1 ->

State 1:
## Known stack suffix:
## program_e1
## LR(1) items:
program -> program_e1 . compstmt [ # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 1464
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1467
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL COMMENT
--   reduce production none ->

State 2:
## Known stack suffix:
## error
## LR(1) items:
stmts -> error . stmt [ SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmt shift to state 1463
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 3:
## Known stack suffix:
## XSTRING_BEG
## LR(1) items:
xstring -> XSTRING_BEG . xstring_contents STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On xstring_contents shift to state 4
-- On none shift to state 111
## Default reduction:
-- After reading the next token, reduce production none ->

State 4:
## Known stack suffix:
## XSTRING_BEG xstring_contents
## LR(1) items:
xstring -> XSTRING_BEG xstring_contents . STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
xstring_contents -> xstring_contents . string_content [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
-- On STRING_END shift to state 5
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On string_content shift to state 107
## Reductions:

State 5:
## Known stack suffix:
## XSTRING_BEG xstring_contents STRING_END
## LR(1) items:
xstring -> XSTRING_BEG xstring_contents STRING_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xstring -> XSTRING_BEG xstring_contents STRING_END

State 6:
## Known stack suffix:
## STRING_DVAR
## LR(1) items:
string_content -> STRING_DVAR . string_content_e1 string_dvar [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
-- On string_content_e1 shift to state 7
## Default reduction:
-- After reading the next token, reduce production string_content_e1 ->

State 7:
## Known stack suffix:
## STRING_DVAR string_content_e1
## LR(1) items:
string_content -> STRING_DVAR string_content_e1 . string_dvar [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
-- On IVAR shift to state 8
-- On GVAR shift to state 9
-- On CVAR shift to state 10
-- On string_dvar shift to state 11
## Reductions:

State 8:
## Known stack suffix:
## IVAR
## LR(1) items:
string_dvar -> IVAR . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_dvar -> IVAR

State 9:
## Known stack suffix:
## GVAR
## LR(1) items:
string_dvar -> GVAR . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_dvar -> GVAR

State 10:
## Known stack suffix:
## CVAR
## LR(1) items:
string_dvar -> CVAR . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_dvar -> CVAR

State 11:
## Known stack suffix:
## STRING_DVAR string_content_e1 string_dvar
## LR(1) items:
string_content -> STRING_DVAR string_content_e1 string_dvar . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_content -> STRING_DVAR string_content_e1 string_dvar

State 12:
## Known stack suffix:
## STRING_DBEG
## LR(1) items:
string_content -> STRING_DBEG . string_content_e2 compstmt RCURLY [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
-- On string_content_e2 shift to state 13
## Default reduction:
-- After reading the next token, reduce production string_content_e2 ->

State 13:
## Known stack suffix:
## STRING_DBEG string_content_e2
## LR(1) items:
string_content -> STRING_DBEG string_content_e2 . compstmt RCURLY [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1461
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RCURLY NL COMMENT
--   reduce production none ->

State 14:
## Known stack suffix:
## WORDS_BEG
## LR(1) items:
words -> WORDS_BEG . SPACE STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
words -> WORDS_BEG . word_list STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On SPACE shift to state 15
-- On word_list shift to state 17
-- On none shift to state 24
## Reductions:
-- On STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT
--   reduce production none ->

State 15:
## Known stack suffix:
## WORDS_BEG SPACE
## LR(1) items:
words -> WORDS_BEG SPACE . STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STRING_END shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## WORDS_BEG SPACE STRING_END
## LR(1) items:
words -> WORDS_BEG SPACE STRING_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production words -> WORDS_BEG SPACE STRING_END

State 17:
## Known stack suffix:
## WORDS_BEG word_list
## LR(1) items:
word_list -> word_list . word SPACE [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
words -> WORDS_BEG word_list . STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STRING_END shift to state 18
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On word shift to state 20
-- On string_content shift to state 23
## Reductions:

State 18:
## Known stack suffix:
## WORDS_BEG word_list STRING_END
## LR(1) items:
words -> WORDS_BEG word_list STRING_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production words -> WORDS_BEG word_list STRING_END

State 19:
## Known stack suffix:
## STRING_CONTENT
## LR(1) items:
string_content -> STRING_CONTENT . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_content -> STRING_CONTENT

State 20:
## Known stack suffix:
## word_list word
## LR(1) items:
word -> word . string_content [ STRING_DVAR STRING_DBEG STRING_CONTENT SPACE ]
word_list -> word_list word . SPACE [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On SPACE shift to state 21
-- On string_content shift to state 22
## Reductions:

State 21:
## Known stack suffix:
## word_list word SPACE
## LR(1) items:
word_list -> word_list word SPACE . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production word_list -> word_list word SPACE

State 22:
## Known stack suffix:
## word string_content
## LR(1) items:
word -> word string_content . [ STRING_DVAR STRING_DBEG STRING_CONTENT SPACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production word -> word string_content

State 23:
## Known stack suffix:
## string_content
## LR(1) items:
word -> string_content . [ STRING_DVAR STRING_DBEG STRING_CONTENT SPACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production word -> string_content

State 24:
## Known stack suffix:
## none
## LR(1) items:
word_list -> none . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production word_list -> none

State 25:
## Known stack suffix:
## UPLUS
## LR(1) items:
arg -> UPLUS . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1460
## Reductions:

State 26:
## Known stack suffix:
## UMINUS_NUM
## LR(1) items:
arg -> UMINUS_NUM . INTEGER POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> UMINUS_NUM . FLOAT POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
numeric -> UMINUS_NUM . INTEGER [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
numeric -> UMINUS_NUM . FLOAT [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On INTEGER shift to state 27
-- On FLOAT shift to state 1457
## Reductions:

State 27:
## Known stack suffix:
## UMINUS_NUM INTEGER
## LR(1) items:
arg -> UMINUS_NUM INTEGER . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
numeric -> UMINUS_NUM INTEGER . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On POW shift to state 28
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production numeric -> UMINUS_NUM INTEGER

State 28:
## Known stack suffix:
## UMINUS_NUM INTEGER POW
## LR(1) items:
arg -> UMINUS_NUM INTEGER POW . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1456
## Reductions:

State 29:
## Known stack suffix:
## UMINUS
## LR(1) items:
arg -> UMINUS . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1455
## Reductions:

State 30:
## Known stack suffix:
## TILDE
## LR(1) items:
arg -> TILDE . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1454
## Reductions:

State 31:
## Known stack suffix:
## SYMBEG
## LR(1) items:
dsym -> SYMBEG . xstring_contents STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
symbol -> SYMBEG . sym [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 49
-- On K__FILE__ shift to state 50
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 57
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 60
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 68
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 74
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IVAR shift to state 88
-- On IDENTIFIER shift to state 89
-- On GVAR shift to state 90
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CVAR shift to state 97
-- On CONSTANT shift to state 98
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On xstring_contents shift to state 105
-- On sym shift to state 108
-- On reswords shift to state 109
-- On op shift to state 110
-- On none shift to state 111
-- On fname shift to state 112
## Reductions:
-- On STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT
--   reduce production none ->

State 32:
## Known stack suffix:
## UPLUS
## LR(1) items:
op -> UPLUS . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> UPLUS

State 33:
## Known stack suffix:
## UMINUS
## LR(1) items:
op -> UMINUS . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> UMINUS

State 34:
## Known stack suffix:
## TILDE
## LR(1) items:
op -> TILDE . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> TILDE

State 35:
## Known stack suffix:
## STAR2
## LR(1) items:
op -> STAR2 . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> STAR2

State 36:
## Known stack suffix:
## STAR
## LR(1) items:
op -> STAR . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> STAR

State 37:
## Known stack suffix:
## RSHFT
## LR(1) items:
op -> RSHFT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> RSHFT

State 38:
## Known stack suffix:
## POW
## LR(1) items:
op -> POW . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> POW

State 39:
## Known stack suffix:
## PLUS
## LR(1) items:
op -> PLUS . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> PLUS

State 40:
## Known stack suffix:
## PIPE
## LR(1) items:
op -> PIPE . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> PIPE

State 41:
## Known stack suffix:
## PERCENT
## LR(1) items:
op -> PERCENT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> PERCENT

State 42:
## Known stack suffix:
## MINUS
## LR(1) items:
op -> MINUS . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> MINUS

State 43:
## Known stack suffix:
## MATCH
## LR(1) items:
op -> MATCH . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> MATCH

State 44:
## Known stack suffix:
## LT
## LR(1) items:
op -> LT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> LT

State 45:
## Known stack suffix:
## LSHFT
## LR(1) items:
op -> LSHFT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> LSHFT

State 46:
## Known stack suffix:
## LEQ
## LR(1) items:
op -> LEQ . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> LEQ

State 47:
## Known stack suffix:
## K_lEND
## LR(1) items:
reswords -> K_lEND . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_lEND

State 48:
## Known stack suffix:
## K_lBEGIN
## LR(1) items:
reswords -> K_lBEGIN . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_lBEGIN

State 49:
## Known stack suffix:
## K__LINE__
## LR(1) items:
reswords -> K__LINE__ . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K__LINE__

State 50:
## Known stack suffix:
## K__FILE__
## LR(1) items:
reswords -> K__FILE__ . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K__FILE__

State 51:
## Known stack suffix:
## K_YIELD
## LR(1) items:
reswords -> K_YIELD . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_YIELD

State 52:
## Known stack suffix:
## K_WHILE_MOD
## LR(1) items:
reswords -> K_WHILE_MOD . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_WHILE_MOD

State 53:
## Known stack suffix:
## K_WHEN
## LR(1) items:
reswords -> K_WHEN . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_WHEN

State 54:
## Known stack suffix:
## K_UNTIL_MOD
## LR(1) items:
reswords -> K_UNTIL_MOD . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_UNTIL_MOD

State 55:
## Known stack suffix:
## K_UNLESS_MOD
## LR(1) items:
reswords -> K_UNLESS_MOD . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_UNLESS_MOD

State 56:
## Known stack suffix:
## K_UNDEF
## LR(1) items:
reswords -> K_UNDEF . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_UNDEF

State 57:
## Known stack suffix:
## K_TRUE
## LR(1) items:
reswords -> K_TRUE . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_TRUE

State 58:
## Known stack suffix:
## K_THEN
## LR(1) items:
reswords -> K_THEN . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_THEN

State 59:
## Known stack suffix:
## K_SUPER
## LR(1) items:
reswords -> K_SUPER . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_SUPER

State 60:
## Known stack suffix:
## K_SELF
## LR(1) items:
reswords -> K_SELF . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_SELF

State 61:
## Known stack suffix:
## K_RETURN
## LR(1) items:
reswords -> K_RETURN . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_RETURN

State 62:
## Known stack suffix:
## K_RETRY
## LR(1) items:
reswords -> K_RETRY . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_RETRY

State 63:
## Known stack suffix:
## K_RESCUE_MOD
## LR(1) items:
reswords -> K_RESCUE_MOD . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_RESCUE_MOD

State 64:
## Known stack suffix:
## K_RESCUE
## LR(1) items:
reswords -> K_RESCUE . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_RESCUE

State 65:
## Known stack suffix:
## K_REDO
## LR(1) items:
reswords -> K_REDO . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_REDO

State 66:
## Known stack suffix:
## K_OR
## LR(1) items:
reswords -> K_OR . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_OR

State 67:
## Known stack suffix:
## K_NOT
## LR(1) items:
reswords -> K_NOT . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_NOT

State 68:
## Known stack suffix:
## K_NIL
## LR(1) items:
reswords -> K_NIL . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_NIL

State 69:
## Known stack suffix:
## K_NEXT
## LR(1) items:
reswords -> K_NEXT . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_NEXT

State 70:
## Known stack suffix:
## K_MODULE
## LR(1) items:
reswords -> K_MODULE . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_MODULE

State 71:
## Known stack suffix:
## K_IN
## LR(1) items:
reswords -> K_IN . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_IN

State 72:
## Known stack suffix:
## K_IF_MOD
## LR(1) items:
reswords -> K_IF_MOD . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_IF_MOD

State 73:
## Known stack suffix:
## K_FOR
## LR(1) items:
reswords -> K_FOR . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_FOR

State 74:
## Known stack suffix:
## K_FALSE
## LR(1) items:
reswords -> K_FALSE . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_FALSE

State 75:
## Known stack suffix:
## K_ENSURE
## LR(1) items:
reswords -> K_ENSURE . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_ENSURE

State 76:
## Known stack suffix:
## K_END
## LR(1) items:
reswords -> K_END . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_END

State 77:
## Known stack suffix:
## K_ELSIF
## LR(1) items:
reswords -> K_ELSIF . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_ELSIF

State 78:
## Known stack suffix:
## K_ELSE
## LR(1) items:
reswords -> K_ELSE . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_ELSE

State 79:
## Known stack suffix:
## K_DO
## LR(1) items:
reswords -> K_DO . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_DO

State 80:
## Known stack suffix:
## K_DEFINED
## LR(1) items:
reswords -> K_DEFINED . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_DEFINED

State 81:
## Known stack suffix:
## K_DEF
## LR(1) items:
reswords -> K_DEF . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_DEF

State 82:
## Known stack suffix:
## K_CLASS
## LR(1) items:
reswords -> K_CLASS . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_CLASS

State 83:
## Known stack suffix:
## K_CASE
## LR(1) items:
reswords -> K_CASE . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_CASE

State 84:
## Known stack suffix:
## K_BREAK
## LR(1) items:
reswords -> K_BREAK . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_BREAK

State 85:
## Known stack suffix:
## K_BEGIN
## LR(1) items:
reswords -> K_BEGIN . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_BEGIN

State 86:
## Known stack suffix:
## K_AND
## LR(1) items:
reswords -> K_AND . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_AND

State 87:
## Known stack suffix:
## K_ALIAS
## LR(1) items:
reswords -> K_ALIAS . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_ALIAS

State 88:
## Known stack suffix:
## IVAR
## LR(1) items:
sym -> IVAR . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym -> IVAR

State 89:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
fname -> IDENTIFIER . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> IDENTIFIER

State 90:
## Known stack suffix:
## GVAR
## LR(1) items:
sym -> GVAR . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym -> GVAR

State 91:
## Known stack suffix:
## GT
## LR(1) items:
op -> GT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> GT

State 92:
## Known stack suffix:
## GEQ
## LR(1) items:
op -> GEQ . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> GEQ

State 93:
## Known stack suffix:
## FID
## LR(1) items:
fname -> FID . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> FID

State 94:
## Known stack suffix:
## EQQ
## LR(1) items:
op -> EQQ . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> EQQ

State 95:
## Known stack suffix:
## EQ
## LR(1) items:
op -> EQ . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> EQ

State 96:
## Known stack suffix:
## DIVIDE
## LR(1) items:
op -> DIVIDE . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> DIVIDE

State 97:
## Known stack suffix:
## CVAR
## LR(1) items:
sym -> CVAR . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym -> CVAR

State 98:
## Known stack suffix:
## CONSTANT
## LR(1) items:
fname -> CONSTANT . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> CONSTANT

State 99:
## Known stack suffix:
## CMP
## LR(1) items:
op -> CMP . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> CMP

State 100:
## Known stack suffix:
## CARET
## LR(1) items:
op -> CARET . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> CARET

State 101:
## Known stack suffix:
## BACK_REF2
## LR(1) items:
op -> BACK_REF2 . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> BACK_REF2

State 102:
## Known stack suffix:
## ASET
## LR(1) items:
op -> ASET . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> ASET

State 103:
## Known stack suffix:
## AREF
## LR(1) items:
op -> AREF . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> AREF

State 104:
## Known stack suffix:
## AMPER2
## LR(1) items:
op -> AMPER2 . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> AMPER2

State 105:
## Known stack suffix:
## SYMBEG xstring_contents
## LR(1) items:
dsym -> SYMBEG xstring_contents . STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
xstring_contents -> xstring_contents . string_content [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
-- On STRING_END shift to state 106
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On string_content shift to state 107
## Reductions:

State 106:
## Known stack suffix:
## SYMBEG xstring_contents STRING_END
## LR(1) items:
dsym -> SYMBEG xstring_contents STRING_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dsym -> SYMBEG xstring_contents STRING_END

State 107:
## Known stack suffix:
## xstring_contents string_content
## LR(1) items:
xstring_contents -> xstring_contents string_content . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT REGEXP_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xstring_contents -> xstring_contents string_content

State 108:
## Known stack suffix:
## SYMBEG sym
## LR(1) items:
symbol -> SYMBEG sym . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symbol -> SYMBEG sym

State 109:
## Known stack suffix:
## reswords
## LR(1) items:
fname -> reswords . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> reswords

State 110:
## Known stack suffix:
## op
## LR(1) items:
fname -> op . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN2 LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IVAR IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> op

State 111:
## Known stack suffix:
## none
## LR(1) items:
xstring_contents -> none . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT REGEXP_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xstring_contents -> none

State 112:
## Known stack suffix:
## fname
## LR(1) items:
sym -> fname . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CONSTANT COMMENT COMMA COLON2 COLON CMP CARET BACK_REF2 ASSOC ASET AREF ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym -> fname

State 113:
## Known stack suffix:
## STRING_BEG
## LR(1) items:
string1 -> STRING_BEG . string_contents STRING_END [ STRING_BEG STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On string_contents shift to state 114
-- On none shift to state 117
## Default reduction:
-- After reading the next token, reduce production none ->

State 114:
## Known stack suffix:
## STRING_BEG string_contents
## LR(1) items:
string1 -> STRING_BEG string_contents . STRING_END [ STRING_BEG STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
string_contents -> string_contents . string_content [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
-- On STRING_END shift to state 115
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On string_content shift to state 116
## Reductions:

State 115:
## Known stack suffix:
## STRING_BEG string_contents STRING_END
## LR(1) items:
string1 -> STRING_BEG string_contents STRING_END . [ STRING_BEG STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string1 -> STRING_BEG string_contents STRING_END

State 116:
## Known stack suffix:
## string_contents string_content
## LR(1) items:
string_contents -> string_contents string_content . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_contents -> string_contents string_content

State 117:
## Known stack suffix:
## none
## LR(1) items:
string_contents -> none . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_contents -> none

State 118:
## Known stack suffix:
## REGEXP_BEG
## LR(1) items:
regexp -> REGEXP_BEG . xstring_contents REGEXP_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On xstring_contents shift to state 119
-- On none shift to state 111
## Default reduction:
-- After reading the next token, reduce production none ->

State 119:
## Known stack suffix:
## REGEXP_BEG xstring_contents
## LR(1) items:
regexp -> REGEXP_BEG xstring_contents . REGEXP_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
xstring_contents -> xstring_contents . string_content [ STRING_DVAR STRING_DBEG STRING_CONTENT REGEXP_END ]
## Transitions:
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On REGEXP_END shift to state 120
-- On string_content shift to state 107
## Reductions:

State 120:
## Known stack suffix:
## REGEXP_BEG xstring_contents REGEXP_END
## LR(1) items:
regexp -> REGEXP_BEG xstring_contents REGEXP_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regexp -> REGEXP_BEG xstring_contents REGEXP_END

State 121:
## Known stack suffix:
## QWORDS_BEG
## LR(1) items:
awords -> QWORDS_BEG . SPACE STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
awords -> QWORDS_BEG . qword_list STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On SPACE shift to state 122
-- On qword_list shift to state 124
-- On none shift to state 128
## Reductions:
-- On STRING_END STRING_CONTENT
--   reduce production none ->

State 122:
## Known stack suffix:
## QWORDS_BEG SPACE
## LR(1) items:
awords -> QWORDS_BEG SPACE . STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STRING_END shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## QWORDS_BEG SPACE STRING_END
## LR(1) items:
awords -> QWORDS_BEG SPACE STRING_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production awords -> QWORDS_BEG SPACE STRING_END

State 124:
## Known stack suffix:
## QWORDS_BEG qword_list
## LR(1) items:
awords -> QWORDS_BEG qword_list . STRING_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
qword_list -> qword_list . STRING_CONTENT SPACE [ STRING_END STRING_CONTENT ]
## Transitions:
-- On STRING_END shift to state 125
-- On STRING_CONTENT shift to state 126
## Reductions:

State 125:
## Known stack suffix:
## QWORDS_BEG qword_list STRING_END
## LR(1) items:
awords -> QWORDS_BEG qword_list STRING_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production awords -> QWORDS_BEG qword_list STRING_END

State 126:
## Known stack suffix:
## qword_list STRING_CONTENT
## LR(1) items:
qword_list -> qword_list STRING_CONTENT . SPACE [ STRING_END STRING_CONTENT ]
## Transitions:
-- On SPACE shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## qword_list STRING_CONTENT SPACE
## LR(1) items:
qword_list -> qword_list STRING_CONTENT SPACE . [ STRING_END STRING_CONTENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qword_list -> qword_list STRING_CONTENT SPACE

State 128:
## Known stack suffix:
## none
## LR(1) items:
qword_list -> none . [ STRING_END STRING_CONTENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qword_list -> none

State 129:
## Known stack suffix:
## LPAREN_ARG
## LR(1) items:
primary -> LPAREN_ARG . expr primary_e1 opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 1427
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 130:
## Known stack suffix:
## LPAREN
## LR(1) items:
primary -> LPAREN . compstmt RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 589
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production none ->

State 131:
## Known stack suffix:
## STAR
## LR(1) items:
mlhs_basic -> STAR . mlhs_node [ RPAREN PIPE K_IN EQL ]
mlhs_basic -> STAR . [ RPAREN PIPE K_IN EQL ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 545
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 547
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 548
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On mlhs_node shift to state 1453
-- On method_call shift to state 368
-- On literal shift to state 370
-- On dsym shift to state 373
-- On awords shift to state 374
## Reductions:
-- On RPAREN PIPE K_IN EQL
--   reduce production mlhs_basic -> STAR

State 132:
## Known stack suffix:
## UMINUS_NUM
## LR(1) items:
numeric -> UMINUS_NUM . INTEGER [ LB DOT COLON2 ]
numeric -> UMINUS_NUM . FLOAT [ LB DOT COLON2 ]
## Transitions:
-- On INTEGER shift to state 133
-- On FLOAT shift to state 134
## Reductions:

State 133:
## Known stack suffix:
## UMINUS_NUM INTEGER
## LR(1) items:
numeric -> UMINUS_NUM INTEGER . [ LB DOT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric -> UMINUS_NUM INTEGER

State 134:
## Known stack suffix:
## UMINUS_NUM FLOAT
## LR(1) items:
numeric -> UMINUS_NUM FLOAT . [ LB DOT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric -> UMINUS_NUM FLOAT

State 135:
## Known stack suffix:
## LBRACK
## LR(1) items:
primary -> LBRACK . aref_args RBRACK [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 1451
## Reductions:
-- On RBRACK
--   reduce production none ->

State 136:
## Known stack suffix:
## STAR
## LR(1) items:
aref_args -> STAR . arg opt_nl [ RBRACK ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1449
## Reductions:

State 137:
## Known stack suffix:
## LBRACE
## LR(1) items:
primary -> LBRACE . assoc_list RCURLY [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On none shift to state 526
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On assocs shift to state 527
-- On assoc_list shift to state 1447
-- On assoc shift to state 493
-- On args shift to state 531
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:
-- On RCURLY
--   reduce production none ->

State 138:
## Known stack suffix:
## K__LINE__
## LR(1) items:
variable -> K__LINE__ . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K__LINE__

State 139:
## Known stack suffix:
## K__FILE__
## LR(1) items:
variable -> K__FILE__ . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K__FILE__

State 140:
## Known stack suffix:
## K_YIELD
## LR(1) items:
primary -> K_YIELD . LPAREN2 call_args RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_YIELD . LPAREN2 RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_YIELD . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 141
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> K_YIELD

State 141:
## Known stack suffix:
## K_YIELD LPAREN2
## LR(1) items:
primary -> K_YIELD LPAREN2 . call_args RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_YIELD LPAREN2 . RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 142
-- On RPAREN shift to state 1444
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 608
-- On call_args shift to state 1445
-- On block_arg shift to state 611
-- On awords shift to state 374
-- On assocs shift to state 612
-- On assoc shift to state 493
-- On args shift to state 621
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:

State 142:
## Known stack suffix:
## STAR
## LR(1) items:
call_args -> STAR . arg_value opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 1442
-- On arg shift to state 491
## Reductions:

State 143:
## Known stack suffix:
## K_WHILE
## LR(1) items:
primary -> K_WHILE . primary_e2 expr_value do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e2 shift to state 144
## Default reduction:
-- After reading the next token, reduce production primary_e2 ->

State 144:
## Known stack suffix:
## K_WHILE primary_e2
## LR(1) items:
primary -> K_WHILE primary_e2 . expr_value do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 1437
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 145:
## Known stack suffix:
## K_YIELD
## LR(1) items:
command -> K_YIELD . command_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
primary -> K_YIELD . LPAREN2 call_args RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_YIELD . LPAREN2 RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_YIELD . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 141
-- On command_args_e1 shift to state 146
-- On command_args shift to state 1436
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> K_YIELD

State 146:
## Known stack suffix:
## command_args_e1
## LR(1) items:
command_args -> command_args_e1 . open_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 142
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 147
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On open_args shift to state 1434
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 608
-- On call_args shift to state 1435
-- On block_arg shift to state 611
-- On awords shift to state 374
-- On assocs shift to state 612
-- On assoc shift to state 493
-- On args shift to state 621
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:

State 147:
## Known stack suffix:
## LPAREN_ARG
## LR(1) items:
open_args -> LPAREN_ARG . open_args_e1 RPAREN [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
open_args -> LPAREN_ARG . call_args2 open_args_e1 RPAREN [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
primary -> LPAREN_ARG . expr primary_e1 opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 148
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On open_args_e1 shift to state 1425
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 1427
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On call_args2 shift to state 1431
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On block_arg shift to state 1228
-- On awords shift to state 374
-- On assocs shift to state 1229
-- On assoc shift to state 493
-- On arg_value shift to state 1235
-- On arg shift to state 1259
## Reductions:
-- On RPAREN
--   reduce production open_args_e1 ->

State 148:
## Known stack suffix:
## STAR
## LR(1) items:
call_args2 -> STAR . arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 1423
-- On arg shift to state 491
## Reductions:

State 149:
## Known stack suffix:
## K_UNTIL
## LR(1) items:
primary -> K_UNTIL . primary_e2 expr_value do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e2 shift to state 150
## Default reduction:
-- After reading the next token, reduce production primary_e2 ->

State 150:
## Known stack suffix:
## K_UNTIL primary_e2
## LR(1) items:
primary -> K_UNTIL primary_e2 . expr_value do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 1418
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 151:
## Known stack suffix:
## K_UNLESS
## LR(1) items:
primary -> K_UNLESS . expr_value then_ compstmt opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 1413
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 152:
## Known stack suffix:
## K_TRUE
## LR(1) items:
variable -> K_TRUE . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K_TRUE

State 153:
## Known stack suffix:
## K_SUPER
## LR(1) items:
command -> K_SUPER . command_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
method_call -> K_SUPER . paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
method_call -> K_SUPER . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 163
-- On command_args_e1 shift to state 146
-- On command_args shift to state 1412
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production method_call -> K_SUPER

State 154:
## Known stack suffix:
## LPAREN2
## LR(1) items:
paren_args -> LPAREN2 . none RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
paren_args -> LPAREN2 . call_args opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
paren_args -> LPAREN2 . block_call opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
paren_args -> LPAREN2 . args COMMA block_call opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 142
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 1399
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 678
-- On call_args shift to state 1401
-- On block_call shift to state 1404
-- On block_arg shift to state 611
-- On awords shift to state 374
-- On assocs shift to state 612
-- On assoc shift to state 493
-- On args shift to state 1407
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:
-- On RPAREN
--   reduce production none ->

State 155:
## Known stack suffix:
## K_SELF
## LR(1) items:
variable -> K_SELF . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K_SELF

State 156:
## Known stack suffix:
## K_RETURN
## LR(1) items:
primary -> K_RETURN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_RETURN

State 157:
## Known stack suffix:
## K_RETRY
## LR(1) items:
primary -> K_RETRY . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_RETRY

State 158:
## Known stack suffix:
## K_REDO
## LR(1) items:
primary -> K_REDO . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_REDO

State 159:
## Known stack suffix:
## K_NIL
## LR(1) items:
variable -> K_NIL . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K_NIL

State 160:
## Known stack suffix:
## K_NEXT
## LR(1) items:
primary -> K_NEXT . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_NEXT

State 161:
## Known stack suffix:
## K_MODULE
## LR(1) items:
primary -> K_MODULE . cpath primary_e7 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 704
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 705
-- On COLON3 shift to state 706
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 710
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 711
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On dsym shift to state 373
-- On cpath shift to state 1395
-- On cname shift to state 757
-- On awords shift to state 374
## Reductions:

State 162:
## Known stack suffix:
## K_SUPER
## LR(1) items:
method_call -> K_SUPER . paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
method_call -> K_SUPER . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 163
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production method_call -> K_SUPER

State 163:
## Known stack suffix:
## K_SUPER paren_args
## LR(1) items:
method_call -> K_SUPER paren_args . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> K_SUPER paren_args

State 164:
## Known stack suffix:
## K_IF
## LR(1) items:
primary -> K_IF . expr_value then_ compstmt if_tail K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 1390
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 165:
## Known stack suffix:
## K_RETURN
## LR(1) items:
command_call -> K_RETURN . call_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
primary -> K_RETURN . [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 142
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 608
-- On call_args shift to state 1389
-- On block_arg shift to state 611
-- On awords shift to state 374
-- On assocs shift to state 612
-- On assoc shift to state 493
-- On args shift to state 621
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> K_RETURN

State 166:
## Known stack suffix:
## K_FOR
## LR(1) items:
primary -> K_FOR . block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 167
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 249
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 251
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 252
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 771
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 772
-- On dsym shift to state 373
-- On block_var shift to state 1381
-- On awords shift to state 374
## Reductions:

State 167:
## Known stack suffix:
## LPAREN
## LR(1) items:
mlhs -> LPAREN . mlhs_entry RPAREN [ PIPE K_IN ]
mlhs_item -> LPAREN . mlhs_entry RPAREN [ COMMA ]
primary -> LPAREN . compstmt RPAREN [ LB DOT COLON2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 168
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_entry shift to state 1280
-- On mlhs_basic shift to state 569
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 589
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production none ->

State 168:
## Known stack suffix:
## LPAREN
## LR(1) items:
mlhs -> LPAREN . mlhs_entry RPAREN [ EQL ]
mlhs_entry -> LPAREN . mlhs_entry RPAREN [ RPAREN ]
mlhs_item -> LPAREN . mlhs_entry RPAREN [ COMMA ]
primary -> LPAREN . compstmt RPAREN [ STAR2 SEMI RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 168
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_entry shift to state 1379
-- On mlhs_basic shift to state 569
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 589
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production none ->

State 169:
## Known stack suffix:
## K_lEND
## LR(1) items:
stmt -> K_lEND . LCURLY compstmt RCURLY [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On LCURLY shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## K_lEND LCURLY
## LR(1) items:
stmt -> K_lEND LCURLY . compstmt RCURLY [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1377
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RCURLY NL COMMENT
--   reduce production none ->

State 171:
## Known stack suffix:
## LPAREN
## LR(1) items:
mlhs -> LPAREN . mlhs_entry RPAREN [ EQL ]
mlhs_item -> LPAREN . mlhs_entry RPAREN [ COMMA ]
primary -> LPAREN . compstmt RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 168
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_entry shift to state 1280
-- On mlhs_basic shift to state 569
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 589
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production none ->

State 172:
## Known stack suffix:
## K_lBEGIN
## LR(1) items:
stmt -> K_lBEGIN . stmt_e2 LCURLY compstmt RCURLY [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On stmt_e2 shift to state 173
## Default reduction:
-- After reading the next token, reduce production stmt_e2 ->

State 173:
## Known stack suffix:
## K_lBEGIN stmt_e2
## LR(1) items:
stmt -> K_lBEGIN stmt_e2 . LCURLY compstmt RCURLY [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On LCURLY shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## K_lBEGIN stmt_e2 LCURLY
## LR(1) items:
stmt -> K_lBEGIN stmt_e2 LCURLY . compstmt RCURLY [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1375
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RCURLY NL COMMENT
--   reduce production none ->

State 175:
## Known stack suffix:
## K_UNDEF
## LR(1) items:
stmt -> K_UNDEF . undef_list [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On SYMBEG shift to state 176
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 49
-- On K__FILE__ shift to state 50
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 57
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 60
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 68
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 74
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IDENTIFIER shift to state 89
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 98
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On undef_list shift to state 177
-- On symbol shift to state 180
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 181
-- On fitem shift to state 183
## Reductions:

State 176:
## Known stack suffix:
## SYMBEG
## LR(1) items:
symbol -> SYMBEG . sym [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT NL MINUS MATCH LT LSHFT LEQ K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ DIVIDE CONSTANT COMMENT COMMA CMP CARET BACK_REF2 ASET AREF AMPER2 # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 49
-- On K__FILE__ shift to state 50
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 57
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 60
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 68
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 74
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IVAR shift to state 88
-- On IDENTIFIER shift to state 89
-- On GVAR shift to state 90
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CVAR shift to state 97
-- On CONSTANT shift to state 98
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On sym shift to state 108
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 112
## Reductions:

State 177:
## Known stack suffix:
## K_UNDEF undef_list
## LR(1) items:
stmt -> K_UNDEF undef_list . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
undef_list -> undef_list . COMMA undef_list_e1 fitem [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COMMA # ]
## Transitions:
-- On COMMA shift to state 178
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT
--   reduce production stmt -> K_UNDEF undef_list

State 178:
## Known stack suffix:
## undef_list COMMA
## LR(1) items:
undef_list -> undef_list COMMA . undef_list_e1 fitem [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COMMA # ]
## Transitions:
-- On undef_list_e1 shift to state 179
## Default reduction:
-- After reading the next token, reduce production undef_list_e1 ->

State 179:
## Known stack suffix:
## undef_list COMMA undef_list_e1
## LR(1) items:
undef_list -> undef_list COMMA undef_list_e1 . fitem [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COMMA # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On SYMBEG shift to state 176
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 49
-- On K__FILE__ shift to state 50
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 57
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 60
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 68
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 74
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IDENTIFIER shift to state 89
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 98
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On symbol shift to state 180
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 181
-- On fitem shift to state 182
## Reductions:

State 180:
## Known stack suffix:
## symbol
## LR(1) items:
fitem -> symbol . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT NL MINUS MATCH LT LSHFT LEQ K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ DIVIDE CONSTANT COMMENT COMMA CMP CARET BACK_REF2 ASET AREF AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fitem -> symbol

State 181:
## Known stack suffix:
## fname
## LR(1) items:
fitem -> fname . [ UPLUS UMINUS TILDE SYMBEG STAR2 STAR SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT NL MINUS MATCH LT LSHFT LEQ K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ DIVIDE CONSTANT COMMENT COMMA CMP CARET BACK_REF2 ASET AREF AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fitem -> fname

State 182:
## Known stack suffix:
## undef_list COMMA undef_list_e1 fitem
## LR(1) items:
undef_list -> undef_list COMMA undef_list_e1 fitem . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production undef_list -> undef_list COMMA undef_list_e1 fitem

State 183:
## Known stack suffix:
## fitem
## LR(1) items:
undef_list -> fitem . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production undef_list -> fitem

State 184:
## Known stack suffix:
## K_NOT
## LR(1) items:
expr -> K_NOT . expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 1374
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 185:
## Known stack suffix:
## K_NEXT
## LR(1) items:
command_call -> K_NEXT . call_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
primary -> K_NEXT . [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 142
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 608
-- On call_args shift to state 1373
-- On block_arg shift to state 611
-- On awords shift to state 374
-- On assocs shift to state 612
-- On assoc shift to state 493
-- On args shift to state 621
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> K_NEXT

State 186:
## Known stack suffix:
## K_FALSE
## LR(1) items:
variable -> K_FALSE . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K_FALSE

State 187:
## Known stack suffix:
## K_DEFINED
## LR(1) items:
arg -> K_DEFINED . opt_nl arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_DEFINED . opt_nl LPAREN2 expr RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On NL shift to state 188
-- On COMMENT shift to state 189
-- On opt_nl shift to state 190
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG
--   reduce production opt_nl ->

State 188:
## Known stack suffix:
## NL
## LR(1) items:
opt_nl -> NL . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG RPAREN REGEXP_BEG RBRACK QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_nl -> NL

State 189:
## Known stack suffix:
## COMMENT
## LR(1) items:
opt_nl -> COMMENT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG RPAREN REGEXP_BEG RBRACK QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_nl -> COMMENT

State 190:
## Known stack suffix:
## K_DEFINED opt_nl
## LR(1) items:
arg -> K_DEFINED opt_nl . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_DEFINED opt_nl . LPAREN2 expr RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN2 shift to state 191
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1372
## Reductions:

State 191:
## Known stack suffix:
## K_DEFINED opt_nl LPAREN2
## LR(1) items:
primary -> K_DEFINED opt_nl LPAREN2 . expr RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 1370
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 192:
## Known stack suffix:
## K_DEF
## LR(1) items:
primary -> K_DEF . fname primary_e8 f_arglist bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_DEF . singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LPAREN2 shift to state 193
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 788
-- On K__FILE__ shift to state 789
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 790
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 791
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 792
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 793
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IVAR shift to state 209
-- On IDENTIFIER shift to state 794
-- On GVAR shift to state 212
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CVAR shift to state 215
-- On CONSTANT shift to state 795
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On variable shift to state 710
-- On var_ref shift to state 796
-- On singleton shift to state 1357
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 1365
## Reductions:

State 193:
## Known stack suffix:
## LPAREN2
## LR(1) items:
singleton -> LPAREN2 . singleton_e1 expr opt_nl RPAREN [ DOT COLON2 ]
## Transitions:
-- On singleton_e1 shift to state 194
## Default reduction:
-- After reading the next token, reduce production singleton_e1 ->

State 194:
## Known stack suffix:
## LPAREN2 singleton_e1
## LR(1) items:
singleton -> LPAREN2 singleton_e1 . expr opt_nl RPAREN [ DOT COLON2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 1354
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 195:
## Known stack suffix:
## K_CLASS
## LR(1) items:
primary -> K_CLASS . cpath superclass primary_e4 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_CLASS . LSHFT expr primary_e5 term primary_e6 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LSHFT shift to state 196
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 704
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 705
-- On COLON3 shift to state 706
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 710
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 711
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On dsym shift to state 373
-- On cpath shift to state 1349
-- On cname shift to state 757
-- On awords shift to state 374
## Reductions:

State 196:
## Known stack suffix:
## K_CLASS LSHFT
## LR(1) items:
primary -> K_CLASS LSHFT . expr primary_e5 term primary_e6 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 1343
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 197:
## Known stack suffix:
## K_CASE
## LR(1) items:
primary -> K_CASE . expr_value opt_terms case_body opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_CASE . opt_terms case_body opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_CASE . opt_terms K_ELSE compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On SEMI shift to state 198
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On NL shift to state 199
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COMMENT shift to state 460
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On terms shift to state 878
-- On term shift to state 879
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On opt_terms shift to state 1331
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 1338
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On K_WHEN K_ELSE
--   reduce production opt_terms ->

State 198:
## Known stack suffix:
## SEMI
## LR(1) items:
term -> SEMI . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI RPAREN REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> SEMI

State 199:
## Known stack suffix:
## NL
## LR(1) items:
term -> NL . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI RPAREN REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> NL

State 200:
## Known stack suffix:
## K_BREAK
## LR(1) items:
command_call -> K_BREAK . call_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
primary -> K_BREAK . [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 142
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 608
-- On call_args shift to state 1330
-- On block_arg shift to state 611
-- On awords shift to state 374
-- On assocs shift to state 612
-- On assoc shift to state 493
-- On args shift to state 621
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> K_BREAK

State 201:
## Known stack suffix:
## K_BREAK
## LR(1) items:
primary -> K_BREAK . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_BREAK

State 202:
## Known stack suffix:
## K_BEGIN
## LR(1) items:
primary -> K_BEGIN . bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 1328
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 203:
## Known stack suffix:
## K_ALIAS
## LR(1) items:
stmt -> K_ALIAS . fitem stmt_e1 fitem [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> K_ALIAS . GVAR GVAR [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On SYMBEG shift to state 176
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 49
-- On K__FILE__ shift to state 50
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 57
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 60
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 68
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 74
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IDENTIFIER shift to state 89
-- On GVAR shift to state 204
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 98
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On symbol shift to state 180
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 181
-- On fitem shift to state 206
## Reductions:

State 204:
## Known stack suffix:
## K_ALIAS GVAR
## LR(1) items:
stmt -> K_ALIAS GVAR . GVAR [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On GVAR shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## K_ALIAS GVAR GVAR
## LR(1) items:
stmt -> K_ALIAS GVAR GVAR . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> K_ALIAS GVAR GVAR

State 206:
## Known stack suffix:
## K_ALIAS fitem
## LR(1) items:
stmt -> K_ALIAS fitem . stmt_e1 fitem [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On stmt_e1 shift to state 207
## Default reduction:
-- After reading the next token, reduce production stmt_e1 ->

State 207:
## Known stack suffix:
## K_ALIAS fitem stmt_e1
## LR(1) items:
stmt -> K_ALIAS fitem stmt_e1 . fitem [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On SYMBEG shift to state 176
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 49
-- On K__FILE__ shift to state 50
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 57
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 60
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 68
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 74
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IDENTIFIER shift to state 89
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 98
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On symbol shift to state 180
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 181
-- On fitem shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## K_ALIAS fitem stmt_e1 fitem
## LR(1) items:
stmt -> K_ALIAS fitem stmt_e1 fitem . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> K_ALIAS fitem stmt_e1 fitem

State 209:
## Known stack suffix:
## IVAR
## LR(1) items:
variable -> IVAR . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> IVAR

State 210:
## Known stack suffix:
## INTEGER
## LR(1) items:
numeric -> INTEGER . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric -> INTEGER

State 211:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
operation -> IDENTIFIER . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
variable -> IDENTIFIER . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation -> IDENTIFIER
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production variable -> IDENTIFIER

State 212:
## Known stack suffix:
## GVAR
## LR(1) items:
variable -> GVAR . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> GVAR

State 213:
## Known stack suffix:
## FLOAT
## LR(1) items:
numeric -> FLOAT . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric -> FLOAT

State 214:
## Known stack suffix:
## FID
## LR(1) items:
operation -> FID . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
primary -> FID . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation -> FID
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> FID

State 215:
## Known stack suffix:
## CVAR
## LR(1) items:
variable -> CVAR . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> CVAR

State 216:
## Known stack suffix:
## CONSTANT
## LR(1) items:
operation -> CONSTANT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
variable -> CONSTANT . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation -> CONSTANT
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IN K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production variable -> CONSTANT

State 217:
## Known stack suffix:
## COLON3
## LR(1) items:
arg -> COLON3 . CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
lhs -> COLON3 . CONSTANT [ EQL ]
mlhs_node -> COLON3 . CONSTANT [ COMMA ]
primary -> COLON3 . CONSTANT [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
## Transitions:
-- On CONSTANT shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## COLON3 CONSTANT
## LR(1) items:
arg -> COLON3 CONSTANT . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
lhs -> COLON3 CONSTANT . [ EQL ]
mlhs_node -> COLON3 CONSTANT . [ COMMA ]
primary -> COLON3 CONSTANT . [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
## Transitions:
-- On OP_ASGN shift to state 219
## Reductions:
-- On EQL
--   reduce production lhs -> COLON3 CONSTANT
-- On COMMA
--   reduce production mlhs_node -> COLON3 CONSTANT
-- On STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production primary -> COLON3 CONSTANT

State 219:
## Known stack suffix:
## COLON3 CONSTANT OP_ASGN
## LR(1) items:
arg -> COLON3 CONSTANT OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1327
## Reductions:

State 220:
## Known stack suffix:
## COLON3
## LR(1) items:
arg -> COLON3 . CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> COLON3 . CONSTANT [ EQL ]
primary -> COLON3 . CONSTANT [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On CONSTANT shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## COLON3 CONSTANT
## LR(1) items:
arg -> COLON3 CONSTANT . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> COLON3 CONSTANT . [ EQL ]
primary -> COLON3 CONSTANT . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On OP_ASGN shift to state 219
## Reductions:
-- On EQL
--   reduce production lhs -> COLON3 CONSTANT
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> COLON3 CONSTANT

State 222:
## Known stack suffix:
## BANG
## LR(1) items:
arg -> BANG . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1286
## Reductions:

State 223:
## Known stack suffix:
## xstring
## LR(1) items:
primary -> xstring . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> xstring

State 224:
## Known stack suffix:
## words
## LR(1) items:
primary -> words . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> words

State 225:
## Known stack suffix:
## variable
## LR(1) items:
lhs -> variable . [ EQL ]
var_lhs -> variable . [ OP_ASGN ]
var_ref -> variable . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Reductions:
-- On EQL
--   reduce production lhs -> variable
-- On OP_ASGN
--   reduce production var_lhs -> variable
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production var_ref -> variable

State 226:
## Known stack suffix:
## var_ref
## LR(1) items:
primary -> var_ref . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> var_ref

State 227:
## Known stack suffix:
## var_lhs
## LR(1) items:
arg -> var_lhs . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On OP_ASGN shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## var_lhs OP_ASGN
## LR(1) items:
arg -> var_lhs OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 458
## Reductions:

State 229:
## Known stack suffix:
## symbol
## LR(1) items:
literal -> symbol . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> symbol

State 230:
## Known stack suffix:
## strings
## LR(1) items:
primary -> strings . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> strings

State 231:
## Known stack suffix:
## string1
## LR(1) items:
string -> string1 . [ STRING_BEG STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string -> string1

State 232:
## Known stack suffix:
## string
## LR(1) items:
string -> string . string1 [ STRING_BEG STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
strings -> string . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STRING_BEG shift to state 113
-- On string1 shift to state 233
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production strings -> string

State 233:
## Known stack suffix:
## string string1
## LR(1) items:
string -> string string1 . [ STRING_BEG STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string -> string string1

State 234:
## Known stack suffix:
## regexp
## LR(1) items:
primary -> regexp . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> regexp

State 235:
## Known stack suffix:
## primary_value
## LR(1) items:
arg -> primary_value . LB aref_args RBRACK OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value . DOT IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value . DOT CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value . COLON2 IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value . COLON2 CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value . LB aref_args RBRACK [ EQL ]
lhs -> primary_value . DOT IDENTIFIER [ EQL ]
lhs -> primary_value . COLON2 IDENTIFIER [ EQL ]
lhs -> primary_value . DOT CONSTANT [ EQL ]
lhs -> primary_value . COLON2 CONSTANT [ EQL ]
method_call -> primary_value . DOT operation2 opt_paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
method_call -> primary_value . COLON2 operation2 paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
method_call -> primary_value . COLON2 operation3 [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> primary_value . COLON2 CONSTANT [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> primary_value . LB aref_args RBRACK [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LB shift to state 236
-- On DOT shift to state 1325
-- On COLON2 shift to state 1326
## Reductions:

State 236:
## Known stack suffix:
## primary_value LB
## LR(1) items:
arg -> primary_value LB . aref_args RBRACK OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value LB . aref_args RBRACK [ EQL ]
primary -> primary_value LB . aref_args RBRACK [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 1322
## Reductions:
-- On RBRACK
--   reduce production none ->

State 237:
## Known stack suffix:
## primary_value
## LR(1) items:
arg -> primary_value . LB aref_args RBRACK OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value . DOT IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value . DOT CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value . COLON2 IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value . COLON2 CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
command -> primary_value . DOT operation2 command_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> primary_value . DOT operation2 command_args cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> primary_value . COLON2 operation2 command_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> primary_value . COLON2 operation2 command_args cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
lhs -> primary_value . LB aref_args RBRACK [ EQL ]
lhs -> primary_value . DOT IDENTIFIER [ EQL ]
lhs -> primary_value . COLON2 IDENTIFIER [ EQL ]
lhs -> primary_value . DOT CONSTANT [ EQL ]
lhs -> primary_value . COLON2 CONSTANT [ EQL ]
method_call -> primary_value . DOT operation2 opt_paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
method_call -> primary_value . COLON2 operation2 paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
method_call -> primary_value . COLON2 operation3 [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> primary_value . COLON2 CONSTANT [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> primary_value . LB aref_args RBRACK [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LB shift to state 236
-- On DOT shift to state 238
-- On COLON2 shift to state 1318
## Reductions:

State 238:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
arg -> primary_value DOT . IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value DOT . CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
command -> primary_value DOT . operation2 command_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> primary_value DOT . operation2 command_args cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
lhs -> primary_value DOT . IDENTIFIER [ EQL ]
lhs -> primary_value DOT . CONSTANT [ EQL ]
method_call -> primary_value DOT . operation2 opt_paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 239
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 1316
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 516
-- On op shift to state 453
## Reductions:

State 239:
## Known stack suffix:
## primary_value DOT IDENTIFIER
## LR(1) items:
arg -> primary_value DOT IDENTIFIER . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value DOT IDENTIFIER . [ EQL ]
operation2 -> IDENTIFIER . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG ASSOC ANDOP AMPER2 AMPER # ]
## Transitions:
-- On OP_ASGN shift to state 240
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value DOT IDENTIFIER
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG ASSOC ANDOP AMPER2 AMPER
--   reduce production operation2 -> IDENTIFIER

State 240:
## Known stack suffix:
## primary_value DOT IDENTIFIER OP_ASGN
## LR(1) items:
arg -> primary_value DOT IDENTIFIER OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 511
## Reductions:

State 241:
## Known stack suffix:
## primary
## LR(1) items:
arg -> primary . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary_value -> primary . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> primary
-- On LB DOT COLON2
--   reduce production primary_value -> primary

State 242:
## Known stack suffix:
## operation
## LR(1) items:
method_call -> operation . paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> operation . brace_block [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On LCURLY shift to state 243
-- On K_DO shift to state 255
-- On paren_args shift to state 1297
-- On brace_block shift to state 1300
## Reductions:

State 243:
## Known stack suffix:
## LCURLY
## LR(1) items:
brace_block -> LCURLY . brace_block_e1 opt_block_var compstmt RCURLY_error [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On brace_block_e1 shift to state 244
## Default reduction:
-- After reading the next token, reduce production brace_block_e1 ->

State 244:
## Known stack suffix:
## LCURLY brace_block_e1
## LR(1) items:
brace_block -> LCURLY brace_block_e1 . opt_block_var compstmt RCURLY_error [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On PIPE shift to state 245
-- On OROP shift to state 257
-- On opt_block_var shift to state 1313
-- On none shift to state 1189
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production none ->

State 245:
## Known stack suffix:
## PIPE
## LR(1) items:
opt_block_var -> PIPE . PIPE [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
opt_block_var -> PIPE . lhs PIPE [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
opt_block_var -> PIPE . mlhs PIPE [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On PIPE shift to state 246
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 167
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 249
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 251
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 252
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1309
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 1311
-- On dsym shift to state 373
-- On awords shift to state 374
## Reductions:

State 246:
## Known stack suffix:
## PIPE PIPE
## LR(1) items:
opt_block_var -> PIPE PIPE . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block_var -> PIPE PIPE

State 247:
## Known stack suffix:
## K_DEFINED
## LR(1) items:
primary -> K_DEFINED . opt_nl LPAREN2 expr RPAREN [ LB DOT COLON2 ]
## Transitions:
-- On NL shift to state 188
-- On COMMENT shift to state 189
-- On opt_nl shift to state 248
## Reductions:
-- On LPAREN2
--   reduce production opt_nl ->

State 248:
## Known stack suffix:
## K_DEFINED opt_nl
## LR(1) items:
primary -> K_DEFINED opt_nl . LPAREN2 expr RPAREN [ LB DOT COLON2 ]
## Transitions:
-- On LPAREN2 shift to state 191
## Reductions:

State 249:
## Known stack suffix:
## COLON3
## LR(1) items:
lhs -> COLON3 . CONSTANT [ PIPE K_IN ]
mlhs_node -> COLON3 . CONSTANT [ COMMA ]
primary -> COLON3 . CONSTANT [ LB DOT COLON2 ]
## Transitions:
-- On CONSTANT shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## COLON3 CONSTANT
## LR(1) items:
lhs -> COLON3 CONSTANT . [ PIPE K_IN ]
mlhs_node -> COLON3 CONSTANT . [ COMMA ]
primary -> COLON3 CONSTANT . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On PIPE K_IN
--   reduce production lhs -> COLON3 CONSTANT
-- On COMMA
--   reduce production mlhs_node -> COLON3 CONSTANT
-- On LB DOT COLON2
--   reduce production primary -> COLON3 CONSTANT

State 251:
## Known stack suffix:
## variable
## LR(1) items:
lhs -> variable . [ PIPE K_IN ]
mlhs_node -> variable . [ COMMA ]
var_ref -> variable . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On PIPE K_IN
--   reduce production lhs -> variable
-- On COMMA
--   reduce production mlhs_node -> variable
-- On LB DOT COLON2
--   reduce production var_ref -> variable

State 252:
## Known stack suffix:
## primary_value
## LR(1) items:
lhs -> primary_value . LB aref_args RBRACK [ PIPE K_IN ]
lhs -> primary_value . DOT IDENTIFIER [ PIPE K_IN ]
lhs -> primary_value . COLON2 IDENTIFIER [ PIPE K_IN ]
lhs -> primary_value . DOT CONSTANT [ PIPE K_IN ]
lhs -> primary_value . COLON2 CONSTANT [ PIPE K_IN ]
method_call -> primary_value . DOT operation2 opt_paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value . COLON2 operation2 paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value . COLON2 operation3 [ LCURLY LB K_DO DOT COLON2 ]
mlhs_node -> primary_value . LB aref_args RBRACK [ COMMA ]
mlhs_node -> primary_value . DOT IDENTIFIER [ COMMA ]
mlhs_node -> primary_value . COLON2 IDENTIFIER [ COMMA ]
mlhs_node -> primary_value . DOT CONSTANT [ COMMA ]
mlhs_node -> primary_value . COLON2 CONSTANT [ COMMA ]
primary -> primary_value . COLON2 CONSTANT [ LB DOT COLON2 ]
primary -> primary_value . LB aref_args RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On LB shift to state 253
-- On DOT shift to state 1303
-- On COLON2 shift to state 1306
## Reductions:

State 253:
## Known stack suffix:
## primary_value LB
## LR(1) items:
lhs -> primary_value LB . aref_args RBRACK [ PIPE K_IN ]
mlhs_node -> primary_value LB . aref_args RBRACK [ COMMA ]
primary -> primary_value LB . aref_args RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 1301
## Reductions:
-- On RBRACK
--   reduce production none ->

State 254:
## Known stack suffix:
## operation
## LR(1) items:
command -> operation . command_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> operation . command_args cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
method_call -> operation . paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> operation . brace_block [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On LCURLY shift to state 243
-- On K_DO shift to state 255
-- On paren_args shift to state 1297
-- On command_args_e1 shift to state 146
-- On command_args shift to state 1298
-- On brace_block shift to state 1300
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->

State 255:
## Known stack suffix:
## K_DO
## LR(1) items:
brace_block -> K_DO . brace_block_e1 opt_block_var compstmt K_END_error [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On brace_block_e1 shift to state 256
## Default reduction:
-- After reading the next token, reduce production brace_block_e1 ->

State 256:
## Known stack suffix:
## K_DO brace_block_e1
## LR(1) items:
brace_block -> K_DO brace_block_e1 . opt_block_var compstmt K_END_error [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On PIPE shift to state 245
-- On OROP shift to state 257
-- On opt_block_var shift to state 258
-- On none shift to state 1189
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production none ->

State 257:
## Known stack suffix:
## OROP
## LR(1) items:
opt_block_var -> OROP . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block_var -> OROP

State 258:
## Known stack suffix:
## K_DO brace_block_e1 opt_block_var
## LR(1) items:
brace_block -> K_DO brace_block_e1 opt_block_var . compstmt K_END_error [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 259
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmts shift to state 1113
-- On stmt shift to state 1183
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On none shift to state 1184
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On compstmt shift to state 1295
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 259:
## Known stack suffix:
## error
## LR(1) items:
stmts -> error . stmt [ error SEMI RCURLY NL K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmt shift to state 1294
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:

State 260:
## Known stack suffix:
## XSTRING_BEG
## LR(1) items:
xstring -> XSTRING_BEG . xstring_contents STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On xstring_contents shift to state 261
-- On none shift to state 111
## Default reduction:
-- After reading the next token, reduce production none ->

State 261:
## Known stack suffix:
## XSTRING_BEG xstring_contents
## LR(1) items:
xstring -> XSTRING_BEG xstring_contents . STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
xstring_contents -> xstring_contents . string_content [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
-- On STRING_END shift to state 262
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On string_content shift to state 107
## Reductions:

State 262:
## Known stack suffix:
## XSTRING_BEG xstring_contents STRING_END
## LR(1) items:
xstring -> XSTRING_BEG xstring_contents STRING_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xstring -> XSTRING_BEG xstring_contents STRING_END

State 263:
## Known stack suffix:
## WORDS_BEG
## LR(1) items:
words -> WORDS_BEG . SPACE STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
words -> WORDS_BEG . word_list STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On SPACE shift to state 264
-- On word_list shift to state 266
-- On none shift to state 24
## Reductions:
-- On STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT
--   reduce production none ->

State 264:
## Known stack suffix:
## WORDS_BEG SPACE
## LR(1) items:
words -> WORDS_BEG SPACE . STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STRING_END shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## WORDS_BEG SPACE STRING_END
## LR(1) items:
words -> WORDS_BEG SPACE STRING_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production words -> WORDS_BEG SPACE STRING_END

State 266:
## Known stack suffix:
## WORDS_BEG word_list
## LR(1) items:
word_list -> word_list . word SPACE [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
words -> WORDS_BEG word_list . STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STRING_END shift to state 267
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On word shift to state 20
-- On string_content shift to state 23
## Reductions:

State 267:
## Known stack suffix:
## WORDS_BEG word_list STRING_END
## LR(1) items:
words -> WORDS_BEG word_list STRING_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production words -> WORDS_BEG word_list STRING_END

State 268:
## Known stack suffix:
## UPLUS
## LR(1) items:
arg -> UPLUS . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1293
## Reductions:

State 269:
## Known stack suffix:
## UMINUS_NUM
## LR(1) items:
arg -> UMINUS_NUM . INTEGER POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> UMINUS_NUM . FLOAT POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
numeric -> UMINUS_NUM . INTEGER [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
numeric -> UMINUS_NUM . FLOAT [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On INTEGER shift to state 270
-- On FLOAT shift to state 1290
## Reductions:

State 270:
## Known stack suffix:
## UMINUS_NUM INTEGER
## LR(1) items:
arg -> UMINUS_NUM INTEGER . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
numeric -> UMINUS_NUM INTEGER . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On POW shift to state 271
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production numeric -> UMINUS_NUM INTEGER

State 271:
## Known stack suffix:
## UMINUS_NUM INTEGER POW
## LR(1) items:
arg -> UMINUS_NUM INTEGER POW . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1289
## Reductions:

State 272:
## Known stack suffix:
## UMINUS
## LR(1) items:
arg -> UMINUS . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1288
## Reductions:

State 273:
## Known stack suffix:
## TILDE
## LR(1) items:
arg -> TILDE . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1287
## Reductions:

State 274:
## Known stack suffix:
## SYMBEG
## LR(1) items:
dsym -> SYMBEG . xstring_contents STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
symbol -> SYMBEG . sym [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On K_lEND shift to state 290
-- On K_lBEGIN shift to state 291
-- On K__LINE__ shift to state 292
-- On K__FILE__ shift to state 293
-- On K_YIELD shift to state 294
-- On K_WHILE_MOD shift to state 295
-- On K_WHEN shift to state 296
-- On K_UNTIL_MOD shift to state 297
-- On K_UNLESS_MOD shift to state 298
-- On K_UNDEF shift to state 299
-- On K_TRUE shift to state 300
-- On K_THEN shift to state 301
-- On K_SUPER shift to state 302
-- On K_SELF shift to state 303
-- On K_RETURN shift to state 304
-- On K_RETRY shift to state 305
-- On K_RESCUE_MOD shift to state 306
-- On K_RESCUE shift to state 307
-- On K_REDO shift to state 308
-- On K_OR shift to state 309
-- On K_NOT shift to state 310
-- On K_NIL shift to state 311
-- On K_NEXT shift to state 312
-- On K_MODULE shift to state 313
-- On K_IN shift to state 314
-- On K_IF_MOD shift to state 315
-- On K_FOR shift to state 316
-- On K_FALSE shift to state 317
-- On K_ENSURE shift to state 318
-- On K_END shift to state 319
-- On K_ELSIF shift to state 320
-- On K_ELSE shift to state 321
-- On K_DO shift to state 322
-- On K_DEFINED shift to state 323
-- On K_DEF shift to state 324
-- On K_CLASS shift to state 325
-- On K_CASE shift to state 326
-- On K_BREAK shift to state 327
-- On K_BEGIN shift to state 328
-- On K_AND shift to state 329
-- On K_ALIAS shift to state 330
-- On IVAR shift to state 331
-- On IDENTIFIER shift to state 332
-- On GVAR shift to state 333
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 336
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CVAR shift to state 340
-- On CONSTANT shift to state 341
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On xstring_contents shift to state 348
-- On sym shift to state 350
-- On reswords shift to state 351
-- On op shift to state 352
-- On none shift to state 111
-- On fname shift to state 353
## Reductions:
-- On STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT
--   reduce production none ->

State 275:
## Known stack suffix:
## UPLUS
## LR(1) items:
op -> UPLUS . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> UPLUS

State 276:
## Known stack suffix:
## UMINUS
## LR(1) items:
op -> UMINUS . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> UMINUS

State 277:
## Known stack suffix:
## TILDE
## LR(1) items:
op -> TILDE . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> TILDE

State 278:
## Known stack suffix:
## STAR2
## LR(1) items:
op -> STAR2 . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> STAR2

State 279:
## Known stack suffix:
## STAR
## LR(1) items:
op -> STAR . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> STAR

State 280:
## Known stack suffix:
## RSHFT
## LR(1) items:
op -> RSHFT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> RSHFT

State 281:
## Known stack suffix:
## POW
## LR(1) items:
op -> POW . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> POW

State 282:
## Known stack suffix:
## PLUS
## LR(1) items:
op -> PLUS . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> PLUS

State 283:
## Known stack suffix:
## PIPE
## LR(1) items:
op -> PIPE . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> PIPE

State 284:
## Known stack suffix:
## PERCENT
## LR(1) items:
op -> PERCENT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> PERCENT

State 285:
## Known stack suffix:
## MINUS
## LR(1) items:
op -> MINUS . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> MINUS

State 286:
## Known stack suffix:
## MATCH
## LR(1) items:
op -> MATCH . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> MATCH

State 287:
## Known stack suffix:
## LT
## LR(1) items:
op -> LT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> LT

State 288:
## Known stack suffix:
## LSHFT
## LR(1) items:
op -> LSHFT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> LSHFT

State 289:
## Known stack suffix:
## LEQ
## LR(1) items:
op -> LEQ . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> LEQ

State 290:
## Known stack suffix:
## K_lEND
## LR(1) items:
reswords -> K_lEND . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_lEND

State 291:
## Known stack suffix:
## K_lBEGIN
## LR(1) items:
reswords -> K_lBEGIN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_lBEGIN

State 292:
## Known stack suffix:
## K__LINE__
## LR(1) items:
reswords -> K__LINE__ . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K__LINE__

State 293:
## Known stack suffix:
## K__FILE__
## LR(1) items:
reswords -> K__FILE__ . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K__FILE__

State 294:
## Known stack suffix:
## K_YIELD
## LR(1) items:
reswords -> K_YIELD . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_YIELD

State 295:
## Known stack suffix:
## K_WHILE_MOD
## LR(1) items:
reswords -> K_WHILE_MOD . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_WHILE_MOD

State 296:
## Known stack suffix:
## K_WHEN
## LR(1) items:
reswords -> K_WHEN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_WHEN

State 297:
## Known stack suffix:
## K_UNTIL_MOD
## LR(1) items:
reswords -> K_UNTIL_MOD . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_UNTIL_MOD

State 298:
## Known stack suffix:
## K_UNLESS_MOD
## LR(1) items:
reswords -> K_UNLESS_MOD . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_UNLESS_MOD

State 299:
## Known stack suffix:
## K_UNDEF
## LR(1) items:
reswords -> K_UNDEF . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_UNDEF

State 300:
## Known stack suffix:
## K_TRUE
## LR(1) items:
reswords -> K_TRUE . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_TRUE

State 301:
## Known stack suffix:
## K_THEN
## LR(1) items:
reswords -> K_THEN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_THEN

State 302:
## Known stack suffix:
## K_SUPER
## LR(1) items:
reswords -> K_SUPER . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_SUPER

State 303:
## Known stack suffix:
## K_SELF
## LR(1) items:
reswords -> K_SELF . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_SELF

State 304:
## Known stack suffix:
## K_RETURN
## LR(1) items:
reswords -> K_RETURN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_RETURN

State 305:
## Known stack suffix:
## K_RETRY
## LR(1) items:
reswords -> K_RETRY . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_RETRY

State 306:
## Known stack suffix:
## K_RESCUE_MOD
## LR(1) items:
reswords -> K_RESCUE_MOD . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_RESCUE_MOD

State 307:
## Known stack suffix:
## K_RESCUE
## LR(1) items:
reswords -> K_RESCUE . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_RESCUE

State 308:
## Known stack suffix:
## K_REDO
## LR(1) items:
reswords -> K_REDO . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_REDO

State 309:
## Known stack suffix:
## K_OR
## LR(1) items:
reswords -> K_OR . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_OR

State 310:
## Known stack suffix:
## K_NOT
## LR(1) items:
reswords -> K_NOT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_NOT

State 311:
## Known stack suffix:
## K_NIL
## LR(1) items:
reswords -> K_NIL . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_NIL

State 312:
## Known stack suffix:
## K_NEXT
## LR(1) items:
reswords -> K_NEXT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_NEXT

State 313:
## Known stack suffix:
## K_MODULE
## LR(1) items:
reswords -> K_MODULE . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_MODULE

State 314:
## Known stack suffix:
## K_IN
## LR(1) items:
reswords -> K_IN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_IN

State 315:
## Known stack suffix:
## K_IF_MOD
## LR(1) items:
reswords -> K_IF_MOD . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_IF_MOD

State 316:
## Known stack suffix:
## K_FOR
## LR(1) items:
reswords -> K_FOR . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_FOR

State 317:
## Known stack suffix:
## K_FALSE
## LR(1) items:
reswords -> K_FALSE . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_FALSE

State 318:
## Known stack suffix:
## K_ENSURE
## LR(1) items:
reswords -> K_ENSURE . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_ENSURE

State 319:
## Known stack suffix:
## K_END
## LR(1) items:
reswords -> K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_END

State 320:
## Known stack suffix:
## K_ELSIF
## LR(1) items:
reswords -> K_ELSIF . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_ELSIF

State 321:
## Known stack suffix:
## K_ELSE
## LR(1) items:
reswords -> K_ELSE . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_ELSE

State 322:
## Known stack suffix:
## K_DO
## LR(1) items:
reswords -> K_DO . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_DO

State 323:
## Known stack suffix:
## K_DEFINED
## LR(1) items:
reswords -> K_DEFINED . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_DEFINED

State 324:
## Known stack suffix:
## K_DEF
## LR(1) items:
reswords -> K_DEF . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_DEF

State 325:
## Known stack suffix:
## K_CLASS
## LR(1) items:
reswords -> K_CLASS . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_CLASS

State 326:
## Known stack suffix:
## K_CASE
## LR(1) items:
reswords -> K_CASE . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_CASE

State 327:
## Known stack suffix:
## K_BREAK
## LR(1) items:
reswords -> K_BREAK . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_BREAK

State 328:
## Known stack suffix:
## K_BEGIN
## LR(1) items:
reswords -> K_BEGIN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_BEGIN

State 329:
## Known stack suffix:
## K_AND
## LR(1) items:
reswords -> K_AND . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_AND

State 330:
## Known stack suffix:
## K_ALIAS
## LR(1) items:
reswords -> K_ALIAS . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reswords -> K_ALIAS

State 331:
## Known stack suffix:
## IVAR
## LR(1) items:
sym -> IVAR . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym -> IVAR

State 332:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
fname -> IDENTIFIER . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> IDENTIFIER

State 333:
## Known stack suffix:
## GVAR
## LR(1) items:
sym -> GVAR . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym -> GVAR

State 334:
## Known stack suffix:
## GT
## LR(1) items:
op -> GT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> GT

State 335:
## Known stack suffix:
## GEQ
## LR(1) items:
op -> GEQ . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> GEQ

State 336:
## Known stack suffix:
## FID
## LR(1) items:
fname -> FID . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> FID

State 337:
## Known stack suffix:
## EQQ
## LR(1) items:
op -> EQQ . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> EQQ

State 338:
## Known stack suffix:
## EQ
## LR(1) items:
op -> EQ . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> EQ

State 339:
## Known stack suffix:
## DIVIDE
## LR(1) items:
op -> DIVIDE . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> DIVIDE

State 340:
## Known stack suffix:
## CVAR
## LR(1) items:
sym -> CVAR . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym -> CVAR

State 341:
## Known stack suffix:
## CONSTANT
## LR(1) items:
fname -> CONSTANT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> CONSTANT

State 342:
## Known stack suffix:
## CMP
## LR(1) items:
op -> CMP . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> CMP

State 343:
## Known stack suffix:
## CARET
## LR(1) items:
op -> CARET . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> CARET

State 344:
## Known stack suffix:
## BACK_REF2
## LR(1) items:
op -> BACK_REF2 . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> BACK_REF2

State 345:
## Known stack suffix:
## ASET
## LR(1) items:
op -> ASET . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> ASET

State 346:
## Known stack suffix:
## AREF
## LR(1) items:
op -> AREF . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> AREF

State 347:
## Known stack suffix:
## AMPER2
## LR(1) items:
op -> AMPER2 . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> AMPER2

State 348:
## Known stack suffix:
## SYMBEG xstring_contents
## LR(1) items:
dsym -> SYMBEG xstring_contents . STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
xstring_contents -> xstring_contents . string_content [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
-- On STRING_END shift to state 349
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On string_content shift to state 107
## Reductions:

State 349:
## Known stack suffix:
## SYMBEG xstring_contents STRING_END
## LR(1) items:
dsym -> SYMBEG xstring_contents STRING_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dsym -> SYMBEG xstring_contents STRING_END

State 350:
## Known stack suffix:
## SYMBEG sym
## LR(1) items:
symbol -> SYMBEG sym . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symbol -> SYMBEG sym

State 351:
## Known stack suffix:
## reswords
## LR(1) items:
fname -> reswords . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> reswords

State 352:
## Known stack suffix:
## op
## LR(1) items:
fname -> op . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fname -> op

State 353:
## Known stack suffix:
## fname
## LR(1) items:
sym -> fname . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sym -> fname

State 354:
## Known stack suffix:
## STRING_BEG
## LR(1) items:
string1 -> STRING_BEG . string_contents STRING_END [ error STRING_BEG STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On string_contents shift to state 355
-- On none shift to state 117
## Default reduction:
-- After reading the next token, reduce production none ->

State 355:
## Known stack suffix:
## STRING_BEG string_contents
## LR(1) items:
string1 -> STRING_BEG string_contents . STRING_END [ error STRING_BEG STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
string_contents -> string_contents . string_content [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT ]
## Transitions:
-- On STRING_END shift to state 356
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On string_content shift to state 116
## Reductions:

State 356:
## Known stack suffix:
## STRING_BEG string_contents STRING_END
## LR(1) items:
string1 -> STRING_BEG string_contents STRING_END . [ error STRING_BEG STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string1 -> STRING_BEG string_contents STRING_END

State 357:
## Known stack suffix:
## REGEXP_BEG
## LR(1) items:
regexp -> REGEXP_BEG . xstring_contents REGEXP_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On xstring_contents shift to state 358
-- On none shift to state 111
## Default reduction:
-- After reading the next token, reduce production none ->

State 358:
## Known stack suffix:
## REGEXP_BEG xstring_contents
## LR(1) items:
regexp -> REGEXP_BEG xstring_contents . REGEXP_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
xstring_contents -> xstring_contents . string_content [ STRING_DVAR STRING_DBEG STRING_CONTENT REGEXP_END ]
## Transitions:
-- On STRING_DVAR shift to state 6
-- On STRING_DBEG shift to state 12
-- On STRING_CONTENT shift to state 19
-- On REGEXP_END shift to state 359
-- On string_content shift to state 107
## Reductions:

State 359:
## Known stack suffix:
## REGEXP_BEG xstring_contents REGEXP_END
## LR(1) items:
regexp -> REGEXP_BEG xstring_contents REGEXP_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regexp -> REGEXP_BEG xstring_contents REGEXP_END

State 360:
## Known stack suffix:
## QWORDS_BEG
## LR(1) items:
awords -> QWORDS_BEG . SPACE STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
awords -> QWORDS_BEG . qword_list STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On SPACE shift to state 361
-- On qword_list shift to state 363
-- On none shift to state 128
## Reductions:
-- On STRING_END STRING_CONTENT
--   reduce production none ->

State 361:
## Known stack suffix:
## QWORDS_BEG SPACE
## LR(1) items:
awords -> QWORDS_BEG SPACE . STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STRING_END shift to state 362
## Reductions:

State 362:
## Known stack suffix:
## QWORDS_BEG SPACE STRING_END
## LR(1) items:
awords -> QWORDS_BEG SPACE STRING_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production awords -> QWORDS_BEG SPACE STRING_END

State 363:
## Known stack suffix:
## QWORDS_BEG qword_list
## LR(1) items:
awords -> QWORDS_BEG qword_list . STRING_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
qword_list -> qword_list . STRING_CONTENT SPACE [ STRING_END STRING_CONTENT ]
## Transitions:
-- On STRING_END shift to state 364
-- On STRING_CONTENT shift to state 126
## Reductions:

State 364:
## Known stack suffix:
## QWORDS_BEG qword_list STRING_END
## LR(1) items:
awords -> QWORDS_BEG qword_list STRING_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production awords -> QWORDS_BEG qword_list STRING_END

State 365:
## Known stack suffix:
## LPAREN_ARG
## LR(1) items:
primary -> LPAREN_ARG . expr primary_e1 opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 1221
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 366:
## Known stack suffix:
## BANG
## LR(1) items:
arg -> BANG . arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
expr -> BANG . command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command_call shift to state 432
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 1286
## Reductions:

State 367:
## Known stack suffix:
## numeric
## LR(1) items:
literal -> numeric . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> numeric

State 368:
## Known stack suffix:
## method_call
## LR(1) items:
primary -> method_call . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> method_call . brace_block [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LCURLY shift to state 243
-- On K_DO shift to state 255
-- On brace_block shift to state 369
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> method_call

State 369:
## Known stack suffix:
## method_call brace_block
## LR(1) items:
primary -> method_call brace_block . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> method_call brace_block

State 370:
## Known stack suffix:
## literal
## LR(1) items:
primary -> literal . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> literal

State 371:
## Known stack suffix:
## lhs
## LR(1) items:
arg -> lhs . EQL arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> lhs . EQL arg K_RESCUE_MOD arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On EQL shift to state 372
## Reductions:

State 372:
## Known stack suffix:
## lhs EQL
## LR(1) items:
arg -> lhs EQL . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> lhs EQL . arg K_RESCUE_MOD arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 375
## Reductions:

State 373:
## Known stack suffix:
## dsym
## LR(1) items:
literal -> dsym . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> dsym

State 374:
## Known stack suffix:
## awords
## LR(1) items:
primary -> awords . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> awords

State 375:
## Known stack suffix:
## lhs EQL arg
## LR(1) items:
arg -> lhs EQL arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> lhs EQL arg . K_RESCUE_MOD arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On K_RESCUE_MOD shift to state 422
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> lhs EQL arg

State 376:
## Known stack suffix:
## arg STAR2
## LR(1) items:
arg -> arg STAR2 . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## arg STAR2 arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg STAR2 arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On POW shift to state 378
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg STAR2 arg

State 378:
## Known stack suffix:
## arg POW
## LR(1) items:
arg -> arg POW . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## arg POW arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg POW arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On POW shift to state 378
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg POW arg

State 380:
## Known stack suffix:
## arg RSHFT
## LR(1) items:
arg -> arg RSHFT . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## arg RSHFT arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg RSHFT arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On DIVIDE shift to state 386
## Reductions:
-- On SEMI RSHFT RPAREN RCURLY RBRACK PIPE OROP NMATCH NL NEQ MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg RSHFT arg

State 382:
## Known stack suffix:
## arg PLUS
## LR(1) items:
arg -> arg PLUS . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## arg PLUS arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg PLUS arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On POW shift to state 378
-- On PERCENT shift to state 384
-- On DIVIDE shift to state 386
## Reductions:
-- On SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg PLUS arg

State 384:
## Known stack suffix:
## arg PERCENT
## LR(1) items:
arg -> arg PERCENT . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 385
## Reductions:

State 385:
## Known stack suffix:
## arg PERCENT arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg PERCENT arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On POW shift to state 378
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg PERCENT arg

State 386:
## Known stack suffix:
## arg DIVIDE
## LR(1) items:
arg -> arg DIVIDE . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## arg DIVIDE arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg DIVIDE arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On POW shift to state 378
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg DIVIDE arg

State 388:
## Known stack suffix:
## arg MINUS
## LR(1) items:
arg -> arg MINUS . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## arg MINUS arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg MINUS arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On POW shift to state 378
-- On PERCENT shift to state 384
-- On DIVIDE shift to state 386
## Reductions:
-- On SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg MINUS arg

State 390:
## Known stack suffix:
## arg PIPE
## LR(1) items:
arg -> arg PIPE . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 391
## Reductions:

State 391:
## Known stack suffix:
## arg PIPE arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg PIPE arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LSHFT shift to state 392
-- On DIVIDE shift to state 386
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK PIPE OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP CARET ASSOC ANDOP
--   reduce production arg -> arg PIPE arg

State 392:
## Known stack suffix:
## arg LSHFT
## LR(1) items:
arg -> arg LSHFT . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## arg LSHFT arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg LSHFT arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On DIVIDE shift to state 386
## Reductions:
-- On SEMI RSHFT RPAREN RCURLY RBRACK PIPE OROP NMATCH NL NEQ MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg LSHFT arg

State 394:
## Known stack suffix:
## arg AMPER2
## LR(1) items:
arg -> arg AMPER2 . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 395
## Reductions:

State 395:
## Known stack suffix:
## arg AMPER2 arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg AMPER2 arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LSHFT shift to state 392
-- On DIVIDE shift to state 386
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK PIPE OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg AMPER2 arg

State 396:
## Known stack suffix:
## arg OROP
## LR(1) items:
arg -> arg OROP . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## arg OROP arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg OROP arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA COLON ASSOC
--   reduce production arg -> arg OROP arg

State 398:
## Known stack suffix:
## arg NMATCH
## LR(1) items:
arg -> arg NMATCH . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 399
## Reductions:

State 399:
## Known stack suffix:
## arg NMATCH arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg NMATCH arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA COLON ASSOC ANDOP
--   reduce production arg -> arg NMATCH arg

State 400:
## Known stack suffix:
## arg LT
## LR(1) items:
arg -> arg LT . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 401
## Reductions:

State 401:
## Known stack suffix:
## arg LT arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg LT arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LSHFT shift to state 392
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP ASSOC ANDOP
--   reduce production arg -> arg LT arg

State 402:
## Known stack suffix:
## arg CARET
## LR(1) items:
arg -> arg CARET . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## arg CARET arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg CARET arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LSHFT shift to state 392
-- On DIVIDE shift to state 386
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK PIPE OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP CARET ASSOC ANDOP
--   reduce production arg -> arg CARET arg

State 404:
## Known stack suffix:
## arg LEQ
## LR(1) items:
arg -> arg LEQ . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 405
## Reductions:

State 405:
## Known stack suffix:
## arg LEQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg LEQ arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LSHFT shift to state 392
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP ASSOC ANDOP
--   reduce production arg -> arg LEQ arg

State 406:
## Known stack suffix:
## arg GT
## LR(1) items:
arg -> arg GT . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 407
## Reductions:

State 407:
## Known stack suffix:
## arg GT arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg GT arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LSHFT shift to state 392
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP ASSOC ANDOP
--   reduce production arg -> arg GT arg

State 408:
## Known stack suffix:
## arg GEQ
## LR(1) items:
arg -> arg GEQ . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 409
## Reductions:

State 409:
## Known stack suffix:
## arg GEQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg GEQ arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LSHFT shift to state 392
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA COLON CMP ASSOC ANDOP
--   reduce production arg -> arg GEQ arg

State 410:
## Known stack suffix:
## arg NEQ
## LR(1) items:
arg -> arg NEQ . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 411
## Reductions:

State 411:
## Known stack suffix:
## arg NEQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg NEQ arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA COLON ASSOC ANDOP
--   reduce production arg -> arg NEQ arg

State 412:
## Known stack suffix:
## arg MATCH
## LR(1) items:
arg -> arg MATCH . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## arg MATCH arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg MATCH arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA COLON ASSOC ANDOP
--   reduce production arg -> arg MATCH arg

State 414:
## Known stack suffix:
## arg EQQ
## LR(1) items:
arg -> arg EQQ . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 415
## Reductions:

State 415:
## Known stack suffix:
## arg EQQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg EQQ arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA COLON ASSOC ANDOP
--   reduce production arg -> arg EQQ arg

State 416:
## Known stack suffix:
## arg EQ
## LR(1) items:
arg -> arg EQ . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 417
## Reductions:

State 417:
## Known stack suffix:
## arg EQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg EQ arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA COLON ASSOC ANDOP
--   reduce production arg -> arg EQ arg

State 418:
## Known stack suffix:
## arg CMP
## LR(1) items:
arg -> arg CMP . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 419
## Reductions:

State 419:
## Known stack suffix:
## arg CMP arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg CMP arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On MINUS shift to state 388
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On DIVIDE shift to state 386
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA COLON ASSOC ANDOP
--   reduce production arg -> arg CMP arg

State 420:
## Known stack suffix:
## arg ANDOP
## LR(1) items:
arg -> arg ANDOP . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 421
## Reductions:

State 421:
## Known stack suffix:
## arg ANDOP arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg ANDOP arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK OROP NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA COLON ASSOC ANDOP
--   reduce production arg -> arg ANDOP arg

State 422:
## Known stack suffix:
## lhs EQL arg K_RESCUE_MOD
## LR(1) items:
arg -> lhs EQL arg K_RESCUE_MOD . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## lhs EQL arg K_RESCUE_MOD arg
## LR(1) items:
arg -> lhs EQL arg K_RESCUE_MOD arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> lhs EQL arg K_RESCUE_MOD arg

State 424:
## Known stack suffix:
## arg EH
## LR(1) items:
arg -> arg EH . arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 425
## Reductions:

State 425:
## Known stack suffix:
## arg EH arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . PLUS arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . MINUS arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . POW arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . PIPE arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . CARET arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . CMP arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . GT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . GEQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . LT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . LEQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . EQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . EQQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . NEQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . MATCH arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . OROP arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg EH arg . COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On COLON shift to state 430
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:

State 426:
## Known stack suffix:
## arg DOT3
## LR(1) items:
arg -> arg DOT3 . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 427
## Reductions:

State 427:
## Known stack suffix:
## arg DOT3 arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg DOT3 arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH COMMENT COMMA COLON ASSOC
--   reduce production arg -> arg DOT3 arg

State 428:
## Known stack suffix:
## arg DOT2
## LR(1) items:
arg -> arg DOT2 . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 429
## Reductions:

State 429:
## Known stack suffix:
## arg DOT2 arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg DOT2 arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND EH COMMENT COMMA COLON ASSOC
--   reduce production arg -> arg DOT2 arg

State 430:
## Known stack suffix:
## arg EH arg COLON
## LR(1) items:
arg -> arg EH arg COLON . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 431
## Reductions:

State 431:
## Known stack suffix:
## arg EH arg COLON arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg EH arg COLON arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> arg EH arg COLON arg

State 432:
## Known stack suffix:
## BANG command_call
## LR(1) items:
expr -> BANG command_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> BANG command_call

State 433:
## Known stack suffix:
## command
## LR(1) items:
block_call -> command . do_block [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
command_call -> command . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On K_DO_BLOCK shift to state 434
-- On do_block shift to state 679
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON
--   reduce production command_call -> command

State 434:
## Known stack suffix:
## K_DO_BLOCK
## LR(1) items:
do_block -> K_DO_BLOCK . do_block_e1 opt_block_var compstmt K_END_error [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
## Transitions:
-- On do_block_e1 shift to state 435
## Default reduction:
-- After reading the next token, reduce production do_block_e1 ->

State 435:
## Known stack suffix:
## K_DO_BLOCK do_block_e1
## LR(1) items:
do_block -> K_DO_BLOCK do_block_e1 . opt_block_var compstmt K_END_error [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
## Transitions:
-- On PIPE shift to state 245
-- On OROP shift to state 257
-- On opt_block_var shift to state 436
-- On none shift to state 1189
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production none ->

State 436:
## Known stack suffix:
## K_DO_BLOCK do_block_e1 opt_block_var
## LR(1) items:
do_block -> K_DO_BLOCK do_block_e1 opt_block_var . compstmt K_END_error [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
## Transitions:
-- On error shift to state 259
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmts shift to state 1113
-- On stmt shift to state 1183
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On none shift to state 1184
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On compstmt shift to state 1282
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 437:
## Known stack suffix:
## LPAREN
## LR(1) items:
mlhs -> LPAREN . mlhs_entry RPAREN [ EQL ]
mlhs_item -> LPAREN . mlhs_entry RPAREN [ COMMA ]
primary -> LPAREN . compstmt RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 168
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_entry shift to state 1280
-- On mlhs_basic shift to state 569
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 637
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production none ->

State 438:
## Known stack suffix:
## variable
## LR(1) items:
lhs -> variable . [ EQL ]
mlhs_node -> variable . [ COMMA ]
var_lhs -> variable . [ OP_ASGN ]
var_ref -> variable . [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
## Transitions:
## Reductions:
-- On EQL
--   reduce production lhs -> variable
-- On COMMA
--   reduce production mlhs_node -> variable
-- On OP_ASGN
--   reduce production var_lhs -> variable
-- On STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production var_ref -> variable

State 439:
## Known stack suffix:
## var_lhs
## LR(1) items:
arg -> var_lhs . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
stmt -> var_lhs . OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On OP_ASGN shift to state 440
## Reductions:

State 440:
## Known stack suffix:
## var_lhs OP_ASGN
## LR(1) items:
arg -> var_lhs OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
stmt -> var_lhs OP_ASGN . command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command_call shift to state 441
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 458
## Reductions:

State 441:
## Known stack suffix:
## var_lhs OP_ASGN command_call
## LR(1) items:
stmt -> var_lhs OP_ASGN command_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> var_lhs OP_ASGN command_call

State 442:
## Known stack suffix:
## block_command
## LR(1) items:
command_call -> block_command . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_call -> block_command

State 443:
## Known stack suffix:
## block_call
## LR(1) items:
block_call -> block_call . DOT operation2 opt_paren_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
block_call -> block_call . COLON2 operation2 opt_paren_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
block_command -> block_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
block_command -> block_call . DOT operation2 command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
block_command -> block_call . COLON2 operation2 command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On DOT shift to state 444
-- On COLON2 shift to state 454
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON
--   reduce production block_command -> block_call

State 444:
## Known stack suffix:
## block_call DOT
## LR(1) items:
block_call -> block_call DOT . operation2 opt_paren_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
block_command -> block_call DOT . operation2 command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 445
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 447
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 448
-- On op shift to state 453
## Reductions:

State 445:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
operation2 -> IDENTIFIER . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI RPAREN REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR FLOAT FID DOT CVAR CONSTANT COMMENT COLON3 COLON2 COLON BANG AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operation2 -> IDENTIFIER

State 446:
## Known stack suffix:
## FID
## LR(1) items:
operation2 -> FID . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG ASSOC ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operation2 -> FID

State 447:
## Known stack suffix:
## CONSTANT
## LR(1) items:
operation2 -> CONSTANT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI RPAREN REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR FLOAT FID DOT CVAR CONSTANT COMMENT COLON3 COLON2 COLON BANG AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operation2 -> CONSTANT

State 448:
## Known stack suffix:
## block_call DOT operation2
## LR(1) items:
block_call -> block_call DOT operation2 . opt_paren_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
block_command -> block_call DOT operation2 . command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 449
-- On opt_paren_args shift to state 450
-- On none shift to state 451
-- On command_args_e1 shift to state 146
-- On command_args shift to state 452
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON
--   reduce production none ->

State 449:
## Known stack suffix:
## paren_args
## LR(1) items:
opt_paren_args -> paren_args . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_paren_args -> paren_args

State 450:
## Known stack suffix:
## block_call DOT operation2 opt_paren_args
## LR(1) items:
block_call -> block_call DOT operation2 opt_paren_args . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_call -> block_call DOT operation2 opt_paren_args

State 451:
## Known stack suffix:
## none
## LR(1) items:
opt_paren_args -> none . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_paren_args -> none

State 452:
## Known stack suffix:
## block_call DOT operation2 command_args
## LR(1) items:
block_command -> block_call DOT operation2 command_args . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_command -> block_call DOT operation2 command_args

State 453:
## Known stack suffix:
## op
## LR(1) items:
operation2 -> op . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG ASSOC ANDOP AMPER2 AMPER # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operation2 -> op

State 454:
## Known stack suffix:
## block_call COLON2
## LR(1) items:
block_call -> block_call COLON2 . operation2 opt_paren_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
block_command -> block_call COLON2 . operation2 command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 445
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 447
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 455
-- On op shift to state 453
## Reductions:

State 455:
## Known stack suffix:
## block_call COLON2 operation2
## LR(1) items:
block_call -> block_call COLON2 operation2 . opt_paren_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
block_command -> block_call COLON2 operation2 . command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 449
-- On opt_paren_args shift to state 456
-- On none shift to state 451
-- On command_args_e1 shift to state 146
-- On command_args shift to state 457
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON
--   reduce production none ->

State 456:
## Known stack suffix:
## block_call COLON2 operation2 opt_paren_args
## LR(1) items:
block_call -> block_call COLON2 operation2 opt_paren_args . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_call -> block_call COLON2 operation2 opt_paren_args

State 457:
## Known stack suffix:
## block_call COLON2 operation2 command_args
## LR(1) items:
block_command -> block_call COLON2 operation2 command_args . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_command -> block_call COLON2 operation2 command_args

State 458:
## Known stack suffix:
## var_lhs OP_ASGN arg
## LR(1) items:
arg -> var_lhs OP_ASGN arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> var_lhs OP_ASGN arg

State 459:
## Known stack suffix:
## stmts
## LR(1) items:
compstmt -> stmts . opt_terms [ RPAREN RCURLY K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE ]
stmts -> stmts . terms stmt [ SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT ]
## Transitions:
-- On SEMI shift to state 198
-- On NL shift to state 199
-- On COMMENT shift to state 460
-- On terms shift to state 461
-- On term shift to state 879
-- On opt_terms shift to state 1279
## Reductions:
-- On RPAREN RCURLY K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE
--   reduce production opt_terms ->

State 460:
## Known stack suffix:
## COMMENT
## LR(1) items:
term -> COMMENT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI RPAREN REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> COMMENT

State 461:
## Known stack suffix:
## stmts terms
## LR(1) items:
opt_terms -> terms . [ RPAREN RCURLY K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE ]
stmts -> stmts terms . stmt [ SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmt shift to state 462
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On RPAREN RCURLY K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE
--   reduce production opt_terms -> terms

State 462:
## Known stack suffix:
## stmts terms stmt
## LR(1) items:
stmt -> stmt . K_IF_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_UNLESS_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_WHILE_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_UNTIL_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_RESCUE_MOD stmt [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmts -> stmts terms stmt . [ SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On K_WHILE_MOD shift to state 463
-- On K_UNTIL_MOD shift to state 472
-- On K_UNLESS_MOD shift to state 474
-- On K_RESCUE_MOD shift to state 476
-- On K_IF_MOD shift to state 537
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT
--   reduce production stmts -> stmts terms stmt

State 463:
## Known stack suffix:
## stmt K_WHILE_MOD
## LR(1) items:
stmt -> stmt K_WHILE_MOD . expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 464
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 464:
## Known stack suffix:
## stmt K_WHILE_MOD expr_value
## LR(1) items:
stmt -> stmt K_WHILE_MOD expr_value . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_WHILE_MOD expr_value

State 465:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . K_AND expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
expr -> expr . K_OR expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
expr_value -> expr . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND COMMENT COLON # ]
## Transitions:
-- On K_OR shift to state 466
-- On K_AND shift to state 470
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND COMMENT COLON
--   reduce production expr_value -> expr

State 466:
## Known stack suffix:
## expr K_OR
## LR(1) items:
expr -> expr K_OR . expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 467
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 467:
## Known stack suffix:
## expr K_OR expr
## LR(1) items:
expr -> expr . K_AND expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
expr -> expr . K_OR expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
expr -> expr K_OR expr . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr K_OR expr

State 468:
## Known stack suffix:
## command_call
## LR(1) items:
expr -> command_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> command_call

State 469:
## Known stack suffix:
## arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COLON CMP CARET ANDOP AMPER2 # ]
expr -> arg . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON
--   reduce production expr -> arg

State 470:
## Known stack suffix:
## expr K_AND
## LR(1) items:
expr -> expr K_AND . expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 471
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 471:
## Known stack suffix:
## expr K_AND expr
## LR(1) items:
expr -> expr . K_AND expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
expr -> expr K_AND expr . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
expr -> expr . K_OR expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr K_AND expr

State 472:
## Known stack suffix:
## stmt K_UNTIL_MOD
## LR(1) items:
stmt -> stmt K_UNTIL_MOD . expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 473
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 473:
## Known stack suffix:
## stmt K_UNTIL_MOD expr_value
## LR(1) items:
stmt -> stmt K_UNTIL_MOD expr_value . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_UNTIL_MOD expr_value

State 474:
## Known stack suffix:
## stmt K_UNLESS_MOD
## LR(1) items:
stmt -> stmt K_UNLESS_MOD . expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 475
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 475:
## Known stack suffix:
## stmt K_UNLESS_MOD expr_value
## LR(1) items:
stmt -> stmt K_UNLESS_MOD expr_value . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_UNLESS_MOD expr_value

State 476:
## Known stack suffix:
## stmt K_RESCUE_MOD
## LR(1) items:
stmt -> stmt K_RESCUE_MOD . stmt [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmt shift to state 477
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 477:
## Known stack suffix:
## stmt K_RESCUE_MOD stmt
## LR(1) items:
stmt -> stmt . K_IF_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_UNLESS_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_WHILE_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_UNTIL_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_RESCUE_MOD stmt [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt K_RESCUE_MOD stmt . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_RESCUE_MOD stmt

State 478:
## Known stack suffix:
## primary_value
## LR(1) items:
arg -> primary_value . LB aref_args RBRACK OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> primary_value . DOT IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> primary_value . DOT CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> primary_value . COLON2 IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> primary_value . COLON2 CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
command -> primary_value . DOT operation2 command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_BLOCK K_AND COMMENT # ]
command -> primary_value . DOT operation2 command_args cmd_brace_block [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_BLOCK K_AND COMMENT # ]
command -> primary_value . COLON2 operation2 command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_BLOCK K_AND COMMENT # ]
command -> primary_value . COLON2 operation2 command_args cmd_brace_block [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_BLOCK K_AND COMMENT # ]
lhs -> primary_value . LB aref_args RBRACK [ EQL ]
lhs -> primary_value . DOT IDENTIFIER [ EQL ]
lhs -> primary_value . COLON2 IDENTIFIER [ EQL ]
lhs -> primary_value . DOT CONSTANT [ EQL ]
lhs -> primary_value . COLON2 CONSTANT [ EQL ]
method_call -> primary_value . DOT operation2 opt_paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
method_call -> primary_value . COLON2 operation2 paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
method_call -> primary_value . COLON2 operation3 [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
mlhs_node -> primary_value . LB aref_args RBRACK [ COMMA ]
mlhs_node -> primary_value . DOT IDENTIFIER [ COMMA ]
mlhs_node -> primary_value . COLON2 IDENTIFIER [ COMMA ]
mlhs_node -> primary_value . DOT CONSTANT [ COMMA ]
mlhs_node -> primary_value . COLON2 CONSTANT [ COMMA ]
primary -> primary_value . COLON2 CONSTANT [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
primary -> primary_value . LB aref_args RBRACK [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value . LB aref_args RBRACK OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> primary_value . DOT IDENTIFIER OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> primary_value . DOT CONSTANT OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> primary_value . COLON2 IDENTIFIER OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On LB shift to state 479
-- On DOT shift to state 507
-- On COLON2 shift to state 1268
## Reductions:

State 479:
## Known stack suffix:
## primary_value LB
## LR(1) items:
arg -> primary_value LB . aref_args RBRACK OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
lhs -> primary_value LB . aref_args RBRACK [ EQL ]
mlhs_node -> primary_value LB . aref_args RBRACK [ COMMA ]
primary -> primary_value LB . aref_args RBRACK [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value LB . aref_args RBRACK OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 502
## Reductions:
-- On RBRACK
--   reduce production none ->

State 480:
## Known stack suffix:
## none
## LR(1) items:
aref_args -> none . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aref_args -> none

State 481:
## Known stack suffix:
## command
## LR(1) items:
aref_args -> command . opt_nl [ RBRACK ]
## Transitions:
-- On NL shift to state 188
-- On COMMENT shift to state 189
-- On opt_nl shift to state 482
## Reductions:
-- On RBRACK
--   reduce production opt_nl ->

State 482:
## Known stack suffix:
## command opt_nl
## LR(1) items:
aref_args -> command opt_nl . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aref_args -> command opt_nl

State 483:
## Known stack suffix:
## assocs
## LR(1) items:
aref_args -> assocs . trailer [ RBRACK ]
assocs -> assocs . COMMA assoc [ RBRACK NL COMMENT COMMA ]
## Transitions:
-- On NL shift to state 484
-- On COMMENT shift to state 485
-- On COMMA shift to state 486
-- On trailer shift to state 492
## Reductions:
-- On RBRACK
--   reduce production trailer ->

State 484:
## Known stack suffix:
## NL
## LR(1) items:
trailer -> NL . [ RCURLY RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production trailer -> NL

State 485:
## Known stack suffix:
## COMMENT
## LR(1) items:
trailer -> COMMENT . [ RCURLY RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production trailer -> COMMENT

State 486:
## Known stack suffix:
## assocs COMMA
## LR(1) items:
assocs -> assocs COMMA . assoc [ RCURLY RBRACK NL COMMENT COMMA ]
trailer -> COMMA . [ RCURLY RBRACK ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On assoc shift to state 487
-- On arg_value shift to state 488
-- On arg shift to state 491
## Reductions:
-- On RCURLY RBRACK
--   reduce production trailer -> COMMA

State 487:
## Known stack suffix:
## assocs COMMA assoc
## LR(1) items:
assocs -> assocs COMMA assoc . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assocs -> assocs COMMA assoc

State 488:
## Known stack suffix:
## arg_value
## LR(1) items:
assoc -> arg_value . ASSOC arg_value [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
## Transitions:
-- On ASSOC shift to state 489
## Reductions:

State 489:
## Known stack suffix:
## arg_value ASSOC
## LR(1) items:
assoc -> arg_value ASSOC . arg_value [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 490
-- On arg shift to state 491
## Reductions:

State 490:
## Known stack suffix:
## arg_value ASSOC arg_value
## LR(1) items:
assoc -> arg_value ASSOC arg_value . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc -> arg_value ASSOC arg_value

State 491:
## Known stack suffix:
## arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg_value -> arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg_value -> arg

State 492:
## Known stack suffix:
## assocs trailer
## LR(1) items:
aref_args -> assocs trailer . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aref_args -> assocs trailer

State 493:
## Known stack suffix:
## assoc
## LR(1) items:
assocs -> assoc . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assocs -> assoc

State 494:
## Known stack suffix:
## args
## LR(1) items:
aref_args -> args . trailer [ RBRACK ]
aref_args -> args . COMMA STAR arg opt_nl [ RBRACK ]
args -> args . COMMA arg_value [ RBRACK NL COMMENT COMMA ]
## Transitions:
-- On NL shift to state 484
-- On COMMENT shift to state 485
-- On COMMA shift to state 495
-- On trailer shift to state 500
## Reductions:
-- On RBRACK
--   reduce production trailer ->

State 495:
## Known stack suffix:
## args COMMA
## LR(1) items:
aref_args -> args COMMA . STAR arg opt_nl [ RBRACK ]
args -> args COMMA . arg_value [ RBRACK NL COMMENT COMMA ]
trailer -> COMMA . [ RBRACK ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 496
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 499
-- On arg shift to state 491
## Reductions:
-- On RBRACK
--   reduce production trailer -> COMMA

State 496:
## Known stack suffix:
## args COMMA STAR
## LR(1) items:
aref_args -> args COMMA STAR . arg opt_nl [ RBRACK ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## args COMMA STAR arg
## LR(1) items:
aref_args -> args COMMA STAR arg . opt_nl [ RBRACK ]
arg -> arg . DOT2 arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . PLUS arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . MINUS arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . POW arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . PIPE arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . CARET arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . CMP arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . GT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . GEQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . LT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . LEQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . EQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . EQQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . NEQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . MATCH arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . OROP arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NL shift to state 188
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On COMMENT shift to state 189
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
-- On opt_nl shift to state 498
## Reductions:
-- On RBRACK
--   reduce production opt_nl ->

State 498:
## Known stack suffix:
## args COMMA STAR arg opt_nl
## LR(1) items:
aref_args -> args COMMA STAR arg opt_nl . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aref_args -> args COMMA STAR arg opt_nl

State 499:
## Known stack suffix:
## args COMMA arg_value
## LR(1) items:
args -> args COMMA arg_value . [ SEMI RCURLY RBRACK NL K_THEN COMMENT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> args COMMA arg_value

State 500:
## Known stack suffix:
## args trailer
## LR(1) items:
aref_args -> args trailer . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aref_args -> args trailer

State 501:
## Known stack suffix:
## arg_value
## LR(1) items:
args -> arg_value . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
assoc -> arg_value . ASSOC arg_value [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
## Transitions:
-- On ASSOC shift to state 489
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON
--   reduce production args -> arg_value

State 502:
## Known stack suffix:
## primary_value LB aref_args
## LR(1) items:
arg -> primary_value LB aref_args . RBRACK OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
lhs -> primary_value LB aref_args . RBRACK [ EQL ]
mlhs_node -> primary_value LB aref_args . RBRACK [ COMMA ]
primary -> primary_value LB aref_args . RBRACK [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value LB aref_args . RBRACK OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On RBRACK shift to state 503
## Reductions:

State 503:
## Known stack suffix:
## primary_value LB aref_args RBRACK
## LR(1) items:
arg -> primary_value LB aref_args RBRACK . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
lhs -> primary_value LB aref_args RBRACK . [ EQL ]
mlhs_node -> primary_value LB aref_args RBRACK . [ COMMA ]
primary -> primary_value LB aref_args RBRACK . [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value LB aref_args RBRACK . OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On OP_ASGN shift to state 504
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value LB aref_args RBRACK
-- On COMMA
--   reduce production mlhs_node -> primary_value LB aref_args RBRACK
-- On STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production primary -> primary_value LB aref_args RBRACK

State 504:
## Known stack suffix:
## primary_value LB aref_args RBRACK OP_ASGN
## LR(1) items:
arg -> primary_value LB aref_args RBRACK OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value LB aref_args RBRACK OP_ASGN . command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command_call shift to state 505
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 506
## Reductions:

State 505:
## Known stack suffix:
## primary_value LB aref_args RBRACK OP_ASGN command_call
## LR(1) items:
stmt -> primary_value LB aref_args RBRACK OP_ASGN command_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> primary_value LB aref_args RBRACK OP_ASGN command_call

State 506:
## Known stack suffix:
## primary_value LB aref_args RBRACK OP_ASGN arg
## LR(1) items:
arg -> primary_value LB aref_args RBRACK OP_ASGN arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> primary_value LB aref_args RBRACK OP_ASGN arg

State 507:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
arg -> primary_value DOT . IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> primary_value DOT . CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
command -> primary_value DOT . operation2 command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_BLOCK K_AND COMMENT # ]
command -> primary_value DOT . operation2 command_args cmd_brace_block [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_BLOCK K_AND COMMENT # ]
lhs -> primary_value DOT . IDENTIFIER [ EQL ]
lhs -> primary_value DOT . CONSTANT [ EQL ]
method_call -> primary_value DOT . operation2 opt_paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
mlhs_node -> primary_value DOT . IDENTIFIER [ COMMA ]
mlhs_node -> primary_value DOT . CONSTANT [ COMMA ]
stmt -> primary_value DOT . IDENTIFIER OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> primary_value DOT . CONSTANT OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 508
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 512
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 516
-- On op shift to state 453
## Reductions:

State 508:
## Known stack suffix:
## primary_value DOT IDENTIFIER
## LR(1) items:
arg -> primary_value DOT IDENTIFIER . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
lhs -> primary_value DOT IDENTIFIER . [ EQL ]
mlhs_node -> primary_value DOT IDENTIFIER . [ COMMA ]
operation2 -> IDENTIFIER . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COLON3 COLON2 CMP CARET BANG ANDOP AMPER2 AMPER # ]
stmt -> primary_value DOT IDENTIFIER . OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On OP_ASGN shift to state 509
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value DOT IDENTIFIER
-- On COMMA
--   reduce production mlhs_node -> primary_value DOT IDENTIFIER
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COLON3 COLON2 CMP CARET BANG ANDOP AMPER2 AMPER
--   reduce production operation2 -> IDENTIFIER

State 509:
## Known stack suffix:
## primary_value DOT IDENTIFIER OP_ASGN
## LR(1) items:
arg -> primary_value DOT IDENTIFIER OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value DOT IDENTIFIER OP_ASGN . command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command_call shift to state 510
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 511
## Reductions:

State 510:
## Known stack suffix:
## primary_value DOT IDENTIFIER OP_ASGN command_call
## LR(1) items:
stmt -> primary_value DOT IDENTIFIER OP_ASGN command_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> primary_value DOT IDENTIFIER OP_ASGN command_call

State 511:
## Known stack suffix:
## primary_value DOT IDENTIFIER OP_ASGN arg
## LR(1) items:
arg -> primary_value DOT IDENTIFIER OP_ASGN arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> primary_value DOT IDENTIFIER OP_ASGN arg

State 512:
## Known stack suffix:
## primary_value DOT CONSTANT
## LR(1) items:
arg -> primary_value DOT CONSTANT . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
lhs -> primary_value DOT CONSTANT . [ EQL ]
mlhs_node -> primary_value DOT CONSTANT . [ COMMA ]
operation2 -> CONSTANT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COLON3 COLON2 CMP CARET BANG ANDOP AMPER2 AMPER # ]
stmt -> primary_value DOT CONSTANT . OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On OP_ASGN shift to state 513
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value DOT CONSTANT
-- On COMMA
--   reduce production mlhs_node -> primary_value DOT CONSTANT
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COLON3 COLON2 CMP CARET BANG ANDOP AMPER2 AMPER
--   reduce production operation2 -> CONSTANT

State 513:
## Known stack suffix:
## primary_value DOT CONSTANT OP_ASGN
## LR(1) items:
arg -> primary_value DOT CONSTANT OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value DOT CONSTANT OP_ASGN . command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command_call shift to state 514
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 515
## Reductions:

State 514:
## Known stack suffix:
## primary_value DOT CONSTANT OP_ASGN command_call
## LR(1) items:
stmt -> primary_value DOT CONSTANT OP_ASGN command_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> primary_value DOT CONSTANT OP_ASGN command_call

State 515:
## Known stack suffix:
## primary_value DOT CONSTANT OP_ASGN arg
## LR(1) items:
arg -> primary_value DOT CONSTANT OP_ASGN arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> primary_value DOT CONSTANT OP_ASGN arg

State 516:
## Known stack suffix:
## primary_value DOT operation2
## LR(1) items:
command -> primary_value DOT operation2 . command_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> primary_value DOT operation2 . command_args cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
method_call -> primary_value DOT operation2 . opt_paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 449
-- On opt_paren_args shift to state 517
-- On none shift to state 451
-- On command_args_e1 shift to state 146
-- On command_args shift to state 518
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production none ->

State 517:
## Known stack suffix:
## primary_value DOT operation2 opt_paren_args
## LR(1) items:
method_call -> primary_value DOT operation2 opt_paren_args . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> primary_value DOT operation2 opt_paren_args

State 518:
## Known stack suffix:
## primary_value DOT operation2 command_args
## LR(1) items:
command -> primary_value DOT operation2 command_args . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> primary_value DOT operation2 command_args . cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On LBRACE_ARG shift to state 519
-- On cmd_brace_block shift to state 1267
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production command -> primary_value DOT operation2 command_args

State 519:
## Known stack suffix:
## LBRACE_ARG
## LR(1) items:
cmd_brace_block -> LBRACE_ARG . cmd_brace_block_e1 opt_block_var compstmt RCURLY_error [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On cmd_brace_block_e1 shift to state 520
## Default reduction:
-- After reading the next token, reduce production cmd_brace_block_e1 ->

State 520:
## Known stack suffix:
## LBRACE_ARG cmd_brace_block_e1
## LR(1) items:
cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 . opt_block_var compstmt RCURLY_error [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On PIPE shift to state 245
-- On OROP shift to state 257
-- On opt_block_var shift to state 521
-- On none shift to state 1189
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production none ->

State 521:
## Known stack suffix:
## LBRACE_ARG cmd_brace_block_e1 opt_block_var
## LR(1) items:
cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 opt_block_var . compstmt RCURLY_error [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On error shift to state 259
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmts shift to state 1113
-- On stmt shift to state 1183
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On none shift to state 1184
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On compstmt shift to state 1263
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:
-- On SEMI RCURLY NL COMMENT
--   reduce production none ->

State 522:
## Known stack suffix:
## LBRACK
## LR(1) items:
primary -> LBRACK . aref_args RBRACK [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 523
## Reductions:
-- On RBRACK
--   reduce production none ->

State 523:
## Known stack suffix:
## LBRACK aref_args
## LR(1) items:
primary -> LBRACK aref_args . RBRACK [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RBRACK shift to state 524
## Reductions:

State 524:
## Known stack suffix:
## LBRACK aref_args RBRACK
## LR(1) items:
primary -> LBRACK aref_args RBRACK . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> LBRACK aref_args RBRACK

State 525:
## Known stack suffix:
## LBRACE
## LR(1) items:
primary -> LBRACE . assoc_list RCURLY [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On none shift to state 526
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On assocs shift to state 527
-- On assoc_list shift to state 529
-- On assoc shift to state 493
-- On args shift to state 531
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:
-- On RCURLY
--   reduce production none ->

State 526:
## Known stack suffix:
## none
## LR(1) items:
assoc_list -> none . [ RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc_list -> none

State 527:
## Known stack suffix:
## assocs
## LR(1) items:
assoc_list -> assocs . trailer [ RCURLY ]
assocs -> assocs . COMMA assoc [ RCURLY NL COMMENT COMMA ]
## Transitions:
-- On NL shift to state 484
-- On COMMENT shift to state 485
-- On COMMA shift to state 486
-- On trailer shift to state 528
## Reductions:
-- On RCURLY
--   reduce production trailer ->

State 528:
## Known stack suffix:
## assocs trailer
## LR(1) items:
assoc_list -> assocs trailer . [ RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc_list -> assocs trailer

State 529:
## Known stack suffix:
## LBRACE assoc_list
## LR(1) items:
primary -> LBRACE assoc_list . RCURLY [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RCURLY shift to state 530
## Reductions:

State 530:
## Known stack suffix:
## LBRACE assoc_list RCURLY
## LR(1) items:
primary -> LBRACE assoc_list RCURLY . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> LBRACE assoc_list RCURLY

State 531:
## Known stack suffix:
## args
## LR(1) items:
args -> args . COMMA arg_value [ RCURLY NL COMMENT COMMA ]
assoc_list -> args . trailer [ RCURLY ]
## Transitions:
-- On NL shift to state 484
-- On COMMENT shift to state 485
-- On COMMA shift to state 532
-- On trailer shift to state 533
## Reductions:
-- On RCURLY
--   reduce production trailer ->

State 532:
## Known stack suffix:
## args COMMA
## LR(1) items:
args -> args COMMA . arg_value [ RCURLY NL COMMENT COMMA ]
trailer -> COMMA . [ RCURLY ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 499
-- On arg shift to state 491
## Reductions:
-- On RCURLY
--   reduce production trailer -> COMMA

State 533:
## Known stack suffix:
## args trailer
## LR(1) items:
assoc_list -> args trailer . [ RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc_list -> args trailer

State 534:
## Known stack suffix:
## K_lEND
## LR(1) items:
stmt -> K_lEND . LCURLY compstmt RCURLY [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On LCURLY shift to state 535
## Reductions:

State 535:
## Known stack suffix:
## K_lEND LCURLY
## LR(1) items:
stmt -> K_lEND LCURLY . compstmt RCURLY [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 594
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RCURLY NL COMMENT
--   reduce production none ->

State 536:
## Known stack suffix:
## stmt
## LR(1) items:
stmt -> stmt . K_IF_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_UNLESS_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_WHILE_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_UNTIL_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_RESCUE_MOD stmt [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmts -> stmt . [ SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On K_WHILE_MOD shift to state 463
-- On K_UNTIL_MOD shift to state 472
-- On K_UNLESS_MOD shift to state 474
-- On K_RESCUE_MOD shift to state 476
-- On K_IF_MOD shift to state 537
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT
--   reduce production stmts -> stmt

State 537:
## Known stack suffix:
## stmt K_IF_MOD
## LR(1) items:
stmt -> stmt K_IF_MOD . expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 538
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 538:
## Known stack suffix:
## stmt K_IF_MOD expr_value
## LR(1) items:
stmt -> stmt K_IF_MOD expr_value . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_IF_MOD expr_value

State 539:
## Known stack suffix:
## none
## LR(1) items:
stmts -> none . [ SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmts -> none

State 540:
## Known stack suffix:
## mlhs_node
## LR(1) items:
mlhs_item -> mlhs_node . [ RPAREN PIPE K_IN EQL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlhs_item -> mlhs_node

State 541:
## Known stack suffix:
## mlhs_item
## LR(1) items:
mlhs_head -> mlhs_item . COMMA [ XSTRING_BEG WORDS_BEG UMINUS_NUM SYMBEG STRING_BEG STAR RPAREN REGEXP_BEG QWORDS_BEG PIPE LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IN K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID EQL CVAR CONSTANT COLON3 ]
## Transitions:
-- On COMMA shift to state 542
## Reductions:

State 542:
## Known stack suffix:
## mlhs_item COMMA
## LR(1) items:
mlhs_head -> mlhs_item COMMA . [ XSTRING_BEG WORDS_BEG UMINUS_NUM SYMBEG STRING_BEG STAR RPAREN REGEXP_BEG QWORDS_BEG PIPE LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IN K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID EQL CVAR CONSTANT COLON3 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlhs_head -> mlhs_item COMMA

State 543:
## Known stack suffix:
## mlhs_head
## LR(1) items:
mlhs_basic -> mlhs_head . [ RPAREN PIPE K_IN EQL ]
mlhs_basic -> mlhs_head . mlhs_item [ RPAREN PIPE K_IN EQL ]
mlhs_basic -> mlhs_head . STAR mlhs_node [ RPAREN PIPE K_IN EQL ]
mlhs_basic -> mlhs_head . STAR [ RPAREN PIPE K_IN EQL ]
mlhs_head -> mlhs_head . mlhs_item COMMA [ XSTRING_BEG WORDS_BEG UMINUS_NUM SYMBEG STRING_BEG STAR RPAREN REGEXP_BEG QWORDS_BEG PIPE LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IN K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID EQL CVAR CONSTANT COLON3 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 544
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 566
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 545
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 547
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 548
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 591
-- On method_call shift to state 368
-- On literal shift to state 370
-- On dsym shift to state 373
-- On awords shift to state 374
## Reductions:
-- On RPAREN PIPE K_IN EQL
--   reduce production mlhs_basic -> mlhs_head

State 544:
## Known stack suffix:
## mlhs_head STAR
## LR(1) items:
mlhs_basic -> mlhs_head STAR . mlhs_node [ RPAREN PIPE K_IN EQL ]
mlhs_basic -> mlhs_head STAR . [ RPAREN PIPE K_IN EQL ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 545
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 547
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 548
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On mlhs_node shift to state 565
-- On method_call shift to state 368
-- On literal shift to state 370
-- On dsym shift to state 373
-- On awords shift to state 374
## Reductions:
-- On RPAREN PIPE K_IN EQL
--   reduce production mlhs_basic -> mlhs_head STAR

State 545:
## Known stack suffix:
## COLON3
## LR(1) items:
mlhs_node -> COLON3 . CONSTANT [ RPAREN PIPE K_IN EQL COMMA ]
primary -> COLON3 . CONSTANT [ LB DOT COLON2 ]
## Transitions:
-- On CONSTANT shift to state 546
## Reductions:

State 546:
## Known stack suffix:
## COLON3 CONSTANT
## LR(1) items:
mlhs_node -> COLON3 CONSTANT . [ RPAREN PIPE K_IN EQL COMMA ]
primary -> COLON3 CONSTANT . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On RPAREN PIPE K_IN EQL COMMA
--   reduce production mlhs_node -> COLON3 CONSTANT
-- On LB DOT COLON2
--   reduce production primary -> COLON3 CONSTANT

State 547:
## Known stack suffix:
## variable
## LR(1) items:
mlhs_node -> variable . [ RPAREN PIPE K_IN EQL COMMA ]
var_ref -> variable . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On RPAREN PIPE K_IN EQL COMMA
--   reduce production mlhs_node -> variable
-- On LB DOT COLON2
--   reduce production var_ref -> variable

State 548:
## Known stack suffix:
## primary_value
## LR(1) items:
method_call -> primary_value . DOT operation2 opt_paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value . COLON2 operation2 paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value . COLON2 operation3 [ LCURLY LB K_DO DOT COLON2 ]
mlhs_node -> primary_value . LB aref_args RBRACK [ RPAREN PIPE K_IN EQL COMMA ]
mlhs_node -> primary_value . DOT IDENTIFIER [ RPAREN PIPE K_IN EQL COMMA ]
mlhs_node -> primary_value . COLON2 IDENTIFIER [ RPAREN PIPE K_IN EQL COMMA ]
mlhs_node -> primary_value . DOT CONSTANT [ RPAREN PIPE K_IN EQL COMMA ]
mlhs_node -> primary_value . COLON2 CONSTANT [ RPAREN PIPE K_IN EQL COMMA ]
primary -> primary_value . COLON2 CONSTANT [ LB DOT COLON2 ]
primary -> primary_value . LB aref_args RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On LB shift to state 549
-- On DOT shift to state 552
-- On COLON2 shift to state 556
## Reductions:

State 549:
## Known stack suffix:
## primary_value LB
## LR(1) items:
mlhs_node -> primary_value LB . aref_args RBRACK [ RPAREN PIPE K_IN EQL COMMA ]
primary -> primary_value LB . aref_args RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 550
## Reductions:
-- On RBRACK
--   reduce production none ->

State 550:
## Known stack suffix:
## primary_value LB aref_args
## LR(1) items:
mlhs_node -> primary_value LB aref_args . RBRACK [ RPAREN PIPE K_IN EQL COMMA ]
primary -> primary_value LB aref_args . RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On RBRACK shift to state 551
## Reductions:

State 551:
## Known stack suffix:
## primary_value LB aref_args RBRACK
## LR(1) items:
mlhs_node -> primary_value LB aref_args RBRACK . [ RPAREN PIPE K_IN EQL COMMA ]
primary -> primary_value LB aref_args RBRACK . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On RPAREN PIPE K_IN EQL COMMA
--   reduce production mlhs_node -> primary_value LB aref_args RBRACK
-- On LB DOT COLON2
--   reduce production primary -> primary_value LB aref_args RBRACK

State 552:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
method_call -> primary_value DOT . operation2 opt_paren_args [ LCURLY LB K_DO DOT COLON2 ]
mlhs_node -> primary_value DOT . IDENTIFIER [ RPAREN PIPE K_IN EQL COMMA ]
mlhs_node -> primary_value DOT . CONSTANT [ RPAREN PIPE K_IN EQL COMMA ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 553
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 554
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 555
-- On op shift to state 453
## Reductions:

State 553:
## Known stack suffix:
## primary_value DOT IDENTIFIER
## LR(1) items:
mlhs_node -> primary_value DOT IDENTIFIER . [ RPAREN PIPE K_IN EQL COMMA ]
operation2 -> IDENTIFIER . [ LPAREN2 LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On RPAREN PIPE K_IN EQL COMMA
--   reduce production mlhs_node -> primary_value DOT IDENTIFIER
-- On LPAREN2 LCURLY LB K_DO DOT COLON2
--   reduce production operation2 -> IDENTIFIER

State 554:
## Known stack suffix:
## primary_value DOT CONSTANT
## LR(1) items:
mlhs_node -> primary_value DOT CONSTANT . [ RPAREN PIPE K_IN EQL COMMA ]
operation2 -> CONSTANT . [ LPAREN2 LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On RPAREN PIPE K_IN EQL COMMA
--   reduce production mlhs_node -> primary_value DOT CONSTANT
-- On LPAREN2 LCURLY LB K_DO DOT COLON2
--   reduce production operation2 -> CONSTANT

State 555:
## Known stack suffix:
## primary_value DOT operation2
## LR(1) items:
method_call -> primary_value DOT operation2 . opt_paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 449
-- On opt_paren_args shift to state 517
-- On none shift to state 451
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production none ->

State 556:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
method_call -> primary_value COLON2 . operation2 paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value COLON2 . operation3 [ LCURLY LB K_DO DOT COLON2 ]
mlhs_node -> primary_value COLON2 . IDENTIFIER [ RPAREN PIPE K_IN EQL COMMA ]
mlhs_node -> primary_value COLON2 . CONSTANT [ RPAREN PIPE K_IN EQL COMMA ]
primary -> primary_value COLON2 . CONSTANT [ LB DOT COLON2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 557
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 558
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 559
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation3 shift to state 560
-- On operation2 shift to state 561
-- On op shift to state 563
## Reductions:

State 557:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER
## LR(1) items:
mlhs_node -> primary_value COLON2 IDENTIFIER . [ RPAREN PIPE K_IN EQL COMMA ]
operation2 -> IDENTIFIER . [ LPAREN2 ]
operation3 -> IDENTIFIER . [ LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On RPAREN PIPE K_IN EQL COMMA
--   reduce production mlhs_node -> primary_value COLON2 IDENTIFIER
-- On LPAREN2
--   reduce production operation2 -> IDENTIFIER
-- On LCURLY LB K_DO DOT COLON2
--   reduce production operation3 -> IDENTIFIER

State 558:
## Known stack suffix:
## FID
## LR(1) items:
operation2 -> FID . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
operation3 -> FID . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> FID
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production operation3 -> FID

State 559:
## Known stack suffix:
## primary_value COLON2 CONSTANT
## LR(1) items:
mlhs_node -> primary_value COLON2 CONSTANT . [ RPAREN PIPE K_IN EQL COMMA ]
operation2 -> CONSTANT . [ LPAREN2 ]
primary -> primary_value COLON2 CONSTANT . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On RPAREN PIPE K_IN EQL COMMA
--   reduce production mlhs_node -> primary_value COLON2 CONSTANT
-- On LPAREN2
--   reduce production operation2 -> CONSTANT
-- On LB DOT COLON2
--   reduce production primary -> primary_value COLON2 CONSTANT

State 560:
## Known stack suffix:
## primary_value COLON2 operation3
## LR(1) items:
method_call -> primary_value COLON2 operation3 . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> primary_value COLON2 operation3

State 561:
## Known stack suffix:
## primary_value COLON2 operation2
## LR(1) items:
method_call -> primary_value COLON2 operation2 . paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 562
## Reductions:

State 562:
## Known stack suffix:
## primary_value COLON2 operation2 paren_args
## LR(1) items:
method_call -> primary_value COLON2 operation2 paren_args . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> primary_value COLON2 operation2 paren_args

State 563:
## Known stack suffix:
## op
## LR(1) items:
operation2 -> op . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
operation3 -> op . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> op
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production operation3 -> op

State 564:
## Known stack suffix:
## primary
## LR(1) items:
primary_value -> primary . [ LB DOT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_value -> primary

State 565:
## Known stack suffix:
## mlhs_head STAR mlhs_node
## LR(1) items:
mlhs_basic -> mlhs_head STAR mlhs_node . [ RPAREN PIPE K_IN EQL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlhs_basic -> mlhs_head STAR mlhs_node

State 566:
## Known stack suffix:
## LPAREN
## LR(1) items:
mlhs_item -> LPAREN . mlhs_entry RPAREN [ RPAREN PIPE K_IN EQL COMMA ]
primary -> LPAREN . compstmt RPAREN [ LB DOT COLON2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 168
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_entry shift to state 567
-- On mlhs_basic shift to state 569
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 589
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production none ->

State 567:
## Known stack suffix:
## LPAREN mlhs_entry
## LR(1) items:
mlhs_item -> LPAREN mlhs_entry . RPAREN [ RPAREN PIPE K_IN EQL COMMA ]
## Transitions:
-- On RPAREN shift to state 568
## Reductions:

State 568:
## Known stack suffix:
## LPAREN mlhs_entry RPAREN
## LR(1) items:
mlhs_item -> LPAREN mlhs_entry RPAREN . [ RPAREN PIPE K_IN EQL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlhs_item -> LPAREN mlhs_entry RPAREN

State 569:
## Known stack suffix:
## mlhs_basic
## LR(1) items:
mlhs -> mlhs_basic . [ EQL ]
mlhs_entry -> mlhs_basic . [ RPAREN ]
## Transitions:
## Reductions:
-- On EQL
--   reduce production mlhs -> mlhs_basic
-- On RPAREN
--   reduce production mlhs_entry -> mlhs_basic

State 570:
## Known stack suffix:
## mlhs
## LR(1) items:
stmt -> mlhs . EQL command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> mlhs . EQL arg_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> mlhs . EQL mrhs [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On EQL shift to state 571
## Reductions:

State 571:
## Known stack suffix:
## mlhs EQL
## LR(1) items:
stmt -> mlhs EQL . command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> mlhs EQL . arg_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> mlhs EQL . mrhs [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 572
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On mrhs shift to state 574
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command_call shift to state 575
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On args shift to state 576
-- On arg_value shift to state 581
-- On arg shift to state 491
## Reductions:

State 572:
## Known stack suffix:
## STAR
## LR(1) items:
mrhs -> STAR . arg_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 573
-- On arg shift to state 491
## Reductions:

State 573:
## Known stack suffix:
## STAR arg_value
## LR(1) items:
mrhs -> STAR arg_value . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mrhs -> STAR arg_value

State 574:
## Known stack suffix:
## mlhs EQL mrhs
## LR(1) items:
stmt -> mlhs EQL mrhs . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> mlhs EQL mrhs

State 575:
## Known stack suffix:
## mlhs EQL command_call
## LR(1) items:
stmt -> mlhs EQL command_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> mlhs EQL command_call

State 576:
## Known stack suffix:
## args
## LR(1) items:
args -> args . COMMA arg_value [ COMMA ]
mrhs -> args . COMMA arg_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC # ]
mrhs -> args . COMMA STAR arg_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC # ]
## Transitions:
-- On COMMA shift to state 577
## Reductions:

State 577:
## Known stack suffix:
## args COMMA
## LR(1) items:
args -> args COMMA . arg_value [ COMMA ]
mrhs -> args COMMA . arg_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC # ]
mrhs -> args COMMA . STAR arg_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 578
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 580
-- On arg shift to state 491
## Reductions:

State 578:
## Known stack suffix:
## args COMMA STAR
## LR(1) items:
mrhs -> args COMMA STAR . arg_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 579
-- On arg shift to state 491
## Reductions:

State 579:
## Known stack suffix:
## args COMMA STAR arg_value
## LR(1) items:
mrhs -> args COMMA STAR arg_value . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mrhs -> args COMMA STAR arg_value

State 580:
## Known stack suffix:
## args COMMA arg_value
## LR(1) items:
args -> args COMMA arg_value . [ COMMA ]
mrhs -> args COMMA arg_value . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC # ]
## Transitions:
## Reductions:
-- On COMMA
--   reduce production args -> args COMMA arg_value
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT COLON ASSOC
--   reduce production mrhs -> args COMMA arg_value

State 581:
## Known stack suffix:
## mlhs EQL arg_value
## LR(1) items:
args -> arg_value . [ COMMA ]
stmt -> mlhs EQL arg_value . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Reductions:
-- On COMMA
--   reduce production args -> arg_value
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT
--   reduce production stmt -> mlhs EQL arg_value

State 582:
## Known stack suffix:
## lhs
## LR(1) items:
arg -> lhs . EQL arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> lhs . EQL arg K_RESCUE_MOD arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
stmt -> lhs . EQL command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> lhs . EQL mrhs [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On EQL shift to state 583
## Reductions:

State 583:
## Known stack suffix:
## lhs EQL
## LR(1) items:
arg -> lhs EQL . arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> lhs EQL . arg K_RESCUE_MOD arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
stmt -> lhs EQL . command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> lhs EQL . mrhs [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 572
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On mrhs shift to state 584
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command_call shift to state 585
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On args shift to state 576
-- On arg_value shift to state 586
-- On arg shift to state 587
## Reductions:

State 584:
## Known stack suffix:
## lhs EQL mrhs
## LR(1) items:
stmt -> lhs EQL mrhs . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> lhs EQL mrhs

State 585:
## Known stack suffix:
## lhs EQL command_call
## LR(1) items:
stmt -> lhs EQL command_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> lhs EQL command_call

State 586:
## Known stack suffix:
## arg_value
## LR(1) items:
args -> arg_value . [ SEMI NL K_THEN COMMENT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> arg_value

State 587:
## Known stack suffix:
## lhs EQL arg
## LR(1) items:
arg -> lhs EQL arg . [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> lhs EQL arg . K_RESCUE_MOD arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 # ]
arg_value -> arg . [ COMMA ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On K_RESCUE_MOD shift to state 422
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND COMMENT
--   reduce production arg -> lhs EQL arg
-- On COMMA
--   reduce production arg_value -> arg

State 588:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . K_AND expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND COMMENT # ]
expr -> expr . K_OR expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND COMMENT # ]
stmt -> expr . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On K_OR shift to state 466
-- On K_AND shift to state 470
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT
--   reduce production stmt -> expr

State 589:
## Known stack suffix:
## LPAREN compstmt
## LR(1) items:
primary -> LPAREN compstmt . RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RPAREN shift to state 590
## Reductions:

State 590:
## Known stack suffix:
## LPAREN compstmt RPAREN
## LR(1) items:
primary -> LPAREN compstmt RPAREN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> LPAREN compstmt RPAREN

State 591:
## Known stack suffix:
## mlhs_head mlhs_item
## LR(1) items:
mlhs_basic -> mlhs_head mlhs_item . [ RPAREN PIPE K_IN EQL ]
mlhs_head -> mlhs_head mlhs_item . COMMA [ XSTRING_BEG WORDS_BEG UMINUS_NUM SYMBEG STRING_BEG STAR RPAREN REGEXP_BEG QWORDS_BEG PIPE LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IN K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID EQL CVAR CONSTANT COLON3 ]
## Transitions:
-- On COMMA shift to state 592
## Reductions:
-- On RPAREN PIPE K_IN EQL
--   reduce production mlhs_basic -> mlhs_head mlhs_item

State 592:
## Known stack suffix:
## mlhs_head mlhs_item COMMA
## LR(1) items:
mlhs_head -> mlhs_head mlhs_item COMMA . [ XSTRING_BEG WORDS_BEG UMINUS_NUM SYMBEG STRING_BEG STAR RPAREN REGEXP_BEG QWORDS_BEG PIPE LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IN K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID EQL CVAR CONSTANT COLON3 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlhs_head -> mlhs_head mlhs_item COMMA

State 593:
## Known stack suffix:
## mlhs_basic
## LR(1) items:
mlhs -> mlhs_basic . [ PIPE K_IN EQL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlhs -> mlhs_basic

State 594:
## Known stack suffix:
## K_lEND LCURLY compstmt
## LR(1) items:
stmt -> K_lEND LCURLY compstmt . RCURLY [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On RCURLY shift to state 595
## Reductions:

State 595:
## Known stack suffix:
## K_lEND LCURLY compstmt RCURLY
## LR(1) items:
stmt -> K_lEND LCURLY compstmt RCURLY . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> K_lEND LCURLY compstmt RCURLY

State 596:
## Known stack suffix:
## K_lBEGIN
## LR(1) items:
stmt -> K_lBEGIN . stmt_e2 LCURLY compstmt RCURLY [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On stmt_e2 shift to state 597
## Default reduction:
-- After reading the next token, reduce production stmt_e2 ->

State 597:
## Known stack suffix:
## K_lBEGIN stmt_e2
## LR(1) items:
stmt -> K_lBEGIN stmt_e2 . LCURLY compstmt RCURLY [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On LCURLY shift to state 598
## Reductions:

State 598:
## Known stack suffix:
## K_lBEGIN stmt_e2 LCURLY
## LR(1) items:
stmt -> K_lBEGIN stmt_e2 LCURLY . compstmt RCURLY [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 599
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RCURLY NL COMMENT
--   reduce production none ->

State 599:
## Known stack suffix:
## K_lBEGIN stmt_e2 LCURLY compstmt
## LR(1) items:
stmt -> K_lBEGIN stmt_e2 LCURLY compstmt . RCURLY [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On RCURLY shift to state 600
## Reductions:

State 600:
## Known stack suffix:
## K_lBEGIN stmt_e2 LCURLY compstmt RCURLY
## LR(1) items:
stmt -> K_lBEGIN stmt_e2 LCURLY compstmt RCURLY . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> K_lBEGIN stmt_e2 LCURLY compstmt RCURLY

State 601:
## Known stack suffix:
## K__LINE__
## LR(1) items:
variable -> K__LINE__ . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K__LINE__

State 602:
## Known stack suffix:
## K__FILE__
## LR(1) items:
variable -> K__FILE__ . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K__FILE__

State 603:
## Known stack suffix:
## K_YIELD
## LR(1) items:
command -> K_YIELD . command_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
primary -> K_YIELD . LPAREN2 call_args RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_YIELD . LPAREN2 RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_YIELD . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 604
-- On command_args_e1 shift to state 634
-- On command_args shift to state 1262
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> K_YIELD

State 604:
## Known stack suffix:
## K_YIELD LPAREN2
## LR(1) items:
primary -> K_YIELD LPAREN2 . call_args RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_YIELD LPAREN2 . RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 142
-- On RPAREN shift to state 605
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 608
-- On call_args shift to state 609
-- On block_arg shift to state 611
-- On awords shift to state 374
-- On assocs shift to state 612
-- On assoc shift to state 493
-- On args shift to state 621
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:

State 605:
## Known stack suffix:
## K_YIELD LPAREN2 RPAREN
## LR(1) items:
primary -> K_YIELD LPAREN2 RPAREN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_YIELD LPAREN2 RPAREN

State 606:
## Known stack suffix:
## AMPER
## LR(1) items:
block_arg -> AMPER . arg_value [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 607
-- On arg shift to state 491
## Reductions:

State 607:
## Known stack suffix:
## AMPER arg_value
## LR(1) items:
block_arg -> AMPER arg_value . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_arg -> AMPER arg_value

State 608:
## Known stack suffix:
## command
## LR(1) items:
call_args -> command . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> command

State 609:
## Known stack suffix:
## K_YIELD LPAREN2 call_args
## LR(1) items:
primary -> K_YIELD LPAREN2 call_args . RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RPAREN shift to state 610
## Reductions:

State 610:
## Known stack suffix:
## K_YIELD LPAREN2 call_args RPAREN
## LR(1) items:
primary -> K_YIELD LPAREN2 call_args RPAREN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_YIELD LPAREN2 call_args RPAREN

State 611:
## Known stack suffix:
## block_arg
## LR(1) items:
call_args -> block_arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> block_arg

State 612:
## Known stack suffix:
## assocs
## LR(1) items:
assocs -> assocs . COMMA assoc [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
call_args -> assocs . opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
call_args -> assocs . COMMA STAR arg_value opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On COMMA shift to state 613
-- On opt_block_arg shift to state 620
-- On none_block_pass shift to state 619
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production none_block_pass ->

State 613:
## Known stack suffix:
## assocs COMMA
## LR(1) items:
assocs -> assocs COMMA . assoc [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
call_args -> assocs COMMA . STAR arg_value opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
opt_block_arg -> COMMA . block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 614
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 617
-- On awords shift to state 374
-- On assoc shift to state 487
-- On arg_value shift to state 488
-- On arg shift to state 491
## Reductions:

State 614:
## Known stack suffix:
## assocs COMMA STAR
## LR(1) items:
call_args -> assocs COMMA STAR . arg_value opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 615
-- On arg shift to state 491
## Reductions:

State 615:
## Known stack suffix:
## assocs COMMA STAR arg_value
## LR(1) items:
call_args -> assocs COMMA STAR arg_value . opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On COMMA shift to state 616
-- On opt_block_arg shift to state 618
-- On none_block_pass shift to state 619
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production none_block_pass ->

State 616:
## Known stack suffix:
## COMMA
## LR(1) items:
opt_block_arg -> COMMA . block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On AMPER shift to state 606
-- On block_arg shift to state 617
## Reductions:

State 617:
## Known stack suffix:
## COMMA block_arg
## LR(1) items:
opt_block_arg -> COMMA block_arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block_arg -> COMMA block_arg

State 618:
## Known stack suffix:
## assocs COMMA STAR arg_value opt_block_arg
## LR(1) items:
call_args -> assocs COMMA STAR arg_value opt_block_arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> assocs COMMA STAR arg_value opt_block_arg

State 619:
## Known stack suffix:
## none_block_pass
## LR(1) items:
opt_block_arg -> none_block_pass . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block_arg -> none_block_pass

State 620:
## Known stack suffix:
## assocs opt_block_arg
## LR(1) items:
call_args -> assocs opt_block_arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> assocs opt_block_arg

State 621:
## Known stack suffix:
## args
## LR(1) items:
args -> args . COMMA arg_value [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
call_args -> args . opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
call_args -> args . COMMA STAR arg_value opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
call_args -> args . COMMA assocs opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
call_args -> args . COMMA assocs COMMA STAR arg opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On COMMA shift to state 622
-- On opt_block_arg shift to state 633
-- On none_block_pass shift to state 619
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production none_block_pass ->

State 622:
## Known stack suffix:
## args COMMA
## LR(1) items:
args -> args COMMA . arg_value [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
call_args -> args COMMA . STAR arg_value opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
call_args -> args COMMA . assocs opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
call_args -> args COMMA . assocs COMMA STAR arg opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
opt_block_arg -> COMMA . block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 623
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 617
-- On awords shift to state 374
-- On assocs shift to state 626
-- On assoc shift to state 493
-- On arg_value shift to state 632
-- On arg shift to state 491
## Reductions:

State 623:
## Known stack suffix:
## args COMMA STAR
## LR(1) items:
call_args -> args COMMA STAR . arg_value opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 624
-- On arg shift to state 491
## Reductions:

State 624:
## Known stack suffix:
## args COMMA STAR arg_value
## LR(1) items:
call_args -> args COMMA STAR arg_value . opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On COMMA shift to state 616
-- On opt_block_arg shift to state 625
-- On none_block_pass shift to state 619
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production none_block_pass ->

State 625:
## Known stack suffix:
## args COMMA STAR arg_value opt_block_arg
## LR(1) items:
call_args -> args COMMA STAR arg_value opt_block_arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> args COMMA STAR arg_value opt_block_arg

State 626:
## Known stack suffix:
## args COMMA assocs
## LR(1) items:
assocs -> assocs . COMMA assoc [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
call_args -> args COMMA assocs . opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
call_args -> args COMMA assocs . COMMA STAR arg opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On COMMA shift to state 627
-- On opt_block_arg shift to state 631
-- On none_block_pass shift to state 619
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production none_block_pass ->

State 627:
## Known stack suffix:
## args COMMA assocs COMMA
## LR(1) items:
assocs -> assocs COMMA . assoc [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
call_args -> args COMMA assocs COMMA . STAR arg opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
opt_block_arg -> COMMA . block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 628
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 617
-- On awords shift to state 374
-- On assoc shift to state 487
-- On arg_value shift to state 488
-- On arg shift to state 491
## Reductions:

State 628:
## Known stack suffix:
## args COMMA assocs COMMA STAR
## LR(1) items:
call_args -> args COMMA assocs COMMA STAR . arg opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 629
## Reductions:

State 629:
## Known stack suffix:
## args COMMA assocs COMMA STAR arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ANDOP AMPER2 # ]
call_args -> args COMMA assocs COMMA STAR arg . opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On COMMA shift to state 616
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
-- On opt_block_arg shift to state 630
-- On none_block_pass shift to state 619
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production none_block_pass ->

State 630:
## Known stack suffix:
## args COMMA assocs COMMA STAR arg opt_block_arg
## LR(1) items:
call_args -> args COMMA assocs COMMA STAR arg opt_block_arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> args COMMA assocs COMMA STAR arg opt_block_arg

State 631:
## Known stack suffix:
## args COMMA assocs opt_block_arg
## LR(1) items:
call_args -> args COMMA assocs opt_block_arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> args COMMA assocs opt_block_arg

State 632:
## Known stack suffix:
## args COMMA arg_value
## LR(1) items:
args -> args COMMA arg_value . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
assoc -> arg_value . ASSOC arg_value [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON # ]
## Transitions:
-- On ASSOC shift to state 489
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON
--   reduce production args -> args COMMA arg_value

State 633:
## Known stack suffix:
## args opt_block_arg
## LR(1) items:
call_args -> args opt_block_arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> args opt_block_arg

State 634:
## Known stack suffix:
## command_args_e1
## LR(1) items:
command_args -> command_args_e1 . open_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 635
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 1218
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On AMPER shift to state 956
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On open_args shift to state 1260
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command shift to state 1049
-- On call_args shift to state 1261
-- On block_arg shift to state 1051
-- On awords shift to state 972
-- On assocs shift to state 1052
-- On assoc shift to state 1066
-- On args shift to state 1067
-- On arg_value shift to state 1080
-- On arg shift to state 1060
## Reductions:

State 635:
## Known stack suffix:
## STAR
## LR(1) items:
call_args -> STAR . arg_value opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg_value shift to state 1216
-- On arg shift to state 1060
## Reductions:

State 636:
## Known stack suffix:
## LPAREN
## LR(1) items:
primary -> LPAREN . compstmt RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 637
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production none ->

State 637:
## Known stack suffix:
## LPAREN compstmt
## LR(1) items:
primary -> LPAREN compstmt . RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RPAREN shift to state 638
## Reductions:

State 638:
## Known stack suffix:
## LPAREN compstmt RPAREN
## LR(1) items:
primary -> LPAREN compstmt RPAREN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> LPAREN compstmt RPAREN

State 639:
## Known stack suffix:
## K_YIELD
## LR(1) items:
primary -> K_YIELD . LPAREN2 call_args RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_YIELD . LPAREN2 RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_YIELD . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 604
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> K_YIELD

State 640:
## Known stack suffix:
## K_WHILE
## LR(1) items:
primary -> K_WHILE . primary_e2 expr_value do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e2 shift to state 641
## Default reduction:
-- After reading the next token, reduce production primary_e2 ->

State 641:
## Known stack suffix:
## K_WHILE primary_e2
## LR(1) items:
primary -> K_WHILE primary_e2 . expr_value do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 642
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 642:
## Known stack suffix:
## K_WHILE primary_e2 expr_value
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value . do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_DO_COND shift to state 645
-- On COMMENT shift to state 646
-- On COLON shift to state 647
-- On term shift to state 648
-- On do_ shift to state 649
## Reductions:

State 643:
## Known stack suffix:
## SEMI
## LR(1) items:
term -> SEMI . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> SEMI

State 644:
## Known stack suffix:
## NL
## LR(1) items:
term -> NL . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> NL

State 645:
## Known stack suffix:
## K_DO_COND
## LR(1) items:
do_ -> K_DO_COND . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production do_ -> K_DO_COND

State 646:
## Known stack suffix:
## COMMENT
## LR(1) items:
term -> COMMENT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> COMMENT

State 647:
## Known stack suffix:
## COLON
## LR(1) items:
do_ -> COLON . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production do_ -> COLON

State 648:
## Known stack suffix:
## term
## LR(1) items:
do_ -> term . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production do_ -> term

State 649:
## Known stack suffix:
## K_WHILE primary_e2 expr_value do_
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value do_ . primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e3 shift to state 650
## Default reduction:
-- After reading the next token, reduce production primary_e3 ->

State 650:
## Known stack suffix:
## K_WHILE primary_e2 expr_value do_ primary_e3
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value do_ primary_e3 . compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 651
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 651:
## Known stack suffix:
## K_WHILE primary_e2 expr_value do_ primary_e3 compstmt
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value do_ primary_e3 compstmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 652
## Reductions:

State 652:
## Known stack suffix:
## K_WHILE primary_e2 expr_value do_ primary_e3 compstmt K_END
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value do_ primary_e3 compstmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_WHILE primary_e2 expr_value do_ primary_e3 compstmt K_END

State 653:
## Known stack suffix:
## K_UNTIL
## LR(1) items:
primary -> K_UNTIL . primary_e2 expr_value do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e2 shift to state 654
## Default reduction:
-- After reading the next token, reduce production primary_e2 ->

State 654:
## Known stack suffix:
## K_UNTIL primary_e2
## LR(1) items:
primary -> K_UNTIL primary_e2 . expr_value do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 655
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 655:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value . do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_DO_COND shift to state 645
-- On COMMENT shift to state 646
-- On COLON shift to state 647
-- On term shift to state 648
-- On do_ shift to state 656
## Reductions:

State 656:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value do_
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value do_ . primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e3 shift to state 657
## Default reduction:
-- After reading the next token, reduce production primary_e3 ->

State 657:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value do_ primary_e3
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value do_ primary_e3 . compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 658
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 658:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 659
## Reductions:

State 659:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt K_END
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt K_END

State 660:
## Known stack suffix:
## K_UNLESS
## LR(1) items:
primary -> K_UNLESS . expr_value then_ compstmt opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 661
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 661:
## Known stack suffix:
## K_UNLESS expr_value
## LR(1) items:
primary -> K_UNLESS expr_value . then_ compstmt opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_THEN shift to state 662
-- On COMMENT shift to state 646
-- On COLON shift to state 663
-- On then_ shift to state 664
-- On term shift to state 671
## Reductions:

State 662:
## Known stack suffix:
## K_THEN
## LR(1) items:
then_ -> K_THEN . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production then_ -> K_THEN

State 663:
## Known stack suffix:
## COLON
## LR(1) items:
then_ -> COLON . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production then_ -> COLON

State 664:
## Known stack suffix:
## K_UNLESS expr_value then_
## LR(1) items:
primary -> K_UNLESS expr_value then_ . compstmt opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 665
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END K_ELSE COMMENT
--   reduce production none ->

State 665:
## Known stack suffix:
## K_UNLESS expr_value then_ compstmt
## LR(1) items:
primary -> K_UNLESS expr_value then_ compstmt . opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_ELSE shift to state 666
-- On opt_else shift to state 668
-- On none shift to state 670
## Reductions:
-- On K_END
--   reduce production none ->

State 666:
## Known stack suffix:
## K_ELSE
## LR(1) items:
opt_else -> K_ELSE . compstmt [ K_ENSURE K_END ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 667
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_ENSURE K_END COMMENT
--   reduce production none ->

State 667:
## Known stack suffix:
## K_ELSE compstmt
## LR(1) items:
opt_else -> K_ELSE compstmt . [ K_ENSURE K_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_else -> K_ELSE compstmt

State 668:
## Known stack suffix:
## K_UNLESS expr_value then_ compstmt opt_else
## LR(1) items:
primary -> K_UNLESS expr_value then_ compstmt opt_else . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 669
## Reductions:

State 669:
## Known stack suffix:
## K_UNLESS expr_value then_ compstmt opt_else K_END
## LR(1) items:
primary -> K_UNLESS expr_value then_ compstmt opt_else K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_UNLESS expr_value then_ compstmt opt_else K_END

State 670:
## Known stack suffix:
## none
## LR(1) items:
opt_else -> none . [ K_ENSURE K_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_else -> none

State 671:
## Known stack suffix:
## term
## LR(1) items:
then_ -> term . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
then_ -> term . K_THEN [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On K_THEN shift to state 672
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production then_ -> term

State 672:
## Known stack suffix:
## term K_THEN
## LR(1) items:
then_ -> term K_THEN . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production then_ -> term K_THEN

State 673:
## Known stack suffix:
## K_TRUE
## LR(1) items:
variable -> K_TRUE . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K_TRUE

State 674:
## Known stack suffix:
## K_SUPER
## LR(1) items:
method_call -> K_SUPER . paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
method_call -> K_SUPER . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On paren_args shift to state 696
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production method_call -> K_SUPER

State 675:
## Known stack suffix:
## LPAREN2
## LR(1) items:
paren_args -> LPAREN2 . none RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
paren_args -> LPAREN2 . call_args opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
paren_args -> LPAREN2 . block_call opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
paren_args -> LPAREN2 . args COMMA block_call opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 142
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 676
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 678
-- On call_args shift to state 680
-- On block_call shift to state 683
-- On block_arg shift to state 611
-- On awords shift to state 374
-- On assocs shift to state 612
-- On assoc shift to state 493
-- On args shift to state 690
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:
-- On RPAREN
--   reduce production none ->

State 676:
## Known stack suffix:
## LPAREN2 none
## LR(1) items:
paren_args -> LPAREN2 none . RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RPAREN shift to state 677
## Reductions:

State 677:
## Known stack suffix:
## LPAREN2 none RPAREN
## LR(1) items:
paren_args -> LPAREN2 none RPAREN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_args -> LPAREN2 none RPAREN

State 678:
## Known stack suffix:
## command
## LR(1) items:
block_call -> command . do_block [ RPAREN NL DOT COMMENT COLON2 ]
call_args -> command . [ RPAREN NL COMMENT ]
## Transitions:
-- On K_DO_BLOCK shift to state 434
-- On do_block shift to state 679
## Reductions:
-- On RPAREN NL COMMENT
--   reduce production call_args -> command

State 679:
## Known stack suffix:
## command do_block
## LR(1) items:
block_call -> command do_block . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_call -> command do_block

State 680:
## Known stack suffix:
## LPAREN2 call_args
## LR(1) items:
paren_args -> LPAREN2 call_args . opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On NL shift to state 188
-- On COMMENT shift to state 189
-- On opt_nl shift to state 681
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 681:
## Known stack suffix:
## LPAREN2 call_args opt_nl
## LR(1) items:
paren_args -> LPAREN2 call_args opt_nl . RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RPAREN shift to state 682
## Reductions:

State 682:
## Known stack suffix:
## LPAREN2 call_args opt_nl RPAREN
## LR(1) items:
paren_args -> LPAREN2 call_args opt_nl RPAREN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_args -> LPAREN2 call_args opt_nl RPAREN

State 683:
## Known stack suffix:
## LPAREN2 block_call
## LR(1) items:
block_call -> block_call . DOT operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
block_call -> block_call . COLON2 operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
paren_args -> LPAREN2 block_call . opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On NL shift to state 188
-- On DOT shift to state 684
-- On COMMENT shift to state 189
-- On COLON2 shift to state 686
-- On opt_nl shift to state 688
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 684:
## Known stack suffix:
## block_call DOT
## LR(1) items:
block_call -> block_call DOT . operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 445
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 447
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 685
-- On op shift to state 453
## Reductions:

State 685:
## Known stack suffix:
## block_call DOT operation2
## LR(1) items:
block_call -> block_call DOT operation2 . opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 449
-- On opt_paren_args shift to state 450
-- On none shift to state 451
## Reductions:
-- On RPAREN NL DOT COMMENT COLON2
--   reduce production none ->

State 686:
## Known stack suffix:
## block_call COLON2
## LR(1) items:
block_call -> block_call COLON2 . operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 445
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 447
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 687
-- On op shift to state 453
## Reductions:

State 687:
## Known stack suffix:
## block_call COLON2 operation2
## LR(1) items:
block_call -> block_call COLON2 operation2 . opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 449
-- On opt_paren_args shift to state 456
-- On none shift to state 451
## Reductions:
-- On RPAREN NL DOT COMMENT COLON2
--   reduce production none ->

State 688:
## Known stack suffix:
## LPAREN2 block_call opt_nl
## LR(1) items:
paren_args -> LPAREN2 block_call opt_nl . RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RPAREN shift to state 689
## Reductions:

State 689:
## Known stack suffix:
## LPAREN2 block_call opt_nl RPAREN
## LR(1) items:
paren_args -> LPAREN2 block_call opt_nl RPAREN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_args -> LPAREN2 block_call opt_nl RPAREN

State 690:
## Known stack suffix:
## LPAREN2 args
## LR(1) items:
args -> args . COMMA arg_value [ RPAREN NL COMMENT COMMA ]
call_args -> args . opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args . COMMA STAR arg_value opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args . COMMA assocs opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args . COMMA assocs COMMA STAR arg opt_block_arg [ RPAREN NL COMMENT ]
paren_args -> LPAREN2 args . COMMA block_call opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On COMMA shift to state 691
-- On opt_block_arg shift to state 633
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN NL COMMENT
--   reduce production none_block_pass ->

State 691:
## Known stack suffix:
## LPAREN2 args COMMA
## LR(1) items:
args -> args COMMA . arg_value [ RPAREN NL COMMENT COMMA ]
call_args -> args COMMA . STAR arg_value opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args COMMA . assocs opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args COMMA . assocs COMMA STAR arg opt_block_arg [ RPAREN NL COMMENT ]
opt_block_arg -> COMMA . block_arg [ RPAREN NL COMMENT ]
paren_args -> LPAREN2 args COMMA . block_call opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 623
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 692
-- On block_call shift to state 693
-- On block_arg shift to state 617
-- On awords shift to state 374
-- On assocs shift to state 626
-- On assoc shift to state 493
-- On arg_value shift to state 632
-- On arg shift to state 491
## Reductions:

State 692:
## Known stack suffix:
## command
## LR(1) items:
block_call -> command . do_block [ RPAREN NL DOT COMMENT COLON2 ]
## Transitions:
-- On K_DO_BLOCK shift to state 434
-- On do_block shift to state 679
## Reductions:

State 693:
## Known stack suffix:
## LPAREN2 args COMMA block_call
## LR(1) items:
block_call -> block_call . DOT operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
block_call -> block_call . COLON2 operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
paren_args -> LPAREN2 args COMMA block_call . opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On NL shift to state 188
-- On DOT shift to state 684
-- On COMMENT shift to state 189
-- On COLON2 shift to state 686
-- On opt_nl shift to state 694
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 694:
## Known stack suffix:
## LPAREN2 args COMMA block_call opt_nl
## LR(1) items:
paren_args -> LPAREN2 args COMMA block_call opt_nl . RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RPAREN shift to state 695
## Reductions:

State 695:
## Known stack suffix:
## LPAREN2 args COMMA block_call opt_nl RPAREN
## LR(1) items:
paren_args -> LPAREN2 args COMMA block_call opt_nl RPAREN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_args -> LPAREN2 args COMMA block_call opt_nl RPAREN

State 696:
## Known stack suffix:
## K_SUPER paren_args
## LR(1) items:
method_call -> K_SUPER paren_args . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> K_SUPER paren_args

State 697:
## Known stack suffix:
## K_SELF
## LR(1) items:
variable -> K_SELF . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K_SELF

State 698:
## Known stack suffix:
## K_RETURN
## LR(1) items:
primary -> K_RETURN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_RETURN

State 699:
## Known stack suffix:
## K_RETRY
## LR(1) items:
primary -> K_RETRY . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_RETRY

State 700:
## Known stack suffix:
## K_REDO
## LR(1) items:
primary -> K_REDO . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_REDO

State 701:
## Known stack suffix:
## K_NIL
## LR(1) items:
variable -> K_NIL . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K_NIL

State 702:
## Known stack suffix:
## K_NEXT
## LR(1) items:
primary -> K_NEXT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_NEXT

State 703:
## Known stack suffix:
## K_MODULE
## LR(1) items:
primary -> K_MODULE . cpath primary_e7 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 704
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 705
-- On COLON3 shift to state 706
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 710
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 711
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On dsym shift to state 373
-- On cpath shift to state 720
-- On cname shift to state 757
-- On awords shift to state 374
## Reductions:

State 704:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
cname -> IDENTIFIER . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
operation -> IDENTIFIER . [ LPAREN2 LCURLY K_DO ]
variable -> IDENTIFIER . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production cname -> IDENTIFIER
-- On LPAREN2 LCURLY K_DO
--   reduce production operation -> IDENTIFIER
-- On LB DOT COLON2
--   reduce production variable -> IDENTIFIER

State 705:
## Known stack suffix:
## CONSTANT
## LR(1) items:
cname -> CONSTANT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
operation -> CONSTANT . [ LPAREN2 LCURLY K_DO ]
variable -> CONSTANT . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production cname -> CONSTANT
-- On LPAREN2 LCURLY K_DO
--   reduce production operation -> CONSTANT
-- On LB DOT COLON2
--   reduce production variable -> CONSTANT

State 706:
## Known stack suffix:
## COLON3
## LR(1) items:
cpath -> COLON3 . cname [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
primary -> COLON3 . CONSTANT [ LB DOT COLON2 ]
## Transitions:
-- On IDENTIFIER shift to state 707
-- On CONSTANT shift to state 708
-- On cname shift to state 709
## Reductions:

State 707:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
cname -> IDENTIFIER . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cname -> IDENTIFIER

State 708:
## Known stack suffix:
## COLON3 CONSTANT
## LR(1) items:
cname -> CONSTANT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
primary -> COLON3 CONSTANT . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production cname -> CONSTANT
-- On LB DOT COLON2
--   reduce production primary -> COLON3 CONSTANT

State 709:
## Known stack suffix:
## COLON3 cname
## LR(1) items:
cpath -> COLON3 cname . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cpath -> COLON3 cname

State 710:
## Known stack suffix:
## variable
## LR(1) items:
var_ref -> variable . [ LB DOT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var_ref -> variable

State 711:
## Known stack suffix:
## primary_value
## LR(1) items:
cpath -> primary_value . COLON2 cname [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
method_call -> primary_value . DOT operation2 opt_paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value . COLON2 operation2 paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value . COLON2 operation3 [ LCURLY LB K_DO DOT COLON2 ]
primary -> primary_value . COLON2 CONSTANT [ LB DOT COLON2 ]
primary -> primary_value . LB aref_args RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On LB shift to state 712
-- On DOT shift to state 715
-- On COLON2 shift to state 716
## Reductions:

State 712:
## Known stack suffix:
## primary_value LB
## LR(1) items:
primary -> primary_value LB . aref_args RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 713
## Reductions:
-- On RBRACK
--   reduce production none ->

State 713:
## Known stack suffix:
## primary_value LB aref_args
## LR(1) items:
primary -> primary_value LB aref_args . RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On RBRACK shift to state 714
## Reductions:

State 714:
## Known stack suffix:
## primary_value LB aref_args RBRACK
## LR(1) items:
primary -> primary_value LB aref_args RBRACK . [ LB DOT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> primary_value LB aref_args RBRACK

State 715:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
method_call -> primary_value DOT . operation2 opt_paren_args [ LCURLY LB K_DO DOT COLON2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 445
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 447
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 555
-- On op shift to state 453
## Reductions:

State 716:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
cpath -> primary_value COLON2 . cname [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
method_call -> primary_value COLON2 . operation2 paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value COLON2 . operation3 [ LCURLY LB K_DO DOT COLON2 ]
primary -> primary_value COLON2 . CONSTANT [ LB DOT COLON2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 717
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 558
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 718
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation3 shift to state 560
-- On operation2 shift to state 561
-- On op shift to state 563
-- On cname shift to state 719
## Reductions:

State 717:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
cname -> IDENTIFIER . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
operation2 -> IDENTIFIER . [ LPAREN2 ]
operation3 -> IDENTIFIER . [ LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production cname -> IDENTIFIER
-- On LPAREN2
--   reduce production operation2 -> IDENTIFIER
-- On LCURLY LB K_DO DOT COLON2
--   reduce production operation3 -> IDENTIFIER

State 718:
## Known stack suffix:
## primary_value COLON2 CONSTANT
## LR(1) items:
cname -> CONSTANT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
operation2 -> CONSTANT . [ LPAREN2 ]
primary -> primary_value COLON2 CONSTANT . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production cname -> CONSTANT
-- On LPAREN2
--   reduce production operation2 -> CONSTANT
-- On LB DOT COLON2
--   reduce production primary -> primary_value COLON2 CONSTANT

State 719:
## Known stack suffix:
## primary_value COLON2 cname
## LR(1) items:
cpath -> primary_value COLON2 cname . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cpath -> primary_value COLON2 cname

State 720:
## Known stack suffix:
## K_MODULE cpath
## LR(1) items:
primary -> K_MODULE cpath . primary_e7 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e7 shift to state 721
## Default reduction:
-- After reading the next token, reduce production primary_e7 ->

State 721:
## Known stack suffix:
## K_MODULE cpath primary_e7
## LR(1) items:
primary -> K_MODULE cpath primary_e7 . bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 755
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 722:
## Known stack suffix:
## compstmt
## LR(1) items:
bodystmt -> compstmt . opt_rescue opt_else opt_ensure [ K_END ]
## Transitions:
-- On K_RESCUE shift to state 723
-- On opt_rescue shift to state 749
-- On none shift to state 747
## Reductions:
-- On K_ENSURE K_END K_ELSE
--   reduce production none ->

State 723:
## Known stack suffix:
## K_RESCUE
## LR(1) items:
opt_rescue -> K_RESCUE . exc_list exc_var then_ compstmt opt_rescue [ K_ENSURE K_END K_ELSE ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 572
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On none shift to state 724
-- On mrhs shift to state 725
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On exc_list shift to state 726
-- On dsym shift to state 373
-- On awords shift to state 374
-- On args shift to state 576
-- On arg_value shift to state 748
-- On arg shift to state 491
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON ASSOC
--   reduce production none ->

State 724:
## Known stack suffix:
## none
## LR(1) items:
exc_list -> none . [ SEMI NL K_THEN COMMENT COLON ASSOC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exc_list -> none

State 725:
## Known stack suffix:
## mrhs
## LR(1) items:
exc_list -> mrhs . [ SEMI NL K_THEN COMMENT COLON ASSOC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exc_list -> mrhs

State 726:
## Known stack suffix:
## K_RESCUE exc_list
## LR(1) items:
opt_rescue -> K_RESCUE exc_list . exc_var then_ compstmt opt_rescue [ K_ENSURE K_END K_ELSE ]
## Transitions:
-- On ASSOC shift to state 727
-- On none shift to state 742
-- On exc_var shift to state 743
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON
--   reduce production none ->

State 727:
## Known stack suffix:
## ASSOC
## LR(1) items:
exc_var -> ASSOC . lhs [ SEMI NL K_THEN COMMENT COLON ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 728
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 730
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 731
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 741
-- On dsym shift to state 373
-- On awords shift to state 374
## Reductions:

State 728:
## Known stack suffix:
## COLON3
## LR(1) items:
lhs -> COLON3 . CONSTANT [ SEMI NL K_THEN COMMENT COLON ]
primary -> COLON3 . CONSTANT [ LB DOT COLON2 ]
## Transitions:
-- On CONSTANT shift to state 729
## Reductions:

State 729:
## Known stack suffix:
## COLON3 CONSTANT
## LR(1) items:
lhs -> COLON3 CONSTANT . [ SEMI NL K_THEN COMMENT COLON ]
primary -> COLON3 CONSTANT . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON
--   reduce production lhs -> COLON3 CONSTANT
-- On LB DOT COLON2
--   reduce production primary -> COLON3 CONSTANT

State 730:
## Known stack suffix:
## variable
## LR(1) items:
lhs -> variable . [ SEMI NL K_THEN COMMENT COLON ]
var_ref -> variable . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON
--   reduce production lhs -> variable
-- On LB DOT COLON2
--   reduce production var_ref -> variable

State 731:
## Known stack suffix:
## primary_value
## LR(1) items:
lhs -> primary_value . LB aref_args RBRACK [ SEMI NL K_THEN COMMENT COLON ]
lhs -> primary_value . DOT IDENTIFIER [ SEMI NL K_THEN COMMENT COLON ]
lhs -> primary_value . COLON2 IDENTIFIER [ SEMI NL K_THEN COMMENT COLON ]
lhs -> primary_value . DOT CONSTANT [ SEMI NL K_THEN COMMENT COLON ]
lhs -> primary_value . COLON2 CONSTANT [ SEMI NL K_THEN COMMENT COLON ]
method_call -> primary_value . DOT operation2 opt_paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value . COLON2 operation2 paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value . COLON2 operation3 [ LCURLY LB K_DO DOT COLON2 ]
primary -> primary_value . COLON2 CONSTANT [ LB DOT COLON2 ]
primary -> primary_value . LB aref_args RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On LB shift to state 732
-- On DOT shift to state 735
-- On COLON2 shift to state 738
## Reductions:

State 732:
## Known stack suffix:
## primary_value LB
## LR(1) items:
lhs -> primary_value LB . aref_args RBRACK [ SEMI NL K_THEN COMMENT COLON ]
primary -> primary_value LB . aref_args RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 733
## Reductions:
-- On RBRACK
--   reduce production none ->

State 733:
## Known stack suffix:
## primary_value LB aref_args
## LR(1) items:
lhs -> primary_value LB aref_args . RBRACK [ SEMI NL K_THEN COMMENT COLON ]
primary -> primary_value LB aref_args . RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On RBRACK shift to state 734
## Reductions:

State 734:
## Known stack suffix:
## primary_value LB aref_args RBRACK
## LR(1) items:
lhs -> primary_value LB aref_args RBRACK . [ SEMI NL K_THEN COMMENT COLON ]
primary -> primary_value LB aref_args RBRACK . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON
--   reduce production lhs -> primary_value LB aref_args RBRACK
-- On LB DOT COLON2
--   reduce production primary -> primary_value LB aref_args RBRACK

State 735:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
lhs -> primary_value DOT . IDENTIFIER [ SEMI NL K_THEN COMMENT COLON ]
lhs -> primary_value DOT . CONSTANT [ SEMI NL K_THEN COMMENT COLON ]
method_call -> primary_value DOT . operation2 opt_paren_args [ LCURLY LB K_DO DOT COLON2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 736
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 737
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 555
-- On op shift to state 453
## Reductions:

State 736:
## Known stack suffix:
## primary_value DOT IDENTIFIER
## LR(1) items:
lhs -> primary_value DOT IDENTIFIER . [ SEMI NL K_THEN COMMENT COLON ]
operation2 -> IDENTIFIER . [ LPAREN2 LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON
--   reduce production lhs -> primary_value DOT IDENTIFIER
-- On LPAREN2 LCURLY LB K_DO DOT COLON2
--   reduce production operation2 -> IDENTIFIER

State 737:
## Known stack suffix:
## primary_value DOT CONSTANT
## LR(1) items:
lhs -> primary_value DOT CONSTANT . [ SEMI NL K_THEN COMMENT COLON ]
operation2 -> CONSTANT . [ LPAREN2 LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON
--   reduce production lhs -> primary_value DOT CONSTANT
-- On LPAREN2 LCURLY LB K_DO DOT COLON2
--   reduce production operation2 -> CONSTANT

State 738:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
lhs -> primary_value COLON2 . IDENTIFIER [ SEMI NL K_THEN COMMENT COLON ]
lhs -> primary_value COLON2 . CONSTANT [ SEMI NL K_THEN COMMENT COLON ]
method_call -> primary_value COLON2 . operation2 paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value COLON2 . operation3 [ LCURLY LB K_DO DOT COLON2 ]
primary -> primary_value COLON2 . CONSTANT [ LB DOT COLON2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 739
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 558
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 740
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation3 shift to state 560
-- On operation2 shift to state 561
-- On op shift to state 563
## Reductions:

State 739:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER
## LR(1) items:
lhs -> primary_value COLON2 IDENTIFIER . [ SEMI NL K_THEN COMMENT COLON ]
operation2 -> IDENTIFIER . [ LPAREN2 ]
operation3 -> IDENTIFIER . [ LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON
--   reduce production lhs -> primary_value COLON2 IDENTIFIER
-- On LPAREN2
--   reduce production operation2 -> IDENTIFIER
-- On LCURLY LB K_DO DOT COLON2
--   reduce production operation3 -> IDENTIFIER

State 740:
## Known stack suffix:
## primary_value COLON2 CONSTANT
## LR(1) items:
lhs -> primary_value COLON2 CONSTANT . [ SEMI NL K_THEN COMMENT COLON ]
operation2 -> CONSTANT . [ LPAREN2 ]
primary -> primary_value COLON2 CONSTANT . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON
--   reduce production lhs -> primary_value COLON2 CONSTANT
-- On LPAREN2
--   reduce production operation2 -> CONSTANT
-- On LB DOT COLON2
--   reduce production primary -> primary_value COLON2 CONSTANT

State 741:
## Known stack suffix:
## ASSOC lhs
## LR(1) items:
exc_var -> ASSOC lhs . [ SEMI NL K_THEN COMMENT COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exc_var -> ASSOC lhs

State 742:
## Known stack suffix:
## none
## LR(1) items:
exc_var -> none . [ SEMI NL K_THEN COMMENT COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exc_var -> none

State 743:
## Known stack suffix:
## K_RESCUE exc_list exc_var
## LR(1) items:
opt_rescue -> K_RESCUE exc_list exc_var . then_ compstmt opt_rescue [ K_ENSURE K_END K_ELSE ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_THEN shift to state 662
-- On COMMENT shift to state 646
-- On COLON shift to state 663
-- On then_ shift to state 744
-- On term shift to state 671
## Reductions:

State 744:
## Known stack suffix:
## K_RESCUE exc_list exc_var then_
## LR(1) items:
opt_rescue -> K_RESCUE exc_list exc_var then_ . compstmt opt_rescue [ K_ENSURE K_END K_ELSE ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 745
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 745:
## Known stack suffix:
## K_RESCUE exc_list exc_var then_ compstmt
## LR(1) items:
opt_rescue -> K_RESCUE exc_list exc_var then_ compstmt . opt_rescue [ K_ENSURE K_END K_ELSE ]
## Transitions:
-- On K_RESCUE shift to state 723
-- On opt_rescue shift to state 746
-- On none shift to state 747
## Reductions:
-- On K_ENSURE K_END K_ELSE
--   reduce production none ->

State 746:
## Known stack suffix:
## K_RESCUE exc_list exc_var then_ compstmt opt_rescue
## LR(1) items:
opt_rescue -> K_RESCUE exc_list exc_var then_ compstmt opt_rescue . [ K_ENSURE K_END K_ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_rescue -> K_RESCUE exc_list exc_var then_ compstmt opt_rescue

State 747:
## Known stack suffix:
## none
## LR(1) items:
opt_rescue -> none . [ K_ENSURE K_END K_ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_rescue -> none

State 748:
## Known stack suffix:
## arg_value
## LR(1) items:
args -> arg_value . [ COMMA ]
exc_list -> arg_value . [ SEMI NL K_THEN COMMENT COLON ASSOC ]
## Transitions:
## Reductions:
-- On COMMA
--   reduce production args -> arg_value
-- On SEMI NL K_THEN COMMENT COLON ASSOC
--   reduce production exc_list -> arg_value

State 749:
## Known stack suffix:
## compstmt opt_rescue
## LR(1) items:
bodystmt -> compstmt opt_rescue . opt_else opt_ensure [ K_END ]
## Transitions:
-- On K_ELSE shift to state 666
-- On opt_else shift to state 750
-- On none shift to state 670
## Reductions:
-- On K_ENSURE K_END
--   reduce production none ->

State 750:
## Known stack suffix:
## compstmt opt_rescue opt_else
## LR(1) items:
bodystmt -> compstmt opt_rescue opt_else . opt_ensure [ K_END ]
## Transitions:
-- On K_ENSURE shift to state 751
-- On opt_ensure shift to state 753
-- On none shift to state 754
## Reductions:
-- On K_END
--   reduce production none ->

State 751:
## Known stack suffix:
## K_ENSURE
## LR(1) items:
opt_ensure -> K_ENSURE . compstmt [ K_END ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 752
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 752:
## Known stack suffix:
## K_ENSURE compstmt
## LR(1) items:
opt_ensure -> K_ENSURE compstmt . [ K_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_ensure -> K_ENSURE compstmt

State 753:
## Known stack suffix:
## compstmt opt_rescue opt_else opt_ensure
## LR(1) items:
bodystmt -> compstmt opt_rescue opt_else opt_ensure . [ K_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bodystmt -> compstmt opt_rescue opt_else opt_ensure

State 754:
## Known stack suffix:
## none
## LR(1) items:
opt_ensure -> none . [ K_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_ensure -> none

State 755:
## Known stack suffix:
## K_MODULE cpath primary_e7 bodystmt
## LR(1) items:
primary -> K_MODULE cpath primary_e7 bodystmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 756
## Reductions:

State 756:
## Known stack suffix:
## K_MODULE cpath primary_e7 bodystmt K_END
## LR(1) items:
primary -> K_MODULE cpath primary_e7 bodystmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_MODULE cpath primary_e7 bodystmt K_END

State 757:
## Known stack suffix:
## cname
## LR(1) items:
cpath -> cname . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LT LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cpath -> cname

State 758:
## Known stack suffix:
## K_IF
## LR(1) items:
primary -> K_IF . expr_value then_ compstmt if_tail K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 759
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 759:
## Known stack suffix:
## K_IF expr_value
## LR(1) items:
primary -> K_IF expr_value . then_ compstmt if_tail K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_THEN shift to state 662
-- On COMMENT shift to state 646
-- On COLON shift to state 663
-- On then_ shift to state 760
-- On term shift to state 671
## Reductions:

State 760:
## Known stack suffix:
## K_IF expr_value then_
## LR(1) items:
primary -> K_IF expr_value then_ . compstmt if_tail K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 761
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END K_ELSIF K_ELSE COMMENT
--   reduce production none ->

State 761:
## Known stack suffix:
## K_IF expr_value then_ compstmt
## LR(1) items:
primary -> K_IF expr_value then_ compstmt . if_tail K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_ELSIF shift to state 762
-- On K_ELSE shift to state 666
-- On opt_else shift to state 766
-- On none shift to state 670
-- On if_tail shift to state 768
## Reductions:
-- On K_END
--   reduce production none ->

State 762:
## Known stack suffix:
## K_ELSIF
## LR(1) items:
if_tail -> K_ELSIF . expr_value then_ compstmt if_tail [ K_END ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 763
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 763:
## Known stack suffix:
## K_ELSIF expr_value
## LR(1) items:
if_tail -> K_ELSIF expr_value . then_ compstmt if_tail [ K_END ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_THEN shift to state 662
-- On COMMENT shift to state 646
-- On COLON shift to state 663
-- On then_ shift to state 764
-- On term shift to state 671
## Reductions:

State 764:
## Known stack suffix:
## K_ELSIF expr_value then_
## LR(1) items:
if_tail -> K_ELSIF expr_value then_ . compstmt if_tail [ K_END ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 765
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END K_ELSIF K_ELSE COMMENT
--   reduce production none ->

State 765:
## Known stack suffix:
## K_ELSIF expr_value then_ compstmt
## LR(1) items:
if_tail -> K_ELSIF expr_value then_ compstmt . if_tail [ K_END ]
## Transitions:
-- On K_ELSIF shift to state 762
-- On K_ELSE shift to state 666
-- On opt_else shift to state 766
-- On none shift to state 670
-- On if_tail shift to state 767
## Reductions:
-- On K_END
--   reduce production none ->

State 766:
## Known stack suffix:
## opt_else
## LR(1) items:
if_tail -> opt_else . [ K_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_tail -> opt_else

State 767:
## Known stack suffix:
## K_ELSIF expr_value then_ compstmt if_tail
## LR(1) items:
if_tail -> K_ELSIF expr_value then_ compstmt if_tail . [ K_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_tail -> K_ELSIF expr_value then_ compstmt if_tail

State 768:
## Known stack suffix:
## K_IF expr_value then_ compstmt if_tail
## LR(1) items:
primary -> K_IF expr_value then_ compstmt if_tail . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 769
## Reductions:

State 769:
## Known stack suffix:
## K_IF expr_value then_ compstmt if_tail K_END
## LR(1) items:
primary -> K_IF expr_value then_ compstmt if_tail K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_IF expr_value then_ compstmt if_tail K_END

State 770:
## Known stack suffix:
## K_FOR
## LR(1) items:
primary -> K_FOR . block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 167
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 249
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 251
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 252
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 771
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 772
-- On dsym shift to state 373
-- On block_var shift to state 773
-- On awords shift to state 374
## Reductions:

State 771:
## Known stack suffix:
## mlhs
## LR(1) items:
block_var -> mlhs . [ K_IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_var -> mlhs

State 772:
## Known stack suffix:
## lhs
## LR(1) items:
block_var -> lhs . [ K_IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_var -> lhs

State 773:
## Known stack suffix:
## K_FOR block_var
## LR(1) items:
primary -> K_FOR block_var . K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_IN shift to state 774
## Reductions:

State 774:
## Known stack suffix:
## K_FOR block_var K_IN
## LR(1) items:
primary -> K_FOR block_var K_IN . primary_e2 expr_value do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e2 shift to state 775
## Default reduction:
-- After reading the next token, reduce production primary_e2 ->

State 775:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 . expr_value do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 776
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 776:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value . do_ primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_DO_COND shift to state 645
-- On COMMENT shift to state 646
-- On COLON shift to state 647
-- On term shift to state 648
-- On do_ shift to state 777
## Reductions:

State 777:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value do_
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value do_ . primary_e3 compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e3 shift to state 778
## Default reduction:
-- After reading the next token, reduce production primary_e3 ->

State 778:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 . compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 779
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 779:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 780
## Reductions:

State 780:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END

State 781:
## Known stack suffix:
## K_FALSE
## LR(1) items:
variable -> K_FALSE . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> K_FALSE

State 782:
## Known stack suffix:
## K_DEFINED
## LR(1) items:
arg -> K_DEFINED . opt_nl arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_DEFINED . opt_nl LPAREN2 expr RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On NL shift to state 188
-- On COMMENT shift to state 189
-- On opt_nl shift to state 783
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG
--   reduce production opt_nl ->

State 783:
## Known stack suffix:
## K_DEFINED opt_nl
## LR(1) items:
arg -> K_DEFINED opt_nl . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_DEFINED opt_nl . LPAREN2 expr RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN2 shift to state 784
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1215
## Reductions:

State 784:
## Known stack suffix:
## K_DEFINED opt_nl LPAREN2
## LR(1) items:
primary -> K_DEFINED opt_nl LPAREN2 . expr RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 785
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 785:
## Known stack suffix:
## K_DEFINED opt_nl LPAREN2 expr
## LR(1) items:
expr -> expr . K_AND expr [ RPAREN K_OR K_AND ]
expr -> expr . K_OR expr [ RPAREN K_OR K_AND ]
primary -> K_DEFINED opt_nl LPAREN2 expr . RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RPAREN shift to state 786
-- On K_OR shift to state 466
-- On K_AND shift to state 470
## Reductions:

State 786:
## Known stack suffix:
## K_DEFINED opt_nl LPAREN2 expr RPAREN
## LR(1) items:
primary -> K_DEFINED opt_nl LPAREN2 expr RPAREN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_DEFINED opt_nl LPAREN2 expr RPAREN

State 787:
## Known stack suffix:
## K_DEF
## LR(1) items:
primary -> K_DEF . fname primary_e8 f_arglist bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_DEF . singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LPAREN2 shift to state 193
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 788
-- On K__FILE__ shift to state 789
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 790
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 791
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 792
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 793
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IVAR shift to state 209
-- On IDENTIFIER shift to state 794
-- On GVAR shift to state 212
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CVAR shift to state 215
-- On CONSTANT shift to state 795
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On variable shift to state 710
-- On var_ref shift to state 796
-- On singleton shift to state 797
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 852
## Reductions:

State 788:
## Known stack suffix:
## K__LINE__
## LR(1) items:
reswords -> K__LINE__ . [ STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER ]
variable -> K__LINE__ . [ DOT COLON2 ]
## Transitions:
## Reductions:
-- On STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER
--   reduce production reswords -> K__LINE__
-- On DOT COLON2
--   reduce production variable -> K__LINE__

State 789:
## Known stack suffix:
## K__FILE__
## LR(1) items:
reswords -> K__FILE__ . [ STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER ]
variable -> K__FILE__ . [ DOT COLON2 ]
## Transitions:
## Reductions:
-- On STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER
--   reduce production reswords -> K__FILE__
-- On DOT COLON2
--   reduce production variable -> K__FILE__

State 790:
## Known stack suffix:
## K_TRUE
## LR(1) items:
reswords -> K_TRUE . [ STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER ]
variable -> K_TRUE . [ DOT COLON2 ]
## Transitions:
## Reductions:
-- On STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER
--   reduce production reswords -> K_TRUE
-- On DOT COLON2
--   reduce production variable -> K_TRUE

State 791:
## Known stack suffix:
## K_SELF
## LR(1) items:
reswords -> K_SELF . [ STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER ]
variable -> K_SELF . [ DOT COLON2 ]
## Transitions:
## Reductions:
-- On STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER
--   reduce production reswords -> K_SELF
-- On DOT COLON2
--   reduce production variable -> K_SELF

State 792:
## Known stack suffix:
## K_NIL
## LR(1) items:
reswords -> K_NIL . [ STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER ]
variable -> K_NIL . [ DOT COLON2 ]
## Transitions:
## Reductions:
-- On STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER
--   reduce production reswords -> K_NIL
-- On DOT COLON2
--   reduce production variable -> K_NIL

State 793:
## Known stack suffix:
## K_FALSE
## LR(1) items:
reswords -> K_FALSE . [ STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER ]
variable -> K_FALSE . [ DOT COLON2 ]
## Transitions:
## Reductions:
-- On STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER
--   reduce production reswords -> K_FALSE
-- On DOT COLON2
--   reduce production variable -> K_FALSE

State 794:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
fname -> IDENTIFIER . [ STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER ]
variable -> IDENTIFIER . [ DOT COLON2 ]
## Transitions:
## Reductions:
-- On STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER
--   reduce production fname -> IDENTIFIER
-- On DOT COLON2
--   reduce production variable -> IDENTIFIER

State 795:
## Known stack suffix:
## CONSTANT
## LR(1) items:
fname -> CONSTANT . [ STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER ]
variable -> CONSTANT . [ DOT COLON2 ]
## Transitions:
## Reductions:
-- On STAR2 STAR SEMI NL LPAREN2 IVAR IDENTIFIER CVAR CONSTANT COMMENT AMPER2 AMPER
--   reduce production fname -> CONSTANT
-- On DOT COLON2
--   reduce production variable -> CONSTANT

State 796:
## Known stack suffix:
## var_ref
## LR(1) items:
singleton -> var_ref . [ DOT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production singleton -> var_ref

State 797:
## Known stack suffix:
## K_DEF singleton
## LR(1) items:
primary -> K_DEF singleton . dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On DOT shift to state 798
-- On COLON2 shift to state 799
-- On dot_or_colon shift to state 800
## Reductions:

State 798:
## Known stack suffix:
## DOT
## LR(1) items:
dot_or_colon -> DOT . [ UPLUS UMINUS TILDE STAR2 STAR RSHFT POW PLUS PIPE PERCENT MINUS MATCH LT LSHFT LEQ K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ DIVIDE CONSTANT CMP CARET BACK_REF2 ASET AREF AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dot_or_colon -> DOT

State 799:
## Known stack suffix:
## COLON2
## LR(1) items:
dot_or_colon -> COLON2 . [ UPLUS UMINUS TILDE STAR2 STAR RSHFT POW PLUS PIPE PERCENT MINUS MATCH LT LSHFT LEQ K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_UNDEF K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NOT K_NIL K_NEXT K_MODULE K_IN K_IF_MOD K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND K_ALIAS IDENTIFIER GT GEQ FID EQQ EQ DIVIDE CONSTANT CMP CARET BACK_REF2 ASET AREF AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dot_or_colon -> COLON2

State 800:
## Known stack suffix:
## K_DEF singleton dot_or_colon
## LR(1) items:
primary -> K_DEF singleton dot_or_colon . primary_e9 fname primary_e10 f_arglist bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e9 shift to state 801
## Default reduction:
-- After reading the next token, reduce production primary_e9 ->

State 801:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 . fname primary_e10 f_arglist bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 49
-- On K__FILE__ shift to state 50
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 57
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 60
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 68
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 74
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IDENTIFIER shift to state 89
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 98
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 802
## Reductions:

State 802:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname . primary_e10 f_arglist bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e10 shift to state 803
## Default reduction:
-- After reading the next token, reduce production primary_e10 ->

State 803:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname primary_e10
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 . f_arglist bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 804
-- On STAR shift to state 805
-- On LPAREN2 shift to state 806
-- On IVAR shift to state 807
-- On IDENTIFIER shift to state 808
-- On CVAR shift to state 811
-- On CONSTANT shift to state 812
-- On AMPER2 shift to state 813
-- On AMPER shift to state 814
-- On restarg_mark shift to state 815
-- On f_rest_arg shift to state 817
-- On f_optarg shift to state 823
-- On f_opt shift to state 830
-- On f_norm_arg shift to state 831
-- On f_block_arg shift to state 832
-- On f_args shift to state 847
-- On f_arglist shift to state 849
-- On f_arg shift to state 836
-- On blkarg_mark shift to state 820
## Reductions:
-- On SEMI NL COMMENT
--   reduce production f_args ->

State 804:
## Known stack suffix:
## STAR2
## LR(1) items:
restarg_mark -> STAR2 . [ SEMI RPAREN NL IDENTIFIER COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production restarg_mark -> STAR2

State 805:
## Known stack suffix:
## STAR
## LR(1) items:
restarg_mark -> STAR . [ SEMI RPAREN NL IDENTIFIER COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production restarg_mark -> STAR

State 806:
## Known stack suffix:
## LPAREN2
## LR(1) items:
f_arglist -> LPAREN2 . f_args opt_nl RPAREN [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On STAR2 shift to state 804
-- On STAR shift to state 805
-- On IVAR shift to state 807
-- On IDENTIFIER shift to state 808
-- On CVAR shift to state 811
-- On CONSTANT shift to state 812
-- On AMPER2 shift to state 813
-- On AMPER shift to state 814
-- On restarg_mark shift to state 815
-- On f_rest_arg shift to state 817
-- On f_optarg shift to state 823
-- On f_opt shift to state 830
-- On f_norm_arg shift to state 831
-- On f_block_arg shift to state 832
-- On f_args shift to state 833
-- On f_arg shift to state 836
-- On blkarg_mark shift to state 820
## Reductions:
-- On RPAREN NL COMMENT
--   reduce production f_args ->

State 807:
## Known stack suffix:
## IVAR
## LR(1) items:
f_norm_arg -> IVAR . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_norm_arg -> IVAR

State 808:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
f_norm_arg -> IDENTIFIER . [ SEMI RPAREN NL COMMENT COMMA ]
f_opt -> IDENTIFIER . EQL arg_value [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
-- On EQL shift to state 809
## Reductions:
-- On SEMI RPAREN NL COMMENT COMMA
--   reduce production f_norm_arg -> IDENTIFIER

State 809:
## Known stack suffix:
## IDENTIFIER EQL
## LR(1) items:
f_opt -> IDENTIFIER EQL . arg_value [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 810
-- On arg shift to state 491
## Reductions:

State 810:
## Known stack suffix:
## IDENTIFIER EQL arg_value
## LR(1) items:
f_opt -> IDENTIFIER EQL arg_value . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_opt -> IDENTIFIER EQL arg_value

State 811:
## Known stack suffix:
## CVAR
## LR(1) items:
f_norm_arg -> CVAR . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_norm_arg -> CVAR

State 812:
## Known stack suffix:
## CONSTANT
## LR(1) items:
f_norm_arg -> CONSTANT . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_norm_arg -> CONSTANT

State 813:
## Known stack suffix:
## AMPER2
## LR(1) items:
blkarg_mark -> AMPER2 . [ IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production blkarg_mark -> AMPER2

State 814:
## Known stack suffix:
## AMPER
## LR(1) items:
blkarg_mark -> AMPER . [ IDENTIFIER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production blkarg_mark -> AMPER

State 815:
## Known stack suffix:
## restarg_mark
## LR(1) items:
f_rest_arg -> restarg_mark . IDENTIFIER [ SEMI RPAREN NL COMMENT COMMA ]
f_rest_arg -> restarg_mark . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
-- On IDENTIFIER shift to state 816
## Reductions:
-- On SEMI RPAREN NL COMMENT COMMA
--   reduce production f_rest_arg -> restarg_mark

State 816:
## Known stack suffix:
## restarg_mark IDENTIFIER
## LR(1) items:
f_rest_arg -> restarg_mark IDENTIFIER . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_rest_arg -> restarg_mark IDENTIFIER

State 817:
## Known stack suffix:
## f_rest_arg
## LR(1) items:
f_args -> f_rest_arg . opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On COMMA shift to state 818
-- On opt_f_block_arg shift to state 822
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production opt_f_block_arg ->

State 818:
## Known stack suffix:
## COMMA
## LR(1) items:
opt_f_block_arg -> COMMA . f_block_arg [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On AMPER2 shift to state 813
-- On AMPER shift to state 814
-- On f_block_arg shift to state 819
-- On blkarg_mark shift to state 820
## Reductions:

State 819:
## Known stack suffix:
## COMMA f_block_arg
## LR(1) items:
opt_f_block_arg -> COMMA f_block_arg . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_f_block_arg -> COMMA f_block_arg

State 820:
## Known stack suffix:
## blkarg_mark
## LR(1) items:
f_block_arg -> blkarg_mark . IDENTIFIER [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On IDENTIFIER shift to state 821
## Reductions:

State 821:
## Known stack suffix:
## blkarg_mark IDENTIFIER
## LR(1) items:
f_block_arg -> blkarg_mark IDENTIFIER . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_block_arg -> blkarg_mark IDENTIFIER

State 822:
## Known stack suffix:
## f_rest_arg opt_f_block_arg
## LR(1) items:
f_args -> f_rest_arg opt_f_block_arg . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_args -> f_rest_arg opt_f_block_arg

State 823:
## Known stack suffix:
## f_optarg
## LR(1) items:
f_args -> f_optarg . COMMA f_rest_arg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_args -> f_optarg . opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_optarg -> f_optarg . COMMA f_opt [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
-- On COMMA shift to state 824
-- On opt_f_block_arg shift to state 829
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production opt_f_block_arg ->

State 824:
## Known stack suffix:
## f_optarg COMMA
## LR(1) items:
f_args -> f_optarg COMMA . f_rest_arg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_optarg -> f_optarg COMMA . f_opt [ SEMI RPAREN NL COMMENT COMMA ]
opt_f_block_arg -> COMMA . f_block_arg [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On STAR2 shift to state 804
-- On STAR shift to state 805
-- On IDENTIFIER shift to state 825
-- On AMPER2 shift to state 813
-- On AMPER shift to state 814
-- On restarg_mark shift to state 815
-- On f_rest_arg shift to state 826
-- On f_opt shift to state 828
-- On f_block_arg shift to state 819
-- On blkarg_mark shift to state 820
## Reductions:

State 825:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
f_opt -> IDENTIFIER . EQL arg_value [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
-- On EQL shift to state 809
## Reductions:

State 826:
## Known stack suffix:
## f_optarg COMMA f_rest_arg
## LR(1) items:
f_args -> f_optarg COMMA f_rest_arg . opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On COMMA shift to state 818
-- On opt_f_block_arg shift to state 827
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production opt_f_block_arg ->

State 827:
## Known stack suffix:
## f_optarg COMMA f_rest_arg opt_f_block_arg
## LR(1) items:
f_args -> f_optarg COMMA f_rest_arg opt_f_block_arg . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_args -> f_optarg COMMA f_rest_arg opt_f_block_arg

State 828:
## Known stack suffix:
## f_optarg COMMA f_opt
## LR(1) items:
f_optarg -> f_optarg COMMA f_opt . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_optarg -> f_optarg COMMA f_opt

State 829:
## Known stack suffix:
## f_optarg opt_f_block_arg
## LR(1) items:
f_args -> f_optarg opt_f_block_arg . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_args -> f_optarg opt_f_block_arg

State 830:
## Known stack suffix:
## f_opt
## LR(1) items:
f_optarg -> f_opt . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_optarg -> f_opt

State 831:
## Known stack suffix:
## f_norm_arg
## LR(1) items:
f_arg -> f_norm_arg . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_arg -> f_norm_arg

State 832:
## Known stack suffix:
## f_block_arg
## LR(1) items:
f_args -> f_block_arg . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_args -> f_block_arg

State 833:
## Known stack suffix:
## LPAREN2 f_args
## LR(1) items:
f_arglist -> LPAREN2 f_args . opt_nl RPAREN [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On NL shift to state 188
-- On COMMENT shift to state 189
-- On opt_nl shift to state 834
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 834:
## Known stack suffix:
## LPAREN2 f_args opt_nl
## LR(1) items:
f_arglist -> LPAREN2 f_args opt_nl . RPAREN [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On RPAREN shift to state 835
## Reductions:

State 835:
## Known stack suffix:
## LPAREN2 f_args opt_nl RPAREN
## LR(1) items:
f_arglist -> LPAREN2 f_args opt_nl RPAREN . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_arglist -> LPAREN2 f_args opt_nl RPAREN

State 836:
## Known stack suffix:
## f_arg
## LR(1) items:
f_arg -> f_arg . COMMA f_norm_arg [ SEMI RPAREN NL COMMENT COMMA ]
f_args -> f_arg . COMMA f_optarg COMMA f_rest_arg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_args -> f_arg . COMMA f_optarg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_args -> f_arg . COMMA f_rest_arg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_args -> f_arg . opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On COMMA shift to state 837
-- On opt_f_block_arg shift to state 846
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production opt_f_block_arg ->

State 837:
## Known stack suffix:
## f_arg COMMA
## LR(1) items:
f_arg -> f_arg COMMA . f_norm_arg [ SEMI RPAREN NL COMMENT COMMA ]
f_args -> f_arg COMMA . f_optarg COMMA f_rest_arg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_args -> f_arg COMMA . f_optarg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_args -> f_arg COMMA . f_rest_arg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
opt_f_block_arg -> COMMA . f_block_arg [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On STAR2 shift to state 804
-- On STAR shift to state 805
-- On IVAR shift to state 807
-- On IDENTIFIER shift to state 808
-- On CVAR shift to state 811
-- On CONSTANT shift to state 812
-- On AMPER2 shift to state 813
-- On AMPER shift to state 814
-- On restarg_mark shift to state 815
-- On f_rest_arg shift to state 838
-- On f_optarg shift to state 840
-- On f_opt shift to state 830
-- On f_norm_arg shift to state 845
-- On f_block_arg shift to state 819
-- On blkarg_mark shift to state 820
## Reductions:

State 838:
## Known stack suffix:
## f_arg COMMA f_rest_arg
## LR(1) items:
f_args -> f_arg COMMA f_rest_arg . opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On COMMA shift to state 818
-- On opt_f_block_arg shift to state 839
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production opt_f_block_arg ->

State 839:
## Known stack suffix:
## f_arg COMMA f_rest_arg opt_f_block_arg
## LR(1) items:
f_args -> f_arg COMMA f_rest_arg opt_f_block_arg . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_args -> f_arg COMMA f_rest_arg opt_f_block_arg

State 840:
## Known stack suffix:
## f_arg COMMA f_optarg
## LR(1) items:
f_args -> f_arg COMMA f_optarg . COMMA f_rest_arg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_args -> f_arg COMMA f_optarg . opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_optarg -> f_optarg . COMMA f_opt [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
-- On COMMA shift to state 841
-- On opt_f_block_arg shift to state 844
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production opt_f_block_arg ->

State 841:
## Known stack suffix:
## f_arg COMMA f_optarg COMMA
## LR(1) items:
f_args -> f_arg COMMA f_optarg COMMA . f_rest_arg opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
f_optarg -> f_optarg COMMA . f_opt [ SEMI RPAREN NL COMMENT COMMA ]
opt_f_block_arg -> COMMA . f_block_arg [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On STAR2 shift to state 804
-- On STAR shift to state 805
-- On IDENTIFIER shift to state 825
-- On AMPER2 shift to state 813
-- On AMPER shift to state 814
-- On restarg_mark shift to state 815
-- On f_rest_arg shift to state 842
-- On f_opt shift to state 828
-- On f_block_arg shift to state 819
-- On blkarg_mark shift to state 820
## Reductions:

State 842:
## Known stack suffix:
## f_arg COMMA f_optarg COMMA f_rest_arg
## LR(1) items:
f_args -> f_arg COMMA f_optarg COMMA f_rest_arg . opt_f_block_arg [ SEMI RPAREN NL COMMENT ]
## Transitions:
-- On COMMA shift to state 818
-- On opt_f_block_arg shift to state 843
## Reductions:
-- On SEMI RPAREN NL COMMENT
--   reduce production opt_f_block_arg ->

State 843:
## Known stack suffix:
## f_arg COMMA f_optarg COMMA f_rest_arg opt_f_block_arg
## LR(1) items:
f_args -> f_arg COMMA f_optarg COMMA f_rest_arg opt_f_block_arg . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_args -> f_arg COMMA f_optarg COMMA f_rest_arg opt_f_block_arg

State 844:
## Known stack suffix:
## f_arg COMMA f_optarg opt_f_block_arg
## LR(1) items:
f_args -> f_arg COMMA f_optarg opt_f_block_arg . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_args -> f_arg COMMA f_optarg opt_f_block_arg

State 845:
## Known stack suffix:
## f_arg COMMA f_norm_arg
## LR(1) items:
f_arg -> f_arg COMMA f_norm_arg . [ SEMI RPAREN NL COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_arg -> f_arg COMMA f_norm_arg

State 846:
## Known stack suffix:
## f_arg opt_f_block_arg
## LR(1) items:
f_args -> f_arg opt_f_block_arg . [ SEMI RPAREN NL COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_args -> f_arg opt_f_block_arg

State 847:
## Known stack suffix:
## f_args
## LR(1) items:
f_arglist -> f_args . term [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On COMMENT shift to state 646
-- On term shift to state 848
## Reductions:

State 848:
## Known stack suffix:
## f_args term
## LR(1) items:
f_arglist -> f_args term . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production f_arglist -> f_args term

State 849:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist . bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 850
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 850:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 851
## Reductions:

State 851:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END

State 852:
## Known stack suffix:
## K_DEF fname
## LR(1) items:
primary -> K_DEF fname . primary_e8 f_arglist bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e8 shift to state 853
## Default reduction:
-- After reading the next token, reduce production primary_e8 ->

State 853:
## Known stack suffix:
## K_DEF fname primary_e8
## LR(1) items:
primary -> K_DEF fname primary_e8 . f_arglist bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 804
-- On STAR shift to state 805
-- On LPAREN2 shift to state 806
-- On IVAR shift to state 807
-- On IDENTIFIER shift to state 808
-- On CVAR shift to state 811
-- On CONSTANT shift to state 812
-- On AMPER2 shift to state 813
-- On AMPER shift to state 814
-- On restarg_mark shift to state 815
-- On f_rest_arg shift to state 817
-- On f_optarg shift to state 823
-- On f_opt shift to state 830
-- On f_norm_arg shift to state 831
-- On f_block_arg shift to state 832
-- On f_args shift to state 847
-- On f_arglist shift to state 854
-- On f_arg shift to state 836
-- On blkarg_mark shift to state 820
## Reductions:
-- On SEMI NL COMMENT
--   reduce production f_args ->

State 854:
## Known stack suffix:
## K_DEF fname primary_e8 f_arglist
## LR(1) items:
primary -> K_DEF fname primary_e8 f_arglist . bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 855
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 855:
## Known stack suffix:
## K_DEF fname primary_e8 f_arglist bodystmt
## LR(1) items:
primary -> K_DEF fname primary_e8 f_arglist bodystmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 856
## Reductions:

State 856:
## Known stack suffix:
## K_DEF fname primary_e8 f_arglist bodystmt K_END
## LR(1) items:
primary -> K_DEF fname primary_e8 f_arglist bodystmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_DEF fname primary_e8 f_arglist bodystmt K_END

State 857:
## Known stack suffix:
## K_CLASS
## LR(1) items:
primary -> K_CLASS . cpath superclass primary_e4 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_CLASS . LSHFT expr primary_e5 term primary_e6 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UMINUS_NUM shift to state 132
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LSHFT shift to state 858
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 247
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 704
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 705
-- On COLON3 shift to state 706
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 710
-- On var_ref shift to state 226
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 711
-- On primary shift to state 564
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On dsym shift to state 373
-- On cpath shift to state 865
-- On cname shift to state 757
-- On awords shift to state 374
## Reductions:

State 858:
## Known stack suffix:
## K_CLASS LSHFT
## LR(1) items:
primary -> K_CLASS LSHFT . expr primary_e5 term primary_e6 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 859
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 859:
## Known stack suffix:
## K_CLASS LSHFT expr
## LR(1) items:
expr -> expr . K_AND expr [ SEMI NL K_OR K_AND COMMENT ]
expr -> expr . K_OR expr [ SEMI NL K_OR K_AND COMMENT ]
primary -> K_CLASS LSHFT expr . primary_e5 term primary_e6 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_OR shift to state 466
-- On K_AND shift to state 470
-- On primary_e5 shift to state 860
## Reductions:
-- On SEMI NL COMMENT
--   reduce production primary_e5 ->

State 860:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 . term primary_e6 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On COMMENT shift to state 646
-- On term shift to state 861
## Reductions:

State 861:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5 term
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 term . primary_e6 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e6 shift to state 862
## Default reduction:
-- After reading the next token, reduce production primary_e6 ->

State 862:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5 term primary_e6
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 term primary_e6 . bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 863
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 863:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 864
## Reductions:

State 864:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt K_END
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt K_END

State 865:
## Known stack suffix:
## K_CLASS cpath
## LR(1) items:
primary -> K_CLASS cpath . superclass primary_e4 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 866
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On LT shift to state 868
-- On COMMENT shift to state 646
-- On term shift to state 872
-- On superclass shift to state 873
## Reductions:

State 866:
## Known stack suffix:
## error
## LR(1) items:
superclass -> error . term [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On COMMENT shift to state 646
-- On term shift to state 867
## Reductions:

State 867:
## Known stack suffix:
## error term
## LR(1) items:
superclass -> error term . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production superclass -> error term

State 868:
## Known stack suffix:
## LT
## LR(1) items:
superclass -> LT . superclass_e1 expr_value term [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On superclass_e1 shift to state 869
## Default reduction:
-- After reading the next token, reduce production superclass_e1 ->

State 869:
## Known stack suffix:
## LT superclass_e1
## LR(1) items:
superclass -> LT superclass_e1 . expr_value term [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 870
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 870:
## Known stack suffix:
## LT superclass_e1 expr_value
## LR(1) items:
superclass -> LT superclass_e1 expr_value . term [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On COMMENT shift to state 646
-- On term shift to state 871
## Reductions:

State 871:
## Known stack suffix:
## LT superclass_e1 expr_value term
## LR(1) items:
superclass -> LT superclass_e1 expr_value term . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production superclass -> LT superclass_e1 expr_value term

State 872:
## Known stack suffix:
## term
## LR(1) items:
superclass -> term . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production superclass -> term

State 873:
## Known stack suffix:
## K_CLASS cpath superclass
## LR(1) items:
primary -> K_CLASS cpath superclass . primary_e4 bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On primary_e4 shift to state 874
## Default reduction:
-- After reading the next token, reduce production primary_e4 ->

State 874:
## Known stack suffix:
## K_CLASS cpath superclass primary_e4
## LR(1) items:
primary -> K_CLASS cpath superclass primary_e4 . bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 875
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 875:
## Known stack suffix:
## K_CLASS cpath superclass primary_e4 bodystmt
## LR(1) items:
primary -> K_CLASS cpath superclass primary_e4 bodystmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 876
## Reductions:

State 876:
## Known stack suffix:
## K_CLASS cpath superclass primary_e4 bodystmt K_END
## LR(1) items:
primary -> K_CLASS cpath superclass primary_e4 bodystmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CLASS cpath superclass primary_e4 bodystmt K_END

State 877:
## Known stack suffix:
## K_CASE
## LR(1) items:
primary -> K_CASE . expr_value opt_terms case_body opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_CASE . opt_terms case_body opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_CASE . opt_terms K_ELSE compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On SEMI shift to state 198
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On NL shift to state 199
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COMMENT shift to state 460
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On terms shift to state 878
-- On term shift to state 879
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On opt_terms shift to state 881
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 901
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On K_WHEN K_ELSE
--   reduce production opt_terms ->

State 878:
## Known stack suffix:
## terms
## LR(1) items:
opt_terms -> terms . [ K_WHEN K_ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_terms -> terms

State 879:
## Known stack suffix:
## term
## LR(1) items:
terms -> term . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR RPAREN REGEXP_BEG RCURLY QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG # ]
terms -> term . terms [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR RPAREN REGEXP_BEG RCURLY QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG # ]
## Transitions:
-- On SEMI shift to state 198
-- On NL shift to state 199
-- On COMMENT shift to state 460
-- On terms shift to state 880
-- On term shift to state 879
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR RPAREN REGEXP_BEG RCURLY QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG
--   reduce production terms -> term

State 880:
## Known stack suffix:
## term terms
## LR(1) items:
terms -> term terms . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR RPAREN REGEXP_BEG RCURLY QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_WHEN K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production terms -> term terms

State 881:
## Known stack suffix:
## K_CASE opt_terms
## LR(1) items:
primary -> K_CASE opt_terms . case_body opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> K_CASE opt_terms . K_ELSE compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_WHEN shift to state 882
-- On K_ELSE shift to state 895
-- On case_body shift to state 898
## Reductions:

State 882:
## Known stack suffix:
## K_WHEN
## LR(1) items:
case_body -> K_WHEN . when_args then_ compstmt cases [ K_END K_ELSE ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 883
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On when_args shift to state 885
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On args shift to state 891
-- On arg_value shift to state 586
-- On arg shift to state 491
## Reductions:

State 883:
## Known stack suffix:
## STAR
## LR(1) items:
when_args -> STAR . arg_value [ SEMI NL K_THEN COMMENT COLON ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 884
-- On arg shift to state 491
## Reductions:

State 884:
## Known stack suffix:
## STAR arg_value
## LR(1) items:
when_args -> STAR arg_value . [ SEMI NL K_THEN COMMENT COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production when_args -> STAR arg_value

State 885:
## Known stack suffix:
## K_WHEN when_args
## LR(1) items:
case_body -> K_WHEN when_args . then_ compstmt cases [ K_END K_ELSE ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_THEN shift to state 662
-- On COMMENT shift to state 646
-- On COLON shift to state 663
-- On then_ shift to state 886
-- On term shift to state 671
## Reductions:

State 886:
## Known stack suffix:
## K_WHEN when_args then_
## LR(1) items:
case_body -> K_WHEN when_args then_ . compstmt cases [ K_END K_ELSE ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 887
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_WHEN K_END K_ELSE COMMENT
--   reduce production none ->

State 887:
## Known stack suffix:
## K_WHEN when_args then_ compstmt
## LR(1) items:
case_body -> K_WHEN when_args then_ compstmt . cases [ K_END K_ELSE ]
## Transitions:
-- On K_WHEN shift to state 882
-- On none shift to state 888
-- On cases shift to state 889
-- On case_body shift to state 890
## Reductions:
-- On K_END K_ELSE
--   reduce production none ->

State 888:
## Known stack suffix:
## none
## LR(1) items:
cases -> none . [ K_END K_ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cases -> none

State 889:
## Known stack suffix:
## K_WHEN when_args then_ compstmt cases
## LR(1) items:
case_body -> K_WHEN when_args then_ compstmt cases . [ K_END K_ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_body -> K_WHEN when_args then_ compstmt cases

State 890:
## Known stack suffix:
## case_body
## LR(1) items:
cases -> case_body . [ K_END K_ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cases -> case_body

State 891:
## Known stack suffix:
## args
## LR(1) items:
args -> args . COMMA arg_value [ SEMI NL K_THEN COMMENT COMMA COLON ]
when_args -> args . [ SEMI NL K_THEN COMMENT COLON ]
when_args -> args . COMMA STAR arg_value [ SEMI NL K_THEN COMMENT COLON ]
## Transitions:
-- On COMMA shift to state 892
## Reductions:
-- On SEMI NL K_THEN COMMENT COLON
--   reduce production when_args -> args

State 892:
## Known stack suffix:
## args COMMA
## LR(1) items:
args -> args COMMA . arg_value [ SEMI NL K_THEN COMMENT COMMA COLON ]
when_args -> args COMMA . STAR arg_value [ SEMI NL K_THEN COMMENT COLON ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 893
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 499
-- On arg shift to state 491
## Reductions:

State 893:
## Known stack suffix:
## args COMMA STAR
## LR(1) items:
when_args -> args COMMA STAR . arg_value [ SEMI NL K_THEN COMMENT COLON ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 894
-- On arg shift to state 491
## Reductions:

State 894:
## Known stack suffix:
## args COMMA STAR arg_value
## LR(1) items:
when_args -> args COMMA STAR arg_value . [ SEMI NL K_THEN COMMENT COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production when_args -> args COMMA STAR arg_value

State 895:
## Known stack suffix:
## K_CASE opt_terms K_ELSE
## LR(1) items:
primary -> K_CASE opt_terms K_ELSE . compstmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 896
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 896:
## Known stack suffix:
## K_CASE opt_terms K_ELSE compstmt
## LR(1) items:
primary -> K_CASE opt_terms K_ELSE compstmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 897
## Reductions:

State 897:
## Known stack suffix:
## K_CASE opt_terms K_ELSE compstmt K_END
## LR(1) items:
primary -> K_CASE opt_terms K_ELSE compstmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CASE opt_terms K_ELSE compstmt K_END

State 898:
## Known stack suffix:
## K_CASE opt_terms case_body
## LR(1) items:
primary -> K_CASE opt_terms case_body . opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_ELSE shift to state 666
-- On opt_else shift to state 899
-- On none shift to state 670
## Reductions:
-- On K_END
--   reduce production none ->

State 899:
## Known stack suffix:
## K_CASE opt_terms case_body opt_else
## LR(1) items:
primary -> K_CASE opt_terms case_body opt_else . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 900
## Reductions:

State 900:
## Known stack suffix:
## K_CASE opt_terms case_body opt_else K_END
## LR(1) items:
primary -> K_CASE opt_terms case_body opt_else K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CASE opt_terms case_body opt_else K_END

State 901:
## Known stack suffix:
## K_CASE expr_value
## LR(1) items:
primary -> K_CASE expr_value . opt_terms case_body opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On SEMI shift to state 198
-- On NL shift to state 199
-- On COMMENT shift to state 460
-- On terms shift to state 878
-- On term shift to state 879
-- On opt_terms shift to state 902
## Reductions:
-- On K_WHEN
--   reduce production opt_terms ->

State 902:
## Known stack suffix:
## K_CASE expr_value opt_terms
## LR(1) items:
primary -> K_CASE expr_value opt_terms . case_body opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_WHEN shift to state 882
-- On case_body shift to state 903
## Reductions:

State 903:
## Known stack suffix:
## K_CASE expr_value opt_terms case_body
## LR(1) items:
primary -> K_CASE expr_value opt_terms case_body . opt_else K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_ELSE shift to state 666
-- On opt_else shift to state 904
-- On none shift to state 670
## Reductions:
-- On K_END
--   reduce production none ->

State 904:
## Known stack suffix:
## K_CASE expr_value opt_terms case_body opt_else
## LR(1) items:
primary -> K_CASE expr_value opt_terms case_body opt_else . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 905
## Reductions:

State 905:
## Known stack suffix:
## K_CASE expr_value opt_terms case_body opt_else K_END
## LR(1) items:
primary -> K_CASE expr_value opt_terms case_body opt_else K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CASE expr_value opt_terms case_body opt_else K_END

State 906:
## Known stack suffix:
## K_BREAK
## LR(1) items:
primary -> K_BREAK . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_BREAK

State 907:
## Known stack suffix:
## K_BEGIN
## LR(1) items:
primary -> K_BEGIN . bodystmt K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 908
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 908:
## Known stack suffix:
## K_BEGIN bodystmt
## LR(1) items:
primary -> K_BEGIN bodystmt . K_END [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_END shift to state 909
## Reductions:

State 909:
## Known stack suffix:
## K_BEGIN bodystmt K_END
## LR(1) items:
primary -> K_BEGIN bodystmt K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_BEGIN bodystmt K_END

State 910:
## Known stack suffix:
## IVAR
## LR(1) items:
variable -> IVAR . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> IVAR

State 911:
## Known stack suffix:
## INTEGER
## LR(1) items:
numeric -> INTEGER . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric -> INTEGER

State 912:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
operation -> IDENTIFIER . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
variable -> IDENTIFIER . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation -> IDENTIFIER
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production variable -> IDENTIFIER

State 913:
## Known stack suffix:
## GVAR
## LR(1) items:
variable -> GVAR . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> GVAR

State 914:
## Known stack suffix:
## FLOAT
## LR(1) items:
numeric -> FLOAT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric -> FLOAT

State 915:
## Known stack suffix:
## FID
## LR(1) items:
operation -> FID . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
primary -> FID . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation -> FID
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> FID

State 916:
## Known stack suffix:
## CVAR
## LR(1) items:
variable -> CVAR . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> CVAR

State 917:
## Known stack suffix:
## CONSTANT
## LR(1) items:
operation -> CONSTANT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
variable -> CONSTANT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LCURLY LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation -> CONSTANT
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP OP_ASGN NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQL EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production variable -> CONSTANT

State 918:
## Known stack suffix:
## COLON3
## LR(1) items:
arg -> COLON3 . CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> COLON3 . CONSTANT [ EQL ]
primary -> COLON3 . CONSTANT [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On CONSTANT shift to state 919
## Reductions:

State 919:
## Known stack suffix:
## COLON3 CONSTANT
## LR(1) items:
arg -> COLON3 CONSTANT . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> COLON3 CONSTANT . [ EQL ]
primary -> COLON3 CONSTANT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On OP_ASGN shift to state 920
## Reductions:
-- On EQL
--   reduce production lhs -> COLON3 CONSTANT
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> COLON3 CONSTANT

State 920:
## Known stack suffix:
## COLON3 CONSTANT OP_ASGN
## LR(1) items:
arg -> COLON3 CONSTANT OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1214
## Reductions:

State 921:
## Known stack suffix:
## BANG
## LR(1) items:
arg -> BANG . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1191
## Reductions:

State 922:
## Known stack suffix:
## xstring
## LR(1) items:
primary -> xstring . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> xstring

State 923:
## Known stack suffix:
## words
## LR(1) items:
primary -> words . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> words

State 924:
## Known stack suffix:
## variable
## LR(1) items:
lhs -> variable . [ EQL ]
var_lhs -> variable . [ OP_ASGN ]
var_ref -> variable . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Reductions:
-- On EQL
--   reduce production lhs -> variable
-- On OP_ASGN
--   reduce production var_lhs -> variable
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production var_ref -> variable

State 925:
## Known stack suffix:
## var_ref
## LR(1) items:
primary -> var_ref . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> var_ref

State 926:
## Known stack suffix:
## var_lhs
## LR(1) items:
arg -> var_lhs . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On OP_ASGN shift to state 927
## Reductions:

State 927:
## Known stack suffix:
## var_lhs OP_ASGN
## LR(1) items:
arg -> var_lhs OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1112
## Reductions:

State 928:
## Known stack suffix:
## symbol
## LR(1) items:
literal -> symbol . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> symbol

State 929:
## Known stack suffix:
## strings
## LR(1) items:
primary -> strings . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> strings

State 930:
## Known stack suffix:
## string1
## LR(1) items:
string -> string1 . [ error STRING_BEG STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string -> string1

State 931:
## Known stack suffix:
## string
## LR(1) items:
string -> string . string1 [ error STRING_BEG STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
strings -> string . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STRING_BEG shift to state 354
-- On string1 shift to state 932
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production strings -> string

State 932:
## Known stack suffix:
## string string1
## LR(1) items:
string -> string string1 . [ error STRING_BEG STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string -> string string1

State 933:
## Known stack suffix:
## regexp
## LR(1) items:
primary -> regexp . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> regexp

State 934:
## Known stack suffix:
## primary_value
## LR(1) items:
arg -> primary_value . LB aref_args RBRACK OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value . DOT IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value . DOT CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value . COLON2 IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value . COLON2 CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value . LB aref_args RBRACK [ EQL ]
lhs -> primary_value . DOT IDENTIFIER [ EQL ]
lhs -> primary_value . COLON2 IDENTIFIER [ EQL ]
lhs -> primary_value . DOT CONSTANT [ EQL ]
lhs -> primary_value . COLON2 CONSTANT [ EQL ]
method_call -> primary_value . DOT operation2 opt_paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
method_call -> primary_value . COLON2 operation2 paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
method_call -> primary_value . COLON2 operation3 [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> primary_value . COLON2 CONSTANT [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> primary_value . LB aref_args RBRACK [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LB shift to state 935
-- On DOT shift to state 1210
-- On COLON2 shift to state 1212
## Reductions:

State 935:
## Known stack suffix:
## primary_value LB
## LR(1) items:
arg -> primary_value LB . aref_args RBRACK OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value LB . aref_args RBRACK [ EQL ]
primary -> primary_value LB . aref_args RBRACK [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 936
## Reductions:
-- On RBRACK
--   reduce production none ->

State 936:
## Known stack suffix:
## primary_value LB aref_args
## LR(1) items:
arg -> primary_value LB aref_args . RBRACK OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value LB aref_args . RBRACK [ EQL ]
primary -> primary_value LB aref_args . RBRACK [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RBRACK shift to state 937
## Reductions:

State 937:
## Known stack suffix:
## primary_value LB aref_args RBRACK
## LR(1) items:
arg -> primary_value LB aref_args RBRACK . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value LB aref_args RBRACK . [ EQL ]
primary -> primary_value LB aref_args RBRACK . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On OP_ASGN shift to state 938
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value LB aref_args RBRACK
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> primary_value LB aref_args RBRACK

State 938:
## Known stack suffix:
## primary_value LB aref_args RBRACK OP_ASGN
## LR(1) items:
arg -> primary_value LB aref_args RBRACK OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1137
## Reductions:

State 939:
## Known stack suffix:
## primary
## LR(1) items:
arg -> primary . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
primary_value -> primary . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> primary
-- On LB DOT COLON2
--   reduce production primary_value -> primary

State 940:
## Known stack suffix:
## operation
## LR(1) items:
method_call -> operation . paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> operation . brace_block [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On LCURLY shift to state 941
-- On K_DO shift to state 959
-- On paren_args shift to state 1045
-- On brace_block shift to state 1048
## Reductions:

State 941:
## Known stack suffix:
## LCURLY
## LR(1) items:
brace_block -> LCURLY . brace_block_e1 opt_block_var compstmt RCURLY_error [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On brace_block_e1 shift to state 942
## Default reduction:
-- After reading the next token, reduce production brace_block_e1 ->

State 942:
## Known stack suffix:
## LCURLY brace_block_e1
## LR(1) items:
brace_block -> LCURLY brace_block_e1 . opt_block_var compstmt RCURLY_error [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On PIPE shift to state 245
-- On OROP shift to state 257
-- On opt_block_var shift to state 943
-- On none shift to state 1189
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production none ->

State 943:
## Known stack suffix:
## LCURLY brace_block_e1 opt_block_var
## LR(1) items:
brace_block -> LCURLY brace_block_e1 opt_block_var . compstmt RCURLY_error [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 259
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmts shift to state 1113
-- On stmt shift to state 1183
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On none shift to state 1184
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On compstmt shift to state 1208
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:
-- On SEMI RCURLY NL COMMENT
--   reduce production none ->

State 944:
## Known stack suffix:
## K_UNDEF
## LR(1) items:
stmt -> K_UNDEF . undef_list [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On SYMBEG shift to state 945
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On K_lEND shift to state 290
-- On K_lBEGIN shift to state 291
-- On K__LINE__ shift to state 292
-- On K__FILE__ shift to state 293
-- On K_YIELD shift to state 294
-- On K_WHILE_MOD shift to state 295
-- On K_WHEN shift to state 296
-- On K_UNTIL_MOD shift to state 297
-- On K_UNLESS_MOD shift to state 298
-- On K_UNDEF shift to state 299
-- On K_TRUE shift to state 300
-- On K_THEN shift to state 301
-- On K_SUPER shift to state 302
-- On K_SELF shift to state 303
-- On K_RETURN shift to state 304
-- On K_RETRY shift to state 305
-- On K_RESCUE_MOD shift to state 306
-- On K_RESCUE shift to state 307
-- On K_REDO shift to state 308
-- On K_OR shift to state 309
-- On K_NOT shift to state 310
-- On K_NIL shift to state 311
-- On K_NEXT shift to state 312
-- On K_MODULE shift to state 313
-- On K_IN shift to state 314
-- On K_IF_MOD shift to state 315
-- On K_FOR shift to state 316
-- On K_FALSE shift to state 317
-- On K_ENSURE shift to state 318
-- On K_END shift to state 319
-- On K_ELSIF shift to state 320
-- On K_ELSE shift to state 321
-- On K_DO shift to state 322
-- On K_DEFINED shift to state 323
-- On K_DEF shift to state 324
-- On K_CLASS shift to state 325
-- On K_CASE shift to state 326
-- On K_BREAK shift to state 327
-- On K_BEGIN shift to state 328
-- On K_AND shift to state 329
-- On K_ALIAS shift to state 330
-- On IDENTIFIER shift to state 332
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 336
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 341
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On undef_list shift to state 946
-- On symbol shift to state 949
-- On reswords shift to state 351
-- On op shift to state 352
-- On fname shift to state 950
-- On fitem shift to state 952
## Reductions:

State 945:
## Known stack suffix:
## SYMBEG
## LR(1) items:
symbol -> SYMBEG . sym [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT COMMA ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On K_lEND shift to state 290
-- On K_lBEGIN shift to state 291
-- On K__LINE__ shift to state 292
-- On K__FILE__ shift to state 293
-- On K_YIELD shift to state 294
-- On K_WHILE_MOD shift to state 295
-- On K_WHEN shift to state 296
-- On K_UNTIL_MOD shift to state 297
-- On K_UNLESS_MOD shift to state 298
-- On K_UNDEF shift to state 299
-- On K_TRUE shift to state 300
-- On K_THEN shift to state 301
-- On K_SUPER shift to state 302
-- On K_SELF shift to state 303
-- On K_RETURN shift to state 304
-- On K_RETRY shift to state 305
-- On K_RESCUE_MOD shift to state 306
-- On K_RESCUE shift to state 307
-- On K_REDO shift to state 308
-- On K_OR shift to state 309
-- On K_NOT shift to state 310
-- On K_NIL shift to state 311
-- On K_NEXT shift to state 312
-- On K_MODULE shift to state 313
-- On K_IN shift to state 314
-- On K_IF_MOD shift to state 315
-- On K_FOR shift to state 316
-- On K_FALSE shift to state 317
-- On K_ENSURE shift to state 318
-- On K_END shift to state 319
-- On K_ELSIF shift to state 320
-- On K_ELSE shift to state 321
-- On K_DO shift to state 322
-- On K_DEFINED shift to state 323
-- On K_DEF shift to state 324
-- On K_CLASS shift to state 325
-- On K_CASE shift to state 326
-- On K_BREAK shift to state 327
-- On K_BEGIN shift to state 328
-- On K_AND shift to state 329
-- On K_ALIAS shift to state 330
-- On IVAR shift to state 331
-- On IDENTIFIER shift to state 332
-- On GVAR shift to state 333
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 336
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CVAR shift to state 340
-- On CONSTANT shift to state 341
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On sym shift to state 350
-- On reswords shift to state 351
-- On op shift to state 352
-- On fname shift to state 353
## Reductions:

State 946:
## Known stack suffix:
## K_UNDEF undef_list
## LR(1) items:
stmt -> K_UNDEF undef_list . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
undef_list -> undef_list . COMMA undef_list_e1 fitem [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT COMMA ]
## Transitions:
-- On COMMA shift to state 947
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT
--   reduce production stmt -> K_UNDEF undef_list

State 947:
## Known stack suffix:
## undef_list COMMA
## LR(1) items:
undef_list -> undef_list COMMA . undef_list_e1 fitem [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT COMMA ]
## Transitions:
-- On undef_list_e1 shift to state 948
## Default reduction:
-- After reading the next token, reduce production undef_list_e1 ->

State 948:
## Known stack suffix:
## undef_list COMMA undef_list_e1
## LR(1) items:
undef_list -> undef_list COMMA undef_list_e1 . fitem [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT COMMA ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On SYMBEG shift to state 945
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On K_lEND shift to state 290
-- On K_lBEGIN shift to state 291
-- On K__LINE__ shift to state 292
-- On K__FILE__ shift to state 293
-- On K_YIELD shift to state 294
-- On K_WHILE_MOD shift to state 295
-- On K_WHEN shift to state 296
-- On K_UNTIL_MOD shift to state 297
-- On K_UNLESS_MOD shift to state 298
-- On K_UNDEF shift to state 299
-- On K_TRUE shift to state 300
-- On K_THEN shift to state 301
-- On K_SUPER shift to state 302
-- On K_SELF shift to state 303
-- On K_RETURN shift to state 304
-- On K_RETRY shift to state 305
-- On K_RESCUE_MOD shift to state 306
-- On K_RESCUE shift to state 307
-- On K_REDO shift to state 308
-- On K_OR shift to state 309
-- On K_NOT shift to state 310
-- On K_NIL shift to state 311
-- On K_NEXT shift to state 312
-- On K_MODULE shift to state 313
-- On K_IN shift to state 314
-- On K_IF_MOD shift to state 315
-- On K_FOR shift to state 316
-- On K_FALSE shift to state 317
-- On K_ENSURE shift to state 318
-- On K_END shift to state 319
-- On K_ELSIF shift to state 320
-- On K_ELSE shift to state 321
-- On K_DO shift to state 322
-- On K_DEFINED shift to state 323
-- On K_DEF shift to state 324
-- On K_CLASS shift to state 325
-- On K_CASE shift to state 326
-- On K_BREAK shift to state 327
-- On K_BEGIN shift to state 328
-- On K_AND shift to state 329
-- On K_ALIAS shift to state 330
-- On IDENTIFIER shift to state 332
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 336
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 341
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On symbol shift to state 949
-- On reswords shift to state 351
-- On op shift to state 352
-- On fname shift to state 950
-- On fitem shift to state 951
## Reductions:

State 949:
## Known stack suffix:
## symbol
## LR(1) items:
fitem -> symbol . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fitem -> symbol

State 950:
## Known stack suffix:
## fname
## LR(1) items:
fitem -> fname . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fitem -> fname

State 951:
## Known stack suffix:
## undef_list COMMA undef_list_e1 fitem
## LR(1) items:
undef_list -> undef_list COMMA undef_list_e1 fitem . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production undef_list -> undef_list COMMA undef_list_e1 fitem

State 952:
## Known stack suffix:
## fitem
## LR(1) items:
undef_list -> fitem . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production undef_list -> fitem

State 953:
## Known stack suffix:
## K_SUPER
## LR(1) items:
command -> K_SUPER . command_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
method_call -> K_SUPER . paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
method_call -> K_SUPER . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On paren_args shift to state 696
-- On command_args_e1 shift to state 634
-- On command_args shift to state 954
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production method_call -> K_SUPER

State 954:
## Known stack suffix:
## K_SUPER command_args
## LR(1) items:
command -> K_SUPER command_args . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> K_SUPER command_args

State 955:
## Known stack suffix:
## K_RETURN
## LR(1) items:
command_call -> K_RETURN . call_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
primary -> K_RETURN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 635
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On AMPER shift to state 956
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command shift to state 1049
-- On call_args shift to state 1207
-- On block_arg shift to state 1051
-- On awords shift to state 972
-- On assocs shift to state 1052
-- On assoc shift to state 1066
-- On args shift to state 1067
-- On arg_value shift to state 1080
-- On arg shift to state 1060
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ANDOP AMPER2
--   reduce production primary -> K_RETURN

State 956:
## Known stack suffix:
## AMPER
## LR(1) items:
block_arg -> AMPER . arg_value [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg_value shift to state 1206
-- On arg shift to state 1060
## Reductions:

State 957:
## Known stack suffix:
## numeric
## LR(1) items:
literal -> numeric . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> numeric

State 958:
## Known stack suffix:
## method_call
## LR(1) items:
primary -> method_call . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> method_call . brace_block [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LCURLY shift to state 941
-- On K_DO shift to state 959
-- On brace_block shift to state 1205
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> method_call

State 959:
## Known stack suffix:
## K_DO
## LR(1) items:
brace_block -> K_DO . brace_block_e1 opt_block_var compstmt K_END_error [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On brace_block_e1 shift to state 960
## Default reduction:
-- After reading the next token, reduce production brace_block_e1 ->

State 960:
## Known stack suffix:
## K_DO brace_block_e1
## LR(1) items:
brace_block -> K_DO brace_block_e1 . opt_block_var compstmt K_END_error [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On PIPE shift to state 245
-- On OROP shift to state 257
-- On opt_block_var shift to state 961
-- On none shift to state 1189
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production none ->

State 961:
## Known stack suffix:
## K_DO brace_block_e1 opt_block_var
## LR(1) items:
brace_block -> K_DO brace_block_e1 opt_block_var . compstmt K_END_error [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 259
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmts shift to state 1113
-- On stmt shift to state 1183
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On none shift to state 1184
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On compstmt shift to state 1203
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 962:
## Known stack suffix:
## K_NOT
## LR(1) items:
expr -> K_NOT . expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On expr shift to state 1202
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:

State 963:
## Known stack suffix:
## K_NEXT
## LR(1) items:
command_call -> K_NEXT . call_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
primary -> K_NEXT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 635
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On AMPER shift to state 956
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command shift to state 1049
-- On call_args shift to state 1201
-- On block_arg shift to state 1051
-- On awords shift to state 972
-- On assocs shift to state 1052
-- On assoc shift to state 1066
-- On args shift to state 1067
-- On arg_value shift to state 1080
-- On arg shift to state 1060
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ANDOP AMPER2
--   reduce production primary -> K_NEXT

State 964:
## Known stack suffix:
## primary_value
## LR(1) items:
arg -> primary_value . LB aref_args RBRACK OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value . DOT IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value . DOT CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value . COLON2 IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value . COLON2 CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
command -> primary_value . DOT operation2 command_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value . DOT operation2 command_args cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value . COLON2 operation2 command_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value . COLON2 operation2 command_args cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
lhs -> primary_value . LB aref_args RBRACK [ EQL ]
lhs -> primary_value . DOT IDENTIFIER [ EQL ]
lhs -> primary_value . COLON2 IDENTIFIER [ EQL ]
lhs -> primary_value . DOT CONSTANT [ EQL ]
lhs -> primary_value . COLON2 CONSTANT [ EQL ]
method_call -> primary_value . DOT operation2 opt_paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
method_call -> primary_value . COLON2 operation2 paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
method_call -> primary_value . COLON2 operation3 [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> primary_value . COLON2 CONSTANT [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> primary_value . LB aref_args RBRACK [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LB shift to state 935
-- On DOT shift to state 965
-- On COLON2 shift to state 1197
## Reductions:

State 965:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
arg -> primary_value DOT . IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value DOT . CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
command -> primary_value DOT . operation2 command_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value DOT . operation2 command_args cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
lhs -> primary_value DOT . IDENTIFIER [ EQL ]
lhs -> primary_value DOT . CONSTANT [ EQL ]
method_call -> primary_value DOT . operation2 opt_paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On IDENTIFIER shift to state 966
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 1031
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 1032
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On operation2 shift to state 1035
-- On op shift to state 1107
## Reductions:

State 966:
## Known stack suffix:
## primary_value DOT IDENTIFIER
## LR(1) items:
arg -> primary_value DOT IDENTIFIER . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value DOT IDENTIFIER . [ EQL ]
operation2 -> IDENTIFIER . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
-- On OP_ASGN shift to state 967
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value DOT IDENTIFIER
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER
--   reduce production operation2 -> IDENTIFIER

State 967:
## Known stack suffix:
## primary_value DOT IDENTIFIER OP_ASGN
## LR(1) items:
arg -> primary_value DOT IDENTIFIER OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1030
## Reductions:

State 968:
## Known stack suffix:
## literal
## LR(1) items:
primary -> literal . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> literal

State 969:
## Known stack suffix:
## lhs
## LR(1) items:
arg -> lhs . EQL arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> lhs . EQL arg K_RESCUE_MOD arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On EQL shift to state 970
## Reductions:

State 970:
## Known stack suffix:
## lhs EQL
## LR(1) items:
arg -> lhs EQL . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> lhs EQL . arg K_RESCUE_MOD arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 973
## Reductions:

State 971:
## Known stack suffix:
## dsym
## LR(1) items:
literal -> dsym . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> dsym

State 972:
## Known stack suffix:
## awords
## LR(1) items:
primary -> awords . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> awords

State 973:
## Known stack suffix:
## lhs EQL arg
## LR(1) items:
arg -> lhs EQL arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> lhs EQL arg . K_RESCUE_MOD arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On K_RESCUE_MOD shift to state 1020
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> lhs EQL arg

State 974:
## Known stack suffix:
## arg STAR2
## LR(1) items:
arg -> arg STAR2 . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 975
## Reductions:

State 975:
## Known stack suffix:
## arg STAR2 arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg STAR2 arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On POW shift to state 976
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg STAR2 arg

State 976:
## Known stack suffix:
## arg POW
## LR(1) items:
arg -> arg POW . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 977
## Reductions:

State 977:
## Known stack suffix:
## arg POW arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg POW arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On POW shift to state 976
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg POW arg

State 978:
## Known stack suffix:
## arg RSHFT
## LR(1) items:
arg -> arg RSHFT . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 979
## Reductions:

State 979:
## Known stack suffix:
## arg RSHFT arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg RSHFT arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On DIVIDE shift to state 984
## Reductions:
-- On error SEMI RSHFT RCURLY PIPE OROP NMATCH NL NEQ MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg RSHFT arg

State 980:
## Known stack suffix:
## arg PLUS
## LR(1) items:
arg -> arg PLUS . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 981
## Reductions:

State 981:
## Known stack suffix:
## arg PLUS arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg PLUS arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On POW shift to state 976
-- On PERCENT shift to state 982
-- On DIVIDE shift to state 984
## Reductions:
-- On error SEMI RSHFT RCURLY PLUS PIPE OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg PLUS arg

State 982:
## Known stack suffix:
## arg PERCENT
## LR(1) items:
arg -> arg PERCENT . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 983
## Reductions:

State 983:
## Known stack suffix:
## arg PERCENT arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg PERCENT arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On POW shift to state 976
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg PERCENT arg

State 984:
## Known stack suffix:
## arg DIVIDE
## LR(1) items:
arg -> arg DIVIDE . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 985
## Reductions:

State 985:
## Known stack suffix:
## arg DIVIDE arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg DIVIDE arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On POW shift to state 976
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg DIVIDE arg

State 986:
## Known stack suffix:
## arg MINUS
## LR(1) items:
arg -> arg MINUS . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 987
## Reductions:

State 987:
## Known stack suffix:
## arg MINUS arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg MINUS arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On POW shift to state 976
-- On PERCENT shift to state 982
-- On DIVIDE shift to state 984
## Reductions:
-- On error SEMI RSHFT RCURLY PLUS PIPE OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg MINUS arg

State 988:
## Known stack suffix:
## arg PIPE
## LR(1) items:
arg -> arg PIPE . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 989
## Reductions:

State 989:
## Known stack suffix:
## arg PIPE arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg PIPE arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LSHFT shift to state 990
-- On DIVIDE shift to state 984
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY PIPE OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP CARET ASSOC ANDOP
--   reduce production arg -> arg PIPE arg

State 990:
## Known stack suffix:
## arg LSHFT
## LR(1) items:
arg -> arg LSHFT . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 991
## Reductions:

State 991:
## Known stack suffix:
## arg LSHFT arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg LSHFT arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On DIVIDE shift to state 984
## Reductions:
-- On error SEMI RSHFT RCURLY PIPE OROP NMATCH NL NEQ MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg LSHFT arg

State 992:
## Known stack suffix:
## arg AMPER2
## LR(1) items:
arg -> arg AMPER2 . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 993
## Reductions:

State 993:
## Known stack suffix:
## arg AMPER2 arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg AMPER2 arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LSHFT shift to state 990
-- On DIVIDE shift to state 984
## Reductions:
-- On error SEMI RCURLY PIPE OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> arg AMPER2 arg

State 994:
## Known stack suffix:
## arg OROP
## LR(1) items:
arg -> arg OROP . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 995
## Reductions:

State 995:
## Known stack suffix:
## arg OROP arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg OROP arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA ASSOC
--   reduce production arg -> arg OROP arg

State 996:
## Known stack suffix:
## arg NMATCH
## LR(1) items:
arg -> arg NMATCH . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 997
## Reductions:

State 997:
## Known stack suffix:
## arg NMATCH arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg NMATCH arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA ASSOC ANDOP
--   reduce production arg -> arg NMATCH arg

State 998:
## Known stack suffix:
## arg LT
## LR(1) items:
arg -> arg LT . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 999
## Reductions:

State 999:
## Known stack suffix:
## arg LT arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg LT arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LSHFT shift to state 990
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP ASSOC ANDOP
--   reduce production arg -> arg LT arg

State 1000:
## Known stack suffix:
## arg CARET
## LR(1) items:
arg -> arg CARET . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1001
## Reductions:

State 1001:
## Known stack suffix:
## arg CARET arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg CARET arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LSHFT shift to state 990
-- On DIVIDE shift to state 984
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY PIPE OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP CARET ASSOC ANDOP
--   reduce production arg -> arg CARET arg

State 1002:
## Known stack suffix:
## arg LEQ
## LR(1) items:
arg -> arg LEQ . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1003
## Reductions:

State 1003:
## Known stack suffix:
## arg LEQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg LEQ arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LSHFT shift to state 990
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP ASSOC ANDOP
--   reduce production arg -> arg LEQ arg

State 1004:
## Known stack suffix:
## arg GT
## LR(1) items:
arg -> arg GT . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1005
## Reductions:

State 1005:
## Known stack suffix:
## arg GT arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg GT arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LSHFT shift to state 990
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP ASSOC ANDOP
--   reduce production arg -> arg GT arg

State 1006:
## Known stack suffix:
## arg GEQ
## LR(1) items:
arg -> arg GEQ . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1007
## Reductions:

State 1007:
## Known stack suffix:
## arg GEQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg GEQ arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LSHFT shift to state 990
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NMATCH NL NEQ MATCH LT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 COMMENT COMMA CMP ASSOC ANDOP
--   reduce production arg -> arg GEQ arg

State 1008:
## Known stack suffix:
## arg NEQ
## LR(1) items:
arg -> arg NEQ . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1009
## Reductions:

State 1009:
## Known stack suffix:
## arg NEQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg NEQ arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA ASSOC ANDOP
--   reduce production arg -> arg NEQ arg

State 1010:
## Known stack suffix:
## arg MATCH
## LR(1) items:
arg -> arg MATCH . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1011
## Reductions:

State 1011:
## Known stack suffix:
## arg MATCH arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg MATCH arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA ASSOC ANDOP
--   reduce production arg -> arg MATCH arg

State 1012:
## Known stack suffix:
## arg EQQ
## LR(1) items:
arg -> arg EQQ . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1013
## Reductions:

State 1013:
## Known stack suffix:
## arg EQQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg EQQ arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA ASSOC ANDOP
--   reduce production arg -> arg EQQ arg

State 1014:
## Known stack suffix:
## arg EQ
## LR(1) items:
arg -> arg EQ . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1015
## Reductions:

State 1015:
## Known stack suffix:
## arg EQ arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg EQ arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA ASSOC ANDOP
--   reduce production arg -> arg EQ arg

State 1016:
## Known stack suffix:
## arg CMP
## LR(1) items:
arg -> arg CMP . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1017
## Reductions:

State 1017:
## Known stack suffix:
## arg CMP arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg CMP arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On MINUS shift to state 986
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On DIVIDE shift to state 984
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA ASSOC ANDOP
--   reduce production arg -> arg CMP arg

State 1018:
## Known stack suffix:
## arg ANDOP
## LR(1) items:
arg -> arg ANDOP . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1019
## Reductions:

State 1019:
## Known stack suffix:
## arg ANDOP arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg ANDOP arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY OROP NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH DOT3 DOT2 COMMENT COMMA ASSOC ANDOP
--   reduce production arg -> arg ANDOP arg

State 1020:
## Known stack suffix:
## lhs EQL arg K_RESCUE_MOD
## LR(1) items:
arg -> lhs EQL arg K_RESCUE_MOD . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1021
## Reductions:

State 1021:
## Known stack suffix:
## lhs EQL arg K_RESCUE_MOD arg
## LR(1) items:
arg -> lhs EQL arg K_RESCUE_MOD arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> lhs EQL arg K_RESCUE_MOD arg

State 1022:
## Known stack suffix:
## arg EH
## LR(1) items:
arg -> arg EH . arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1023
## Reductions:

State 1023:
## Known stack suffix:
## arg EH arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . PLUS arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . MINUS arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . POW arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . PIPE arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . CARET arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . CMP arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . GT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . GEQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . LT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . LEQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . EQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . EQQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . NEQ arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . MATCH arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . OROP arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ STAR2 RSHFT POW PLUS PIPE PERCENT OROP NMATCH NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COLON CMP CARET ANDOP AMPER2 ]
arg -> arg EH arg . COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On COLON shift to state 1024
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:

State 1024:
## Known stack suffix:
## arg EH arg COLON
## LR(1) items:
arg -> arg EH arg COLON . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1025
## Reductions:

State 1025:
## Known stack suffix:
## arg EH arg COLON arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg EH arg COLON arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> arg EH arg COLON arg

State 1026:
## Known stack suffix:
## arg DOT3
## LR(1) items:
arg -> arg DOT3 . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1027
## Reductions:

State 1027:
## Known stack suffix:
## arg DOT3 arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg DOT3 arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH COMMENT COMMA ASSOC
--   reduce production arg -> arg DOT3 arg

State 1028:
## Known stack suffix:
## arg DOT2
## LR(1) items:
arg -> arg DOT2 . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1029
## Reductions:

State 1029:
## Known stack suffix:
## arg DOT2 arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg DOT2 arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND EH COMMENT COMMA ASSOC
--   reduce production arg -> arg DOT2 arg

State 1030:
## Known stack suffix:
## primary_value DOT IDENTIFIER OP_ASGN arg
## LR(1) items:
arg -> primary_value DOT IDENTIFIER OP_ASGN arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> primary_value DOT IDENTIFIER OP_ASGN arg

State 1031:
## Known stack suffix:
## FID
## LR(1) items:
operation2 -> FID . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operation2 -> FID

State 1032:
## Known stack suffix:
## primary_value DOT CONSTANT
## LR(1) items:
arg -> primary_value DOT CONSTANT . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value DOT CONSTANT . [ EQL ]
operation2 -> CONSTANT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
-- On OP_ASGN shift to state 1033
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value DOT CONSTANT
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER
--   reduce production operation2 -> CONSTANT

State 1033:
## Known stack suffix:
## primary_value DOT CONSTANT OP_ASGN
## LR(1) items:
arg -> primary_value DOT CONSTANT OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1034
## Reductions:

State 1034:
## Known stack suffix:
## primary_value DOT CONSTANT OP_ASGN arg
## LR(1) items:
arg -> primary_value DOT CONSTANT OP_ASGN arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> primary_value DOT CONSTANT OP_ASGN arg

State 1035:
## Known stack suffix:
## primary_value DOT operation2
## LR(1) items:
command -> primary_value DOT operation2 . command_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value DOT operation2 . command_args cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
method_call -> primary_value DOT operation2 . opt_paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On paren_args shift to state 1036
-- On opt_paren_args shift to state 1037
-- On none shift to state 1038
-- On command_args_e1 shift to state 634
-- On command_args shift to state 1039
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production none ->

State 1036:
## Known stack suffix:
## paren_args
## LR(1) items:
opt_paren_args -> paren_args . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_paren_args -> paren_args

State 1037:
## Known stack suffix:
## primary_value DOT operation2 opt_paren_args
## LR(1) items:
method_call -> primary_value DOT operation2 opt_paren_args . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> primary_value DOT operation2 opt_paren_args

State 1038:
## Known stack suffix:
## none
## LR(1) items:
opt_paren_args -> none . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_paren_args -> none

State 1039:
## Known stack suffix:
## primary_value DOT operation2 command_args
## LR(1) items:
command -> primary_value DOT operation2 command_args . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value DOT operation2 command_args . cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On LBRACE_ARG shift to state 1040
-- On cmd_brace_block shift to state 1196
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production command -> primary_value DOT operation2 command_args

State 1040:
## Known stack suffix:
## LBRACE_ARG
## LR(1) items:
cmd_brace_block -> LBRACE_ARG . cmd_brace_block_e1 opt_block_var compstmt RCURLY_error [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On cmd_brace_block_e1 shift to state 1041
## Default reduction:
-- After reading the next token, reduce production cmd_brace_block_e1 ->

State 1041:
## Known stack suffix:
## LBRACE_ARG cmd_brace_block_e1
## LR(1) items:
cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 . opt_block_var compstmt RCURLY_error [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On PIPE shift to state 245
-- On OROP shift to state 257
-- On opt_block_var shift to state 1042
-- On none shift to state 1189
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production none ->

State 1042:
## Known stack suffix:
## LBRACE_ARG cmd_brace_block_e1 opt_block_var
## LR(1) items:
cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 opt_block_var . compstmt RCURLY_error [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On error shift to state 259
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmts shift to state 1113
-- On stmt shift to state 1183
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On none shift to state 1184
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On compstmt shift to state 1192
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:
-- On SEMI RCURLY NL COMMENT
--   reduce production none ->

State 1043:
## Known stack suffix:
## K_BREAK
## LR(1) items:
command_call -> K_BREAK . call_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
primary -> K_BREAK . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 635
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On AMPER shift to state 956
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command shift to state 1049
-- On call_args shift to state 1050
-- On block_arg shift to state 1051
-- On awords shift to state 972
-- On assocs shift to state 1052
-- On assoc shift to state 1066
-- On args shift to state 1067
-- On arg_value shift to state 1080
-- On arg shift to state 1060
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ANDOP AMPER2
--   reduce production primary -> K_BREAK

State 1044:
## Known stack suffix:
## operation
## LR(1) items:
command -> operation . command_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> operation . command_args cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
method_call -> operation . paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> operation . brace_block [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On LCURLY shift to state 941
-- On K_DO shift to state 959
-- On paren_args shift to state 1045
-- On command_args_e1 shift to state 634
-- On command_args shift to state 1046
-- On brace_block shift to state 1048
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->

State 1045:
## Known stack suffix:
## operation paren_args
## LR(1) items:
method_call -> operation paren_args . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> operation paren_args

State 1046:
## Known stack suffix:
## operation command_args
## LR(1) items:
command -> operation command_args . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> operation command_args . cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On LBRACE_ARG shift to state 1040
-- On cmd_brace_block shift to state 1047
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production command -> operation command_args

State 1047:
## Known stack suffix:
## operation command_args cmd_brace_block
## LR(1) items:
command -> operation command_args cmd_brace_block . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> operation command_args cmd_brace_block

State 1048:
## Known stack suffix:
## operation brace_block
## LR(1) items:
primary -> operation brace_block . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> operation brace_block

State 1049:
## Known stack suffix:
## command
## LR(1) items:
call_args -> command . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> command

State 1050:
## Known stack suffix:
## K_BREAK call_args
## LR(1) items:
command_call -> K_BREAK call_args . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_call -> K_BREAK call_args

State 1051:
## Known stack suffix:
## block_arg
## LR(1) items:
call_args -> block_arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> block_arg

State 1052:
## Known stack suffix:
## assocs
## LR(1) items:
assocs -> assocs . COMMA assoc [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
call_args -> assocs . opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
call_args -> assocs . COMMA STAR arg_value opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On COMMA shift to state 1053
-- On opt_block_arg shift to state 1065
-- On none_block_pass shift to state 1059
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production none_block_pass ->

State 1053:
## Known stack suffix:
## assocs COMMA
## LR(1) items:
assocs -> assocs COMMA . assoc [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
call_args -> assocs COMMA . STAR arg_value opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
opt_block_arg -> COMMA . block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 1054
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 956
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 1057
-- On awords shift to state 374
-- On assoc shift to state 1061
-- On arg_value shift to state 1062
-- On arg shift to state 491
## Reductions:

State 1054:
## Known stack suffix:
## assocs COMMA STAR
## LR(1) items:
call_args -> assocs COMMA STAR . arg_value opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg_value shift to state 1055
-- On arg shift to state 1060
## Reductions:

State 1055:
## Known stack suffix:
## assocs COMMA STAR arg_value
## LR(1) items:
call_args -> assocs COMMA STAR arg_value . opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On COMMA shift to state 1056
-- On opt_block_arg shift to state 1058
-- On none_block_pass shift to state 1059
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production none_block_pass ->

State 1056:
## Known stack suffix:
## COMMA
## LR(1) items:
opt_block_arg -> COMMA . block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On AMPER shift to state 956
-- On block_arg shift to state 1057
## Reductions:

State 1057:
## Known stack suffix:
## COMMA block_arg
## LR(1) items:
opt_block_arg -> COMMA block_arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block_arg -> COMMA block_arg

State 1058:
## Known stack suffix:
## assocs COMMA STAR arg_value opt_block_arg
## LR(1) items:
call_args -> assocs COMMA STAR arg_value opt_block_arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> assocs COMMA STAR arg_value opt_block_arg

State 1059:
## Known stack suffix:
## none_block_pass
## LR(1) items:
opt_block_arg -> none_block_pass . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block_arg -> none_block_pass

State 1060:
## Known stack suffix:
## arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg_value -> arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg_value -> arg

State 1061:
## Known stack suffix:
## assocs COMMA assoc
## LR(1) items:
assocs -> assocs COMMA assoc . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assocs -> assocs COMMA assoc

State 1062:
## Known stack suffix:
## arg_value
## LR(1) items:
assoc -> arg_value . ASSOC arg_value [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
## Transitions:
-- On ASSOC shift to state 1063
## Reductions:

State 1063:
## Known stack suffix:
## arg_value ASSOC
## LR(1) items:
assoc -> arg_value ASSOC . arg_value [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg_value shift to state 1064
-- On arg shift to state 1060
## Reductions:

State 1064:
## Known stack suffix:
## arg_value ASSOC arg_value
## LR(1) items:
assoc -> arg_value ASSOC arg_value . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc -> arg_value ASSOC arg_value

State 1065:
## Known stack suffix:
## assocs opt_block_arg
## LR(1) items:
call_args -> assocs opt_block_arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> assocs opt_block_arg

State 1066:
## Known stack suffix:
## assoc
## LR(1) items:
assocs -> assoc . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assocs -> assoc

State 1067:
## Known stack suffix:
## args
## LR(1) items:
args -> args . COMMA arg_value [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
call_args -> args . opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
call_args -> args . COMMA STAR arg_value opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
call_args -> args . COMMA assocs opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
call_args -> args . COMMA assocs COMMA STAR arg opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On COMMA shift to state 1068
-- On opt_block_arg shift to state 1079
-- On none_block_pass shift to state 1059
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production none_block_pass ->

State 1068:
## Known stack suffix:
## args COMMA
## LR(1) items:
args -> args COMMA . arg_value [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
call_args -> args COMMA . STAR arg_value opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
call_args -> args COMMA . assocs opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
call_args -> args COMMA . assocs COMMA STAR arg opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
opt_block_arg -> COMMA . block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 1069
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On AMPER shift to state 956
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On block_arg shift to state 1057
-- On awords shift to state 972
-- On assocs shift to state 1072
-- On assoc shift to state 1066
-- On arg_value shift to state 1078
-- On arg shift to state 1060
## Reductions:

State 1069:
## Known stack suffix:
## args COMMA STAR
## LR(1) items:
call_args -> args COMMA STAR . arg_value opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg_value shift to state 1070
-- On arg shift to state 1060
## Reductions:

State 1070:
## Known stack suffix:
## args COMMA STAR arg_value
## LR(1) items:
call_args -> args COMMA STAR arg_value . opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On COMMA shift to state 1056
-- On opt_block_arg shift to state 1071
-- On none_block_pass shift to state 1059
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production none_block_pass ->

State 1071:
## Known stack suffix:
## args COMMA STAR arg_value opt_block_arg
## LR(1) items:
call_args -> args COMMA STAR arg_value opt_block_arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> args COMMA STAR arg_value opt_block_arg

State 1072:
## Known stack suffix:
## args COMMA assocs
## LR(1) items:
assocs -> assocs . COMMA assoc [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
call_args -> args COMMA assocs . opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
call_args -> args COMMA assocs . COMMA STAR arg opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On COMMA shift to state 1073
-- On opt_block_arg shift to state 1077
-- On none_block_pass shift to state 1059
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production none_block_pass ->

State 1073:
## Known stack suffix:
## args COMMA assocs COMMA
## LR(1) items:
assocs -> assocs COMMA . assoc [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
call_args -> args COMMA assocs COMMA . STAR arg opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
opt_block_arg -> COMMA . block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 1074
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 956
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 1057
-- On awords shift to state 374
-- On assoc shift to state 1061
-- On arg_value shift to state 1062
-- On arg shift to state 491
## Reductions:

State 1074:
## Known stack suffix:
## args COMMA assocs COMMA STAR
## LR(1) items:
call_args -> args COMMA assocs COMMA STAR . arg opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1075
## Reductions:

State 1075:
## Known stack suffix:
## args COMMA assocs COMMA STAR arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
call_args -> args COMMA assocs COMMA STAR arg . opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On COMMA shift to state 1056
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
-- On opt_block_arg shift to state 1076
-- On none_block_pass shift to state 1059
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production none_block_pass ->

State 1076:
## Known stack suffix:
## args COMMA assocs COMMA STAR arg opt_block_arg
## LR(1) items:
call_args -> args COMMA assocs COMMA STAR arg opt_block_arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> args COMMA assocs COMMA STAR arg opt_block_arg

State 1077:
## Known stack suffix:
## args COMMA assocs opt_block_arg
## LR(1) items:
call_args -> args COMMA assocs opt_block_arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> args COMMA assocs opt_block_arg

State 1078:
## Known stack suffix:
## args COMMA arg_value
## LR(1) items:
args -> args COMMA arg_value . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
assoc -> arg_value . ASSOC arg_value [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
## Transitions:
-- On ASSOC shift to state 1063
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA
--   reduce production args -> args COMMA arg_value

State 1079:
## Known stack suffix:
## args opt_block_arg
## LR(1) items:
call_args -> args opt_block_arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> args opt_block_arg

State 1080:
## Known stack suffix:
## arg_value
## LR(1) items:
args -> arg_value . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
assoc -> arg_value . ASSOC arg_value [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ]
## Transitions:
-- On ASSOC shift to state 1063
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA
--   reduce production args -> arg_value

State 1081:
## Known stack suffix:
## K_ALIAS
## LR(1) items:
stmt -> K_ALIAS . fitem stmt_e1 fitem [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> K_ALIAS . GVAR GVAR [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On SYMBEG shift to state 176
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 49
-- On K__FILE__ shift to state 50
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 57
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 60
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 68
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 74
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IDENTIFIER shift to state 89
-- On GVAR shift to state 1082
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 98
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On symbol shift to state 180
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 181
-- On fitem shift to state 1084
## Reductions:

State 1082:
## Known stack suffix:
## K_ALIAS GVAR
## LR(1) items:
stmt -> K_ALIAS GVAR . GVAR [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On GVAR shift to state 1083
## Reductions:

State 1083:
## Known stack suffix:
## K_ALIAS GVAR GVAR
## LR(1) items:
stmt -> K_ALIAS GVAR GVAR . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> K_ALIAS GVAR GVAR

State 1084:
## Known stack suffix:
## K_ALIAS fitem
## LR(1) items:
stmt -> K_ALIAS fitem . stmt_e1 fitem [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On stmt_e1 shift to state 1085
## Default reduction:
-- After reading the next token, reduce production stmt_e1 ->

State 1085:
## Known stack suffix:
## K_ALIAS fitem stmt_e1
## LR(1) items:
stmt -> K_ALIAS fitem stmt_e1 . fitem [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On SYMBEG shift to state 945
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On K_lEND shift to state 290
-- On K_lBEGIN shift to state 291
-- On K__LINE__ shift to state 292
-- On K__FILE__ shift to state 293
-- On K_YIELD shift to state 294
-- On K_WHILE_MOD shift to state 295
-- On K_WHEN shift to state 296
-- On K_UNTIL_MOD shift to state 297
-- On K_UNLESS_MOD shift to state 298
-- On K_UNDEF shift to state 299
-- On K_TRUE shift to state 300
-- On K_THEN shift to state 301
-- On K_SUPER shift to state 302
-- On K_SELF shift to state 303
-- On K_RETURN shift to state 304
-- On K_RETRY shift to state 305
-- On K_RESCUE_MOD shift to state 306
-- On K_RESCUE shift to state 307
-- On K_REDO shift to state 308
-- On K_OR shift to state 309
-- On K_NOT shift to state 310
-- On K_NIL shift to state 311
-- On K_NEXT shift to state 312
-- On K_MODULE shift to state 313
-- On K_IN shift to state 314
-- On K_IF_MOD shift to state 315
-- On K_FOR shift to state 316
-- On K_FALSE shift to state 317
-- On K_ENSURE shift to state 318
-- On K_END shift to state 319
-- On K_ELSIF shift to state 320
-- On K_ELSE shift to state 321
-- On K_DO shift to state 322
-- On K_DEFINED shift to state 323
-- On K_DEF shift to state 324
-- On K_CLASS shift to state 325
-- On K_CASE shift to state 326
-- On K_BREAK shift to state 327
-- On K_BEGIN shift to state 328
-- On K_AND shift to state 329
-- On K_ALIAS shift to state 330
-- On IDENTIFIER shift to state 332
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 336
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 341
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On symbol shift to state 949
-- On reswords shift to state 351
-- On op shift to state 352
-- On fname shift to state 950
-- On fitem shift to state 1086
## Reductions:

State 1086:
## Known stack suffix:
## K_ALIAS fitem stmt_e1 fitem
## LR(1) items:
stmt -> K_ALIAS fitem stmt_e1 fitem . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> K_ALIAS fitem stmt_e1 fitem

State 1087:
## Known stack suffix:
## COLON3
## LR(1) items:
arg -> COLON3 . CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
lhs -> COLON3 . CONSTANT [ EQL ]
mlhs_node -> COLON3 . CONSTANT [ COMMA ]
primary -> COLON3 . CONSTANT [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On CONSTANT shift to state 1088
## Reductions:

State 1088:
## Known stack suffix:
## COLON3 CONSTANT
## LR(1) items:
arg -> COLON3 CONSTANT . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
lhs -> COLON3 CONSTANT . [ EQL ]
mlhs_node -> COLON3 CONSTANT . [ COMMA ]
primary -> COLON3 CONSTANT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On OP_ASGN shift to state 920
## Reductions:
-- On EQL
--   reduce production lhs -> COLON3 CONSTANT
-- On COMMA
--   reduce production mlhs_node -> COLON3 CONSTANT
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production primary -> COLON3 CONSTANT

State 1089:
## Known stack suffix:
## BANG
## LR(1) items:
arg -> BANG . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
expr -> BANG . command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command_call shift to state 1090
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1191
## Reductions:

State 1090:
## Known stack suffix:
## BANG command_call
## LR(1) items:
expr -> BANG command_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> BANG command_call

State 1091:
## Known stack suffix:
## command
## LR(1) items:
block_call -> command . do_block [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
command_call -> command . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On K_DO_BLOCK shift to state 1092
-- On do_block shift to state 1190
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT
--   reduce production command_call -> command

State 1092:
## Known stack suffix:
## K_DO_BLOCK
## LR(1) items:
do_block -> K_DO_BLOCK . do_block_e1 opt_block_var compstmt K_END_error [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
## Transitions:
-- On do_block_e1 shift to state 1093
## Default reduction:
-- After reading the next token, reduce production do_block_e1 ->

State 1093:
## Known stack suffix:
## K_DO_BLOCK do_block_e1
## LR(1) items:
do_block -> K_DO_BLOCK do_block_e1 . opt_block_var compstmt K_END_error [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
## Transitions:
-- On PIPE shift to state 245
-- On OROP shift to state 257
-- On opt_block_var shift to state 1094
-- On none shift to state 1189
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG
--   reduce production none ->

State 1094:
## Known stack suffix:
## K_DO_BLOCK do_block_e1 opt_block_var
## LR(1) items:
do_block -> K_DO_BLOCK do_block_e1 opt_block_var . compstmt K_END_error [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
## Transitions:
-- On error shift to state 259
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmts shift to state 1113
-- On stmt shift to state 1183
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On none shift to state 1184
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On compstmt shift to state 1185
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 1095:
## Known stack suffix:
## variable
## LR(1) items:
lhs -> variable . [ EQL ]
mlhs_node -> variable . [ COMMA ]
var_lhs -> variable . [ OP_ASGN ]
var_ref -> variable . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
## Transitions:
## Reductions:
-- On EQL
--   reduce production lhs -> variable
-- On COMMA
--   reduce production mlhs_node -> variable
-- On OP_ASGN
--   reduce production var_lhs -> variable
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production var_ref -> variable

State 1096:
## Known stack suffix:
## var_lhs
## LR(1) items:
arg -> var_lhs . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
stmt -> var_lhs . OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On OP_ASGN shift to state 1097
## Reductions:

State 1097:
## Known stack suffix:
## var_lhs OP_ASGN
## LR(1) items:
arg -> var_lhs OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
stmt -> var_lhs OP_ASGN . command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command_call shift to state 1098
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1112
## Reductions:

State 1098:
## Known stack suffix:
## var_lhs OP_ASGN command_call
## LR(1) items:
stmt -> var_lhs OP_ASGN command_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> var_lhs OP_ASGN command_call

State 1099:
## Known stack suffix:
## block_command
## LR(1) items:
command_call -> block_command . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_call -> block_command

State 1100:
## Known stack suffix:
## block_call
## LR(1) items:
block_call -> block_call . DOT operation2 opt_paren_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
block_call -> block_call . COLON2 operation2 opt_paren_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
block_command -> block_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
block_command -> block_call . DOT operation2 command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
block_command -> block_call . COLON2 operation2 command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On DOT shift to state 1101
-- On COLON2 shift to state 1108
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT
--   reduce production block_command -> block_call

State 1101:
## Known stack suffix:
## block_call DOT
## LR(1) items:
block_call -> block_call DOT . operation2 opt_paren_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
block_command -> block_call DOT . operation2 command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On IDENTIFIER shift to state 1102
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 1031
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 1103
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On operation2 shift to state 1104
-- On op shift to state 1107
## Reductions:

State 1102:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
operation2 -> IDENTIFIER . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR FLOAT FID DOT CVAR CONSTANT COMMENT COLON3 COLON2 BANG AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operation2 -> IDENTIFIER

State 1103:
## Known stack suffix:
## CONSTANT
## LR(1) items:
operation2 -> CONSTANT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR FLOAT FID DOT CVAR CONSTANT COMMENT COLON3 COLON2 BANG AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operation2 -> CONSTANT

State 1104:
## Known stack suffix:
## block_call DOT operation2
## LR(1) items:
block_call -> block_call DOT operation2 . opt_paren_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
block_command -> block_call DOT operation2 . command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On paren_args shift to state 1036
-- On opt_paren_args shift to state 1105
-- On none shift to state 1038
-- On command_args_e1 shift to state 634
-- On command_args shift to state 1106
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2
--   reduce production none ->

State 1105:
## Known stack suffix:
## block_call DOT operation2 opt_paren_args
## LR(1) items:
block_call -> block_call DOT operation2 opt_paren_args . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_call -> block_call DOT operation2 opt_paren_args

State 1106:
## Known stack suffix:
## block_call DOT operation2 command_args
## LR(1) items:
block_command -> block_call DOT operation2 command_args . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_command -> block_call DOT operation2 command_args

State 1107:
## Known stack suffix:
## op
## LR(1) items:
operation2 -> op . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 CMP CARET BANG ASSOC ANDOP AMPER2 AMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operation2 -> op

State 1108:
## Known stack suffix:
## block_call COLON2
## LR(1) items:
block_call -> block_call COLON2 . operation2 opt_paren_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
block_command -> block_call COLON2 . operation2 command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On IDENTIFIER shift to state 1102
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 1031
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 1103
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On operation2 shift to state 1109
-- On op shift to state 1107
## Reductions:

State 1109:
## Known stack suffix:
## block_call COLON2 operation2
## LR(1) items:
block_call -> block_call COLON2 operation2 . opt_paren_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
block_command -> block_call COLON2 operation2 . command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On paren_args shift to state 1036
-- On opt_paren_args shift to state 1110
-- On none shift to state 1038
-- On command_args_e1 shift to state 634
-- On command_args shift to state 1111
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2
--   reduce production none ->

State 1110:
## Known stack suffix:
## block_call COLON2 operation2 opt_paren_args
## LR(1) items:
block_call -> block_call COLON2 operation2 opt_paren_args . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_call -> block_call COLON2 operation2 opt_paren_args

State 1111:
## Known stack suffix:
## block_call COLON2 operation2 command_args
## LR(1) items:
block_command -> block_call COLON2 operation2 command_args . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_command -> block_call COLON2 operation2 command_args

State 1112:
## Known stack suffix:
## var_lhs OP_ASGN arg
## LR(1) items:
arg -> var_lhs OP_ASGN arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> var_lhs OP_ASGN arg

State 1113:
## Known stack suffix:
## stmts
## LR(1) items:
compstmt -> stmts . opt_terms [ error RCURLY K_END ]
stmts -> stmts . terms stmt [ error SEMI RCURLY NL K_END COMMENT ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On COMMENT shift to state 646
-- On terms shift to state 1114
-- On term shift to state 1180
-- On opt_terms shift to state 1182
## Reductions:
-- On error RCURLY K_END
--   reduce production opt_terms ->

State 1114:
## Known stack suffix:
## stmts terms
## LR(1) items:
opt_terms -> terms . [ error RCURLY K_END ]
stmts -> stmts terms . stmt [ error SEMI RCURLY NL K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmt shift to state 1115
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:
-- On error RCURLY K_END
--   reduce production opt_terms -> terms

State 1115:
## Known stack suffix:
## stmts terms stmt
## LR(1) items:
stmt -> stmt . K_IF_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_UNLESS_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_WHILE_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_UNTIL_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_RESCUE_MOD stmt [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmts -> stmts terms stmt . [ error SEMI RCURLY NL K_END COMMENT ]
## Transitions:
-- On K_WHILE_MOD shift to state 1116
-- On K_UNTIL_MOD shift to state 1125
-- On K_UNLESS_MOD shift to state 1127
-- On K_RESCUE_MOD shift to state 1129
-- On K_IF_MOD shift to state 1178
## Reductions:
-- On error SEMI RCURLY NL K_END COMMENT
--   reduce production stmts -> stmts terms stmt

State 1116:
## Known stack suffix:
## stmt K_WHILE_MOD
## LR(1) items:
stmt -> stmt K_WHILE_MOD . expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On expr_value shift to state 1117
-- On expr shift to state 1118
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:

State 1117:
## Known stack suffix:
## stmt K_WHILE_MOD expr_value
## LR(1) items:
stmt -> stmt K_WHILE_MOD expr_value . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_WHILE_MOD expr_value

State 1118:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . K_AND expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
expr -> expr . K_OR expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
expr_value -> expr . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On K_OR shift to state 1119
-- On K_AND shift to state 1123
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT
--   reduce production expr_value -> expr

State 1119:
## Known stack suffix:
## expr K_OR
## LR(1) items:
expr -> expr K_OR . expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On expr shift to state 1120
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:

State 1120:
## Known stack suffix:
## expr K_OR expr
## LR(1) items:
expr -> expr . K_AND expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
expr -> expr . K_OR expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
expr -> expr K_OR expr . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr K_OR expr

State 1121:
## Known stack suffix:
## command_call
## LR(1) items:
expr -> command_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> command_call

State 1122:
## Known stack suffix:
## arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
expr -> arg . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT
--   reduce production expr -> arg

State 1123:
## Known stack suffix:
## expr K_AND
## LR(1) items:
expr -> expr K_AND . expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On expr shift to state 1124
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:

State 1124:
## Known stack suffix:
## expr K_AND expr
## LR(1) items:
expr -> expr . K_AND expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
expr -> expr K_AND expr . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
expr -> expr . K_OR expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr K_AND expr

State 1125:
## Known stack suffix:
## stmt K_UNTIL_MOD
## LR(1) items:
stmt -> stmt K_UNTIL_MOD . expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On expr_value shift to state 1126
-- On expr shift to state 1118
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:

State 1126:
## Known stack suffix:
## stmt K_UNTIL_MOD expr_value
## LR(1) items:
stmt -> stmt K_UNTIL_MOD expr_value . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_UNTIL_MOD expr_value

State 1127:
## Known stack suffix:
## stmt K_UNLESS_MOD
## LR(1) items:
stmt -> stmt K_UNLESS_MOD . expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On expr_value shift to state 1128
-- On expr shift to state 1118
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:

State 1128:
## Known stack suffix:
## stmt K_UNLESS_MOD expr_value
## LR(1) items:
stmt -> stmt K_UNLESS_MOD expr_value . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_UNLESS_MOD expr_value

State 1129:
## Known stack suffix:
## stmt K_RESCUE_MOD
## LR(1) items:
stmt -> stmt K_RESCUE_MOD . stmt [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmt shift to state 1130
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:

State 1130:
## Known stack suffix:
## stmt K_RESCUE_MOD stmt
## LR(1) items:
stmt -> stmt . K_IF_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_UNLESS_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_WHILE_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_UNTIL_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_RESCUE_MOD stmt [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt K_RESCUE_MOD stmt . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_RESCUE_MOD stmt

State 1131:
## Known stack suffix:
## primary_value
## LR(1) items:
arg -> primary_value . LB aref_args RBRACK OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> primary_value . DOT IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> primary_value . DOT CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> primary_value . COLON2 IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> primary_value . COLON2 CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
command -> primary_value . DOT operation2 command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value . DOT operation2 command_args cmd_brace_block [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value . COLON2 operation2 command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value . COLON2 operation2 command_args cmd_brace_block [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
lhs -> primary_value . LB aref_args RBRACK [ EQL ]
lhs -> primary_value . DOT IDENTIFIER [ EQL ]
lhs -> primary_value . COLON2 IDENTIFIER [ EQL ]
lhs -> primary_value . DOT CONSTANT [ EQL ]
lhs -> primary_value . COLON2 CONSTANT [ EQL ]
method_call -> primary_value . DOT operation2 opt_paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
method_call -> primary_value . COLON2 operation2 paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
method_call -> primary_value . COLON2 operation3 [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
mlhs_node -> primary_value . LB aref_args RBRACK [ COMMA ]
mlhs_node -> primary_value . DOT IDENTIFIER [ COMMA ]
mlhs_node -> primary_value . COLON2 IDENTIFIER [ COMMA ]
mlhs_node -> primary_value . DOT CONSTANT [ COMMA ]
mlhs_node -> primary_value . COLON2 CONSTANT [ COMMA ]
primary -> primary_value . COLON2 CONSTANT [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
primary -> primary_value . LB aref_args RBRACK [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
stmt -> primary_value . LB aref_args RBRACK OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> primary_value . DOT IDENTIFIER OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> primary_value . DOT CONSTANT OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> primary_value . COLON2 IDENTIFIER OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On LB shift to state 1132
-- On DOT shift to state 1138
-- On COLON2 shift to state 1145
## Reductions:

State 1132:
## Known stack suffix:
## primary_value LB
## LR(1) items:
arg -> primary_value LB . aref_args RBRACK OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
lhs -> primary_value LB . aref_args RBRACK [ EQL ]
mlhs_node -> primary_value LB . aref_args RBRACK [ COMMA ]
primary -> primary_value LB . aref_args RBRACK [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
stmt -> primary_value LB . aref_args RBRACK OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 136
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 480
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 481
-- On awords shift to state 374
-- On assocs shift to state 483
-- On assoc shift to state 493
-- On args shift to state 494
-- On arg_value shift to state 501
-- On arg shift to state 491
-- On aref_args shift to state 1133
## Reductions:
-- On RBRACK
--   reduce production none ->

State 1133:
## Known stack suffix:
## primary_value LB aref_args
## LR(1) items:
arg -> primary_value LB aref_args . RBRACK OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
lhs -> primary_value LB aref_args . RBRACK [ EQL ]
mlhs_node -> primary_value LB aref_args . RBRACK [ COMMA ]
primary -> primary_value LB aref_args . RBRACK [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
stmt -> primary_value LB aref_args . RBRACK OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On RBRACK shift to state 1134
## Reductions:

State 1134:
## Known stack suffix:
## primary_value LB aref_args RBRACK
## LR(1) items:
arg -> primary_value LB aref_args RBRACK . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
lhs -> primary_value LB aref_args RBRACK . [ EQL ]
mlhs_node -> primary_value LB aref_args RBRACK . [ COMMA ]
primary -> primary_value LB aref_args RBRACK . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
stmt -> primary_value LB aref_args RBRACK . OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On OP_ASGN shift to state 1135
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value LB aref_args RBRACK
-- On COMMA
--   reduce production mlhs_node -> primary_value LB aref_args RBRACK
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production primary -> primary_value LB aref_args RBRACK

State 1135:
## Known stack suffix:
## primary_value LB aref_args RBRACK OP_ASGN
## LR(1) items:
arg -> primary_value LB aref_args RBRACK OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
stmt -> primary_value LB aref_args RBRACK OP_ASGN . command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command_call shift to state 1136
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1137
## Reductions:

State 1136:
## Known stack suffix:
## primary_value LB aref_args RBRACK OP_ASGN command_call
## LR(1) items:
stmt -> primary_value LB aref_args RBRACK OP_ASGN command_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> primary_value LB aref_args RBRACK OP_ASGN command_call

State 1137:
## Known stack suffix:
## primary_value LB aref_args RBRACK OP_ASGN arg
## LR(1) items:
arg -> primary_value LB aref_args RBRACK OP_ASGN arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> primary_value LB aref_args RBRACK OP_ASGN arg

State 1138:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
arg -> primary_value DOT . IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> primary_value DOT . CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
command -> primary_value DOT . operation2 command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value DOT . operation2 command_args cmd_brace_block [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
lhs -> primary_value DOT . IDENTIFIER [ EQL ]
lhs -> primary_value DOT . CONSTANT [ EQL ]
method_call -> primary_value DOT . operation2 opt_paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
mlhs_node -> primary_value DOT . IDENTIFIER [ COMMA ]
mlhs_node -> primary_value DOT . CONSTANT [ COMMA ]
stmt -> primary_value DOT . IDENTIFIER OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> primary_value DOT . CONSTANT OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On IDENTIFIER shift to state 1139
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 1031
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 1142
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On operation2 shift to state 1035
-- On op shift to state 1107
## Reductions:

State 1139:
## Known stack suffix:
## primary_value DOT IDENTIFIER
## LR(1) items:
arg -> primary_value DOT IDENTIFIER . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
lhs -> primary_value DOT IDENTIFIER . [ EQL ]
mlhs_node -> primary_value DOT IDENTIFIER . [ COMMA ]
operation2 -> IDENTIFIER . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COLON3 COLON2 CMP CARET BANG ANDOP AMPER2 AMPER ]
stmt -> primary_value DOT IDENTIFIER . OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On OP_ASGN shift to state 1140
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value DOT IDENTIFIER
-- On COMMA
--   reduce production mlhs_node -> primary_value DOT IDENTIFIER
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COLON3 COLON2 CMP CARET BANG ANDOP AMPER2 AMPER
--   reduce production operation2 -> IDENTIFIER

State 1140:
## Known stack suffix:
## primary_value DOT IDENTIFIER OP_ASGN
## LR(1) items:
arg -> primary_value DOT IDENTIFIER OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
stmt -> primary_value DOT IDENTIFIER OP_ASGN . command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command_call shift to state 1141
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1030
## Reductions:

State 1141:
## Known stack suffix:
## primary_value DOT IDENTIFIER OP_ASGN command_call
## LR(1) items:
stmt -> primary_value DOT IDENTIFIER OP_ASGN command_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> primary_value DOT IDENTIFIER OP_ASGN command_call

State 1142:
## Known stack suffix:
## primary_value DOT CONSTANT
## LR(1) items:
arg -> primary_value DOT CONSTANT . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
lhs -> primary_value DOT CONSTANT . [ EQL ]
mlhs_node -> primary_value DOT CONSTANT . [ COMMA ]
operation2 -> CONSTANT . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COLON3 COLON2 CMP CARET BANG ANDOP AMPER2 AMPER ]
stmt -> primary_value DOT CONSTANT . OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On OP_ASGN shift to state 1143
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value DOT CONSTANT
-- On COMMA
--   reduce production mlhs_node -> primary_value DOT CONSTANT
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT REGEXP_BEG RCURLY QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_END K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COLON3 COLON2 CMP CARET BANG ANDOP AMPER2 AMPER
--   reduce production operation2 -> CONSTANT

State 1143:
## Known stack suffix:
## primary_value DOT CONSTANT OP_ASGN
## LR(1) items:
arg -> primary_value DOT CONSTANT OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
stmt -> primary_value DOT CONSTANT OP_ASGN . command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command_call shift to state 1144
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1034
## Reductions:

State 1144:
## Known stack suffix:
## primary_value DOT CONSTANT OP_ASGN command_call
## LR(1) items:
stmt -> primary_value DOT CONSTANT OP_ASGN command_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> primary_value DOT CONSTANT OP_ASGN command_call

State 1145:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
arg -> primary_value COLON2 . IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> primary_value COLON2 . CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
command -> primary_value COLON2 . operation2 command_args [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value COLON2 . operation2 command_args cmd_brace_block [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
lhs -> primary_value COLON2 . IDENTIFIER [ EQL ]
lhs -> primary_value COLON2 . CONSTANT [ EQL ]
method_call -> primary_value COLON2 . operation2 paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
method_call -> primary_value COLON2 . operation3 [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
mlhs_node -> primary_value COLON2 . IDENTIFIER [ COMMA ]
mlhs_node -> primary_value COLON2 . CONSTANT [ COMMA ]
primary -> primary_value COLON2 . CONSTANT [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
stmt -> primary_value COLON2 . IDENTIFIER OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On IDENTIFIER shift to state 1146
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 1150
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 1151
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On operation3 shift to state 1154
-- On operation2 shift to state 1155
-- On op shift to state 1159
## Reductions:

State 1146:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
lhs -> primary_value COLON2 IDENTIFIER . [ EQL ]
mlhs_node -> primary_value COLON2 IDENTIFIER . [ COMMA ]
operation2 -> IDENTIFIER . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
operation3 -> IDENTIFIER . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
stmt -> primary_value COLON2 IDENTIFIER . OP_ASGN command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On OP_ASGN shift to state 1147
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value COLON2 IDENTIFIER
-- On COMMA
--   reduce production mlhs_node -> primary_value COLON2 IDENTIFIER
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> IDENTIFIER
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production operation3 -> IDENTIFIER

State 1147:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER OP_ASGN
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
stmt -> primary_value COLON2 IDENTIFIER OP_ASGN . command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command_call shift to state 1148
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1149
## Reductions:

State 1148:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER OP_ASGN command_call
## LR(1) items:
stmt -> primary_value COLON2 IDENTIFIER OP_ASGN command_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> primary_value COLON2 IDENTIFIER OP_ASGN command_call

State 1149:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER OP_ASGN arg
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER OP_ASGN arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> primary_value COLON2 IDENTIFIER OP_ASGN arg

State 1150:
## Known stack suffix:
## FID
## LR(1) items:
operation2 -> FID . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
operation3 -> FID . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> FID
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production operation3 -> FID

State 1151:
## Known stack suffix:
## primary_value COLON2 CONSTANT
## LR(1) items:
arg -> primary_value COLON2 CONSTANT . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
lhs -> primary_value COLON2 CONSTANT . [ EQL ]
mlhs_node -> primary_value COLON2 CONSTANT . [ COMMA ]
operation2 -> CONSTANT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
primary -> primary_value COLON2 CONSTANT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On OP_ASGN shift to state 1152
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value COLON2 CONSTANT
-- On COMMA
--   reduce production mlhs_node -> primary_value COLON2 CONSTANT
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> CONSTANT
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production primary -> primary_value COLON2 CONSTANT

State 1152:
## Known stack suffix:
## primary_value COLON2 CONSTANT OP_ASGN
## LR(1) items:
arg -> primary_value COLON2 CONSTANT OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1153
## Reductions:

State 1153:
## Known stack suffix:
## primary_value COLON2 CONSTANT OP_ASGN arg
## LR(1) items:
arg -> primary_value COLON2 CONSTANT OP_ASGN arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> primary_value COLON2 CONSTANT OP_ASGN arg

State 1154:
## Known stack suffix:
## primary_value COLON2 operation3
## LR(1) items:
method_call -> primary_value COLON2 operation3 . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> primary_value COLON2 operation3

State 1155:
## Known stack suffix:
## primary_value COLON2 operation2
## LR(1) items:
command -> primary_value COLON2 operation2 . command_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value COLON2 operation2 . command_args cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
method_call -> primary_value COLON2 operation2 . paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On paren_args shift to state 1156
-- On command_args_e1 shift to state 634
-- On command_args shift to state 1157
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->

State 1156:
## Known stack suffix:
## primary_value COLON2 operation2 paren_args
## LR(1) items:
method_call -> primary_value COLON2 operation2 paren_args . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> primary_value COLON2 operation2 paren_args

State 1157:
## Known stack suffix:
## primary_value COLON2 operation2 command_args
## LR(1) items:
command -> primary_value COLON2 operation2 command_args . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value COLON2 operation2 command_args . cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On LBRACE_ARG shift to state 1040
-- On cmd_brace_block shift to state 1158
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production command -> primary_value COLON2 operation2 command_args

State 1158:
## Known stack suffix:
## primary_value COLON2 operation2 command_args cmd_brace_block
## LR(1) items:
command -> primary_value COLON2 operation2 command_args cmd_brace_block . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> primary_value COLON2 operation2 command_args cmd_brace_block

State 1159:
## Known stack suffix:
## op
## LR(1) items:
operation2 -> op . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
operation3 -> op . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> op
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production operation3 -> op

State 1160:
## Known stack suffix:
## mlhs
## LR(1) items:
stmt -> mlhs . EQL command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> mlhs . EQL arg_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> mlhs . EQL mrhs [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On EQL shift to state 1161
## Reductions:

State 1161:
## Known stack suffix:
## mlhs EQL
## LR(1) items:
stmt -> mlhs EQL . command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> mlhs EQL . arg_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> mlhs EQL . mrhs [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 1162
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On mrhs shift to state 1164
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command_call shift to state 1165
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On args shift to state 1166
-- On arg_value shift to state 1171
-- On arg shift to state 1060
## Reductions:

State 1162:
## Known stack suffix:
## STAR
## LR(1) items:
mrhs -> STAR . arg_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg_value shift to state 1163
-- On arg shift to state 1060
## Reductions:

State 1163:
## Known stack suffix:
## STAR arg_value
## LR(1) items:
mrhs -> STAR arg_value . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mrhs -> STAR arg_value

State 1164:
## Known stack suffix:
## mlhs EQL mrhs
## LR(1) items:
stmt -> mlhs EQL mrhs . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> mlhs EQL mrhs

State 1165:
## Known stack suffix:
## mlhs EQL command_call
## LR(1) items:
stmt -> mlhs EQL command_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> mlhs EQL command_call

State 1166:
## Known stack suffix:
## args
## LR(1) items:
args -> args . COMMA arg_value [ COMMA ]
mrhs -> args . COMMA arg_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
mrhs -> args . COMMA STAR arg_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On COMMA shift to state 1167
## Reductions:

State 1167:
## Known stack suffix:
## args COMMA
## LR(1) items:
args -> args COMMA . arg_value [ COMMA ]
mrhs -> args COMMA . arg_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
mrhs -> args COMMA . STAR arg_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 1168
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg_value shift to state 1170
-- On arg shift to state 1060
## Reductions:

State 1168:
## Known stack suffix:
## args COMMA STAR
## LR(1) items:
mrhs -> args COMMA STAR . arg_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg_value shift to state 1169
-- On arg shift to state 1060
## Reductions:

State 1169:
## Known stack suffix:
## args COMMA STAR arg_value
## LR(1) items:
mrhs -> args COMMA STAR arg_value . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mrhs -> args COMMA STAR arg_value

State 1170:
## Known stack suffix:
## args COMMA arg_value
## LR(1) items:
args -> args COMMA arg_value . [ COMMA ]
mrhs -> args COMMA arg_value . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Reductions:
-- On COMMA
--   reduce production args -> args COMMA arg_value
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT
--   reduce production mrhs -> args COMMA arg_value

State 1171:
## Known stack suffix:
## mlhs EQL arg_value
## LR(1) items:
args -> arg_value . [ COMMA ]
stmt -> mlhs EQL arg_value . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Reductions:
-- On COMMA
--   reduce production args -> arg_value
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT
--   reduce production stmt -> mlhs EQL arg_value

State 1172:
## Known stack suffix:
## lhs
## LR(1) items:
arg -> lhs . EQL arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> lhs . EQL arg K_RESCUE_MOD arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
stmt -> lhs . EQL command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> lhs . EQL mrhs [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On EQL shift to state 1173
## Reductions:

State 1173:
## Known stack suffix:
## lhs EQL
## LR(1) items:
arg -> lhs EQL . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> lhs EQL . arg K_RESCUE_MOD arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
stmt -> lhs EQL . command_call [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> lhs EQL . mrhs [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 1162
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On mrhs shift to state 1174
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On command_call shift to state 1175
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On args shift to state 1166
-- On arg_value shift to state 586
-- On arg shift to state 1176
## Reductions:

State 1174:
## Known stack suffix:
## lhs EQL mrhs
## LR(1) items:
stmt -> lhs EQL mrhs . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> lhs EQL mrhs

State 1175:
## Known stack suffix:
## lhs EQL command_call
## LR(1) items:
stmt -> lhs EQL command_call . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> lhs EQL command_call

State 1176:
## Known stack suffix:
## lhs EQL arg
## LR(1) items:
arg -> lhs EQL arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> lhs EQL arg . K_RESCUE_MOD arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ANDOP AMPER2 ]
arg_value -> arg . [ COMMA ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On K_RESCUE_MOD shift to state 1020
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_OR K_IF_MOD K_END K_AND COMMENT
--   reduce production arg -> lhs EQL arg
-- On COMMA
--   reduce production arg_value -> arg

State 1177:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . K_AND expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
expr -> expr . K_OR expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
stmt -> expr . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On K_OR shift to state 1119
-- On K_AND shift to state 1123
## Reductions:
-- On error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT
--   reduce production stmt -> expr

State 1178:
## Known stack suffix:
## stmt K_IF_MOD
## LR(1) items:
stmt -> stmt K_IF_MOD . expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 964
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On expr_value shift to state 1179
-- On expr shift to state 1118
-- On dsym shift to state 971
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:

State 1179:
## Known stack suffix:
## stmt K_IF_MOD expr_value
## LR(1) items:
stmt -> stmt K_IF_MOD expr_value . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> stmt K_IF_MOD expr_value

State 1180:
## Known stack suffix:
## term
## LR(1) items:
terms -> term . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG RCURLY QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG ]
terms -> term . terms [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG RCURLY QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On COMMENT shift to state 646
-- On terms shift to state 1181
-- On term shift to state 1180
## Reductions:
-- On error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG RCURLY QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG
--   reduce production terms -> term

State 1181:
## Known stack suffix:
## term terms
## LR(1) items:
terms -> term terms . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG RCURLY QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production terms -> term terms

State 1182:
## Known stack suffix:
## stmts opt_terms
## LR(1) items:
compstmt -> stmts opt_terms . [ error RCURLY K_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compstmt -> stmts opt_terms

State 1183:
## Known stack suffix:
## stmt
## LR(1) items:
stmt -> stmt . K_IF_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_UNLESS_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_WHILE_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_UNTIL_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_RESCUE_MOD stmt [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmts -> stmt . [ error SEMI RCURLY NL K_END COMMENT ]
## Transitions:
-- On K_WHILE_MOD shift to state 1116
-- On K_UNTIL_MOD shift to state 1125
-- On K_UNLESS_MOD shift to state 1127
-- On K_RESCUE_MOD shift to state 1129
-- On K_IF_MOD shift to state 1178
## Reductions:
-- On error SEMI RCURLY NL K_END COMMENT
--   reduce production stmts -> stmt

State 1184:
## Known stack suffix:
## none
## LR(1) items:
stmts -> none . [ error SEMI RCURLY NL K_END COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmts -> none

State 1185:
## Known stack suffix:
## K_DO_BLOCK do_block_e1 opt_block_var compstmt
## LR(1) items:
do_block -> K_DO_BLOCK do_block_e1 opt_block_var compstmt . K_END_error [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
## Transitions:
-- On error shift to state 1186
-- On K_END shift to state 1187
-- On K_END_error shift to state 1188
## Reductions:

State 1186:
## Known stack suffix:
## error
## LR(1) items:
K_END_error -> error . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production K_END_error -> error

State 1187:
## Known stack suffix:
## K_END
## LR(1) items:
K_END_error -> K_END . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production K_END_error -> K_END

State 1188:
## Known stack suffix:
## K_DO_BLOCK do_block_e1 opt_block_var compstmt K_END_error
## LR(1) items:
do_block -> K_DO_BLOCK do_block_e1 opt_block_var compstmt K_END_error . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production do_block -> K_DO_BLOCK do_block_e1 opt_block_var compstmt K_END_error

State 1189:
## Known stack suffix:
## none
## LR(1) items:
opt_block_var -> none . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block_var -> none

State 1190:
## Known stack suffix:
## command do_block
## LR(1) items:
block_call -> command do_block . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND DOT COMMENT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_call -> command do_block

State 1191:
## Known stack suffix:
## BANG arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> BANG arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> BANG arg

State 1192:
## Known stack suffix:
## LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt
## LR(1) items:
cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt . RCURLY_error [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On error shift to state 1193
-- On RCURLY shift to state 1194
-- On RCURLY_error shift to state 1195
## Reductions:

State 1193:
## Known stack suffix:
## error
## LR(1) items:
RCURLY_error -> error . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production RCURLY_error -> error

State 1194:
## Known stack suffix:
## RCURLY
## LR(1) items:
RCURLY_error -> RCURLY . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production RCURLY_error -> RCURLY

State 1195:
## Known stack suffix:
## LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt RCURLY_error
## LR(1) items:
cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt RCURLY_error . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt RCURLY_error

State 1196:
## Known stack suffix:
## primary_value DOT operation2 command_args cmd_brace_block
## LR(1) items:
command -> primary_value DOT operation2 command_args cmd_brace_block . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> primary_value DOT operation2 command_args cmd_brace_block

State 1197:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
arg -> primary_value COLON2 . IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value COLON2 . CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
command -> primary_value COLON2 . operation2 command_args [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
command -> primary_value COLON2 . operation2 command_args cmd_brace_block [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
lhs -> primary_value COLON2 . IDENTIFIER [ EQL ]
lhs -> primary_value COLON2 . CONSTANT [ EQL ]
method_call -> primary_value COLON2 . operation2 paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
method_call -> primary_value COLON2 . operation3 [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> primary_value COLON2 . CONSTANT [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On IDENTIFIER shift to state 1198
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 1150
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 1200
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On operation3 shift to state 1154
-- On operation2 shift to state 1155
-- On op shift to state 1159
## Reductions:

State 1198:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value COLON2 IDENTIFIER . [ EQL ]
operation2 -> IDENTIFIER . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
operation3 -> IDENTIFIER . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On OP_ASGN shift to state 1199
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value COLON2 IDENTIFIER
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> IDENTIFIER
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production operation3 -> IDENTIFIER

State 1199:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER OP_ASGN
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER OP_ASGN . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1149
## Reductions:

State 1200:
## Known stack suffix:
## primary_value COLON2 CONSTANT
## LR(1) items:
arg -> primary_value COLON2 CONSTANT . OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value COLON2 CONSTANT . [ EQL ]
operation2 -> CONSTANT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
primary -> primary_value COLON2 CONSTANT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On OP_ASGN shift to state 1152
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value COLON2 CONSTANT
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> CONSTANT
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> primary_value COLON2 CONSTANT

State 1201:
## Known stack suffix:
## K_NEXT call_args
## LR(1) items:
command_call -> K_NEXT call_args . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_call -> K_NEXT call_args

State 1202:
## Known stack suffix:
## K_NOT expr
## LR(1) items:
expr -> expr . K_AND expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
expr -> expr . K_OR expr [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
expr -> K_NOT expr . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> K_NOT expr

State 1203:
## Known stack suffix:
## K_DO brace_block_e1 opt_block_var compstmt
## LR(1) items:
brace_block -> K_DO brace_block_e1 opt_block_var compstmt . K_END_error [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 1186
-- On K_END shift to state 1187
-- On K_END_error shift to state 1204
## Reductions:

State 1204:
## Known stack suffix:
## K_DO brace_block_e1 opt_block_var compstmt K_END_error
## LR(1) items:
brace_block -> K_DO brace_block_e1 opt_block_var compstmt K_END_error . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production brace_block -> K_DO brace_block_e1 opt_block_var compstmt K_END_error

State 1205:
## Known stack suffix:
## method_call brace_block
## LR(1) items:
primary -> method_call brace_block . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> method_call brace_block

State 1206:
## Known stack suffix:
## AMPER arg_value
## LR(1) items:
block_arg -> AMPER arg_value . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_arg -> AMPER arg_value

State 1207:
## Known stack suffix:
## K_RETURN call_args
## LR(1) items:
command_call -> K_RETURN call_args . [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_call -> K_RETURN call_args

State 1208:
## Known stack suffix:
## LCURLY brace_block_e1 opt_block_var compstmt
## LR(1) items:
brace_block -> LCURLY brace_block_e1 opt_block_var compstmt . RCURLY_error [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On error shift to state 1193
-- On RCURLY shift to state 1194
-- On RCURLY_error shift to state 1209
## Reductions:

State 1209:
## Known stack suffix:
## LCURLY brace_block_e1 opt_block_var compstmt RCURLY_error
## LR(1) items:
brace_block -> LCURLY brace_block_e1 opt_block_var compstmt RCURLY_error . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production brace_block -> LCURLY brace_block_e1 opt_block_var compstmt RCURLY_error

State 1210:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
arg -> primary_value DOT . IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value DOT . CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value DOT . IDENTIFIER [ EQL ]
lhs -> primary_value DOT . CONSTANT [ EQL ]
method_call -> primary_value DOT . operation2 opt_paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On IDENTIFIER shift to state 966
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 1031
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 1032
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On operation2 shift to state 1211
-- On op shift to state 1107
## Reductions:

State 1211:
## Known stack suffix:
## primary_value DOT operation2
## LR(1) items:
method_call -> primary_value DOT operation2 . opt_paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On paren_args shift to state 1036
-- On opt_paren_args shift to state 1037
-- On none shift to state 1038
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production none ->

State 1212:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
arg -> primary_value COLON2 . IDENTIFIER OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> primary_value COLON2 . CONSTANT OP_ASGN arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
lhs -> primary_value COLON2 . IDENTIFIER [ EQL ]
lhs -> primary_value COLON2 . CONSTANT [ EQL ]
method_call -> primary_value COLON2 . operation2 paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
method_call -> primary_value COLON2 . operation3 [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
primary -> primary_value COLON2 . CONSTANT [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On UPLUS shift to state 275
-- On UMINUS shift to state 276
-- On TILDE shift to state 277
-- On STAR2 shift to state 278
-- On STAR shift to state 279
-- On RSHFT shift to state 280
-- On POW shift to state 281
-- On PLUS shift to state 282
-- On PIPE shift to state 283
-- On PERCENT shift to state 284
-- On MINUS shift to state 285
-- On MATCH shift to state 286
-- On LT shift to state 287
-- On LSHFT shift to state 288
-- On LEQ shift to state 289
-- On IDENTIFIER shift to state 1198
-- On GT shift to state 334
-- On GEQ shift to state 335
-- On FID shift to state 1150
-- On EQQ shift to state 337
-- On EQ shift to state 338
-- On DIVIDE shift to state 339
-- On CONSTANT shift to state 1200
-- On CMP shift to state 342
-- On CARET shift to state 343
-- On BACK_REF2 shift to state 344
-- On ASET shift to state 345
-- On AREF shift to state 346
-- On AMPER2 shift to state 347
-- On operation3 shift to state 1154
-- On operation2 shift to state 1213
-- On op shift to state 1159
## Reductions:

State 1213:
## Known stack suffix:
## primary_value COLON2 operation2
## LR(1) items:
method_call -> primary_value COLON2 operation2 . paren_args [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On LPAREN2 shift to state 675
-- On paren_args shift to state 1156
## Reductions:

State 1214:
## Known stack suffix:
## COLON3 CONSTANT OP_ASGN arg
## LR(1) items:
arg -> COLON3 CONSTANT OP_ASGN arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> COLON3 CONSTANT OP_ASGN arg

State 1215:
## Known stack suffix:
## K_DEFINED opt_nl arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> K_DEFINED opt_nl arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 974
-- On RSHFT shift to state 978
-- On POW shift to state 976
-- On PLUS shift to state 980
-- On PIPE shift to state 988
-- On PERCENT shift to state 982
-- On OROP shift to state 994
-- On NMATCH shift to state 996
-- On NEQ shift to state 1008
-- On MINUS shift to state 986
-- On MATCH shift to state 1010
-- On LT shift to state 998
-- On LSHFT shift to state 990
-- On LEQ shift to state 1002
-- On GT shift to state 1004
-- On GEQ shift to state 1006
-- On EQQ shift to state 1012
-- On EQ shift to state 1014
-- On EH shift to state 1022
-- On DOT3 shift to state 1026
-- On DOT2 shift to state 1028
-- On DIVIDE shift to state 984
-- On CMP shift to state 1016
-- On CARET shift to state 1000
-- On ANDOP shift to state 1018
-- On AMPER2 shift to state 992
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT COMMA ASSOC
--   reduce production arg -> K_DEFINED opt_nl arg

State 1216:
## Known stack suffix:
## STAR arg_value
## LR(1) items:
call_args -> STAR arg_value . opt_block_arg [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On COMMA shift to state 1056
-- On opt_block_arg shift to state 1217
-- On none_block_pass shift to state 1059
## Reductions:
-- On error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT
--   reduce production none_block_pass ->

State 1217:
## Known stack suffix:
## STAR arg_value opt_block_arg
## LR(1) items:
call_args -> STAR arg_value opt_block_arg . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> STAR arg_value opt_block_arg

State 1218:
## Known stack suffix:
## LPAREN_ARG
## LR(1) items:
open_args -> LPAREN_ARG . open_args_e1 RPAREN [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
open_args -> LPAREN_ARG . call_args2 open_args_e1 RPAREN [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
primary -> LPAREN_ARG . expr primary_e1 opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 148
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On open_args_e1 shift to state 1219
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr shift to state 1221
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On call_args2 shift to state 1225
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On block_arg shift to state 1228
-- On awords shift to state 374
-- On assocs shift to state 1229
-- On assoc shift to state 493
-- On arg_value shift to state 1235
-- On arg shift to state 1259
## Reductions:
-- On RPAREN
--   reduce production open_args_e1 ->

State 1219:
## Known stack suffix:
## LPAREN_ARG open_args_e1
## LR(1) items:
open_args -> LPAREN_ARG open_args_e1 . RPAREN [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On RPAREN shift to state 1220
## Reductions:

State 1220:
## Known stack suffix:
## LPAREN_ARG open_args_e1 RPAREN
## LR(1) items:
open_args -> LPAREN_ARG open_args_e1 RPAREN . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production open_args -> LPAREN_ARG open_args_e1 RPAREN

State 1221:
## Known stack suffix:
## LPAREN_ARG expr
## LR(1) items:
expr -> expr . K_AND expr [ RPAREN NL K_OR K_AND COMMENT ]
expr -> expr . K_OR expr [ RPAREN NL K_OR K_AND COMMENT ]
primary -> LPAREN_ARG expr . primary_e1 opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On K_OR shift to state 466
-- On K_AND shift to state 470
-- On primary_e1 shift to state 1222
## Reductions:
-- On RPAREN NL COMMENT
--   reduce production primary_e1 ->

State 1222:
## Known stack suffix:
## LPAREN_ARG expr primary_e1
## LR(1) items:
primary -> LPAREN_ARG expr primary_e1 . opt_nl RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On NL shift to state 188
-- On COMMENT shift to state 189
-- On opt_nl shift to state 1223
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 1223:
## Known stack suffix:
## LPAREN_ARG expr primary_e1 opt_nl
## LR(1) items:
primary -> LPAREN_ARG expr primary_e1 opt_nl . RPAREN [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On RPAREN shift to state 1224
## Reductions:

State 1224:
## Known stack suffix:
## LPAREN_ARG expr primary_e1 opt_nl RPAREN
## LR(1) items:
primary -> LPAREN_ARG expr primary_e1 opt_nl RPAREN . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> LPAREN_ARG expr primary_e1 opt_nl RPAREN

State 1225:
## Known stack suffix:
## LPAREN_ARG call_args2
## LR(1) items:
open_args -> LPAREN_ARG call_args2 . open_args_e1 RPAREN [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On open_args_e1 shift to state 1226
## Default reduction:
-- After reading the next token, reduce production open_args_e1 ->

State 1226:
## Known stack suffix:
## LPAREN_ARG call_args2 open_args_e1
## LR(1) items:
open_args -> LPAREN_ARG call_args2 open_args_e1 . RPAREN [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
-- On RPAREN shift to state 1227
## Reductions:

State 1227:
## Known stack suffix:
## LPAREN_ARG call_args2 open_args_e1 RPAREN
## LR(1) items:
open_args -> LPAREN_ARG call_args2 open_args_e1 RPAREN . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production open_args -> LPAREN_ARG call_args2 open_args_e1 RPAREN

State 1228:
## Known stack suffix:
## block_arg
## LR(1) items:
call_args2 -> block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> block_arg

State 1229:
## Known stack suffix:
## assocs
## LR(1) items:
assocs -> assocs . COMMA assoc [ RPAREN COMMA ]
call_args2 -> assocs . opt_block_arg [ RPAREN ]
call_args2 -> assocs . COMMA STAR arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 1230
-- On opt_block_arg shift to state 1234
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1230:
## Known stack suffix:
## assocs COMMA
## LR(1) items:
assocs -> assocs COMMA . assoc [ RPAREN COMMA ]
call_args2 -> assocs COMMA . STAR arg_value opt_block_arg [ RPAREN ]
opt_block_arg -> COMMA . block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 1231
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 617
-- On awords shift to state 374
-- On assoc shift to state 487
-- On arg_value shift to state 488
-- On arg shift to state 491
## Reductions:

State 1231:
## Known stack suffix:
## assocs COMMA STAR
## LR(1) items:
call_args2 -> assocs COMMA STAR . arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 1232
-- On arg shift to state 491
## Reductions:

State 1232:
## Known stack suffix:
## assocs COMMA STAR arg_value
## LR(1) items:
call_args2 -> assocs COMMA STAR arg_value . opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 616
-- On opt_block_arg shift to state 1233
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1233:
## Known stack suffix:
## assocs COMMA STAR arg_value opt_block_arg
## LR(1) items:
call_args2 -> assocs COMMA STAR arg_value opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> assocs COMMA STAR arg_value opt_block_arg

State 1234:
## Known stack suffix:
## assocs opt_block_arg
## LR(1) items:
call_args2 -> assocs opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> assocs opt_block_arg

State 1235:
## Known stack suffix:
## arg_value
## LR(1) items:
assoc -> arg_value . ASSOC arg_value [ RPAREN COMMA ]
call_args2 -> arg_value . COMMA args opt_block_arg [ RPAREN ]
call_args2 -> arg_value . COMMA block_arg [ RPAREN ]
call_args2 -> arg_value . COMMA STAR arg_value opt_block_arg [ RPAREN ]
call_args2 -> arg_value . COMMA args COMMA STAR arg_value opt_block_arg [ RPAREN ]
call_args2 -> arg_value . COMMA assocs opt_block_arg [ RPAREN ]
call_args2 -> arg_value . COMMA args COMMA assocs opt_block_arg [ RPAREN ]
call_args2 -> arg_value . COMMA assocs COMMA STAR arg_value opt_block_arg [ RPAREN ]
call_args2 -> arg_value . COMMA args COMMA assocs COMMA STAR arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 1236
-- On ASSOC shift to state 489
## Reductions:

State 1236:
## Known stack suffix:
## arg_value COMMA
## LR(1) items:
call_args2 -> arg_value COMMA . args opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA . block_arg [ RPAREN ]
call_args2 -> arg_value COMMA . STAR arg_value opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA . args COMMA STAR arg_value opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA . assocs opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA . args COMMA assocs opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA . assocs COMMA STAR arg_value opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA . args COMMA assocs COMMA STAR arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 1237
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 1240
-- On awords shift to state 374
-- On assocs shift to state 1241
-- On assoc shift to state 493
-- On args shift to state 1247
-- On arg_value shift to state 501
-- On arg shift to state 491
## Reductions:

State 1237:
## Known stack suffix:
## arg_value COMMA STAR
## LR(1) items:
call_args2 -> arg_value COMMA STAR . arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 1238
-- On arg shift to state 491
## Reductions:

State 1238:
## Known stack suffix:
## arg_value COMMA STAR arg_value
## LR(1) items:
call_args2 -> arg_value COMMA STAR arg_value . opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 616
-- On opt_block_arg shift to state 1239
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1239:
## Known stack suffix:
## arg_value COMMA STAR arg_value opt_block_arg
## LR(1) items:
call_args2 -> arg_value COMMA STAR arg_value opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> arg_value COMMA STAR arg_value opt_block_arg

State 1240:
## Known stack suffix:
## arg_value COMMA block_arg
## LR(1) items:
call_args2 -> arg_value COMMA block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> arg_value COMMA block_arg

State 1241:
## Known stack suffix:
## arg_value COMMA assocs
## LR(1) items:
assocs -> assocs . COMMA assoc [ RPAREN COMMA ]
call_args2 -> arg_value COMMA assocs . opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA assocs . COMMA STAR arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 1242
-- On opt_block_arg shift to state 1246
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1242:
## Known stack suffix:
## arg_value COMMA assocs COMMA
## LR(1) items:
assocs -> assocs COMMA . assoc [ RPAREN COMMA ]
call_args2 -> arg_value COMMA assocs COMMA . STAR arg_value opt_block_arg [ RPAREN ]
opt_block_arg -> COMMA . block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 1243
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 617
-- On awords shift to state 374
-- On assoc shift to state 487
-- On arg_value shift to state 488
-- On arg shift to state 491
## Reductions:

State 1243:
## Known stack suffix:
## arg_value COMMA assocs COMMA STAR
## LR(1) items:
call_args2 -> arg_value COMMA assocs COMMA STAR . arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 1244
-- On arg shift to state 491
## Reductions:

State 1244:
## Known stack suffix:
## arg_value COMMA assocs COMMA STAR arg_value
## LR(1) items:
call_args2 -> arg_value COMMA assocs COMMA STAR arg_value . opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 616
-- On opt_block_arg shift to state 1245
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1245:
## Known stack suffix:
## arg_value COMMA assocs COMMA STAR arg_value opt_block_arg
## LR(1) items:
call_args2 -> arg_value COMMA assocs COMMA STAR arg_value opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> arg_value COMMA assocs COMMA STAR arg_value opt_block_arg

State 1246:
## Known stack suffix:
## arg_value COMMA assocs opt_block_arg
## LR(1) items:
call_args2 -> arg_value COMMA assocs opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> arg_value COMMA assocs opt_block_arg

State 1247:
## Known stack suffix:
## arg_value COMMA args
## LR(1) items:
args -> args . COMMA arg_value [ RPAREN COMMA ]
call_args2 -> arg_value COMMA args . opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA args . COMMA STAR arg_value opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA args . COMMA assocs opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA args . COMMA assocs COMMA STAR arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 1248
-- On opt_block_arg shift to state 1258
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1248:
## Known stack suffix:
## arg_value COMMA args COMMA
## LR(1) items:
args -> args COMMA . arg_value [ RPAREN COMMA ]
call_args2 -> arg_value COMMA args COMMA . STAR arg_value opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA args COMMA . assocs opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA args COMMA . assocs COMMA STAR arg_value opt_block_arg [ RPAREN ]
opt_block_arg -> COMMA . block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 1249
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 617
-- On awords shift to state 374
-- On assocs shift to state 1252
-- On assoc shift to state 493
-- On arg_value shift to state 632
-- On arg shift to state 491
## Reductions:

State 1249:
## Known stack suffix:
## arg_value COMMA args COMMA STAR
## LR(1) items:
call_args2 -> arg_value COMMA args COMMA STAR . arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 1250
-- On arg shift to state 491
## Reductions:

State 1250:
## Known stack suffix:
## arg_value COMMA args COMMA STAR arg_value
## LR(1) items:
call_args2 -> arg_value COMMA args COMMA STAR arg_value . opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 616
-- On opt_block_arg shift to state 1251
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1251:
## Known stack suffix:
## arg_value COMMA args COMMA STAR arg_value opt_block_arg
## LR(1) items:
call_args2 -> arg_value COMMA args COMMA STAR arg_value opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> arg_value COMMA args COMMA STAR arg_value opt_block_arg

State 1252:
## Known stack suffix:
## arg_value COMMA args COMMA assocs
## LR(1) items:
assocs -> assocs . COMMA assoc [ RPAREN COMMA ]
call_args2 -> arg_value COMMA args COMMA assocs . opt_block_arg [ RPAREN ]
call_args2 -> arg_value COMMA args COMMA assocs . COMMA STAR arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 1253
-- On opt_block_arg shift to state 1257
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1253:
## Known stack suffix:
## arg_value COMMA args COMMA assocs COMMA
## LR(1) items:
assocs -> assocs COMMA . assoc [ RPAREN COMMA ]
call_args2 -> arg_value COMMA args COMMA assocs COMMA . STAR arg_value opt_block_arg [ RPAREN ]
opt_block_arg -> COMMA . block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 1254
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On block_arg shift to state 617
-- On awords shift to state 374
-- On assoc shift to state 487
-- On arg_value shift to state 488
-- On arg shift to state 491
## Reductions:

State 1254:
## Known stack suffix:
## arg_value COMMA args COMMA assocs COMMA STAR
## LR(1) items:
call_args2 -> arg_value COMMA args COMMA assocs COMMA STAR . arg_value opt_block_arg [ RPAREN ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg_value shift to state 1255
-- On arg shift to state 491
## Reductions:

State 1255:
## Known stack suffix:
## arg_value COMMA args COMMA assocs COMMA STAR arg_value
## LR(1) items:
call_args2 -> arg_value COMMA args COMMA assocs COMMA STAR arg_value . opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 616
-- On opt_block_arg shift to state 1256
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1256:
## Known stack suffix:
## arg_value COMMA args COMMA assocs COMMA STAR arg_value opt_block_arg
## LR(1) items:
call_args2 -> arg_value COMMA args COMMA assocs COMMA STAR arg_value opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> arg_value COMMA args COMMA assocs COMMA STAR arg_value opt_block_arg

State 1257:
## Known stack suffix:
## arg_value COMMA args COMMA assocs opt_block_arg
## LR(1) items:
call_args2 -> arg_value COMMA args COMMA assocs opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> arg_value COMMA args COMMA assocs opt_block_arg

State 1258:
## Known stack suffix:
## arg_value COMMA args opt_block_arg
## LR(1) items:
call_args2 -> arg_value COMMA args opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> arg_value COMMA args opt_block_arg

State 1259:
## Known stack suffix:
## arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ STAR2 RSHFT RPAREN POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_OR K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg_value -> arg . [ COMMA ASSOC ]
expr -> arg . [ RPAREN NL K_OR K_AND COMMENT ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On COMMA ASSOC
--   reduce production arg_value -> arg
-- On RPAREN NL K_OR K_AND COMMENT
--   reduce production expr -> arg

State 1260:
## Known stack suffix:
## command_args_e1 open_args
## LR(1) items:
command_args -> command_args_e1 open_args . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_args -> command_args_e1 open_args

State 1261:
## Known stack suffix:
## call_args
## LR(1) items:
open_args -> call_args . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production open_args -> call_args

State 1262:
## Known stack suffix:
## K_YIELD command_args
## LR(1) items:
command -> K_YIELD command_args . [ error SEMI RCURLY NL LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND COMMENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> K_YIELD command_args

State 1263:
## Known stack suffix:
## LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt
## LR(1) items:
cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt . RCURLY_error [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On error shift to state 1264
-- On RCURLY shift to state 1265
-- On RCURLY_error shift to state 1266
## Reductions:

State 1264:
## Known stack suffix:
## error
## LR(1) items:
RCURLY_error -> error . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production RCURLY_error -> error

State 1265:
## Known stack suffix:
## RCURLY
## LR(1) items:
RCURLY_error -> RCURLY . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production RCURLY_error -> RCURLY

State 1266:
## Known stack suffix:
## LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt RCURLY_error
## LR(1) items:
cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt RCURLY_error . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cmd_brace_block -> LBRACE_ARG cmd_brace_block_e1 opt_block_var compstmt RCURLY_error

State 1267:
## Known stack suffix:
## primary_value DOT operation2 command_args cmd_brace_block
## LR(1) items:
command -> primary_value DOT operation2 command_args cmd_brace_block . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> primary_value DOT operation2 command_args cmd_brace_block

State 1268:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
arg -> primary_value COLON2 . IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
arg -> primary_value COLON2 . CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
command -> primary_value COLON2 . operation2 command_args [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_BLOCK K_AND COMMENT # ]
command -> primary_value COLON2 . operation2 command_args cmd_brace_block [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_BLOCK K_AND COMMENT # ]
lhs -> primary_value COLON2 . IDENTIFIER [ EQL ]
lhs -> primary_value COLON2 . CONSTANT [ EQL ]
method_call -> primary_value COLON2 . operation2 paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
method_call -> primary_value COLON2 . operation3 [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
mlhs_node -> primary_value COLON2 . IDENTIFIER [ COMMA ]
mlhs_node -> primary_value COLON2 . CONSTANT [ COMMA ]
primary -> primary_value COLON2 . CONSTANT [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value COLON2 . IDENTIFIER OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 1269
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 558
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 1273
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation3 shift to state 560
-- On operation2 shift to state 1276
-- On op shift to state 563
## Reductions:

State 1269:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
lhs -> primary_value COLON2 IDENTIFIER . [ EQL ]
mlhs_node -> primary_value COLON2 IDENTIFIER . [ COMMA ]
operation2 -> IDENTIFIER . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
operation3 -> IDENTIFIER . [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value COLON2 IDENTIFIER . OP_ASGN command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On OP_ASGN shift to state 1270
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value COLON2 IDENTIFIER
-- On COMMA
--   reduce production mlhs_node -> primary_value COLON2 IDENTIFIER
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> IDENTIFIER
-- On STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production operation3 -> IDENTIFIER

State 1270:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER OP_ASGN
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
stmt -> primary_value COLON2 IDENTIFIER OP_ASGN . command_call [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command_call shift to state 1271
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 1272
## Reductions:

State 1271:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER OP_ASGN command_call
## LR(1) items:
stmt -> primary_value COLON2 IDENTIFIER OP_ASGN command_call . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> primary_value COLON2 IDENTIFIER OP_ASGN command_call

State 1272:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER OP_ASGN arg
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER OP_ASGN arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> primary_value COLON2 IDENTIFIER OP_ASGN arg

State 1273:
## Known stack suffix:
## primary_value COLON2 CONSTANT
## LR(1) items:
arg -> primary_value COLON2 CONSTANT . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 # ]
lhs -> primary_value COLON2 CONSTANT . [ EQL ]
mlhs_node -> primary_value COLON2 CONSTANT . [ COMMA ]
operation2 -> CONSTANT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
primary -> primary_value COLON2 CONSTANT . [ STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2 # ]
## Transitions:
-- On OP_ASGN shift to state 1274
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value COLON2 CONSTANT
-- On COMMA
--   reduce production mlhs_node -> primary_value COLON2 CONSTANT
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> CONSTANT
-- On STAR2 SEMI RSHFT RPAREN RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COLON2 CMP CARET ANDOP AMPER2
--   reduce production primary -> primary_value COLON2 CONSTANT

State 1274:
## Known stack suffix:
## primary_value COLON2 CONSTANT OP_ASGN
## LR(1) items:
arg -> primary_value COLON2 CONSTANT OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1275
## Reductions:

State 1275:
## Known stack suffix:
## primary_value COLON2 CONSTANT OP_ASGN arg
## LR(1) items:
arg -> primary_value COLON2 CONSTANT OP_ASGN arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> primary_value COLON2 CONSTANT OP_ASGN arg

State 1276:
## Known stack suffix:
## primary_value COLON2 operation2
## LR(1) items:
command -> primary_value COLON2 operation2 . command_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> primary_value COLON2 operation2 . command_args cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
method_call -> primary_value COLON2 operation2 . paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On LPAREN2 shift to state 154
-- On paren_args shift to state 562
-- On command_args_e1 shift to state 146
-- On command_args shift to state 1277
## Reductions:
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production command_args_e1 ->

State 1277:
## Known stack suffix:
## primary_value COLON2 operation2 command_args
## LR(1) items:
command -> primary_value COLON2 operation2 command_args . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> primary_value COLON2 operation2 command_args . cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On LBRACE_ARG shift to state 519
-- On cmd_brace_block shift to state 1278
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production command -> primary_value COLON2 operation2 command_args

State 1278:
## Known stack suffix:
## primary_value COLON2 operation2 command_args cmd_brace_block
## LR(1) items:
command -> primary_value COLON2 operation2 command_args cmd_brace_block . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> primary_value COLON2 operation2 command_args cmd_brace_block

State 1279:
## Known stack suffix:
## stmts opt_terms
## LR(1) items:
compstmt -> stmts opt_terms . [ RPAREN RCURLY K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compstmt -> stmts opt_terms

State 1280:
## Known stack suffix:
## LPAREN mlhs_entry
## LR(1) items:
mlhs -> LPAREN mlhs_entry . RPAREN [ PIPE K_IN EQL ]
mlhs_item -> LPAREN mlhs_entry . RPAREN [ COMMA ]
## Transitions:
-- On RPAREN shift to state 1281
## Reductions:

State 1281:
## Known stack suffix:
## LPAREN mlhs_entry RPAREN
## LR(1) items:
mlhs -> LPAREN mlhs_entry RPAREN . [ PIPE K_IN EQL ]
mlhs_item -> LPAREN mlhs_entry RPAREN . [ COMMA ]
## Transitions:
## Reductions:
-- On PIPE K_IN EQL
--   reduce production mlhs -> LPAREN mlhs_entry RPAREN
-- On COMMA
--   reduce production mlhs_item -> LPAREN mlhs_entry RPAREN

State 1282:
## Known stack suffix:
## K_DO_BLOCK do_block_e1 opt_block_var compstmt
## LR(1) items:
do_block -> K_DO_BLOCK do_block_e1 opt_block_var compstmt . K_END_error [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
## Transitions:
-- On error shift to state 1283
-- On K_END shift to state 1284
-- On K_END_error shift to state 1285
## Reductions:

State 1283:
## Known stack suffix:
## error
## LR(1) items:
K_END_error -> error . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production K_END_error -> error

State 1284:
## Known stack suffix:
## K_END
## LR(1) items:
K_END_error -> K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production K_END_error -> K_END

State 1285:
## Known stack suffix:
## K_DO_BLOCK do_block_e1 opt_block_var compstmt K_END_error
## LR(1) items:
do_block -> K_DO_BLOCK do_block_e1 opt_block_var compstmt K_END_error . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND DOT COMMENT COLON2 COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production do_block -> K_DO_BLOCK do_block_e1 opt_block_var compstmt K_END_error

State 1286:
## Known stack suffix:
## BANG arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> BANG arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> BANG arg

State 1287:
## Known stack suffix:
## TILDE arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> TILDE arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> TILDE arg

State 1288:
## Known stack suffix:
## UMINUS arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> UMINUS arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On POW shift to state 976
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> UMINUS arg

State 1289:
## Known stack suffix:
## UMINUS_NUM INTEGER POW arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> UMINUS_NUM INTEGER POW arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On POW shift to state 976
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> UMINUS_NUM INTEGER POW arg

State 1290:
## Known stack suffix:
## UMINUS_NUM FLOAT
## LR(1) items:
arg -> UMINUS_NUM FLOAT . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
numeric -> UMINUS_NUM FLOAT . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On POW shift to state 1291
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 CMP CARET ASSOC ANDOP AMPER2
--   reduce production numeric -> UMINUS_NUM FLOAT

State 1291:
## Known stack suffix:
## UMINUS_NUM FLOAT POW
## LR(1) items:
arg -> UMINUS_NUM FLOAT POW . arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 636
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 639
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 674
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 698
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 702
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 906
-- On K_BEGIN shift to state 907
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 918
-- On BANG shift to state 921
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 924
-- On var_ref shift to state 925
-- On var_lhs shift to state 926
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On regexp shift to state 933
-- On primary_value shift to state 934
-- On primary shift to state 939
-- On operation shift to state 940
-- On numeric shift to state 957
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 969
-- On dsym shift to state 971
-- On awords shift to state 972
-- On arg shift to state 1292
## Reductions:

State 1292:
## Known stack suffix:
## UMINUS_NUM FLOAT POW arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> UMINUS_NUM FLOAT POW arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
-- On POW shift to state 976
## Reductions:
-- On error STAR2 SEMI RSHFT RCURLY PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> UMINUS_NUM FLOAT POW arg

State 1293:
## Known stack suffix:
## UPLUS arg
## LR(1) items:
arg -> arg . DOT2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PLUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MINUS arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . POW arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> UPLUS arg . [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . PIPE arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CARET arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . CMP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . GEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EQQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NEQ arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . MATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . OROP arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ error STAR2 SEMI RSHFT RCURLY POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_OR K_IF_MOD K_END K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA CMP CARET ASSOC ANDOP AMPER2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> UPLUS arg

State 1294:
## Known stack suffix:
## error stmt
## LR(1) items:
stmt -> stmt . K_IF_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_UNLESS_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_WHILE_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_UNTIL_MOD expr_value [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmt -> stmt . K_RESCUE_MOD stmt [ error SEMI RCURLY NL K_WHILE_MOD K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_IF_MOD K_END COMMENT ]
stmts -> error stmt . [ error SEMI RCURLY NL K_END COMMENT ]
## Transitions:
-- On K_WHILE_MOD shift to state 1116
-- On K_UNTIL_MOD shift to state 1125
-- On K_UNLESS_MOD shift to state 1127
-- On K_RESCUE_MOD shift to state 1129
-- On K_IF_MOD shift to state 1178
## Reductions:
-- On error SEMI RCURLY NL K_END COMMENT
--   reduce production stmts -> error stmt

State 1295:
## Known stack suffix:
## K_DO brace_block_e1 opt_block_var compstmt
## LR(1) items:
brace_block -> K_DO brace_block_e1 opt_block_var compstmt . K_END_error [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 1283
-- On K_END shift to state 1284
-- On K_END_error shift to state 1296
## Reductions:

State 1296:
## Known stack suffix:
## K_DO brace_block_e1 opt_block_var compstmt K_END_error
## LR(1) items:
brace_block -> K_DO brace_block_e1 opt_block_var compstmt K_END_error . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production brace_block -> K_DO brace_block_e1 opt_block_var compstmt K_END_error

State 1297:
## Known stack suffix:
## operation paren_args
## LR(1) items:
method_call -> operation paren_args . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_call -> operation paren_args

State 1298:
## Known stack suffix:
## operation command_args
## LR(1) items:
command -> operation command_args . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> operation command_args . cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On LBRACE_ARG shift to state 519
-- On cmd_brace_block shift to state 1299
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production command -> operation command_args

State 1299:
## Known stack suffix:
## operation command_args cmd_brace_block
## LR(1) items:
command -> operation command_args cmd_brace_block . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> operation command_args cmd_brace_block

State 1300:
## Known stack suffix:
## operation brace_block
## LR(1) items:
primary -> operation brace_block . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> operation brace_block

State 1301:
## Known stack suffix:
## primary_value LB aref_args
## LR(1) items:
lhs -> primary_value LB aref_args . RBRACK [ PIPE K_IN ]
mlhs_node -> primary_value LB aref_args . RBRACK [ COMMA ]
primary -> primary_value LB aref_args . RBRACK [ LB DOT COLON2 ]
## Transitions:
-- On RBRACK shift to state 1302
## Reductions:

State 1302:
## Known stack suffix:
## primary_value LB aref_args RBRACK
## LR(1) items:
lhs -> primary_value LB aref_args RBRACK . [ PIPE K_IN ]
mlhs_node -> primary_value LB aref_args RBRACK . [ COMMA ]
primary -> primary_value LB aref_args RBRACK . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On PIPE K_IN
--   reduce production lhs -> primary_value LB aref_args RBRACK
-- On COMMA
--   reduce production mlhs_node -> primary_value LB aref_args RBRACK
-- On LB DOT COLON2
--   reduce production primary -> primary_value LB aref_args RBRACK

State 1303:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
lhs -> primary_value DOT . IDENTIFIER [ PIPE K_IN ]
lhs -> primary_value DOT . CONSTANT [ PIPE K_IN ]
method_call -> primary_value DOT . operation2 opt_paren_args [ LCURLY LB K_DO DOT COLON2 ]
mlhs_node -> primary_value DOT . IDENTIFIER [ COMMA ]
mlhs_node -> primary_value DOT . CONSTANT [ COMMA ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 1304
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 1305
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 555
-- On op shift to state 453
## Reductions:

State 1304:
## Known stack suffix:
## primary_value DOT IDENTIFIER
## LR(1) items:
lhs -> primary_value DOT IDENTIFIER . [ PIPE K_IN ]
mlhs_node -> primary_value DOT IDENTIFIER . [ COMMA ]
operation2 -> IDENTIFIER . [ LPAREN2 LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On PIPE K_IN
--   reduce production lhs -> primary_value DOT IDENTIFIER
-- On COMMA
--   reduce production mlhs_node -> primary_value DOT IDENTIFIER
-- On LPAREN2 LCURLY LB K_DO DOT COLON2
--   reduce production operation2 -> IDENTIFIER

State 1305:
## Known stack suffix:
## primary_value DOT CONSTANT
## LR(1) items:
lhs -> primary_value DOT CONSTANT . [ PIPE K_IN ]
mlhs_node -> primary_value DOT CONSTANT . [ COMMA ]
operation2 -> CONSTANT . [ LPAREN2 LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On PIPE K_IN
--   reduce production lhs -> primary_value DOT CONSTANT
-- On COMMA
--   reduce production mlhs_node -> primary_value DOT CONSTANT
-- On LPAREN2 LCURLY LB K_DO DOT COLON2
--   reduce production operation2 -> CONSTANT

State 1306:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
lhs -> primary_value COLON2 . IDENTIFIER [ PIPE K_IN ]
lhs -> primary_value COLON2 . CONSTANT [ PIPE K_IN ]
method_call -> primary_value COLON2 . operation2 paren_args [ LCURLY LB K_DO DOT COLON2 ]
method_call -> primary_value COLON2 . operation3 [ LCURLY LB K_DO DOT COLON2 ]
mlhs_node -> primary_value COLON2 . IDENTIFIER [ COMMA ]
mlhs_node -> primary_value COLON2 . CONSTANT [ COMMA ]
primary -> primary_value COLON2 . CONSTANT [ LB DOT COLON2 ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 1307
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 558
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 1308
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation3 shift to state 560
-- On operation2 shift to state 561
-- On op shift to state 563
## Reductions:

State 1307:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER
## LR(1) items:
lhs -> primary_value COLON2 IDENTIFIER . [ PIPE K_IN ]
mlhs_node -> primary_value COLON2 IDENTIFIER . [ COMMA ]
operation2 -> IDENTIFIER . [ LPAREN2 ]
operation3 -> IDENTIFIER . [ LCURLY LB K_DO DOT COLON2 ]
## Transitions:
## Reductions:
-- On PIPE K_IN
--   reduce production lhs -> primary_value COLON2 IDENTIFIER
-- On COMMA
--   reduce production mlhs_node -> primary_value COLON2 IDENTIFIER
-- On LPAREN2
--   reduce production operation2 -> IDENTIFIER
-- On LCURLY LB K_DO DOT COLON2
--   reduce production operation3 -> IDENTIFIER

State 1308:
## Known stack suffix:
## primary_value COLON2 CONSTANT
## LR(1) items:
lhs -> primary_value COLON2 CONSTANT . [ PIPE K_IN ]
mlhs_node -> primary_value COLON2 CONSTANT . [ COMMA ]
operation2 -> CONSTANT . [ LPAREN2 ]
primary -> primary_value COLON2 CONSTANT . [ LB DOT COLON2 ]
## Transitions:
## Reductions:
-- On PIPE K_IN
--   reduce production lhs -> primary_value COLON2 CONSTANT
-- On COMMA
--   reduce production mlhs_node -> primary_value COLON2 CONSTANT
-- On LPAREN2
--   reduce production operation2 -> CONSTANT
-- On LB DOT COLON2
--   reduce production primary -> primary_value COLON2 CONSTANT

State 1309:
## Known stack suffix:
## PIPE mlhs
## LR(1) items:
opt_block_var -> PIPE mlhs . PIPE [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On PIPE shift to state 1310
## Reductions:

State 1310:
## Known stack suffix:
## PIPE mlhs PIPE
## LR(1) items:
opt_block_var -> PIPE mlhs PIPE . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block_var -> PIPE mlhs PIPE

State 1311:
## Known stack suffix:
## PIPE lhs
## LR(1) items:
opt_block_var -> PIPE lhs . PIPE [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
-- On PIPE shift to state 1312
## Reductions:

State 1312:
## Known stack suffix:
## PIPE lhs PIPE
## LR(1) items:
opt_block_var -> PIPE lhs PIPE . [ error XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR SEMI REGEXP_BEG RCURLY QWORDS_BEG NL LPAREN_ARG LPAREN LBRACK LBRACE K_lEND K_lBEGIN K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_UNDEF K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NOT K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_END K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_ALIAS IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COMMENT COLON3 BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block_var -> PIPE lhs PIPE

State 1313:
## Known stack suffix:
## LCURLY brace_block_e1 opt_block_var
## LR(1) items:
brace_block -> LCURLY brace_block_e1 opt_block_var . compstmt RCURLY_error [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 259
-- On XSTRING_BEG shift to state 260
-- On WORDS_BEG shift to state 263
-- On UPLUS shift to state 268
-- On UMINUS_NUM shift to state 269
-- On UMINUS shift to state 272
-- On TILDE shift to state 273
-- On SYMBEG shift to state 274
-- On STRING_BEG shift to state 354
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 357
-- On QWORDS_BEG shift to state 360
-- On LPAREN_ARG shift to state 365
-- On LPAREN shift to state 437
-- On LBRACK shift to state 522
-- On LBRACE shift to state 525
-- On K_lEND shift to state 534
-- On K_lBEGIN shift to state 596
-- On K__LINE__ shift to state 601
-- On K__FILE__ shift to state 602
-- On K_YIELD shift to state 603
-- On K_WHILE shift to state 640
-- On K_UNTIL shift to state 653
-- On K_UNLESS shift to state 660
-- On K_UNDEF shift to state 944
-- On K_TRUE shift to state 673
-- On K_SUPER shift to state 953
-- On K_SELF shift to state 697
-- On K_RETURN shift to state 955
-- On K_RETRY shift to state 699
-- On K_REDO shift to state 700
-- On K_NOT shift to state 962
-- On K_NIL shift to state 701
-- On K_NEXT shift to state 963
-- On K_MODULE shift to state 703
-- On K_IF shift to state 758
-- On K_FOR shift to state 770
-- On K_FALSE shift to state 781
-- On K_DEFINED shift to state 782
-- On K_DEF shift to state 787
-- On K_CLASS shift to state 857
-- On K_CASE shift to state 877
-- On K_BREAK shift to state 1043
-- On K_BEGIN shift to state 907
-- On K_ALIAS shift to state 1081
-- On IVAR shift to state 910
-- On INTEGER shift to state 911
-- On IDENTIFIER shift to state 912
-- On GVAR shift to state 913
-- On FLOAT shift to state 914
-- On FID shift to state 915
-- On CVAR shift to state 916
-- On CONSTANT shift to state 917
-- On COLON3 shift to state 1087
-- On BANG shift to state 1089
-- On xstring shift to state 922
-- On words shift to state 923
-- On variable shift to state 1095
-- On var_ref shift to state 925
-- On var_lhs shift to state 1096
-- On symbol shift to state 928
-- On strings shift to state 929
-- On string1 shift to state 930
-- On string shift to state 931
-- On stmts shift to state 1113
-- On stmt shift to state 1183
-- On regexp shift to state 933
-- On primary_value shift to state 1131
-- On primary shift to state 939
-- On operation shift to state 1044
-- On numeric shift to state 957
-- On none shift to state 1184
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 1160
-- On method_call shift to state 958
-- On literal shift to state 968
-- On lhs shift to state 1172
-- On expr shift to state 1177
-- On dsym shift to state 971
-- On compstmt shift to state 1314
-- On command_call shift to state 1121
-- On command shift to state 1091
-- On block_command shift to state 1099
-- On block_call shift to state 1100
-- On awords shift to state 972
-- On arg shift to state 1122
## Reductions:
-- On SEMI RCURLY NL COMMENT
--   reduce production none ->

State 1314:
## Known stack suffix:
## LCURLY brace_block_e1 opt_block_var compstmt
## LR(1) items:
brace_block -> LCURLY brace_block_e1 opt_block_var compstmt . RCURLY_error [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 1264
-- On RCURLY shift to state 1265
-- On RCURLY_error shift to state 1315
## Reductions:

State 1315:
## Known stack suffix:
## LCURLY brace_block_e1 opt_block_var compstmt RCURLY_error
## LR(1) items:
brace_block -> LCURLY brace_block_e1 opt_block_var compstmt RCURLY_error . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production brace_block -> LCURLY brace_block_e1 opt_block_var compstmt RCURLY_error

State 1316:
## Known stack suffix:
## primary_value DOT CONSTANT
## LR(1) items:
arg -> primary_value DOT CONSTANT . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value DOT CONSTANT . [ EQL ]
operation2 -> CONSTANT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG ASSOC ANDOP AMPER2 AMPER # ]
## Transitions:
-- On OP_ASGN shift to state 1317
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value DOT CONSTANT
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR2 STAR SEMI RSHFT RPAREN REGEXP_BEG RCURLY RBRACK QWORDS_BEG POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LPAREN_ARG LPAREN2 LPAREN LEQ LCURLY LBRACK LBRACE_ARG LBRACE LB K__LINE__ K__FILE__ K_YIELD K_WHILE_MOD K_WHILE K_WHEN K_UNTIL_MOD K_UNTIL K_UNLESS_MOD K_UNLESS K_TRUE K_THEN K_SUPER K_SELF K_RETURN K_RETRY K_RESCUE_MOD K_RESCUE K_REDO K_OR K_NIL K_NEXT K_MODULE K_IF_MOD K_IF K_FOR K_FALSE K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN K_AND IVAR INTEGER IDENTIFIER GVAR GT GEQ FLOAT FID EQQ EQ EH DOT3 DOT2 DOT DIVIDE CVAR CONSTANT COMMENT COMMA COLON3 COLON2 COLON CMP CARET BANG ASSOC ANDOP AMPER2 AMPER
--   reduce production operation2 -> CONSTANT

State 1317:
## Known stack suffix:
## primary_value DOT CONSTANT OP_ASGN
## LR(1) items:
arg -> primary_value DOT CONSTANT OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 515
## Reductions:

State 1318:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
arg -> primary_value COLON2 . IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value COLON2 . CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
command -> primary_value COLON2 . operation2 command_args [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
command -> primary_value COLON2 . operation2 command_args cmd_brace_block [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
lhs -> primary_value COLON2 . IDENTIFIER [ EQL ]
lhs -> primary_value COLON2 . CONSTANT [ EQL ]
method_call -> primary_value COLON2 . operation2 paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
method_call -> primary_value COLON2 . operation3 [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> primary_value COLON2 . CONSTANT [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 1319
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 558
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 1321
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation3 shift to state 560
-- On operation2 shift to state 1276
-- On op shift to state 563
## Reductions:

State 1319:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value COLON2 IDENTIFIER . [ EQL ]
operation2 -> IDENTIFIER . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
operation3 -> IDENTIFIER . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On OP_ASGN shift to state 1320
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value COLON2 IDENTIFIER
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> IDENTIFIER
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production operation3 -> IDENTIFIER

State 1320:
## Known stack suffix:
## primary_value COLON2 IDENTIFIER OP_ASGN
## LR(1) items:
arg -> primary_value COLON2 IDENTIFIER OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1272
## Reductions:

State 1321:
## Known stack suffix:
## primary_value COLON2 CONSTANT
## LR(1) items:
arg -> primary_value COLON2 CONSTANT . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value COLON2 CONSTANT . [ EQL ]
operation2 -> CONSTANT . [ XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER ]
primary -> primary_value COLON2 CONSTANT . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On OP_ASGN shift to state 1274
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value COLON2 CONSTANT
-- On XSTRING_BEG WORDS_BEG UPLUS UMINUS_NUM UMINUS TILDE SYMBEG STRING_BEG STAR REGEXP_BEG QWORDS_BEG LPAREN_ARG LPAREN2 LPAREN LBRACK LBRACE K__LINE__ K__FILE__ K_YIELD K_WHILE K_UNTIL K_UNLESS K_TRUE K_SUPER K_SELF K_RETURN K_RETRY K_REDO K_NIL K_NEXT K_MODULE K_IF K_FOR K_FALSE K_DEFINED K_DEF K_CLASS K_CASE K_BREAK K_BEGIN IVAR INTEGER IDENTIFIER GVAR FLOAT FID CVAR CONSTANT COLON3 BANG AMPER
--   reduce production operation2 -> CONSTANT
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> primary_value COLON2 CONSTANT

State 1322:
## Known stack suffix:
## primary_value LB aref_args
## LR(1) items:
arg -> primary_value LB aref_args . RBRACK OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value LB aref_args . RBRACK [ EQL ]
primary -> primary_value LB aref_args . RBRACK [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RBRACK shift to state 1323
## Reductions:

State 1323:
## Known stack suffix:
## primary_value LB aref_args RBRACK
## LR(1) items:
arg -> primary_value LB aref_args RBRACK . OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value LB aref_args RBRACK . [ EQL ]
primary -> primary_value LB aref_args RBRACK . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On OP_ASGN shift to state 1324
## Reductions:
-- On EQL
--   reduce production lhs -> primary_value LB aref_args RBRACK
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production primary -> primary_value LB aref_args RBRACK

State 1324:
## Known stack suffix:
## primary_value LB aref_args RBRACK OP_ASGN
## LR(1) items:
arg -> primary_value LB aref_args RBRACK OP_ASGN . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 506
## Reductions:

State 1325:
## Known stack suffix:
## primary_value DOT
## LR(1) items:
arg -> primary_value DOT . IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value DOT . CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value DOT . IDENTIFIER [ EQL ]
lhs -> primary_value DOT . CONSTANT [ EQL ]
method_call -> primary_value DOT . operation2 opt_paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 239
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 446
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 1316
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation2 shift to state 555
-- On op shift to state 453
## Reductions:

State 1326:
## Known stack suffix:
## primary_value COLON2
## LR(1) items:
arg -> primary_value COLON2 . IDENTIFIER OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> primary_value COLON2 . CONSTANT OP_ASGN arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
lhs -> primary_value COLON2 . IDENTIFIER [ EQL ]
lhs -> primary_value COLON2 . CONSTANT [ EQL ]
method_call -> primary_value COLON2 . operation2 paren_args [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
method_call -> primary_value COLON2 . operation3 [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> primary_value COLON2 . CONSTANT [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On IDENTIFIER shift to state 1319
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 558
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 1321
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On operation3 shift to state 560
-- On operation2 shift to state 561
-- On op shift to state 563
## Reductions:

State 1327:
## Known stack suffix:
## COLON3 CONSTANT OP_ASGN arg
## LR(1) items:
arg -> COLON3 CONSTANT OP_ASGN arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> COLON3 CONSTANT OP_ASGN arg

State 1328:
## Known stack suffix:
## K_BEGIN bodystmt
## LR(1) items:
primary -> K_BEGIN bodystmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1329
## Reductions:

State 1329:
## Known stack suffix:
## K_BEGIN bodystmt K_END
## LR(1) items:
primary -> K_BEGIN bodystmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_BEGIN bodystmt K_END

State 1330:
## Known stack suffix:
## K_BREAK call_args
## LR(1) items:
command_call -> K_BREAK call_args . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_call -> K_BREAK call_args

State 1331:
## Known stack suffix:
## K_CASE opt_terms
## LR(1) items:
primary -> K_CASE opt_terms . case_body opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
primary -> K_CASE opt_terms . K_ELSE compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_WHEN shift to state 882
-- On K_ELSE shift to state 1332
-- On case_body shift to state 1335
## Reductions:

State 1332:
## Known stack suffix:
## K_CASE opt_terms K_ELSE
## LR(1) items:
primary -> K_CASE opt_terms K_ELSE . compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1333
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 1333:
## Known stack suffix:
## K_CASE opt_terms K_ELSE compstmt
## LR(1) items:
primary -> K_CASE opt_terms K_ELSE compstmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1334
## Reductions:

State 1334:
## Known stack suffix:
## K_CASE opt_terms K_ELSE compstmt K_END
## LR(1) items:
primary -> K_CASE opt_terms K_ELSE compstmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CASE opt_terms K_ELSE compstmt K_END

State 1335:
## Known stack suffix:
## K_CASE opt_terms case_body
## LR(1) items:
primary -> K_CASE opt_terms case_body . opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_ELSE shift to state 666
-- On opt_else shift to state 1336
-- On none shift to state 670
## Reductions:
-- On K_END
--   reduce production none ->

State 1336:
## Known stack suffix:
## K_CASE opt_terms case_body opt_else
## LR(1) items:
primary -> K_CASE opt_terms case_body opt_else . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1337
## Reductions:

State 1337:
## Known stack suffix:
## K_CASE opt_terms case_body opt_else K_END
## LR(1) items:
primary -> K_CASE opt_terms case_body opt_else K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CASE opt_terms case_body opt_else K_END

State 1338:
## Known stack suffix:
## K_CASE expr_value
## LR(1) items:
primary -> K_CASE expr_value . opt_terms case_body opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On SEMI shift to state 198
-- On NL shift to state 199
-- On COMMENT shift to state 460
-- On terms shift to state 878
-- On term shift to state 879
-- On opt_terms shift to state 1339
## Reductions:
-- On K_WHEN
--   reduce production opt_terms ->

State 1339:
## Known stack suffix:
## K_CASE expr_value opt_terms
## LR(1) items:
primary -> K_CASE expr_value opt_terms . case_body opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_WHEN shift to state 882
-- On case_body shift to state 1340
## Reductions:

State 1340:
## Known stack suffix:
## K_CASE expr_value opt_terms case_body
## LR(1) items:
primary -> K_CASE expr_value opt_terms case_body . opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_ELSE shift to state 666
-- On opt_else shift to state 1341
-- On none shift to state 670
## Reductions:
-- On K_END
--   reduce production none ->

State 1341:
## Known stack suffix:
## K_CASE expr_value opt_terms case_body opt_else
## LR(1) items:
primary -> K_CASE expr_value opt_terms case_body opt_else . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1342
## Reductions:

State 1342:
## Known stack suffix:
## K_CASE expr_value opt_terms case_body opt_else K_END
## LR(1) items:
primary -> K_CASE expr_value opt_terms case_body opt_else K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CASE expr_value opt_terms case_body opt_else K_END

State 1343:
## Known stack suffix:
## K_CLASS LSHFT expr
## LR(1) items:
expr -> expr . K_AND expr [ SEMI NL K_OR K_AND COMMENT ]
expr -> expr . K_OR expr [ SEMI NL K_OR K_AND COMMENT ]
primary -> K_CLASS LSHFT expr . primary_e5 term primary_e6 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_OR shift to state 466
-- On K_AND shift to state 470
-- On primary_e5 shift to state 1344
## Reductions:
-- On SEMI NL COMMENT
--   reduce production primary_e5 ->

State 1344:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 . term primary_e6 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On COMMENT shift to state 646
-- On term shift to state 1345
## Reductions:

State 1345:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5 term
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 term . primary_e6 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e6 shift to state 1346
## Default reduction:
-- After reading the next token, reduce production primary_e6 ->

State 1346:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5 term primary_e6
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 term primary_e6 . bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 1347
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 1347:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1348
## Reductions:

State 1348:
## Known stack suffix:
## K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt K_END
## LR(1) items:
primary -> K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CLASS LSHFT expr primary_e5 term primary_e6 bodystmt K_END

State 1349:
## Known stack suffix:
## K_CLASS cpath
## LR(1) items:
primary -> K_CLASS cpath . superclass primary_e4 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 866
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On LT shift to state 868
-- On COMMENT shift to state 646
-- On term shift to state 872
-- On superclass shift to state 1350
## Reductions:

State 1350:
## Known stack suffix:
## K_CLASS cpath superclass
## LR(1) items:
primary -> K_CLASS cpath superclass . primary_e4 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e4 shift to state 1351
## Default reduction:
-- After reading the next token, reduce production primary_e4 ->

State 1351:
## Known stack suffix:
## K_CLASS cpath superclass primary_e4
## LR(1) items:
primary -> K_CLASS cpath superclass primary_e4 . bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 1352
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 1352:
## Known stack suffix:
## K_CLASS cpath superclass primary_e4 bodystmt
## LR(1) items:
primary -> K_CLASS cpath superclass primary_e4 bodystmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1353
## Reductions:

State 1353:
## Known stack suffix:
## K_CLASS cpath superclass primary_e4 bodystmt K_END
## LR(1) items:
primary -> K_CLASS cpath superclass primary_e4 bodystmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_CLASS cpath superclass primary_e4 bodystmt K_END

State 1354:
## Known stack suffix:
## LPAREN2 singleton_e1 expr
## LR(1) items:
expr -> expr . K_AND expr [ RPAREN NL K_OR K_AND COMMENT ]
expr -> expr . K_OR expr [ RPAREN NL K_OR K_AND COMMENT ]
singleton -> LPAREN2 singleton_e1 expr . opt_nl RPAREN [ DOT COLON2 ]
## Transitions:
-- On NL shift to state 188
-- On K_OR shift to state 466
-- On K_AND shift to state 470
-- On COMMENT shift to state 189
-- On opt_nl shift to state 1355
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 1355:
## Known stack suffix:
## LPAREN2 singleton_e1 expr opt_nl
## LR(1) items:
singleton -> LPAREN2 singleton_e1 expr opt_nl . RPAREN [ DOT COLON2 ]
## Transitions:
-- On RPAREN shift to state 1356
## Reductions:

State 1356:
## Known stack suffix:
## LPAREN2 singleton_e1 expr opt_nl RPAREN
## LR(1) items:
singleton -> LPAREN2 singleton_e1 expr opt_nl RPAREN . [ DOT COLON2 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production singleton -> LPAREN2 singleton_e1 expr opt_nl RPAREN

State 1357:
## Known stack suffix:
## K_DEF singleton
## LR(1) items:
primary -> K_DEF singleton . dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On DOT shift to state 798
-- On COLON2 shift to state 799
-- On dot_or_colon shift to state 1358
## Reductions:

State 1358:
## Known stack suffix:
## K_DEF singleton dot_or_colon
## LR(1) items:
primary -> K_DEF singleton dot_or_colon . primary_e9 fname primary_e10 f_arglist bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e9 shift to state 1359
## Default reduction:
-- After reading the next token, reduce production primary_e9 ->

State 1359:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 . fname primary_e10 f_arglist bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On UPLUS shift to state 32
-- On UMINUS shift to state 33
-- On TILDE shift to state 34
-- On STAR2 shift to state 35
-- On STAR shift to state 36
-- On RSHFT shift to state 37
-- On POW shift to state 38
-- On PLUS shift to state 39
-- On PIPE shift to state 40
-- On PERCENT shift to state 41
-- On MINUS shift to state 42
-- On MATCH shift to state 43
-- On LT shift to state 44
-- On LSHFT shift to state 45
-- On LEQ shift to state 46
-- On K_lEND shift to state 47
-- On K_lBEGIN shift to state 48
-- On K__LINE__ shift to state 49
-- On K__FILE__ shift to state 50
-- On K_YIELD shift to state 51
-- On K_WHILE_MOD shift to state 52
-- On K_WHEN shift to state 53
-- On K_UNTIL_MOD shift to state 54
-- On K_UNLESS_MOD shift to state 55
-- On K_UNDEF shift to state 56
-- On K_TRUE shift to state 57
-- On K_THEN shift to state 58
-- On K_SUPER shift to state 59
-- On K_SELF shift to state 60
-- On K_RETURN shift to state 61
-- On K_RETRY shift to state 62
-- On K_RESCUE_MOD shift to state 63
-- On K_RESCUE shift to state 64
-- On K_REDO shift to state 65
-- On K_OR shift to state 66
-- On K_NOT shift to state 67
-- On K_NIL shift to state 68
-- On K_NEXT shift to state 69
-- On K_MODULE shift to state 70
-- On K_IN shift to state 71
-- On K_IF_MOD shift to state 72
-- On K_FOR shift to state 73
-- On K_FALSE shift to state 74
-- On K_ENSURE shift to state 75
-- On K_END shift to state 76
-- On K_ELSIF shift to state 77
-- On K_ELSE shift to state 78
-- On K_DO shift to state 79
-- On K_DEFINED shift to state 80
-- On K_DEF shift to state 81
-- On K_CLASS shift to state 82
-- On K_CASE shift to state 83
-- On K_BREAK shift to state 84
-- On K_BEGIN shift to state 85
-- On K_AND shift to state 86
-- On K_ALIAS shift to state 87
-- On IDENTIFIER shift to state 89
-- On GT shift to state 91
-- On GEQ shift to state 92
-- On FID shift to state 93
-- On EQQ shift to state 94
-- On EQ shift to state 95
-- On DIVIDE shift to state 96
-- On CONSTANT shift to state 98
-- On CMP shift to state 99
-- On CARET shift to state 100
-- On BACK_REF2 shift to state 101
-- On ASET shift to state 102
-- On AREF shift to state 103
-- On AMPER2 shift to state 104
-- On reswords shift to state 109
-- On op shift to state 110
-- On fname shift to state 1360
## Reductions:

State 1360:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname . primary_e10 f_arglist bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e10 shift to state 1361
## Default reduction:
-- After reading the next token, reduce production primary_e10 ->

State 1361:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname primary_e10
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 . f_arglist bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 804
-- On STAR shift to state 805
-- On LPAREN2 shift to state 806
-- On IVAR shift to state 807
-- On IDENTIFIER shift to state 808
-- On CVAR shift to state 811
-- On CONSTANT shift to state 812
-- On AMPER2 shift to state 813
-- On AMPER shift to state 814
-- On restarg_mark shift to state 815
-- On f_rest_arg shift to state 817
-- On f_optarg shift to state 823
-- On f_opt shift to state 830
-- On f_norm_arg shift to state 831
-- On f_block_arg shift to state 832
-- On f_args shift to state 847
-- On f_arglist shift to state 1362
-- On f_arg shift to state 836
-- On blkarg_mark shift to state 820
## Reductions:
-- On SEMI NL COMMENT
--   reduce production f_args ->

State 1362:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist . bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 1363
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 1363:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1364
## Reductions:

State 1364:
## Known stack suffix:
## K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END
## LR(1) items:
primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_DEF singleton dot_or_colon primary_e9 fname primary_e10 f_arglist bodystmt K_END

State 1365:
## Known stack suffix:
## K_DEF fname
## LR(1) items:
primary -> K_DEF fname . primary_e8 f_arglist bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e8 shift to state 1366
## Default reduction:
-- After reading the next token, reduce production primary_e8 ->

State 1366:
## Known stack suffix:
## K_DEF fname primary_e8
## LR(1) items:
primary -> K_DEF fname primary_e8 . f_arglist bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 804
-- On STAR shift to state 805
-- On LPAREN2 shift to state 806
-- On IVAR shift to state 807
-- On IDENTIFIER shift to state 808
-- On CVAR shift to state 811
-- On CONSTANT shift to state 812
-- On AMPER2 shift to state 813
-- On AMPER shift to state 814
-- On restarg_mark shift to state 815
-- On f_rest_arg shift to state 817
-- On f_optarg shift to state 823
-- On f_opt shift to state 830
-- On f_norm_arg shift to state 831
-- On f_block_arg shift to state 832
-- On f_args shift to state 847
-- On f_arglist shift to state 1367
-- On f_arg shift to state 836
-- On blkarg_mark shift to state 820
## Reductions:
-- On SEMI NL COMMENT
--   reduce production f_args ->

State 1367:
## Known stack suffix:
## K_DEF fname primary_e8 f_arglist
## LR(1) items:
primary -> K_DEF fname primary_e8 f_arglist . bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 1368
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 1368:
## Known stack suffix:
## K_DEF fname primary_e8 f_arglist bodystmt
## LR(1) items:
primary -> K_DEF fname primary_e8 f_arglist bodystmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1369
## Reductions:

State 1369:
## Known stack suffix:
## K_DEF fname primary_e8 f_arglist bodystmt K_END
## LR(1) items:
primary -> K_DEF fname primary_e8 f_arglist bodystmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_DEF fname primary_e8 f_arglist bodystmt K_END

State 1370:
## Known stack suffix:
## K_DEFINED opt_nl LPAREN2 expr
## LR(1) items:
expr -> expr . K_AND expr [ RPAREN K_OR K_AND ]
expr -> expr . K_OR expr [ RPAREN K_OR K_AND ]
primary -> K_DEFINED opt_nl LPAREN2 expr . RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RPAREN shift to state 1371
-- On K_OR shift to state 466
-- On K_AND shift to state 470
## Reductions:

State 1371:
## Known stack suffix:
## K_DEFINED opt_nl LPAREN2 expr RPAREN
## LR(1) items:
primary -> K_DEFINED opt_nl LPAREN2 expr RPAREN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_DEFINED opt_nl LPAREN2 expr RPAREN

State 1372:
## Known stack suffix:
## K_DEFINED opt_nl arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> K_DEFINED opt_nl arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COMMA COLON ASSOC
--   reduce production arg -> K_DEFINED opt_nl arg

State 1373:
## Known stack suffix:
## K_NEXT call_args
## LR(1) items:
command_call -> K_NEXT call_args . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_call -> K_NEXT call_args

State 1374:
## Known stack suffix:
## K_NOT expr
## LR(1) items:
expr -> expr . K_AND expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
expr -> expr . K_OR expr [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
expr -> K_NOT expr . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> K_NOT expr

State 1375:
## Known stack suffix:
## K_lBEGIN stmt_e2 LCURLY compstmt
## LR(1) items:
stmt -> K_lBEGIN stmt_e2 LCURLY compstmt . RCURLY [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On RCURLY shift to state 1376
## Reductions:

State 1376:
## Known stack suffix:
## K_lBEGIN stmt_e2 LCURLY compstmt RCURLY
## LR(1) items:
stmt -> K_lBEGIN stmt_e2 LCURLY compstmt RCURLY . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> K_lBEGIN stmt_e2 LCURLY compstmt RCURLY

State 1377:
## Known stack suffix:
## K_lEND LCURLY compstmt
## LR(1) items:
stmt -> K_lEND LCURLY compstmt . RCURLY [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On RCURLY shift to state 1378
## Reductions:

State 1378:
## Known stack suffix:
## K_lEND LCURLY compstmt RCURLY
## LR(1) items:
stmt -> K_lEND LCURLY compstmt RCURLY . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> K_lEND LCURLY compstmt RCURLY

State 1379:
## Known stack suffix:
## LPAREN mlhs_entry
## LR(1) items:
mlhs -> LPAREN mlhs_entry . RPAREN [ EQL ]
mlhs_entry -> LPAREN mlhs_entry . RPAREN [ RPAREN ]
mlhs_item -> LPAREN mlhs_entry . RPAREN [ COMMA ]
## Transitions:
-- On RPAREN shift to state 1380
## Reductions:

State 1380:
## Known stack suffix:
## LPAREN mlhs_entry RPAREN
## LR(1) items:
mlhs -> LPAREN mlhs_entry RPAREN . [ EQL ]
mlhs_entry -> LPAREN mlhs_entry RPAREN . [ RPAREN ]
mlhs_item -> LPAREN mlhs_entry RPAREN . [ COMMA ]
## Transitions:
## Reductions:
-- On EQL
--   reduce production mlhs -> LPAREN mlhs_entry RPAREN
-- On RPAREN
--   reduce production mlhs_entry -> LPAREN mlhs_entry RPAREN
-- On COMMA
--   reduce production mlhs_item -> LPAREN mlhs_entry RPAREN

State 1381:
## Known stack suffix:
## K_FOR block_var
## LR(1) items:
primary -> K_FOR block_var . K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_IN shift to state 1382
## Reductions:

State 1382:
## Known stack suffix:
## K_FOR block_var K_IN
## LR(1) items:
primary -> K_FOR block_var K_IN . primary_e2 expr_value do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e2 shift to state 1383
## Default reduction:
-- After reading the next token, reduce production primary_e2 ->

State 1383:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 . expr_value do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On expr_value shift to state 1384
-- On expr shift to state 465
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 1384:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value . do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_DO_COND shift to state 645
-- On COMMENT shift to state 646
-- On COLON shift to state 647
-- On term shift to state 648
-- On do_ shift to state 1385
## Reductions:

State 1385:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value do_
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value do_ . primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e3 shift to state 1386
## Default reduction:
-- After reading the next token, reduce production primary_e3 ->

State 1386:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 . compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1387
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 1387:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1388
## Reductions:

State 1388:
## Known stack suffix:
## K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END
## LR(1) items:
primary -> K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_FOR block_var K_IN primary_e2 expr_value do_ primary_e3 compstmt K_END

State 1389:
## Known stack suffix:
## K_RETURN call_args
## LR(1) items:
command_call -> K_RETURN call_args . [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_call -> K_RETURN call_args

State 1390:
## Known stack suffix:
## K_IF expr_value
## LR(1) items:
primary -> K_IF expr_value . then_ compstmt if_tail K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_THEN shift to state 662
-- On COMMENT shift to state 646
-- On COLON shift to state 663
-- On then_ shift to state 1391
-- On term shift to state 671
## Reductions:

State 1391:
## Known stack suffix:
## K_IF expr_value then_
## LR(1) items:
primary -> K_IF expr_value then_ . compstmt if_tail K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1392
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END K_ELSIF K_ELSE COMMENT
--   reduce production none ->

State 1392:
## Known stack suffix:
## K_IF expr_value then_ compstmt
## LR(1) items:
primary -> K_IF expr_value then_ compstmt . if_tail K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_ELSIF shift to state 762
-- On K_ELSE shift to state 666
-- On opt_else shift to state 766
-- On none shift to state 670
-- On if_tail shift to state 1393
## Reductions:
-- On K_END
--   reduce production none ->

State 1393:
## Known stack suffix:
## K_IF expr_value then_ compstmt if_tail
## LR(1) items:
primary -> K_IF expr_value then_ compstmt if_tail . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1394
## Reductions:

State 1394:
## Known stack suffix:
## K_IF expr_value then_ compstmt if_tail K_END
## LR(1) items:
primary -> K_IF expr_value then_ compstmt if_tail K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_IF expr_value then_ compstmt if_tail K_END

State 1395:
## Known stack suffix:
## K_MODULE cpath
## LR(1) items:
primary -> K_MODULE cpath . primary_e7 bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e7 shift to state 1396
## Default reduction:
-- After reading the next token, reduce production primary_e7 ->

State 1396:
## Known stack suffix:
## K_MODULE cpath primary_e7
## LR(1) items:
primary -> K_MODULE cpath primary_e7 . bodystmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 722
-- On command_call shift to state 468
-- On command shift to state 433
-- On bodystmt shift to state 1397
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_RESCUE K_ENSURE K_END K_ELSE COMMENT
--   reduce production none ->

State 1397:
## Known stack suffix:
## K_MODULE cpath primary_e7 bodystmt
## LR(1) items:
primary -> K_MODULE cpath primary_e7 bodystmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1398
## Reductions:

State 1398:
## Known stack suffix:
## K_MODULE cpath primary_e7 bodystmt K_END
## LR(1) items:
primary -> K_MODULE cpath primary_e7 bodystmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_MODULE cpath primary_e7 bodystmt K_END

State 1399:
## Known stack suffix:
## LPAREN2 none
## LR(1) items:
paren_args -> LPAREN2 none . RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RPAREN shift to state 1400
## Reductions:

State 1400:
## Known stack suffix:
## LPAREN2 none RPAREN
## LR(1) items:
paren_args -> LPAREN2 none RPAREN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_args -> LPAREN2 none RPAREN

State 1401:
## Known stack suffix:
## LPAREN2 call_args
## LR(1) items:
paren_args -> LPAREN2 call_args . opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On NL shift to state 188
-- On COMMENT shift to state 189
-- On opt_nl shift to state 1402
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 1402:
## Known stack suffix:
## LPAREN2 call_args opt_nl
## LR(1) items:
paren_args -> LPAREN2 call_args opt_nl . RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RPAREN shift to state 1403
## Reductions:

State 1403:
## Known stack suffix:
## LPAREN2 call_args opt_nl RPAREN
## LR(1) items:
paren_args -> LPAREN2 call_args opt_nl RPAREN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_args -> LPAREN2 call_args opt_nl RPAREN

State 1404:
## Known stack suffix:
## LPAREN2 block_call
## LR(1) items:
block_call -> block_call . DOT operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
block_call -> block_call . COLON2 operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
paren_args -> LPAREN2 block_call . opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On NL shift to state 188
-- On DOT shift to state 684
-- On COMMENT shift to state 189
-- On COLON2 shift to state 686
-- On opt_nl shift to state 1405
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 1405:
## Known stack suffix:
## LPAREN2 block_call opt_nl
## LR(1) items:
paren_args -> LPAREN2 block_call opt_nl . RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RPAREN shift to state 1406
## Reductions:

State 1406:
## Known stack suffix:
## LPAREN2 block_call opt_nl RPAREN
## LR(1) items:
paren_args -> LPAREN2 block_call opt_nl RPAREN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_args -> LPAREN2 block_call opt_nl RPAREN

State 1407:
## Known stack suffix:
## LPAREN2 args
## LR(1) items:
args -> args . COMMA arg_value [ RPAREN NL COMMENT COMMA ]
call_args -> args . opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args . COMMA STAR arg_value opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args . COMMA assocs opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args . COMMA assocs COMMA STAR arg opt_block_arg [ RPAREN NL COMMENT ]
paren_args -> LPAREN2 args . COMMA block_call opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On COMMA shift to state 1408
-- On opt_block_arg shift to state 633
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN NL COMMENT
--   reduce production none_block_pass ->

State 1408:
## Known stack suffix:
## LPAREN2 args COMMA
## LR(1) items:
args -> args COMMA . arg_value [ RPAREN NL COMMENT COMMA ]
call_args -> args COMMA . STAR arg_value opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args COMMA . assocs opt_block_arg [ RPAREN NL COMMENT ]
call_args -> args COMMA . assocs COMMA STAR arg opt_block_arg [ RPAREN NL COMMENT ]
opt_block_arg -> COMMA . block_arg [ RPAREN NL COMMENT ]
paren_args -> LPAREN2 args COMMA . block_call opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 623
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On AMPER shift to state 606
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 237
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On command shift to state 692
-- On block_call shift to state 1409
-- On block_arg shift to state 617
-- On awords shift to state 374
-- On assocs shift to state 626
-- On assoc shift to state 493
-- On arg_value shift to state 632
-- On arg shift to state 491
## Reductions:

State 1409:
## Known stack suffix:
## LPAREN2 args COMMA block_call
## LR(1) items:
block_call -> block_call . DOT operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
block_call -> block_call . COLON2 operation2 opt_paren_args [ RPAREN NL DOT COMMENT COLON2 ]
paren_args -> LPAREN2 args COMMA block_call . opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On NL shift to state 188
-- On DOT shift to state 684
-- On COMMENT shift to state 189
-- On COLON2 shift to state 686
-- On opt_nl shift to state 1410
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 1410:
## Known stack suffix:
## LPAREN2 args COMMA block_call opt_nl
## LR(1) items:
paren_args -> LPAREN2 args COMMA block_call opt_nl . RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RPAREN shift to state 1411
## Reductions:

State 1411:
## Known stack suffix:
## LPAREN2 args COMMA block_call opt_nl RPAREN
## LR(1) items:
paren_args -> LPAREN2 args COMMA block_call opt_nl RPAREN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LCURLY LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_DO K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paren_args -> LPAREN2 args COMMA block_call opt_nl RPAREN

State 1412:
## Known stack suffix:
## K_SUPER command_args
## LR(1) items:
command -> K_SUPER command_args . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> K_SUPER command_args

State 1413:
## Known stack suffix:
## K_UNLESS expr_value
## LR(1) items:
primary -> K_UNLESS expr_value . then_ compstmt opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_THEN shift to state 662
-- On COMMENT shift to state 646
-- On COLON shift to state 663
-- On then_ shift to state 1414
-- On term shift to state 671
## Reductions:

State 1414:
## Known stack suffix:
## K_UNLESS expr_value then_
## LR(1) items:
primary -> K_UNLESS expr_value then_ . compstmt opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1415
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END K_ELSE COMMENT
--   reduce production none ->

State 1415:
## Known stack suffix:
## K_UNLESS expr_value then_ compstmt
## LR(1) items:
primary -> K_UNLESS expr_value then_ compstmt . opt_else K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_ELSE shift to state 666
-- On opt_else shift to state 1416
-- On none shift to state 670
## Reductions:
-- On K_END
--   reduce production none ->

State 1416:
## Known stack suffix:
## K_UNLESS expr_value then_ compstmt opt_else
## LR(1) items:
primary -> K_UNLESS expr_value then_ compstmt opt_else . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1417
## Reductions:

State 1417:
## Known stack suffix:
## K_UNLESS expr_value then_ compstmt opt_else K_END
## LR(1) items:
primary -> K_UNLESS expr_value then_ compstmt opt_else K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_UNLESS expr_value then_ compstmt opt_else K_END

State 1418:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value . do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_DO_COND shift to state 645
-- On COMMENT shift to state 646
-- On COLON shift to state 647
-- On term shift to state 648
-- On do_ shift to state 1419
## Reductions:

State 1419:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value do_
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value do_ . primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e3 shift to state 1420
## Default reduction:
-- After reading the next token, reduce production primary_e3 ->

State 1420:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value do_ primary_e3
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value do_ primary_e3 . compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1421
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 1421:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1422
## Reductions:

State 1422:
## Known stack suffix:
## K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt K_END
## LR(1) items:
primary -> K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_UNTIL primary_e2 expr_value do_ primary_e3 compstmt K_END

State 1423:
## Known stack suffix:
## STAR arg_value
## LR(1) items:
call_args2 -> STAR arg_value . opt_block_arg [ RPAREN ]
## Transitions:
-- On COMMA shift to state 616
-- On opt_block_arg shift to state 1424
-- On none_block_pass shift to state 619
## Reductions:
-- On RPAREN
--   reduce production none_block_pass ->

State 1424:
## Known stack suffix:
## STAR arg_value opt_block_arg
## LR(1) items:
call_args2 -> STAR arg_value opt_block_arg . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args2 -> STAR arg_value opt_block_arg

State 1425:
## Known stack suffix:
## LPAREN_ARG open_args_e1
## LR(1) items:
open_args -> LPAREN_ARG open_args_e1 . RPAREN [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On RPAREN shift to state 1426
## Reductions:

State 1426:
## Known stack suffix:
## LPAREN_ARG open_args_e1 RPAREN
## LR(1) items:
open_args -> LPAREN_ARG open_args_e1 RPAREN . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production open_args -> LPAREN_ARG open_args_e1 RPAREN

State 1427:
## Known stack suffix:
## LPAREN_ARG expr
## LR(1) items:
expr -> expr . K_AND expr [ RPAREN NL K_OR K_AND COMMENT ]
expr -> expr . K_OR expr [ RPAREN NL K_OR K_AND COMMENT ]
primary -> LPAREN_ARG expr . primary_e1 opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_OR shift to state 466
-- On K_AND shift to state 470
-- On primary_e1 shift to state 1428
## Reductions:
-- On RPAREN NL COMMENT
--   reduce production primary_e1 ->

State 1428:
## Known stack suffix:
## LPAREN_ARG expr primary_e1
## LR(1) items:
primary -> LPAREN_ARG expr primary_e1 . opt_nl RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On NL shift to state 188
-- On COMMENT shift to state 189
-- On opt_nl shift to state 1429
## Reductions:
-- On RPAREN
--   reduce production opt_nl ->

State 1429:
## Known stack suffix:
## LPAREN_ARG expr primary_e1 opt_nl
## LR(1) items:
primary -> LPAREN_ARG expr primary_e1 opt_nl . RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RPAREN shift to state 1430
## Reductions:

State 1430:
## Known stack suffix:
## LPAREN_ARG expr primary_e1 opt_nl RPAREN
## LR(1) items:
primary -> LPAREN_ARG expr primary_e1 opt_nl RPAREN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> LPAREN_ARG expr primary_e1 opt_nl RPAREN

State 1431:
## Known stack suffix:
## LPAREN_ARG call_args2
## LR(1) items:
open_args -> LPAREN_ARG call_args2 . open_args_e1 RPAREN [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On open_args_e1 shift to state 1432
## Default reduction:
-- After reading the next token, reduce production open_args_e1 ->

State 1432:
## Known stack suffix:
## LPAREN_ARG call_args2 open_args_e1
## LR(1) items:
open_args -> LPAREN_ARG call_args2 open_args_e1 . RPAREN [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On RPAREN shift to state 1433
## Reductions:

State 1433:
## Known stack suffix:
## LPAREN_ARG call_args2 open_args_e1 RPAREN
## LR(1) items:
open_args -> LPAREN_ARG call_args2 open_args_e1 RPAREN . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production open_args -> LPAREN_ARG call_args2 open_args_e1 RPAREN

State 1434:
## Known stack suffix:
## command_args_e1 open_args
## LR(1) items:
command_args -> command_args_e1 open_args . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_args -> command_args_e1 open_args

State 1435:
## Known stack suffix:
## call_args
## LR(1) items:
open_args -> call_args . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production open_args -> call_args

State 1436:
## Known stack suffix:
## K_YIELD command_args
## LR(1) items:
command -> K_YIELD command_args . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> K_YIELD command_args

State 1437:
## Known stack suffix:
## K_WHILE primary_e2 expr_value
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value . do_ primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On SEMI shift to state 643
-- On NL shift to state 644
-- On K_DO_COND shift to state 645
-- On COMMENT shift to state 646
-- On COLON shift to state 647
-- On term shift to state 648
-- On do_ shift to state 1438
## Reductions:

State 1438:
## Known stack suffix:
## K_WHILE primary_e2 expr_value do_
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value do_ . primary_e3 compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On primary_e3 shift to state 1439
## Default reduction:
-- After reading the next token, reduce production primary_e3 ->

State 1439:
## Known stack suffix:
## K_WHILE primary_e2 expr_value do_ primary_e3
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value do_ primary_e3 . compstmt K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On error shift to state 2
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmts shift to state 459
-- On stmt shift to state 536
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On none shift to state 539
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On compstmt shift to state 1440
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:
-- On SEMI NL K_END COMMENT
--   reduce production none ->

State 1440:
## Known stack suffix:
## K_WHILE primary_e2 expr_value do_ primary_e3 compstmt
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value do_ primary_e3 compstmt . K_END [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On K_END shift to state 1441
## Reductions:

State 1441:
## Known stack suffix:
## K_WHILE primary_e2 expr_value do_ primary_e3 compstmt K_END
## LR(1) items:
primary -> K_WHILE primary_e2 expr_value do_ primary_e3 compstmt K_END . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_WHILE primary_e2 expr_value do_ primary_e3 compstmt K_END

State 1442:
## Known stack suffix:
## STAR arg_value
## LR(1) items:
call_args -> STAR arg_value . opt_block_arg [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
-- On COMMA shift to state 616
-- On opt_block_arg shift to state 1443
-- On none_block_pass shift to state 619
## Reductions:
-- On SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON
--   reduce production none_block_pass ->

State 1443:
## Known stack suffix:
## STAR arg_value opt_block_arg
## LR(1) items:
call_args -> STAR arg_value opt_block_arg . [ SEMI RPAREN RCURLY RBRACK NL LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND COMMENT COLON # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_args -> STAR arg_value opt_block_arg

State 1444:
## Known stack suffix:
## K_YIELD LPAREN2 RPAREN
## LR(1) items:
primary -> K_YIELD LPAREN2 RPAREN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_YIELD LPAREN2 RPAREN

State 1445:
## Known stack suffix:
## K_YIELD LPAREN2 call_args
## LR(1) items:
primary -> K_YIELD LPAREN2 call_args . RPAREN [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RPAREN shift to state 1446
## Reductions:

State 1446:
## Known stack suffix:
## K_YIELD LPAREN2 call_args RPAREN
## LR(1) items:
primary -> K_YIELD LPAREN2 call_args RPAREN . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> K_YIELD LPAREN2 call_args RPAREN

State 1447:
## Known stack suffix:
## LBRACE assoc_list
## LR(1) items:
primary -> LBRACE assoc_list . RCURLY [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RCURLY shift to state 1448
## Reductions:

State 1448:
## Known stack suffix:
## LBRACE assoc_list RCURLY
## LR(1) items:
primary -> LBRACE assoc_list RCURLY . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> LBRACE assoc_list RCURLY

State 1449:
## Known stack suffix:
## STAR arg
## LR(1) items:
aref_args -> STAR arg . opt_nl [ RBRACK ]
arg -> arg . DOT2 arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . DOT3 arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . PLUS arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . MINUS arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . STAR2 arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . DIVIDE arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . PERCENT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . POW arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . PIPE arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . CARET arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . AMPER2 arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . CMP arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . GT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . GEQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . LT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . LEQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . EQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . EQQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . NEQ arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . MATCH arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . NMATCH arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . LSHFT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . RSHFT arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . ANDOP arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . OROP arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
arg -> arg . EH arg COLON arg [ STAR2 RSHFT RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT CMP CARET ANDOP AMPER2 ]
## Transitions:
-- On STAR2 shift to state 376
-- On RSHFT shift to state 380
-- On POW shift to state 378
-- On PLUS shift to state 382
-- On PIPE shift to state 390
-- On PERCENT shift to state 384
-- On OROP shift to state 396
-- On NMATCH shift to state 398
-- On NL shift to state 188
-- On NEQ shift to state 410
-- On MINUS shift to state 388
-- On MATCH shift to state 412
-- On LT shift to state 400
-- On LSHFT shift to state 392
-- On LEQ shift to state 404
-- On GT shift to state 406
-- On GEQ shift to state 408
-- On EQQ shift to state 414
-- On EQ shift to state 416
-- On EH shift to state 424
-- On DOT3 shift to state 426
-- On DOT2 shift to state 428
-- On DIVIDE shift to state 386
-- On COMMENT shift to state 189
-- On CMP shift to state 418
-- On CARET shift to state 402
-- On ANDOP shift to state 420
-- On AMPER2 shift to state 394
-- On opt_nl shift to state 1450
## Reductions:
-- On RBRACK
--   reduce production opt_nl ->

State 1450:
## Known stack suffix:
## STAR arg opt_nl
## LR(1) items:
aref_args -> STAR arg opt_nl . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aref_args -> STAR arg opt_nl

State 1451:
## Known stack suffix:
## LBRACK aref_args
## LR(1) items:
primary -> LBRACK aref_args . RBRACK [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On RBRACK shift to state 1452
## Reductions:

State 1452:
## Known stack suffix:
## LBRACK aref_args RBRACK
## LR(1) items:
primary -> LBRACK aref_args RBRACK . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary -> LBRACK aref_args RBRACK

State 1453:
## Known stack suffix:
## STAR mlhs_node
## LR(1) items:
mlhs_basic -> STAR mlhs_node . [ RPAREN PIPE K_IN EQL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlhs_basic -> STAR mlhs_node

State 1454:
## Known stack suffix:
## TILDE arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> TILDE arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> TILDE arg

State 1455:
## Known stack suffix:
## UMINUS arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> UMINUS arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On POW shift to state 378
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> UMINUS arg

State 1456:
## Known stack suffix:
## UMINUS_NUM INTEGER POW arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> UMINUS_NUM INTEGER POW arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On POW shift to state 378
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> UMINUS_NUM INTEGER POW arg

State 1457:
## Known stack suffix:
## UMINUS_NUM FLOAT
## LR(1) items:
arg -> UMINUS_NUM FLOAT . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
numeric -> UMINUS_NUM FLOAT . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On POW shift to state 1458
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG LB K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DOT DIVIDE COMMENT COMMA COLON2 COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production numeric -> UMINUS_NUM FLOAT

State 1458:
## Known stack suffix:
## UMINUS_NUM FLOAT POW
## LR(1) items:
arg -> UMINUS_NUM FLOAT POW . arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 130
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 140
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 162
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 156
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 160
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 201
-- On K_BEGIN shift to state 202
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 220
-- On BANG shift to state 222
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 225
-- On var_ref shift to state 226
-- On var_lhs shift to state 227
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On regexp shift to state 234
-- On primary_value shift to state 235
-- On primary shift to state 241
-- On operation shift to state 242
-- On numeric shift to state 367
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 371
-- On dsym shift to state 373
-- On awords shift to state 374
-- On arg shift to state 1459
## Reductions:

State 1459:
## Known stack suffix:
## UMINUS_NUM FLOAT POW arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> UMINUS_NUM FLOAT POW arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
-- On POW shift to state 378
## Reductions:
-- On STAR2 SEMI RSHFT RPAREN RCURLY RBRACK PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2
--   reduce production arg -> UMINUS_NUM FLOAT POW arg

State 1460:
## Known stack suffix:
## UPLUS arg
## LR(1) items:
arg -> arg . DOT2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DOT3 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PLUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MINUS arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . STAR2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . DIVIDE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PERCENT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . POW arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> UPLUS arg . [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . PIPE arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CARET arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . AMPER2 arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . CMP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . GEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EQQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NEQ arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . MATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . NMATCH arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . LSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . RSHFT arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . ANDOP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . OROP arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
arg -> arg . EH arg COLON arg [ STAR2 SEMI RSHFT RPAREN RCURLY RBRACK POW PLUS PIPE PERCENT OROP NMATCH NL NEQ MINUS MATCH LT LSHFT LEQ LBRACE_ARG K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_THEN K_RESCUE_MOD K_RESCUE K_OR K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE K_DO_COND K_DO_BLOCK K_AND GT GEQ EQQ EQ EH DOT3 DOT2 DIVIDE COMMENT COMMA COLON CMP CARET ASSOC ANDOP AMPER2 # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> UPLUS arg

State 1461:
## Known stack suffix:
## STRING_DBEG string_content_e2 compstmt
## LR(1) items:
string_content -> STRING_DBEG string_content_e2 compstmt . RCURLY [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
-- On RCURLY shift to state 1462
## Reductions:

State 1462:
## Known stack suffix:
## STRING_DBEG string_content_e2 compstmt RCURLY
## LR(1) items:
string_content -> STRING_DBEG string_content_e2 compstmt RCURLY . [ STRING_END STRING_DVAR STRING_DBEG STRING_CONTENT SPACE REGEXP_END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_content -> STRING_DBEG string_content_e2 compstmt RCURLY

State 1463:
## Known stack suffix:
## error stmt
## LR(1) items:
stmt -> stmt . K_IF_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_UNLESS_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_WHILE_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_UNTIL_MOD expr_value [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmt -> stmt . K_RESCUE_MOD stmt [ SEMI RPAREN RCURLY NL K_WHILE_MOD K_WHEN K_UNTIL_MOD K_UNLESS_MOD K_RESCUE_MOD K_RESCUE K_IF_MOD K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
stmts -> error stmt . [ SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT # ]
## Transitions:
-- On K_WHILE_MOD shift to state 463
-- On K_UNTIL_MOD shift to state 472
-- On K_UNLESS_MOD shift to state 474
-- On K_RESCUE_MOD shift to state 476
-- On K_IF_MOD shift to state 537
## Reductions:
-- On SEMI RPAREN RCURLY NL K_WHEN K_RESCUE K_ENSURE K_END K_ELSIF K_ELSE COMMENT
--   reduce production stmts -> error stmt

State 1464:
## Known stack suffix:
## stmts
## LR(1) items:
compstmt -> stmts . opt_terms [ # ]
stmts -> stmts . terms stmt [ SEMI NL COMMENT # ]
## Transitions:
-- On SEMI shift to state 198
-- On NL shift to state 199
-- On COMMENT shift to state 460
-- On terms shift to state 1465
-- On term shift to state 879
-- On opt_terms shift to state 1466
## Reductions:

State 1465:
## Known stack suffix:
## stmts terms
## LR(1) items:
opt_terms -> terms . [ # ]
stmts -> stmts terms . stmt [ SEMI NL COMMENT # ]
## Transitions:
-- On XSTRING_BEG shift to state 3
-- On WORDS_BEG shift to state 14
-- On UPLUS shift to state 25
-- On UMINUS_NUM shift to state 26
-- On UMINUS shift to state 29
-- On TILDE shift to state 30
-- On SYMBEG shift to state 31
-- On STRING_BEG shift to state 113
-- On STAR shift to state 131
-- On REGEXP_BEG shift to state 118
-- On QWORDS_BEG shift to state 121
-- On LPAREN_ARG shift to state 129
-- On LPAREN shift to state 171
-- On LBRACK shift to state 135
-- On LBRACE shift to state 137
-- On K_lEND shift to state 169
-- On K_lBEGIN shift to state 172
-- On K__LINE__ shift to state 138
-- On K__FILE__ shift to state 139
-- On K_YIELD shift to state 145
-- On K_WHILE shift to state 143
-- On K_UNTIL shift to state 149
-- On K_UNLESS shift to state 151
-- On K_UNDEF shift to state 175
-- On K_TRUE shift to state 152
-- On K_SUPER shift to state 153
-- On K_SELF shift to state 155
-- On K_RETURN shift to state 165
-- On K_RETRY shift to state 157
-- On K_REDO shift to state 158
-- On K_NOT shift to state 184
-- On K_NIL shift to state 159
-- On K_NEXT shift to state 185
-- On K_MODULE shift to state 161
-- On K_IF shift to state 164
-- On K_FOR shift to state 166
-- On K_FALSE shift to state 186
-- On K_DEFINED shift to state 187
-- On K_DEF shift to state 192
-- On K_CLASS shift to state 195
-- On K_CASE shift to state 197
-- On K_BREAK shift to state 200
-- On K_BEGIN shift to state 202
-- On K_ALIAS shift to state 203
-- On IVAR shift to state 209
-- On INTEGER shift to state 210
-- On IDENTIFIER shift to state 211
-- On GVAR shift to state 212
-- On FLOAT shift to state 213
-- On FID shift to state 214
-- On CVAR shift to state 215
-- On CONSTANT shift to state 216
-- On COLON3 shift to state 217
-- On BANG shift to state 366
-- On xstring shift to state 223
-- On words shift to state 224
-- On variable shift to state 438
-- On var_ref shift to state 226
-- On var_lhs shift to state 439
-- On symbol shift to state 229
-- On strings shift to state 230
-- On string1 shift to state 231
-- On string shift to state 232
-- On stmt shift to state 462
-- On regexp shift to state 234
-- On primary_value shift to state 478
-- On primary shift to state 241
-- On operation shift to state 254
-- On numeric shift to state 367
-- On mlhs_node shift to state 540
-- On mlhs_item shift to state 541
-- On mlhs_head shift to state 543
-- On mlhs_basic shift to state 593
-- On mlhs shift to state 570
-- On method_call shift to state 368
-- On literal shift to state 370
-- On lhs shift to state 582
-- On expr shift to state 588
-- On dsym shift to state 373
-- On command_call shift to state 468
-- On command shift to state 433
-- On block_command shift to state 442
-- On block_call shift to state 443
-- On awords shift to state 374
-- On arg shift to state 469
## Reductions:

State 1466:
## Known stack suffix:
## stmts opt_terms
## LR(1) items:
compstmt -> stmts opt_terms . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production compstmt -> stmts opt_terms

State 1467:
## Known stack suffix:
## program_e1 compstmt
## LR(1) items:
program -> program_e1 compstmt . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production program -> program_e1 compstmt

State 1468:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept program

