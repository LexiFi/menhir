State 0:
## Known stack suffix:
##
## LR(1) items:
command' -> . command [ # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On ASSUMENOT shift to state 128
-- On ASSUME shift to state 129
-- On term shift to state 130
-- On ident_free_term shift to state 44
-- On command shift to state 131
-- On Let shift to state 132
-- On AssumeWord shift to state 133
## Reductions:

State 1:
## Known stack suffix:
## STRINGV
## LR(1) items:
ident_free_term -> STRINGV . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_free_term -> STRINGV

State 2:
## Known stack suffix:
## STAR
## LR(1) items:
ident_free_term -> STAR . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_free_term -> STAR

State 3:
## Known stack suffix:
## REC
## LR(1) items:
ident_free_term -> REC . ID ParamSeq MaybeTy DARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On ID shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## REC ID
## LR(1) items:
ident_free_term -> REC ID . ParamSeq MaybeTy DARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On LPAREN shift to state 5
-- On ID shift to state 16
-- On ParamSeq shift to state 124
-- On Param shift to state 82
## Reductions:
-- On DARROW reduce production ParamSeq ->
-- On COLON reduce production ParamSeq ->

State 5:
## Known stack suffix:
## LPAREN
## LR(1) items:
Param -> LPAREN . ID COLON term RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
Param -> LPAREN . ID COLON term DOT term RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
## Transitions:
-- On ID shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## LPAREN ID
## LR(1) items:
Param -> LPAREN ID . COLON term RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
Param -> LPAREN ID . COLON term DOT term RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
## Transitions:
-- On COLON shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## LPAREN ID COLON
## LR(1) items:
Param -> LPAREN ID COLON . term RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
Param -> LPAREN ID COLON . term DOT term RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 119
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 8:
## Known stack suffix:
## QUESTION
## LR(1) items:
ident_free_term -> QUESTION . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_free_term -> QUESTION

State 9:
## Known stack suffix:
## LT
## LR(1) items:
ident_free_term -> LT . LabelColonTyList GT [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> LT . ID EQ term GT [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On ID shift to state 10
-- On NonEmptyLabelColonTyList shift to state 79
-- On LabelColonTyList shift to state 80
## Reductions:
-- On GT reduce production LabelColonTyList ->

State 10:
## Known stack suffix:
## LT ID
## LR(1) items:
NonEmptyLabelColonTyList -> ID . COLON Type [ GT ]
NonEmptyLabelColonTyList -> ID . COLON Type COMMA NonEmptyLabelColonTyList [ GT ]
ident_free_term -> LT ID . EQ term GT [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On EQ shift to state 11
-- On COLON shift to state 76
## Reductions:

State 11:
## Known stack suffix:
## LT ID EQ
## LR(1) items:
ident_free_term -> LT ID EQ . term GT [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 117
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 12:
## Known stack suffix:
## LPAREN
## LR(1) items:
ident_free_term -> LPAREN . term RPAREN [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 115
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 13:
## Known stack suffix:
## LET
## LR(1) items:
Let -> LET . ID ParamSeq MaybeTy EQ term [ SEMISEMI IN # ]
Let -> LET . REC ID ParamSeq MaybeTy EQ term [ SEMISEMI IN # ]
## Transitions:
-- On REC shift to state 14
-- On ID shift to state 110
## Reductions:

State 14:
## Known stack suffix:
## LET REC
## LR(1) items:
Let -> LET REC . ID ParamSeq MaybeTy EQ term [ SEMISEMI IN # ]
## Transitions:
-- On ID shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## LET REC ID
## LR(1) items:
Let -> LET REC ID . ParamSeq MaybeTy EQ term [ SEMISEMI IN # ]
## Transitions:
-- On LPAREN shift to state 5
-- On ID shift to state 16
-- On ParamSeq shift to state 17
-- On Param shift to state 82
## Reductions:
-- On EQ reduce production ParamSeq ->
-- On COLON reduce production ParamSeq ->

State 16:
## Known stack suffix:
## ID
## LR(1) items:
Param -> ID . [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production Param -> ID

State 17:
## Known stack suffix:
## LET REC ID ParamSeq
## LR(1) items:
Let -> LET REC ID ParamSeq . MaybeTy EQ term [ SEMISEMI IN # ]
## Transitions:
-- On COLON shift to state 18
-- On MaybeTy shift to state 107
## Reductions:
-- On EQ reduce production MaybeTy ->

State 18:
## Known stack suffix:
## COLON
## LR(1) items:
MaybeTy -> COLON . term [ EQ DARROW ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 106
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 19:
## Known stack suffix:
## LCURLY
## LR(1) items:
ident_free_term -> LCURLY . LabelColonTyList RCURLY [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> LCURLY . ID COLON ident_free_term VBAR term RCURLY [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On ID shift to state 20
-- On NonEmptyLabelColonTyList shift to state 79
-- On LabelColonTyList shift to state 104
## Reductions:
-- On RCURLY reduce production LabelColonTyList ->

State 20:
## Known stack suffix:
## LCURLY ID
## LR(1) items:
NonEmptyLabelColonTyList -> ID . COLON Type [ RCURLY ]
NonEmptyLabelColonTyList -> ID . COLON Type COMMA NonEmptyLabelColonTyList [ RCURLY ]
term -> LCURLY ID . COLON ident_free_term VBAR term RCURLY [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On COLON shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## LCURLY ID COLON
## LR(1) items:
NonEmptyLabelColonTyList -> ID COLON . Type [ RCURLY ]
NonEmptyLabelColonTyList -> ID COLON . Type COMMA NonEmptyLabelColonTyList [ RCURLY ]
term -> LCURLY ID COLON . ident_free_term VBAR term RCURLY [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 51
-- On ident_free_term shift to state 100
-- On Type shift to state 73
-- On Let shift to state 45
## Reductions:

State 22:
## Known stack suffix:
## LAMBDA
## LR(1) items:
ident_free_term -> LAMBDA . ID COLON ident_free_term DOT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On ID shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## LAMBDA ID
## LR(1) items:
ident_free_term -> LAMBDA ID . COLON ident_free_term DOT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On COLON shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LAMBDA ID COLON
## LR(1) items:
ident_free_term -> LAMBDA ID COLON . ident_free_term DOT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 84
-- On ident_free_term shift to state 97
-- On Let shift to state 45
## Reductions:

State 25:
## Known stack suffix:
## INTV
## LR(1) items:
ident_free_term -> INTV . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_free_term -> INTV

State 26:
## Known stack suffix:
## IF
## LR(1) items:
ident_free_term -> IF . LSQUARE Type RSQUARE term THEN term ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> IF . term THEN term ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LSQUARE shift to state 27
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 92
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 27:
## Known stack suffix:
## IF LSQUARE
## LR(1) items:
ident_free_term -> IF LSQUARE . Type RSQUARE term THEN term ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 51
-- On ident_free_term shift to state 44
-- On Type shift to state 85
-- On Let shift to state 45
## Reductions:

State 28:
## Known stack suffix:
## ID
## LR(1) items:
ident_free_term -> ID . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ID . COLON ident_free_term DOT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ID . COLON ident_free_term ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On COLON shift to state 29
## Reductions:
-- On VBAR reduce production ident_free_term -> ID
-- On THEN reduce production ident_free_term -> ID
-- On SUBTYPE reduce production ident_free_term -> ID
-- On STRINGV reduce production ident_free_term -> ID
-- On STAR reduce production ident_free_term -> ID
-- On SEMISEMI reduce production ident_free_term -> ID
-- On SEMI reduce production ident_free_term -> ID
-- On RSQUARE reduce production ident_free_term -> ID
-- On RPAREN reduce production ident_free_term -> ID
-- On REC reduce production ident_free_term -> ID
-- On RCURLY reduce production ident_free_term -> ID
-- On QUESTION reduce production ident_free_term -> ID
-- On PLUS reduce production ident_free_term -> ID
-- On OR reduce production ident_free_term -> ID
-- On MINUS reduce production ident_free_term -> ID
-- On LT reduce production ident_free_term -> ID
-- On LPAREN reduce production ident_free_term -> ID
-- On LET reduce production ident_free_term -> ID
-- On LEQ reduce production ident_free_term -> ID
-- On LCURLY reduce production ident_free_term -> ID
-- On LAMBDA reduce production ident_free_term -> ID
-- On INTV reduce production ident_free_term -> ID
-- On IN reduce production ident_free_term -> ID
-- On IFF reduce production ident_free_term -> ID
-- On IF reduce production ident_free_term -> ID
-- On ID reduce production ident_free_term -> ID
-- On GT reduce production ident_free_term -> ID
-- On GEQ reduce production ident_free_term -> ID
-- On FN reduce production ident_free_term -> ID
-- On EQEQ reduce production ident_free_term -> ID
-- On EQ reduce production ident_free_term -> ID
-- On ELSE reduce production ident_free_term -> ID
-- On DOT reduce production ident_free_term -> ID
-- On DARROW reduce production ident_free_term -> ID
-- On COMMA reduce production ident_free_term -> ID
-- On COLONDASH reduce production ident_free_term -> ID
-- On AS reduce production ident_free_term -> ID
-- On ARROW reduce production ident_free_term -> ID
-- On AND reduce production ident_free_term -> ID

State 29:
## Known stack suffix:
## ID COLON
## LR(1) items:
term -> ID COLON . ident_free_term DOT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ID COLON . ident_free_term ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 84
-- On ident_free_term shift to state 68
-- On Let shift to state 45
## Reductions:

State 30:
## Known stack suffix:
## FN
## LR(1) items:
ident_free_term -> FN . ParamSeq MaybeTy DARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On LPAREN shift to state 5
-- On ID shift to state 16
-- On ParamSeq shift to state 31
-- On Param shift to state 82
## Reductions:
-- On DARROW reduce production ParamSeq ->
-- On COLON reduce production ParamSeq ->

State 31:
## Known stack suffix:
## FN ParamSeq
## LR(1) items:
ident_free_term -> FN ParamSeq . MaybeTy DARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On COLON shift to state 18
-- On MaybeTy shift to state 32
## Reductions:
-- On DARROW reduce production MaybeTy ->

State 32:
## Known stack suffix:
## FN ParamSeq MaybeTy
## LR(1) items:
ident_free_term -> FN ParamSeq MaybeTy . DARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On DARROW shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## FN ParamSeq MaybeTy DARROW
## LR(1) items:
ident_free_term -> FN ParamSeq MaybeTy DARROW . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 34
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 34:
## Known stack suffix:
## FN ParamSeq MaybeTy DARROW term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> FN ParamSeq MaybeTy DARROW term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On THEN reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On SUBTYPE reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On SEMISEMI reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On RSQUARE reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On RPAREN reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On RCURLY reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On IN reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On EQEQ reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On ELSE reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On DOT reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On DARROW reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On COMMA reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term
-- On COLONDASH reduce production ident_free_term -> FN ParamSeq MaybeTy DARROW term

State 35:
## Known stack suffix:
## term SEMI
## LR(1) items:
ident_free_term -> term SEMI . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 36
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 36:
## Known stack suffix:
## term SEMI term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term SEMI term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term SEMI term
-- On THEN reduce production ident_free_term -> term SEMI term
-- On SUBTYPE reduce production ident_free_term -> term SEMI term
-- On SEMISEMI reduce production ident_free_term -> term SEMI term
-- On SEMI reduce production ident_free_term -> term SEMI term
-- On RSQUARE reduce production ident_free_term -> term SEMI term
-- On RPAREN reduce production ident_free_term -> term SEMI term
-- On RCURLY reduce production ident_free_term -> term SEMI term
-- On IN reduce production ident_free_term -> term SEMI term
-- On EQEQ reduce production ident_free_term -> term SEMI term
-- On ELSE reduce production ident_free_term -> term SEMI term
-- On DOT reduce production ident_free_term -> term SEMI term
-- On DARROW reduce production ident_free_term -> term SEMI term
-- On COMMA reduce production ident_free_term -> term SEMI term
-- On COLONDASH reduce production ident_free_term -> term SEMI term

State 37:
## Known stack suffix:
## term PLUS
## LR(1) items:
ident_free_term -> term PLUS . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 38
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 38:
## Known stack suffix:
## term PLUS term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term PLUS term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On OR shift to state 39
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term PLUS term
-- On THEN reduce production ident_free_term -> term PLUS term
-- On SUBTYPE reduce production ident_free_term -> term PLUS term
-- On STRINGV reduce production ident_free_term -> term PLUS term
-- On STAR reduce production ident_free_term -> term PLUS term
-- On SEMISEMI reduce production ident_free_term -> term PLUS term
-- On SEMI reduce production ident_free_term -> term PLUS term
-- On RSQUARE reduce production ident_free_term -> term PLUS term
-- On RPAREN reduce production ident_free_term -> term PLUS term
-- On REC reduce production ident_free_term -> term PLUS term
-- On RCURLY reduce production ident_free_term -> term PLUS term
-- On QUESTION reduce production ident_free_term -> term PLUS term
-- On PLUS reduce production ident_free_term -> term PLUS term
-- On MINUS reduce production ident_free_term -> term PLUS term
-- On LT reduce production ident_free_term -> term PLUS term
-- On LPAREN reduce production ident_free_term -> term PLUS term
-- On LET reduce production ident_free_term -> term PLUS term
-- On LEQ reduce production ident_free_term -> term PLUS term
-- On LCURLY reduce production ident_free_term -> term PLUS term
-- On LAMBDA reduce production ident_free_term -> term PLUS term
-- On INTV reduce production ident_free_term -> term PLUS term
-- On IN reduce production ident_free_term -> term PLUS term
-- On IFF reduce production ident_free_term -> term PLUS term
-- On IF reduce production ident_free_term -> term PLUS term
-- On ID reduce production ident_free_term -> term PLUS term
-- On GT reduce production ident_free_term -> term PLUS term
-- On GEQ reduce production ident_free_term -> term PLUS term
-- On FN reduce production ident_free_term -> term PLUS term
-- On EQEQ reduce production ident_free_term -> term PLUS term
-- On EQ reduce production ident_free_term -> term PLUS term
-- On ELSE reduce production ident_free_term -> term PLUS term
-- On DOT reduce production ident_free_term -> term PLUS term
-- On DARROW reduce production ident_free_term -> term PLUS term
-- On COMMA reduce production ident_free_term -> term PLUS term
-- On COLONDASH reduce production ident_free_term -> term PLUS term
-- On AS reduce production ident_free_term -> term PLUS term
-- On ARROW reduce production ident_free_term -> term PLUS term
-- On AND reduce production ident_free_term -> term PLUS term

State 39:
## Known stack suffix:
## term OR
## LR(1) items:
ident_free_term -> term OR . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 40
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 40:
## Known stack suffix:
## term OR term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term OR term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term OR term
-- On THEN reduce production ident_free_term -> term OR term
-- On SUBTYPE reduce production ident_free_term -> term OR term
-- On SEMISEMI reduce production ident_free_term -> term OR term
-- On RSQUARE reduce production ident_free_term -> term OR term
-- On RPAREN reduce production ident_free_term -> term OR term
-- On RCURLY reduce production ident_free_term -> term OR term
-- On IN reduce production ident_free_term -> term OR term
-- On EQEQ reduce production ident_free_term -> term OR term
-- On ELSE reduce production ident_free_term -> term OR term
-- On DOT reduce production ident_free_term -> term OR term
-- On DARROW reduce production ident_free_term -> term OR term
-- On COMMA reduce production ident_free_term -> term OR term
-- On COLONDASH reduce production ident_free_term -> term OR term

State 41:
## Known stack suffix:
## term MINUS
## LR(1) items:
ident_free_term -> term MINUS . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 42
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 42:
## Known stack suffix:
## term MINUS term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term MINUS term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On OR shift to state 39
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term MINUS term
-- On THEN reduce production ident_free_term -> term MINUS term
-- On SUBTYPE reduce production ident_free_term -> term MINUS term
-- On STRINGV reduce production ident_free_term -> term MINUS term
-- On STAR reduce production ident_free_term -> term MINUS term
-- On SEMISEMI reduce production ident_free_term -> term MINUS term
-- On SEMI reduce production ident_free_term -> term MINUS term
-- On RSQUARE reduce production ident_free_term -> term MINUS term
-- On RPAREN reduce production ident_free_term -> term MINUS term
-- On REC reduce production ident_free_term -> term MINUS term
-- On RCURLY reduce production ident_free_term -> term MINUS term
-- On QUESTION reduce production ident_free_term -> term MINUS term
-- On PLUS reduce production ident_free_term -> term MINUS term
-- On MINUS reduce production ident_free_term -> term MINUS term
-- On LT reduce production ident_free_term -> term MINUS term
-- On LPAREN reduce production ident_free_term -> term MINUS term
-- On LET reduce production ident_free_term -> term MINUS term
-- On LEQ reduce production ident_free_term -> term MINUS term
-- On LCURLY reduce production ident_free_term -> term MINUS term
-- On LAMBDA reduce production ident_free_term -> term MINUS term
-- On INTV reduce production ident_free_term -> term MINUS term
-- On IN reduce production ident_free_term -> term MINUS term
-- On IFF reduce production ident_free_term -> term MINUS term
-- On IF reduce production ident_free_term -> term MINUS term
-- On ID reduce production ident_free_term -> term MINUS term
-- On GT reduce production ident_free_term -> term MINUS term
-- On GEQ reduce production ident_free_term -> term MINUS term
-- On FN reduce production ident_free_term -> term MINUS term
-- On EQEQ reduce production ident_free_term -> term MINUS term
-- On EQ reduce production ident_free_term -> term MINUS term
-- On ELSE reduce production ident_free_term -> term MINUS term
-- On DOT reduce production ident_free_term -> term MINUS term
-- On DARROW reduce production ident_free_term -> term MINUS term
-- On COMMA reduce production ident_free_term -> term MINUS term
-- On COLONDASH reduce production ident_free_term -> term MINUS term
-- On AS reduce production ident_free_term -> term MINUS term
-- On ARROW reduce production ident_free_term -> term MINUS term
-- On AND reduce production ident_free_term -> term MINUS term

State 43:
## Known stack suffix:
## term term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On OR shift to state 39
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term term
-- On THEN reduce production ident_free_term -> term term
-- On SUBTYPE reduce production ident_free_term -> term term
-- On STRINGV reduce production ident_free_term -> term term
-- On STAR reduce production ident_free_term -> term term
-- On SEMISEMI reduce production ident_free_term -> term term
-- On SEMI reduce production ident_free_term -> term term
-- On RSQUARE reduce production ident_free_term -> term term
-- On RPAREN reduce production ident_free_term -> term term
-- On REC reduce production ident_free_term -> term term
-- On RCURLY reduce production ident_free_term -> term term
-- On QUESTION reduce production ident_free_term -> term term
-- On PLUS reduce production ident_free_term -> term term
-- On MINUS reduce production ident_free_term -> term term
-- On LT reduce production ident_free_term -> term term
-- On LPAREN reduce production ident_free_term -> term term
-- On LET reduce production ident_free_term -> term term
-- On LEQ reduce production ident_free_term -> term term
-- On LCURLY reduce production ident_free_term -> term term
-- On LAMBDA reduce production ident_free_term -> term term
-- On INTV reduce production ident_free_term -> term term
-- On IN reduce production ident_free_term -> term term
-- On IFF reduce production ident_free_term -> term term
-- On IF reduce production ident_free_term -> term term
-- On ID reduce production ident_free_term -> term term
-- On GT reduce production ident_free_term -> term term
-- On GEQ reduce production ident_free_term -> term term
-- On FN reduce production ident_free_term -> term term
-- On EQEQ reduce production ident_free_term -> term term
-- On EQ reduce production ident_free_term -> term term
-- On ELSE reduce production ident_free_term -> term term
-- On DOT reduce production ident_free_term -> term term
-- On DARROW reduce production ident_free_term -> term term
-- On COMMA reduce production ident_free_term -> term term
-- On COLONDASH reduce production ident_free_term -> term term
-- On AS reduce production ident_free_term -> term term
-- On ARROW reduce production ident_free_term -> term term
-- On AND reduce production ident_free_term -> term term

State 44:
## Known stack suffix:
## ident_free_term
## LR(1) items:
term -> ident_free_term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> ident_free_term

State 45:
## Known stack suffix:
## Let
## LR(1) items:
ident_free_term -> Let . IN term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On IN shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## Let IN
## LR(1) items:
ident_free_term -> Let IN . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 47
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 47:
## Known stack suffix:
## Let IN term
## LR(1) items:
ident_free_term -> Let IN term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> Let IN term
-- On THEN reduce production ident_free_term -> Let IN term
-- On SUBTYPE reduce production ident_free_term -> Let IN term
-- On SEMISEMI reduce production ident_free_term -> Let IN term
-- On SEMI reduce production ident_free_term -> Let IN term
-- On RSQUARE reduce production ident_free_term -> Let IN term
-- On RPAREN reduce production ident_free_term -> Let IN term
-- On RCURLY reduce production ident_free_term -> Let IN term
-- On IN reduce production ident_free_term -> Let IN term
-- On EQEQ reduce production ident_free_term -> Let IN term
-- On ELSE reduce production ident_free_term -> Let IN term
-- On DOT reduce production ident_free_term -> Let IN term
-- On DARROW reduce production ident_free_term -> Let IN term
-- On COMMA reduce production ident_free_term -> Let IN term
-- On COLONDASH reduce production ident_free_term -> Let IN term
-- On ARROW reduce production ident_free_term -> Let IN term

State 48:
## Known stack suffix:
## term LT
## LR(1) items:
ident_free_term -> term LT . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> LT . LabelColonTyList GT [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> LT . ID EQ term GT [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 49
-- On FN shift to state 30
-- On term shift to state 78
-- On ident_free_term shift to state 44
-- On NonEmptyLabelColonTyList shift to state 79
-- On Let shift to state 45
-- On LabelColonTyList shift to state 80
## Reductions:
-- On GT reduce production LabelColonTyList ->

State 49:
## Known stack suffix:
## LT ID
## LR(1) items:
NonEmptyLabelColonTyList -> ID . COLON Type [ GT ]
NonEmptyLabelColonTyList -> ID . COLON Type COMMA NonEmptyLabelColonTyList [ GT ]
ident_free_term -> ID . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> LT ID . EQ term GT [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ID . COLON ident_free_term DOT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ID . COLON ident_free_term ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On COLON shift to state 50
## Reductions:
-- On VBAR reduce production ident_free_term -> ID
-- On THEN reduce production ident_free_term -> ID
-- On SUBTYPE reduce production ident_free_term -> ID
-- On STRINGV reduce production ident_free_term -> ID
-- On STAR reduce production ident_free_term -> ID
-- On SEMISEMI reduce production ident_free_term -> ID
-- On SEMI reduce production ident_free_term -> ID
-- On RSQUARE reduce production ident_free_term -> ID
-- On RPAREN reduce production ident_free_term -> ID
-- On REC reduce production ident_free_term -> ID
-- On RCURLY reduce production ident_free_term -> ID
-- On QUESTION reduce production ident_free_term -> ID
-- On PLUS reduce production ident_free_term -> ID
-- On OR reduce production ident_free_term -> ID
-- On MINUS reduce production ident_free_term -> ID
-- On LT reduce production ident_free_term -> ID
-- On LPAREN reduce production ident_free_term -> ID
-- On LET reduce production ident_free_term -> ID
-- On LEQ reduce production ident_free_term -> ID
-- On LCURLY reduce production ident_free_term -> ID
-- On LAMBDA reduce production ident_free_term -> ID
-- On INTV reduce production ident_free_term -> ID
-- On IN reduce production ident_free_term -> ID
-- On IFF reduce production ident_free_term -> ID
-- On IF reduce production ident_free_term -> ID
-- On ID reduce production ident_free_term -> ID
-- On GT reduce production ident_free_term -> ID
-- On GEQ reduce production ident_free_term -> ID
-- On FN reduce production ident_free_term -> ID
-- On EQEQ reduce production ident_free_term -> ID
-- On ELSE reduce production ident_free_term -> ID
-- On DOT reduce production ident_free_term -> ID
-- On DARROW reduce production ident_free_term -> ID
-- On COMMA reduce production ident_free_term -> ID
-- On COLONDASH reduce production ident_free_term -> ID
-- On AS reduce production ident_free_term -> ID
-- On ARROW reduce production ident_free_term -> ID
-- On AND reduce production ident_free_term -> ID

State 50:
## Known stack suffix:
## ID COLON
## LR(1) items:
NonEmptyLabelColonTyList -> ID COLON . Type [ GT ]
NonEmptyLabelColonTyList -> ID COLON . Type COMMA NonEmptyLabelColonTyList [ GT ]
term -> ID COLON . ident_free_term DOT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ID COLON . ident_free_term ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 51
-- On ident_free_term shift to state 68
-- On Type shift to state 73
-- On Let shift to state 45
## Reductions:

State 51:
## Known stack suffix:
## term
## LR(1) items:
Type -> term . [ SUBTYPE SEMISEMI RSQUARE RCURLY GT COMMA ]
ident_free_term -> term . ARROW term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . AS term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . SEMI term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . EQ term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . IFF term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . LEQ term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . GEQ term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . LT term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . GT term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . PLUS term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . MINUS term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . AND term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
ident_free_term -> term . OR term [ VBAR SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT COMMA AS ARROW AND ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On SUBTYPE reduce production Type -> term
-- On SEMISEMI reduce production Type -> term
-- On RSQUARE reduce production Type -> term
-- On RCURLY reduce production Type -> term
-- On COMMA reduce production Type -> term

State 52:
## Known stack suffix:
## term LEQ
## LR(1) items:
ident_free_term -> term LEQ . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 53
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 53:
## Known stack suffix:
## term LEQ term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term LEQ term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LPAREN shift to state 12
-- On LCURLY shift to state 19
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term LEQ term
-- On THEN reduce production ident_free_term -> term LEQ term
-- On SUBTYPE reduce production ident_free_term -> term LEQ term
-- On STRINGV reduce production ident_free_term -> term LEQ term
-- On STAR reduce production ident_free_term -> term LEQ term
-- On SEMISEMI reduce production ident_free_term -> term LEQ term
-- On SEMI reduce production ident_free_term -> term LEQ term
-- On RSQUARE reduce production ident_free_term -> term LEQ term
-- On RPAREN reduce production ident_free_term -> term LEQ term
-- On REC reduce production ident_free_term -> term LEQ term
-- On RCURLY reduce production ident_free_term -> term LEQ term
-- On QUESTION reduce production ident_free_term -> term LEQ term
-- On LET reduce production ident_free_term -> term LEQ term
-- On LAMBDA reduce production ident_free_term -> term LEQ term
-- On INTV reduce production ident_free_term -> term LEQ term
-- On IN reduce production ident_free_term -> term LEQ term
-- On IFF reduce production ident_free_term -> term LEQ term
-- On IF reduce production ident_free_term -> term LEQ term
-- On ID reduce production ident_free_term -> term LEQ term
-- On FN reduce production ident_free_term -> term LEQ term
-- On EQEQ reduce production ident_free_term -> term LEQ term
-- On EQ reduce production ident_free_term -> term LEQ term
-- On ELSE reduce production ident_free_term -> term LEQ term
-- On DOT reduce production ident_free_term -> term LEQ term
-- On DARROW reduce production ident_free_term -> term LEQ term
-- On COMMA reduce production ident_free_term -> term LEQ term
-- On COLONDASH reduce production ident_free_term -> term LEQ term
-- On AS reduce production ident_free_term -> term LEQ term
-- On ARROW reduce production ident_free_term -> term LEQ term

State 54:
## Known stack suffix:
## term AND
## LR(1) items:
ident_free_term -> term AND . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 55
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 55:
## Known stack suffix:
## term AND term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term AND term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On OR shift to state 39
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term AND term
-- On THEN reduce production ident_free_term -> term AND term
-- On SUBTYPE reduce production ident_free_term -> term AND term
-- On STRINGV reduce production ident_free_term -> term AND term
-- On STAR reduce production ident_free_term -> term AND term
-- On SEMISEMI reduce production ident_free_term -> term AND term
-- On SEMI reduce production ident_free_term -> term AND term
-- On RSQUARE reduce production ident_free_term -> term AND term
-- On RPAREN reduce production ident_free_term -> term AND term
-- On REC reduce production ident_free_term -> term AND term
-- On RCURLY reduce production ident_free_term -> term AND term
-- On QUESTION reduce production ident_free_term -> term AND term
-- On PLUS reduce production ident_free_term -> term AND term
-- On MINUS reduce production ident_free_term -> term AND term
-- On LT reduce production ident_free_term -> term AND term
-- On LPAREN reduce production ident_free_term -> term AND term
-- On LET reduce production ident_free_term -> term AND term
-- On LEQ reduce production ident_free_term -> term AND term
-- On LCURLY reduce production ident_free_term -> term AND term
-- On LAMBDA reduce production ident_free_term -> term AND term
-- On INTV reduce production ident_free_term -> term AND term
-- On IN reduce production ident_free_term -> term AND term
-- On IFF reduce production ident_free_term -> term AND term
-- On IF reduce production ident_free_term -> term AND term
-- On ID reduce production ident_free_term -> term AND term
-- On GT reduce production ident_free_term -> term AND term
-- On GEQ reduce production ident_free_term -> term AND term
-- On FN reduce production ident_free_term -> term AND term
-- On EQEQ reduce production ident_free_term -> term AND term
-- On EQ reduce production ident_free_term -> term AND term
-- On ELSE reduce production ident_free_term -> term AND term
-- On DOT reduce production ident_free_term -> term AND term
-- On DARROW reduce production ident_free_term -> term AND term
-- On COMMA reduce production ident_free_term -> term AND term
-- On COLONDASH reduce production ident_free_term -> term AND term
-- On AS reduce production ident_free_term -> term AND term
-- On ARROW reduce production ident_free_term -> term AND term
-- On AND reduce production ident_free_term -> term AND term

State 56:
## Known stack suffix:
## term IFF
## LR(1) items:
ident_free_term -> term IFF . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 57
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 57:
## Known stack suffix:
## term IFF term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term IFF term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term IFF term
-- On THEN reduce production ident_free_term -> term IFF term
-- On SUBTYPE reduce production ident_free_term -> term IFF term
-- On SEMISEMI reduce production ident_free_term -> term IFF term
-- On SEMI reduce production ident_free_term -> term IFF term
-- On RSQUARE reduce production ident_free_term -> term IFF term
-- On RPAREN reduce production ident_free_term -> term IFF term
-- On RCURLY reduce production ident_free_term -> term IFF term
-- On LET reduce production ident_free_term -> term IFF term
-- On IN reduce production ident_free_term -> term IFF term
-- On EQEQ reduce production ident_free_term -> term IFF term
-- On ELSE reduce production ident_free_term -> term IFF term
-- On DOT reduce production ident_free_term -> term IFF term
-- On DARROW reduce production ident_free_term -> term IFF term
-- On COMMA reduce production ident_free_term -> term IFF term
-- On COLONDASH reduce production ident_free_term -> term IFF term
-- On AS reduce production ident_free_term -> term IFF term
-- On ARROW reduce production ident_free_term -> term IFF term

State 58:
## Known stack suffix:
## term GT
## LR(1) items:
ident_free_term -> term GT . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 59
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 59:
## Known stack suffix:
## term GT term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term GT term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LPAREN shift to state 12
-- On LCURLY shift to state 19
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term GT term
-- On THEN reduce production ident_free_term -> term GT term
-- On SUBTYPE reduce production ident_free_term -> term GT term
-- On STRINGV reduce production ident_free_term -> term GT term
-- On STAR reduce production ident_free_term -> term GT term
-- On SEMISEMI reduce production ident_free_term -> term GT term
-- On SEMI reduce production ident_free_term -> term GT term
-- On RSQUARE reduce production ident_free_term -> term GT term
-- On RPAREN reduce production ident_free_term -> term GT term
-- On REC reduce production ident_free_term -> term GT term
-- On RCURLY reduce production ident_free_term -> term GT term
-- On QUESTION reduce production ident_free_term -> term GT term
-- On LET reduce production ident_free_term -> term GT term
-- On LAMBDA reduce production ident_free_term -> term GT term
-- On INTV reduce production ident_free_term -> term GT term
-- On IN reduce production ident_free_term -> term GT term
-- On IFF reduce production ident_free_term -> term GT term
-- On IF reduce production ident_free_term -> term GT term
-- On ID reduce production ident_free_term -> term GT term
-- On FN reduce production ident_free_term -> term GT term
-- On EQEQ reduce production ident_free_term -> term GT term
-- On EQ reduce production ident_free_term -> term GT term
-- On ELSE reduce production ident_free_term -> term GT term
-- On DOT reduce production ident_free_term -> term GT term
-- On DARROW reduce production ident_free_term -> term GT term
-- On COMMA reduce production ident_free_term -> term GT term
-- On COLONDASH reduce production ident_free_term -> term GT term
-- On AS reduce production ident_free_term -> term GT term
-- On ARROW reduce production ident_free_term -> term GT term

State 60:
## Known stack suffix:
## term GEQ
## LR(1) items:
ident_free_term -> term GEQ . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 61
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 61:
## Known stack suffix:
## term GEQ term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term GEQ term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LPAREN shift to state 12
-- On LCURLY shift to state 19
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term GEQ term
-- On THEN reduce production ident_free_term -> term GEQ term
-- On SUBTYPE reduce production ident_free_term -> term GEQ term
-- On STRINGV reduce production ident_free_term -> term GEQ term
-- On STAR reduce production ident_free_term -> term GEQ term
-- On SEMISEMI reduce production ident_free_term -> term GEQ term
-- On SEMI reduce production ident_free_term -> term GEQ term
-- On RSQUARE reduce production ident_free_term -> term GEQ term
-- On RPAREN reduce production ident_free_term -> term GEQ term
-- On REC reduce production ident_free_term -> term GEQ term
-- On RCURLY reduce production ident_free_term -> term GEQ term
-- On QUESTION reduce production ident_free_term -> term GEQ term
-- On LET reduce production ident_free_term -> term GEQ term
-- On LAMBDA reduce production ident_free_term -> term GEQ term
-- On INTV reduce production ident_free_term -> term GEQ term
-- On IN reduce production ident_free_term -> term GEQ term
-- On IFF reduce production ident_free_term -> term GEQ term
-- On IF reduce production ident_free_term -> term GEQ term
-- On ID reduce production ident_free_term -> term GEQ term
-- On FN reduce production ident_free_term -> term GEQ term
-- On EQEQ reduce production ident_free_term -> term GEQ term
-- On EQ reduce production ident_free_term -> term GEQ term
-- On ELSE reduce production ident_free_term -> term GEQ term
-- On DOT reduce production ident_free_term -> term GEQ term
-- On DARROW reduce production ident_free_term -> term GEQ term
-- On COMMA reduce production ident_free_term -> term GEQ term
-- On COLONDASH reduce production ident_free_term -> term GEQ term
-- On AS reduce production ident_free_term -> term GEQ term
-- On ARROW reduce production ident_free_term -> term GEQ term

State 62:
## Known stack suffix:
## term EQ
## LR(1) items:
ident_free_term -> term EQ . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 63
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 63:
## Known stack suffix:
## term EQ term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term EQ term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term EQ term
-- On THEN reduce production ident_free_term -> term EQ term
-- On SUBTYPE reduce production ident_free_term -> term EQ term
-- On SEMISEMI reduce production ident_free_term -> term EQ term
-- On SEMI reduce production ident_free_term -> term EQ term
-- On RSQUARE reduce production ident_free_term -> term EQ term
-- On RPAREN reduce production ident_free_term -> term EQ term
-- On RCURLY reduce production ident_free_term -> term EQ term
-- On LET reduce production ident_free_term -> term EQ term
-- On IN reduce production ident_free_term -> term EQ term
-- On EQEQ reduce production ident_free_term -> term EQ term
-- On ELSE reduce production ident_free_term -> term EQ term
-- On DOT reduce production ident_free_term -> term EQ term
-- On DARROW reduce production ident_free_term -> term EQ term
-- On COMMA reduce production ident_free_term -> term EQ term
-- On COLONDASH reduce production ident_free_term -> term EQ term
-- On AS reduce production ident_free_term -> term EQ term
-- On ARROW reduce production ident_free_term -> term EQ term

State 64:
## Known stack suffix:
## term AS
## LR(1) items:
ident_free_term -> term AS . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 65
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 65:
## Known stack suffix:
## term AS term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term AS term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term AS term
-- On THEN reduce production ident_free_term -> term AS term
-- On SUBTYPE reduce production ident_free_term -> term AS term
-- On SEMISEMI reduce production ident_free_term -> term AS term
-- On SEMI reduce production ident_free_term -> term AS term
-- On RSQUARE reduce production ident_free_term -> term AS term
-- On RPAREN reduce production ident_free_term -> term AS term
-- On RCURLY reduce production ident_free_term -> term AS term
-- On LET reduce production ident_free_term -> term AS term
-- On IN reduce production ident_free_term -> term AS term
-- On EQEQ reduce production ident_free_term -> term AS term
-- On ELSE reduce production ident_free_term -> term AS term
-- On DOT reduce production ident_free_term -> term AS term
-- On DARROW reduce production ident_free_term -> term AS term
-- On COMMA reduce production ident_free_term -> term AS term
-- On COLONDASH reduce production ident_free_term -> term AS term
-- On ARROW reduce production ident_free_term -> term AS term

State 66:
## Known stack suffix:
## term ARROW
## LR(1) items:
ident_free_term -> term ARROW . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 67
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 67:
## Known stack suffix:
## term ARROW term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term ARROW term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term ARROW term
-- On THEN reduce production ident_free_term -> term ARROW term
-- On SUBTYPE reduce production ident_free_term -> term ARROW term
-- On SEMISEMI reduce production ident_free_term -> term ARROW term
-- On RSQUARE reduce production ident_free_term -> term ARROW term
-- On RPAREN reduce production ident_free_term -> term ARROW term
-- On RCURLY reduce production ident_free_term -> term ARROW term
-- On IN reduce production ident_free_term -> term ARROW term
-- On EQEQ reduce production ident_free_term -> term ARROW term
-- On ELSE reduce production ident_free_term -> term ARROW term
-- On DOT reduce production ident_free_term -> term ARROW term
-- On DARROW reduce production ident_free_term -> term ARROW term
-- On COMMA reduce production ident_free_term -> term ARROW term
-- On COLONDASH reduce production ident_free_term -> term ARROW term

State 68:
## Known stack suffix:
## ID COLON ident_free_term
## LR(1) items:
term -> ID COLON ident_free_term . DOT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ID COLON ident_free_term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ident_free_term . [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA AS ARROW AND ]
## Transitions:
-- On DOT shift to state 69
-- On ARROW shift to state 71
## Reductions:
-- On STRINGV reduce production term -> ident_free_term
-- On STAR reduce production term -> ident_free_term
-- On SEMI reduce production term -> ident_free_term
-- On REC reduce production term -> ident_free_term
-- On QUESTION reduce production term -> ident_free_term
-- On PLUS reduce production term -> ident_free_term
-- On OR reduce production term -> ident_free_term
-- On MINUS reduce production term -> ident_free_term
-- On LT reduce production term -> ident_free_term
-- On LPAREN reduce production term -> ident_free_term
-- On LET reduce production term -> ident_free_term
-- On LEQ reduce production term -> ident_free_term
-- On LCURLY reduce production term -> ident_free_term
-- On LAMBDA reduce production term -> ident_free_term
-- On INTV reduce production term -> ident_free_term
-- On IFF reduce production term -> ident_free_term
-- On IF reduce production term -> ident_free_term
-- On ID reduce production term -> ident_free_term
-- On GT reduce production term -> ident_free_term
-- On GEQ reduce production term -> ident_free_term
-- On FN reduce production term -> ident_free_term
-- On EQ reduce production term -> ident_free_term
-- On COMMA reduce production term -> ident_free_term
-- On AS reduce production term -> ident_free_term
-- On AND reduce production term -> ident_free_term

State 69:
## Known stack suffix:
## ID COLON ident_free_term DOT
## LR(1) items:
term -> ID COLON ident_free_term DOT . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 70
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 70:
## Known stack suffix:
## ID COLON ident_free_term DOT term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ID COLON ident_free_term DOT term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production term -> ID COLON ident_free_term DOT term
-- On THEN reduce production term -> ID COLON ident_free_term DOT term
-- On SUBTYPE reduce production term -> ID COLON ident_free_term DOT term
-- On SEMISEMI reduce production term -> ID COLON ident_free_term DOT term
-- On RSQUARE reduce production term -> ID COLON ident_free_term DOT term
-- On RPAREN reduce production term -> ID COLON ident_free_term DOT term
-- On RCURLY reduce production term -> ID COLON ident_free_term DOT term
-- On IN reduce production term -> ID COLON ident_free_term DOT term
-- On EQEQ reduce production term -> ID COLON ident_free_term DOT term
-- On ELSE reduce production term -> ID COLON ident_free_term DOT term
-- On DOT reduce production term -> ID COLON ident_free_term DOT term
-- On DARROW reduce production term -> ID COLON ident_free_term DOT term
-- On COMMA reduce production term -> ID COLON ident_free_term DOT term
-- On COLONDASH reduce production term -> ID COLON ident_free_term DOT term

State 71:
## Known stack suffix:
## ID COLON ident_free_term ARROW
## LR(1) items:
term -> ID COLON ident_free_term ARROW . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 72
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 72:
## Known stack suffix:
## ID COLON ident_free_term ARROW term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ID COLON ident_free_term ARROW term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production term -> ID COLON ident_free_term ARROW term
-- On THEN reduce production term -> ID COLON ident_free_term ARROW term
-- On SUBTYPE reduce production term -> ID COLON ident_free_term ARROW term
-- On SEMISEMI reduce production term -> ID COLON ident_free_term ARROW term
-- On RSQUARE reduce production term -> ID COLON ident_free_term ARROW term
-- On RPAREN reduce production term -> ID COLON ident_free_term ARROW term
-- On RCURLY reduce production term -> ID COLON ident_free_term ARROW term
-- On IN reduce production term -> ID COLON ident_free_term ARROW term
-- On EQEQ reduce production term -> ID COLON ident_free_term ARROW term
-- On ELSE reduce production term -> ID COLON ident_free_term ARROW term
-- On DOT reduce production term -> ID COLON ident_free_term ARROW term
-- On DARROW reduce production term -> ID COLON ident_free_term ARROW term
-- On COMMA reduce production term -> ID COLON ident_free_term ARROW term
-- On COLONDASH reduce production term -> ID COLON ident_free_term ARROW term

State 73:
## Known stack suffix:
## ID COLON Type
## LR(1) items:
NonEmptyLabelColonTyList -> ID COLON Type . [ RCURLY GT ]
NonEmptyLabelColonTyList -> ID COLON Type . COMMA NonEmptyLabelColonTyList [ RCURLY GT ]
## Transitions:
-- On COMMA shift to state 74
## Reductions:
-- On RCURLY reduce production NonEmptyLabelColonTyList -> ID COLON Type
-- On GT reduce production NonEmptyLabelColonTyList -> ID COLON Type

State 74:
## Known stack suffix:
## ID COLON Type COMMA
## LR(1) items:
NonEmptyLabelColonTyList -> ID COLON Type COMMA . NonEmptyLabelColonTyList [ RCURLY GT ]
## Transitions:
-- On ID shift to state 75
-- On NonEmptyLabelColonTyList shift to state 77
## Reductions:

State 75:
## Known stack suffix:
## ID
## LR(1) items:
NonEmptyLabelColonTyList -> ID . COLON Type [ RCURLY GT ]
NonEmptyLabelColonTyList -> ID . COLON Type COMMA NonEmptyLabelColonTyList [ RCURLY GT ]
## Transitions:
-- On COLON shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## ID COLON
## LR(1) items:
NonEmptyLabelColonTyList -> ID COLON . Type [ RCURLY GT ]
NonEmptyLabelColonTyList -> ID COLON . Type COMMA NonEmptyLabelColonTyList [ RCURLY GT ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 51
-- On ident_free_term shift to state 44
-- On Type shift to state 73
-- On Let shift to state 45
## Reductions:

State 77:
## Known stack suffix:
## ID COLON Type COMMA NonEmptyLabelColonTyList
## LR(1) items:
NonEmptyLabelColonTyList -> ID COLON Type COMMA NonEmptyLabelColonTyList . [ RCURLY GT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production NonEmptyLabelColonTyList -> ID COLON Type COMMA NonEmptyLabelColonTyList

State 78:
## Known stack suffix:
## term LT term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term LT term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LPAREN shift to state 12
-- On LCURLY shift to state 19
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> term LT term
-- On THEN reduce production ident_free_term -> term LT term
-- On SUBTYPE reduce production ident_free_term -> term LT term
-- On STRINGV reduce production ident_free_term -> term LT term
-- On STAR reduce production ident_free_term -> term LT term
-- On SEMISEMI reduce production ident_free_term -> term LT term
-- On SEMI reduce production ident_free_term -> term LT term
-- On RSQUARE reduce production ident_free_term -> term LT term
-- On RPAREN reduce production ident_free_term -> term LT term
-- On REC reduce production ident_free_term -> term LT term
-- On RCURLY reduce production ident_free_term -> term LT term
-- On QUESTION reduce production ident_free_term -> term LT term
-- On LET reduce production ident_free_term -> term LT term
-- On LAMBDA reduce production ident_free_term -> term LT term
-- On INTV reduce production ident_free_term -> term LT term
-- On IN reduce production ident_free_term -> term LT term
-- On IFF reduce production ident_free_term -> term LT term
-- On IF reduce production ident_free_term -> term LT term
-- On ID reduce production ident_free_term -> term LT term
-- On FN reduce production ident_free_term -> term LT term
-- On EQEQ reduce production ident_free_term -> term LT term
-- On EQ reduce production ident_free_term -> term LT term
-- On ELSE reduce production ident_free_term -> term LT term
-- On DOT reduce production ident_free_term -> term LT term
-- On DARROW reduce production ident_free_term -> term LT term
-- On COMMA reduce production ident_free_term -> term LT term
-- On COLONDASH reduce production ident_free_term -> term LT term
-- On AS reduce production ident_free_term -> term LT term
-- On ARROW reduce production ident_free_term -> term LT term

State 79:
## Known stack suffix:
## NonEmptyLabelColonTyList
## LR(1) items:
LabelColonTyList -> NonEmptyLabelColonTyList . [ RCURLY GT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production LabelColonTyList -> NonEmptyLabelColonTyList

State 80:
## Known stack suffix:
## LT LabelColonTyList
## LR(1) items:
ident_free_term -> LT LabelColonTyList . GT [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On GT shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## LT LabelColonTyList GT
## LR(1) items:
ident_free_term -> LT LabelColonTyList GT . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_free_term -> LT LabelColonTyList GT

State 82:
## Known stack suffix:
## Param
## LR(1) items:
ParamSeq -> Param . ParamSeq [ VBAR SEMISEMI EQ DARROW COLON ]
## Transitions:
-- On LPAREN shift to state 5
-- On ID shift to state 16
-- On ParamSeq shift to state 83
-- On Param shift to state 82
## Reductions:
-- On VBAR reduce production ParamSeq ->
-- On SEMISEMI reduce production ParamSeq ->
-- On EQ reduce production ParamSeq ->
-- On DARROW reduce production ParamSeq ->
-- On COLON reduce production ParamSeq ->

State 83:
## Known stack suffix:
## Param ParamSeq
## LR(1) items:
ParamSeq -> Param ParamSeq . [ VBAR SEMISEMI EQ DARROW COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ParamSeq -> Param ParamSeq

State 84:
## Known stack suffix:
## term
## LR(1) items:
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ DOT COMMA COLONDASH AS ARROW AND ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 85:
## Known stack suffix:
## IF LSQUARE Type
## LR(1) items:
ident_free_term -> IF LSQUARE Type . RSQUARE term THEN term ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On RSQUARE shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## IF LSQUARE Type RSQUARE
## LR(1) items:
ident_free_term -> IF LSQUARE Type RSQUARE . term THEN term ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 87
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 87:
## Known stack suffix:
## IF LSQUARE Type RSQUARE term
## LR(1) items:
ident_free_term -> term . ARROW term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AS term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . SEMI term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . EQ term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . IFF term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LEQ term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GEQ term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LT term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GT term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . PLUS term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . MINUS term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AND term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . OR term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> IF LSQUARE Type RSQUARE term . THEN term ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On THEN shift to state 88
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 88:
## Known stack suffix:
## IF LSQUARE Type RSQUARE term THEN
## LR(1) items:
ident_free_term -> IF LSQUARE Type RSQUARE term THEN . term ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 89
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 89:
## Known stack suffix:
## IF LSQUARE Type RSQUARE term THEN term
## LR(1) items:
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> IF LSQUARE Type RSQUARE term THEN term . ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On ELSE shift to state 90
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 90:
## Known stack suffix:
## IF LSQUARE Type RSQUARE term THEN term ELSE
## LR(1) items:
ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 91
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 91:
## Known stack suffix:
## IF LSQUARE Type RSQUARE term THEN term ELSE term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On THEN reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On SUBTYPE reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On SEMISEMI reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On SEMI reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On RSQUARE reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On RPAREN reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On RCURLY reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On LET reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On IN reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On EQEQ reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On ELSE reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On DOT reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On DARROW reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On COMMA reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On COLONDASH reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term
-- On ARROW reduce production ident_free_term -> IF LSQUARE Type RSQUARE term THEN term ELSE term

State 92:
## Known stack suffix:
## IF term
## LR(1) items:
ident_free_term -> term . ARROW term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AS term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . SEMI term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . EQ term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . IFF term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LEQ term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GEQ term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LT term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GT term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . PLUS term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . MINUS term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AND term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . OR term [ THEN STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> IF term . THEN term ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On THEN shift to state 93
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 93:
## Known stack suffix:
## IF term THEN
## LR(1) items:
ident_free_term -> IF term THEN . term ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 94
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 94:
## Known stack suffix:
## IF term THEN term
## LR(1) items:
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ ELSE AS ARROW AND ]
ident_free_term -> IF term THEN term . ELSE term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On ELSE shift to state 95
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 95:
## Known stack suffix:
## IF term THEN term ELSE
## LR(1) items:
ident_free_term -> IF term THEN term ELSE . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 96
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 96:
## Known stack suffix:
## IF term THEN term ELSE term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> IF term THEN term ELSE term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> IF term THEN term ELSE term
-- On THEN reduce production ident_free_term -> IF term THEN term ELSE term
-- On SUBTYPE reduce production ident_free_term -> IF term THEN term ELSE term
-- On SEMISEMI reduce production ident_free_term -> IF term THEN term ELSE term
-- On SEMI reduce production ident_free_term -> IF term THEN term ELSE term
-- On RSQUARE reduce production ident_free_term -> IF term THEN term ELSE term
-- On RPAREN reduce production ident_free_term -> IF term THEN term ELSE term
-- On RCURLY reduce production ident_free_term -> IF term THEN term ELSE term
-- On LET reduce production ident_free_term -> IF term THEN term ELSE term
-- On IN reduce production ident_free_term -> IF term THEN term ELSE term
-- On EQEQ reduce production ident_free_term -> IF term THEN term ELSE term
-- On ELSE reduce production ident_free_term -> IF term THEN term ELSE term
-- On DOT reduce production ident_free_term -> IF term THEN term ELSE term
-- On DARROW reduce production ident_free_term -> IF term THEN term ELSE term
-- On COMMA reduce production ident_free_term -> IF term THEN term ELSE term
-- On COLONDASH reduce production ident_free_term -> IF term THEN term ELSE term
-- On ARROW reduce production ident_free_term -> IF term THEN term ELSE term

State 97:
## Known stack suffix:
## LAMBDA ID COLON ident_free_term
## LR(1) items:
ident_free_term -> LAMBDA ID COLON ident_free_term . DOT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ident_free_term . [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
## Transitions:
-- On DOT shift to state 98
## Reductions:
-- On STRINGV reduce production term -> ident_free_term
-- On STAR reduce production term -> ident_free_term
-- On SEMI reduce production term -> ident_free_term
-- On REC reduce production term -> ident_free_term
-- On QUESTION reduce production term -> ident_free_term
-- On PLUS reduce production term -> ident_free_term
-- On OR reduce production term -> ident_free_term
-- On MINUS reduce production term -> ident_free_term
-- On LT reduce production term -> ident_free_term
-- On LPAREN reduce production term -> ident_free_term
-- On LET reduce production term -> ident_free_term
-- On LEQ reduce production term -> ident_free_term
-- On LCURLY reduce production term -> ident_free_term
-- On LAMBDA reduce production term -> ident_free_term
-- On INTV reduce production term -> ident_free_term
-- On IFF reduce production term -> ident_free_term
-- On IF reduce production term -> ident_free_term
-- On ID reduce production term -> ident_free_term
-- On GT reduce production term -> ident_free_term
-- On GEQ reduce production term -> ident_free_term
-- On FN reduce production term -> ident_free_term
-- On EQ reduce production term -> ident_free_term
-- On AS reduce production term -> ident_free_term
-- On ARROW reduce production term -> ident_free_term
-- On AND reduce production term -> ident_free_term

State 98:
## Known stack suffix:
## LAMBDA ID COLON ident_free_term DOT
## LR(1) items:
ident_free_term -> LAMBDA ID COLON ident_free_term DOT . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 99
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 99:
## Known stack suffix:
## LAMBDA ID COLON ident_free_term DOT term
## LR(1) items:
ident_free_term -> LAMBDA ID COLON ident_free_term DOT term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On THEN reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On SUBTYPE reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On SEMISEMI reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On RSQUARE reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On RPAREN reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On RCURLY reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On IN reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On EQEQ reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On ELSE reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On DOT reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On DARROW reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On COMMA reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term
-- On COLONDASH reduce production ident_free_term -> LAMBDA ID COLON ident_free_term DOT term

State 100:
## Known stack suffix:
## LCURLY ID COLON ident_free_term
## LR(1) items:
term -> LCURLY ID COLON ident_free_term . VBAR term RCURLY [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
term -> ident_free_term . [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA AS ARROW AND ]
## Transitions:
-- On VBAR shift to state 101
## Reductions:
-- On STRINGV reduce production term -> ident_free_term
-- On STAR reduce production term -> ident_free_term
-- On SEMI reduce production term -> ident_free_term
-- On REC reduce production term -> ident_free_term
-- On RCURLY reduce production term -> ident_free_term
-- On QUESTION reduce production term -> ident_free_term
-- On PLUS reduce production term -> ident_free_term
-- On OR reduce production term -> ident_free_term
-- On MINUS reduce production term -> ident_free_term
-- On LT reduce production term -> ident_free_term
-- On LPAREN reduce production term -> ident_free_term
-- On LET reduce production term -> ident_free_term
-- On LEQ reduce production term -> ident_free_term
-- On LCURLY reduce production term -> ident_free_term
-- On LAMBDA reduce production term -> ident_free_term
-- On INTV reduce production term -> ident_free_term
-- On IFF reduce production term -> ident_free_term
-- On IF reduce production term -> ident_free_term
-- On ID reduce production term -> ident_free_term
-- On GT reduce production term -> ident_free_term
-- On GEQ reduce production term -> ident_free_term
-- On FN reduce production term -> ident_free_term
-- On EQ reduce production term -> ident_free_term
-- On COMMA reduce production term -> ident_free_term
-- On AS reduce production term -> ident_free_term
-- On ARROW reduce production term -> ident_free_term
-- On AND reduce production term -> ident_free_term

State 101:
## Known stack suffix:
## LCURLY ID COLON ident_free_term VBAR
## LR(1) items:
term -> LCURLY ID COLON ident_free_term VBAR . term RCURLY [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 102
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 102:
## Known stack suffix:
## LCURLY ID COLON ident_free_term VBAR term
## LR(1) items:
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
term -> LCURLY ID COLON ident_free_term VBAR term . RCURLY [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On RCURLY shift to state 103
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 103:
## Known stack suffix:
## LCURLY ID COLON ident_free_term VBAR term RCURLY
## LR(1) items:
term -> LCURLY ID COLON ident_free_term VBAR term RCURLY . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> LCURLY ID COLON ident_free_term VBAR term RCURLY

State 104:
## Known stack suffix:
## LCURLY LabelColonTyList
## LR(1) items:
ident_free_term -> LCURLY LabelColonTyList . RCURLY [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On RCURLY shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## LCURLY LabelColonTyList RCURLY
## LR(1) items:
ident_free_term -> LCURLY LabelColonTyList RCURLY . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_free_term -> LCURLY LabelColonTyList RCURLY

State 106:
## Known stack suffix:
## COLON term
## LR(1) items:
MaybeTy -> COLON term . [ EQ DARROW ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DARROW AS ARROW AND ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On EQ reduce production MaybeTy -> COLON term
-- On DARROW reduce production MaybeTy -> COLON term

State 107:
## Known stack suffix:
## LET REC ID ParamSeq MaybeTy
## LR(1) items:
Let -> LET REC ID ParamSeq MaybeTy . EQ term [ SEMISEMI IN # ]
## Transitions:
-- On EQ shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## LET REC ID ParamSeq MaybeTy EQ
## LR(1) items:
Let -> LET REC ID ParamSeq MaybeTy EQ . term [ SEMISEMI IN # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 109
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 109:
## Known stack suffix:
## LET REC ID ParamSeq MaybeTy EQ term
## LR(1) items:
Let -> LET REC ID ParamSeq MaybeTy EQ term . [ SEMISEMI IN # ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AS term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LT term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GT term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AND term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . OR term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On SEMISEMI reduce production Let -> LET REC ID ParamSeq MaybeTy EQ term
-- On IN reduce production Let -> LET REC ID ParamSeq MaybeTy EQ term

State 110:
## Known stack suffix:
## LET ID
## LR(1) items:
Let -> LET ID . ParamSeq MaybeTy EQ term [ SEMISEMI IN # ]
## Transitions:
-- On LPAREN shift to state 5
-- On ID shift to state 16
-- On ParamSeq shift to state 111
-- On Param shift to state 82
## Reductions:
-- On EQ reduce production ParamSeq ->
-- On COLON reduce production ParamSeq ->

State 111:
## Known stack suffix:
## LET ID ParamSeq
## LR(1) items:
Let -> LET ID ParamSeq . MaybeTy EQ term [ SEMISEMI IN # ]
## Transitions:
-- On COLON shift to state 18
-- On MaybeTy shift to state 112
## Reductions:
-- On EQ reduce production MaybeTy ->

State 112:
## Known stack suffix:
## LET ID ParamSeq MaybeTy
## LR(1) items:
Let -> LET ID ParamSeq MaybeTy . EQ term [ SEMISEMI IN # ]
## Transitions:
-- On EQ shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## LET ID ParamSeq MaybeTy EQ
## LR(1) items:
Let -> LET ID ParamSeq MaybeTy EQ . term [ SEMISEMI IN # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 114
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 114:
## Known stack suffix:
## LET ID ParamSeq MaybeTy EQ term
## LR(1) items:
Let -> LET ID ParamSeq MaybeTy EQ term . [ SEMISEMI IN # ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AS term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LT term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GT term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AND term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . OR term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On SEMISEMI reduce production Let -> LET ID ParamSeq MaybeTy EQ term
-- On IN reduce production Let -> LET ID ParamSeq MaybeTy EQ term

State 115:
## Known stack suffix:
## LPAREN term
## LR(1) items:
ident_free_term -> LPAREN term . RPAREN [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On RPAREN shift to state 116
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 116:
## Known stack suffix:
## LPAREN term RPAREN
## LR(1) items:
ident_free_term -> LPAREN term RPAREN . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_free_term -> LPAREN term RPAREN

State 117:
## Known stack suffix:
## LT ID EQ term
## LR(1) items:
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> LT ID EQ term . GT [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 118
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 118:
## Known stack suffix:
## LT ID EQ term GT
## LR(1) items:
ident_free_term -> term GT . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> LT ID EQ term GT . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On LPAREN shift to state 12
-- On LCURLY shift to state 19
-- On term shift to state 59
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> LT ID EQ term GT
-- On THEN reduce production ident_free_term -> LT ID EQ term GT
-- On SUBTYPE reduce production ident_free_term -> LT ID EQ term GT
-- On STRINGV reduce production ident_free_term -> LT ID EQ term GT
-- On STAR reduce production ident_free_term -> LT ID EQ term GT
-- On SEMISEMI reduce production ident_free_term -> LT ID EQ term GT
-- On SEMI reduce production ident_free_term -> LT ID EQ term GT
-- On RSQUARE reduce production ident_free_term -> LT ID EQ term GT
-- On RPAREN reduce production ident_free_term -> LT ID EQ term GT
-- On REC reduce production ident_free_term -> LT ID EQ term GT
-- On RCURLY reduce production ident_free_term -> LT ID EQ term GT
-- On QUESTION reduce production ident_free_term -> LT ID EQ term GT
-- On PLUS reduce production ident_free_term -> LT ID EQ term GT
-- On OR reduce production ident_free_term -> LT ID EQ term GT
-- On MINUS reduce production ident_free_term -> LT ID EQ term GT
-- On LET reduce production ident_free_term -> LT ID EQ term GT
-- On LEQ reduce production ident_free_term -> LT ID EQ term GT
-- On LAMBDA reduce production ident_free_term -> LT ID EQ term GT
-- On INTV reduce production ident_free_term -> LT ID EQ term GT
-- On IN reduce production ident_free_term -> LT ID EQ term GT
-- On IFF reduce production ident_free_term -> LT ID EQ term GT
-- On IF reduce production ident_free_term -> LT ID EQ term GT
-- On ID reduce production ident_free_term -> LT ID EQ term GT
-- On GT reduce production ident_free_term -> LT ID EQ term GT
-- On GEQ reduce production ident_free_term -> LT ID EQ term GT
-- On FN reduce production ident_free_term -> LT ID EQ term GT
-- On EQEQ reduce production ident_free_term -> LT ID EQ term GT
-- On EQ reduce production ident_free_term -> LT ID EQ term GT
-- On ELSE reduce production ident_free_term -> LT ID EQ term GT
-- On DOT reduce production ident_free_term -> LT ID EQ term GT
-- On DARROW reduce production ident_free_term -> LT ID EQ term GT
-- On COMMA reduce production ident_free_term -> LT ID EQ term GT
-- On COLONDASH reduce production ident_free_term -> LT ID EQ term GT
-- On AS reduce production ident_free_term -> LT ID EQ term GT
-- On ARROW reduce production ident_free_term -> LT ID EQ term GT
-- On AND reduce production ident_free_term -> LT ID EQ term GT

State 119:
## Known stack suffix:
## LPAREN ID COLON term
## LR(1) items:
Param -> LPAREN ID COLON term . RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
Param -> LPAREN ID COLON term . DOT term RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ DOT AS ARROW AND ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On RPAREN shift to state 120
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On DOT shift to state 121
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 120:
## Known stack suffix:
## LPAREN ID COLON term RPAREN
## LR(1) items:
Param -> LPAREN ID COLON term RPAREN . [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production Param -> LPAREN ID COLON term RPAREN

State 121:
## Known stack suffix:
## LPAREN ID COLON term DOT
## LR(1) items:
Param -> LPAREN ID COLON term DOT . term RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 122
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 122:
## Known stack suffix:
## LPAREN ID COLON term DOT term
## LR(1) items:
Param -> LPAREN ID COLON term DOT term . RPAREN [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI RPAREN REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On RPAREN shift to state 123
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 123:
## Known stack suffix:
## LPAREN ID COLON term DOT term RPAREN
## LR(1) items:
Param -> LPAREN ID COLON term DOT term RPAREN . [ VBAR SEMISEMI LPAREN ID EQ DARROW COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production Param -> LPAREN ID COLON term DOT term RPAREN

State 124:
## Known stack suffix:
## REC ID ParamSeq
## LR(1) items:
ident_free_term -> REC ID ParamSeq . MaybeTy DARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On COLON shift to state 18
-- On MaybeTy shift to state 125
## Reductions:
-- On DARROW reduce production MaybeTy ->

State 125:
## Known stack suffix:
## REC ID ParamSeq MaybeTy
## LR(1) items:
ident_free_term -> REC ID ParamSeq MaybeTy . DARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On DARROW shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## REC ID ParamSeq MaybeTy DARROW
## LR(1) items:
ident_free_term -> REC ID ParamSeq MaybeTy DARROW . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 127
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 127:
## Known stack suffix:
## REC ID ParamSeq MaybeTy DARROW term
## LR(1) items:
ident_free_term -> term . ARROW term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> REC ID ParamSeq MaybeTy DARROW term . [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . SEMI term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . EQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . IFF term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GEQ term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . LT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . GT term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . PLUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . MINUS term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . AND term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
ident_free_term -> term . OR term [ VBAR THEN SUBTYPE STRINGV STAR SEMISEMI SEMI RSQUARE RPAREN REC RCURLY QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IN IFF IF ID GT GEQ FN EQEQ EQ ELSE DOT DARROW COMMA COLONDASH AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On VBAR reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On THEN reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On SUBTYPE reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On SEMISEMI reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On RSQUARE reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On RPAREN reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On RCURLY reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On IN reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On EQEQ reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On ELSE reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On DOT reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On DARROW reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On COMMA reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term
-- On COLONDASH reduce production ident_free_term -> REC ID ParamSeq MaybeTy DARROW term

State 128:
## Known stack suffix:
## ASSUMENOT
## LR(1) items:
AssumeWord -> ASSUMENOT . [ ID COLONDASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production AssumeWord -> ASSUMENOT

State 129:
## Known stack suffix:
## ASSUME
## LR(1) items:
AssumeWord -> ASSUME . [ ID COLONDASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production AssumeWord -> ASSUME

State 130:
## Known stack suffix:
## term
## LR(1) items:
command -> term . [ # ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 131:
## Known stack suffix:
## command
## LR(1) items:
command' -> command . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept command

State 132:
## Known stack suffix:
## Let
## LR(1) items:
command -> Let . [ # ]
ident_free_term -> Let . IN term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
## Transitions:
-- On IN shift to state 46
## Reductions:

State 133:
## Known stack suffix:
## AssumeWord
## LR(1) items:
command -> AssumeWord . Environment COLONDASH Type SUBTYPE Type [ # ]
## Transitions:
-- On ID shift to state 134
-- On NonEmptyEnvironment shift to state 143
-- On Environment shift to state 146
-- On Assumption shift to state 152
## Reductions:
-- On COLONDASH reduce production Environment ->

State 134:
## Known stack suffix:
## ID
## LR(1) items:
Assumption -> ID . COLON ident_free_term MaybeEqTerm [ COMMA COLONDASH ]
Assumption -> ID . COLON ident_free_term DOT term MaybeEqTerm [ COMMA COLONDASH ]
## Transitions:
-- On COLON shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## ID COLON
## LR(1) items:
Assumption -> ID COLON . ident_free_term MaybeEqTerm [ COMMA COLONDASH ]
Assumption -> ID COLON . ident_free_term DOT term MaybeEqTerm [ COMMA COLONDASH ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 84
-- On ident_free_term shift to state 136
-- On Let shift to state 45
## Reductions:

State 136:
## Known stack suffix:
## ID COLON ident_free_term
## LR(1) items:
Assumption -> ID COLON ident_free_term . MaybeEqTerm [ COMMA COLONDASH ]
Assumption -> ID COLON ident_free_term . DOT term MaybeEqTerm [ COMMA COLONDASH ]
term -> ident_free_term . [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
## Transitions:
-- On EQEQ shift to state 137
-- On DOT shift to state 139
-- On MaybeEqTerm shift to state 142
## Reductions:
-- On STRINGV reduce production term -> ident_free_term
-- On STAR reduce production term -> ident_free_term
-- On SEMI reduce production term -> ident_free_term
-- On REC reduce production term -> ident_free_term
-- On QUESTION reduce production term -> ident_free_term
-- On PLUS reduce production term -> ident_free_term
-- On OR reduce production term -> ident_free_term
-- On MINUS reduce production term -> ident_free_term
-- On LT reduce production term -> ident_free_term
-- On LPAREN reduce production term -> ident_free_term
-- On LET reduce production term -> ident_free_term
-- On LEQ reduce production term -> ident_free_term
-- On LCURLY reduce production term -> ident_free_term
-- On LAMBDA reduce production term -> ident_free_term
-- On INTV reduce production term -> ident_free_term
-- On IFF reduce production term -> ident_free_term
-- On IF reduce production term -> ident_free_term
-- On ID reduce production term -> ident_free_term
-- On GT reduce production term -> ident_free_term
-- On GEQ reduce production term -> ident_free_term
-- On FN reduce production term -> ident_free_term
-- On EQ reduce production term -> ident_free_term
-- On COMMA reduce production MaybeEqTerm ->
-- On COLONDASH reduce production MaybeEqTerm ->
-- On AS reduce production term -> ident_free_term
-- On ARROW reduce production term -> ident_free_term
-- On AND reduce production term -> ident_free_term

State 137:
## Known stack suffix:
## EQEQ
## LR(1) items:
MaybeEqTerm -> EQEQ . term [ COMMA COLONDASH ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 138
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 138:
## Known stack suffix:
## EQEQ term
## LR(1) items:
MaybeEqTerm -> EQEQ term . [ COMMA COLONDASH ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ COMMA COLONDASH AS ARROW AND ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On COMMA reduce production MaybeEqTerm -> EQEQ term
-- On COLONDASH reduce production MaybeEqTerm -> EQEQ term

State 139:
## Known stack suffix:
## ID COLON ident_free_term DOT
## LR(1) items:
Assumption -> ID COLON ident_free_term DOT . term MaybeEqTerm [ COMMA COLONDASH ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 140
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 140:
## Known stack suffix:
## ID COLON ident_free_term DOT term
## LR(1) items:
Assumption -> ID COLON ident_free_term DOT term . MaybeEqTerm [ COMMA COLONDASH ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQEQ EQ COMMA COLONDASH AS ARROW AND ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQEQ shift to state 137
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On MaybeEqTerm shift to state 141
-- On Let shift to state 45
## Reductions:
-- On COMMA reduce production MaybeEqTerm ->
-- On COLONDASH reduce production MaybeEqTerm ->

State 141:
## Known stack suffix:
## ID COLON ident_free_term DOT term MaybeEqTerm
## LR(1) items:
Assumption -> ID COLON ident_free_term DOT term MaybeEqTerm . [ COMMA COLONDASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production Assumption -> ID COLON ident_free_term DOT term MaybeEqTerm

State 142:
## Known stack suffix:
## ID COLON ident_free_term MaybeEqTerm
## LR(1) items:
Assumption -> ID COLON ident_free_term MaybeEqTerm . [ COMMA COLONDASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production Assumption -> ID COLON ident_free_term MaybeEqTerm

State 143:
## Known stack suffix:
## NonEmptyEnvironment
## LR(1) items:
Environment -> NonEmptyEnvironment . [ COLONDASH ]
NonEmptyEnvironment -> NonEmptyEnvironment . COMMA Assumption [ COMMA COLONDASH ]
## Transitions:
-- On COMMA shift to state 144
## Reductions:
-- On COLONDASH reduce production Environment -> NonEmptyEnvironment

State 144:
## Known stack suffix:
## NonEmptyEnvironment COMMA
## LR(1) items:
NonEmptyEnvironment -> NonEmptyEnvironment COMMA . Assumption [ COMMA COLONDASH ]
## Transitions:
-- On ID shift to state 134
-- On Assumption shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## NonEmptyEnvironment COMMA Assumption
## LR(1) items:
NonEmptyEnvironment -> NonEmptyEnvironment COMMA Assumption . [ COMMA COLONDASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production NonEmptyEnvironment -> NonEmptyEnvironment COMMA Assumption

State 146:
## Known stack suffix:
## AssumeWord Environment
## LR(1) items:
command -> AssumeWord Environment . COLONDASH Type SUBTYPE Type [ # ]
## Transitions:
-- On COLONDASH shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## AssumeWord Environment COLONDASH
## LR(1) items:
command -> AssumeWord Environment COLONDASH . Type SUBTYPE Type [ # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 51
-- On ident_free_term shift to state 44
-- On Type shift to state 148
-- On Let shift to state 45
## Reductions:

State 148:
## Known stack suffix:
## AssumeWord Environment COLONDASH Type
## LR(1) items:
command -> AssumeWord Environment COLONDASH Type . SUBTYPE Type [ # ]
## Transitions:
-- On SUBTYPE shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## AssumeWord Environment COLONDASH Type SUBTYPE
## LR(1) items:
command -> AssumeWord Environment COLONDASH Type SUBTYPE . Type [ # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 150
-- On ident_free_term shift to state 44
-- On Type shift to state 151
-- On Let shift to state 45
## Reductions:

State 150:
## Known stack suffix:
## term
## LR(1) items:
Type -> term . [ # ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 151:
## Known stack suffix:
## AssumeWord Environment COLONDASH Type SUBTYPE Type
## LR(1) items:
command -> AssumeWord Environment COLONDASH Type SUBTYPE Type . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production command -> AssumeWord Environment COLONDASH Type SUBTYPE Type

State 152:
## Known stack suffix:
## Assumption
## LR(1) items:
NonEmptyEnvironment -> Assumption . [ COMMA COLONDASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production NonEmptyEnvironment -> Assumption

State 153:
## Known stack suffix:
##
## LR(1) items:
term' -> . term [ # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 154
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 154:
## Known stack suffix:
## term
## LR(1) items:
term' -> term . [ # ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . LT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . GT term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . AND term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
ident_free_term -> term . OR term [ STRINGV STAR SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:

State 155:
## Known stack suffix:
##
## LR(1) items:
toplevel' -> . toplevel [ # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On EOF shift to state 156
-- On DATATYPE shift to state 157
-- On ASSUMENOT shift to state 128
-- On ASSUME shift to state 129
-- On toplevel shift to state 168
-- On term shift to state 169
-- On ident_free_term shift to state 44
-- On command shift to state 170
-- On Let shift to state 173
-- On Datatype shift to state 174
-- On AssumeWord shift to state 177
## Reductions:

State 156:
## Known stack suffix:
## EOF
## LR(1) items:
toplevel -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel -> EOF

State 157:
## Known stack suffix:
## DATATYPE
## LR(1) items:
Datatype -> DATATYPE . ID ParamSeq EQ ConstructorSeq [ SEMISEMI ]
## Transitions:
-- On ID shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## DATATYPE ID
## LR(1) items:
Datatype -> DATATYPE ID . ParamSeq EQ ConstructorSeq [ SEMISEMI ]
## Transitions:
-- On LPAREN shift to state 5
-- On ID shift to state 16
-- On ParamSeq shift to state 159
-- On Param shift to state 82
## Reductions:
-- On EQ reduce production ParamSeq ->

State 159:
## Known stack suffix:
## DATATYPE ID ParamSeq
## LR(1) items:
Datatype -> DATATYPE ID ParamSeq . EQ ConstructorSeq [ SEMISEMI ]
## Transitions:
-- On EQ shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## DATATYPE ID ParamSeq EQ
## LR(1) items:
Datatype -> DATATYPE ID ParamSeq EQ . ConstructorSeq [ SEMISEMI ]
## Transitions:
-- On ID shift to state 161
-- On ConstructorSeq shift to state 164
-- On Constructor shift to state 165
## Reductions:

State 161:
## Known stack suffix:
## ID
## LR(1) items:
Constructor -> ID . OF ParamSeq [ VBAR SEMISEMI ]
Constructor -> ID . [ VBAR SEMISEMI ]
## Transitions:
-- On OF shift to state 162
## Reductions:
-- On VBAR reduce production Constructor -> ID
-- On SEMISEMI reduce production Constructor -> ID

State 162:
## Known stack suffix:
## ID OF
## LR(1) items:
Constructor -> ID OF . ParamSeq [ VBAR SEMISEMI ]
## Transitions:
-- On LPAREN shift to state 5
-- On ID shift to state 16
-- On ParamSeq shift to state 163
-- On Param shift to state 82
## Reductions:
-- On VBAR reduce production ParamSeq ->
-- On SEMISEMI reduce production ParamSeq ->

State 163:
## Known stack suffix:
## ID OF ParamSeq
## LR(1) items:
Constructor -> ID OF ParamSeq . [ VBAR SEMISEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production Constructor -> ID OF ParamSeq

State 164:
## Known stack suffix:
## DATATYPE ID ParamSeq EQ ConstructorSeq
## LR(1) items:
Datatype -> DATATYPE ID ParamSeq EQ ConstructorSeq . [ SEMISEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production Datatype -> DATATYPE ID ParamSeq EQ ConstructorSeq

State 165:
## Known stack suffix:
## Constructor
## LR(1) items:
ConstructorSeq -> Constructor . [ SEMISEMI ]
ConstructorSeq -> Constructor . VBAR ConstructorSeq [ SEMISEMI ]
## Transitions:
-- On VBAR shift to state 166
## Reductions:
-- On SEMISEMI reduce production ConstructorSeq -> Constructor

State 166:
## Known stack suffix:
## Constructor VBAR
## LR(1) items:
ConstructorSeq -> Constructor VBAR . ConstructorSeq [ SEMISEMI ]
## Transitions:
-- On ID shift to state 161
-- On ConstructorSeq shift to state 167
-- On Constructor shift to state 165
## Reductions:

State 167:
## Known stack suffix:
## Constructor VBAR ConstructorSeq
## LR(1) items:
ConstructorSeq -> Constructor VBAR ConstructorSeq . [ SEMISEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ConstructorSeq -> Constructor VBAR ConstructorSeq

State 168:
## Known stack suffix:
## toplevel
## LR(1) items:
toplevel' -> toplevel . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept toplevel

State 169:
## Known stack suffix:
## term
## LR(1) items:
command -> term . [ SEMISEMI ]
ident_free_term -> term . ARROW term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AS term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . SEMI term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . EQ term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . IFF term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LEQ term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GEQ term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . LT term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . GT term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . PLUS term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . MINUS term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . AND term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
ident_free_term -> term . OR term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On SEMI shift to state 35
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On MINUS shift to state 41
-- On LT shift to state 48
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LEQ shift to state 52
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IFF shift to state 56
-- On IF shift to state 26
-- On ID shift to state 28
-- On GT shift to state 58
-- On GEQ shift to state 60
-- On FN shift to state 30
-- On EQ shift to state 62
-- On AS shift to state 64
-- On ARROW shift to state 66
-- On AND shift to state 54
-- On term shift to state 43
-- On ident_free_term shift to state 44
-- On Let shift to state 45
## Reductions:
-- On SEMISEMI reduce production command -> term

State 170:
## Known stack suffix:
## command
## LR(1) items:
toplevel -> command . SEMISEMI toplevel [ # ]
## Transitions:
-- On SEMISEMI shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## command SEMISEMI
## LR(1) items:
toplevel -> command SEMISEMI . toplevel [ # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On EOF shift to state 156
-- On DATATYPE shift to state 157
-- On ASSUMENOT shift to state 128
-- On ASSUME shift to state 129
-- On toplevel shift to state 172
-- On term shift to state 169
-- On ident_free_term shift to state 44
-- On command shift to state 170
-- On Let shift to state 173
-- On Datatype shift to state 174
-- On AssumeWord shift to state 177
## Reductions:

State 172:
## Known stack suffix:
## command SEMISEMI toplevel
## LR(1) items:
toplevel -> command SEMISEMI toplevel . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel -> command SEMISEMI toplevel

State 173:
## Known stack suffix:
## Let
## LR(1) items:
command -> Let . [ SEMISEMI ]
ident_free_term -> Let . IN term [ STRINGV STAR SEMISEMI SEMI REC QUESTION PLUS OR MINUS LT LPAREN LET LEQ LCURLY LAMBDA INTV IFF IF ID GT GEQ FN EQ AS ARROW AND ]
## Transitions:
-- On IN shift to state 46
## Reductions:
-- On SEMISEMI reduce production command -> Let

State 174:
## Known stack suffix:
## Datatype
## LR(1) items:
toplevel -> Datatype . SEMISEMI toplevel [ # ]
## Transitions:
-- On SEMISEMI shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## Datatype SEMISEMI
## LR(1) items:
toplevel -> Datatype SEMISEMI . toplevel [ # ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On EOF shift to state 156
-- On DATATYPE shift to state 157
-- On ASSUMENOT shift to state 128
-- On ASSUME shift to state 129
-- On toplevel shift to state 176
-- On term shift to state 169
-- On ident_free_term shift to state 44
-- On command shift to state 170
-- On Let shift to state 173
-- On Datatype shift to state 174
-- On AssumeWord shift to state 177
## Reductions:

State 176:
## Known stack suffix:
## Datatype SEMISEMI toplevel
## LR(1) items:
toplevel -> Datatype SEMISEMI toplevel . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel -> Datatype SEMISEMI toplevel

State 177:
## Known stack suffix:
## AssumeWord
## LR(1) items:
command -> AssumeWord . Environment COLONDASH Type SUBTYPE Type [ SEMISEMI ]
## Transitions:
-- On ID shift to state 134
-- On NonEmptyEnvironment shift to state 143
-- On Environment shift to state 178
-- On Assumption shift to state 152
## Reductions:
-- On COLONDASH reduce production Environment ->

State 178:
## Known stack suffix:
## AssumeWord Environment
## LR(1) items:
command -> AssumeWord Environment . COLONDASH Type SUBTYPE Type [ SEMISEMI ]
## Transitions:
-- On COLONDASH shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## AssumeWord Environment COLONDASH
## LR(1) items:
command -> AssumeWord Environment COLONDASH . Type SUBTYPE Type [ SEMISEMI ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 51
-- On ident_free_term shift to state 44
-- On Type shift to state 180
-- On Let shift to state 45
## Reductions:

State 180:
## Known stack suffix:
## AssumeWord Environment COLONDASH Type
## LR(1) items:
command -> AssumeWord Environment COLONDASH Type . SUBTYPE Type [ SEMISEMI ]
## Transitions:
-- On SUBTYPE shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## AssumeWord Environment COLONDASH Type SUBTYPE
## LR(1) items:
command -> AssumeWord Environment COLONDASH Type SUBTYPE . Type [ SEMISEMI ]
## Transitions:
-- On STRINGV shift to state 1
-- On STAR shift to state 2
-- On REC shift to state 3
-- On QUESTION shift to state 8
-- On LT shift to state 9
-- On LPAREN shift to state 12
-- On LET shift to state 13
-- On LCURLY shift to state 19
-- On LAMBDA shift to state 22
-- On INTV shift to state 25
-- On IF shift to state 26
-- On ID shift to state 28
-- On FN shift to state 30
-- On term shift to state 51
-- On ident_free_term shift to state 44
-- On Type shift to state 182
-- On Let shift to state 45
## Reductions:

State 182:
## Known stack suffix:
## AssumeWord Environment COLONDASH Type SUBTYPE Type
## LR(1) items:
command -> AssumeWord Environment COLONDASH Type SUBTYPE Type . [ SEMISEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> AssumeWord Environment COLONDASH Type SUBTYPE Type

