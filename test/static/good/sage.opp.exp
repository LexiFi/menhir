File "sage.mly", line 188, characters 28-38:
Warning: the token APOSTROPHE is unused.
File "sage.mly", line 166, characters 28-34:
Warning: the token ASSERT is unused.
File "sage.mly", line 191, characters 28-32:
Warning: the token BANG is unused.
File "sage.mly", line 192, characters 28-33:
Warning: the token BARGT is unused.
File "sage.mly", line 193, characters 28-37:
Warning: the token BARRCURLY is unused.
File "sage.mly", line 194, characters 28-38:
Warning: the token BARRSQUARE is unused.
File "sage.mly", line 159, characters 28-32:
Warning: the token BOOL is unused.
File "sage.mly", line 160, characters 28-32:
Warning: the token CASE is unused.
File "sage.mly", line 196, characters 28-38:
Warning: the token COLONCOLON is unused.
File "sage.mly", line 198, characters 28-35:
Warning: the token COLONEQ is unused.
File "sage.mly", line 199, characters 28-37:
Warning: the token COLONHASH is unused.
File "sage.mly", line 203, characters 28-35:
Warning: the token DDARROW is unused.
File "sage.mly", line 189, characters 28-34:
Warning: the token DQUOTE is unused.
File "sage.mly", line 208, characters 28-34:
Warning: the token EXISTS is unused.
File "sage.mly", line 158, characters 28-33:
Warning: the token FALSE is unused.
File "sage.mly", line 170, characters 28-31:
Warning: the token FIX is unused.
File "sage.mly", line 183, characters 38-44:
Warning: the token FLOATV is unused.
File "sage.mly", line 211, characters 28-32:
Warning: the token HASH is unused.
File "sage.mly", line 176, characters 28-31:
Warning: the token INT is unused.
File "sage.mly", line 214, characters 28-37:
Warning: the token LCURLYBAR is unused.
File "sage.mly", line 215, characters 28-37:
Warning: the token LEFTARROW is unused.
File "sage.mly", line 171, characters 28-34:
Warning: the token LETREC is unused.
File "sage.mly", line 218, characters 28-38:
Warning: the token LSQUAREBAR is unused.
File "sage.mly", line 229, characters 28-33:
Warning: the token SLASH is unused.
File "sage.mly", line 177, characters 28-31:
Warning: the token TOP is unused.
File "sage.mly", line 232, characters 28-36:
Warning: the token TRIANGLE is unused.
File "sage.mly", line 157, characters 28-32:
Warning: the token TRUE is unused.
File "sage.mly", line 153, characters 28-32:
Warning: the token TYPE is unused.
File "sage.mly", line 175, characters 28-34:
Warning: the token UFLOAT is unused.
File "sage.mly", line 173, characters 28-32:
Warning: the token UNIT is unused.
File "sage.mly", line 233, characters 28-34:
Warning: the token USCORE is unused.
File "sage.mly", line 172, characters 28-35:
Warning: the token USTRING is unused.
File "sage.mly", line 174, characters 28-33:
Warning: the token UUNIT is unused.
%{
  open Support
  open Support.Error
  open Support.Pervasive
  open Syntax
  open Primitives
  open Format
  open Print

  let make_rec fi vars prims name ~args ~ret ~body =
    let arglist = args vars prims in
    let argnames, types = List.split arglist in
    let argcount = List.length argnames in

    let ret_ty_vars = (List.rev argnames) @ vars in
    let body_vars = (List.rev argnames) @ (name::vars) in
    let body = body body_vars prims in

    let maybe_ret = ret ret_ty_vars prims in
    let ret_ty =
      match maybe_ret with
      | Some ty -> ty
      | None -> tm_prim ~fi "Dynamic"
    in


    let fixtype =
      make_arrow_sequence fi vars (List.combine argnames types) ret_ty in
    let shifted_types = mapi (fun index ty -> term_shift_above 1 index ty) types in

    make_prim_app_sequence fi vars
      "fix" []
      [fixtype;
       make_lambda_sequence fi vars
         ((name, fixtype) :: (List.combine argnames shifted_types))
         ~ret:(term_shift_above 1 argcount ret_ty)
         body]

(*



	datatype D (x_i:S_i) =
		C_i
		L_i of T_i

	(* occurences of D in T_i become (DT z) *)
	let rec DT (z:Unit) (x_i:S_i) : * = Z:* -> (Unit -> Z) -> ... -> (Init -> Z) -> (T_1 -> Z) ... (T_n -> Z) -> Z
	let D (x_i:S_i) = (DT unit)

	let C_i (x_i:S_i) : D (x_i) =
           fn  Z:* -> (f1:Unit -> Z) -> ... -> (..:Init -> Z) -> (..:T_1 -> Z) ... (..:T_n -> Z) -> Z => f1 unit

	let L_j (x_i:S_i) (y:T_j) : D (x_i) =
           fn  Z:* -> (..:Unit -> Z) -> ... -> (..:Init -> Z) -> (f1:T_1 -> Z) ... (fn:T_n -> Z) -> Z => fj y

	let caseD (x_i:S_i) =
	   Z:* -> (v: D (x_i)) -> (r1:Unit -> Z) -> ... -> (Init -> Z) -> (T_1 -> Z) ... (rk:T_n -> Z) -> Z => v X r1 .. rk

*)

(*



	datatype D (x_i:S_i) =
		C_i
		L_i of y_i_1:T_i_1...y_i_n:T_i_n

	let rec D (x_i:S_i) : * = Z:* -> (Unit -> Z) -> ... -> (Unit -> Z) -> (y_i_1:T_i_1...y_i_n:T_i_n -> Z) ... (y_i_1:T_i_1...y_i_n:T_i_n -> Z) -> Z

	let C_1 (x_i:S_i) : D (x_i) =
           fn  Z:* -> (f1:Unit -> Z) -> ... -> (..:Unit -> Z) -> (... -> Z) ... (... -> Z) -> Z => f1 unit

	let L_1 (x_i:S_i) (y_k:T_k) : D (x_i) =
           fn  Z:* -> (..:Unit -> Z) -> ... -> (..:Unit -> Z) ->
	             (y_i_1:T_i_1...y_i_n:T_i_n -> Z) ... (y_i_1:T_i_1...y_i_n:T_i_n -> Z) -> Z => fj y_1_1..y_1_n

	let caseD (x_i:S_i) =
	   Z:* -> (v: D (x_i)) -> (r1:Unit -> Z) -> ... -> (Init -> Z) -> (r1: (y_i_1:T_i_1...y_i_n:T_i_n -> Z)) ... => v Z r1 .. rk

*)


let make_datatype fi vars prims (name:string) (args:(string * ty) list) (constrs:(string*(string * ty) list) list) =

  let buf = Buffer.create 20 in
  let spr = Buffer.add_string in
  let vars' = name::((List.map (fun (x,ty)->x) args)@vars) in

  let rec pr_name_type_list pre (a:(string * ty) list) post vars =
    match a with
    | [] -> ()
    | (x,s)::r ->
        spr buf (pre ^ x ^ ":"); string_of_tm buf vars s; spr buf post;
        pr_name_type_list pre r post (x::vars) in

  let pr_name_list a =
    List.iter (fun (x,s) -> spr buf (" " ^ x)) a in

  let pr_fn name args result_ty vars =
    spr buf ("" ^ name ^ ":("); pr_name_type_list "" args "->" vars;
    spr buf ("" ^ result_ty ^ ")") in

  let rec pr_fns pre fns post vars =
    match fns with
    | [] -> ()
    | (name, params)::r ->
        spr buf pre;
        (if params = [] then
          pr_fn (name^"fn") params "Unit->Z" vars
        else
          pr_fn (name^"fn") params "Z" vars);
        spr buf post;
        pr_fns pre r post vars in

  spr buf ("let rec " ^ name); pr_name_type_list "(" args ")" vars;
  spr buf " : * = Z:*";
  pr_fns "\n->" constrs "" vars'; spr buf "\n->Z;;\n\n";

  spr buf ("let case" ^ name); pr_name_type_list "(" args ")" vars;
  spr buf ("(v:" ^ name); pr_name_list args; spr buf ")= v;;\n\n";

  List.iter (fun (label, largs) ->
    spr buf ("let " ^ label); pr_name_type_list "(" args ")" vars;
    pr_name_type_list "(" largs ")" vars'; spr buf "(Z:*)";
    pr_fns "\n(" constrs ")" vars';
    spr buf ("\n= " ^ label ^ "fn ");
    (if largs = [] then spr buf "unit");
    pr_name_list largs; spr buf ";;\n" ) constrs;
  Buffer.contents buf

%}
%start command
%start term
%start toplevel
%token <Support.Error.info> AND
%token <Support.Error.info> APOSTROPHE
%token <Support.Error.info> ARROW
%token <Support.Error.info> AS
%token <Support.Error.info> ASSERT
%token <Support.Error.info> ASSUME
%token <Support.Error.info> ASSUMENOT
%token <Support.Error.info> BANG
%token <Support.Error.info> BARGT
%token <Support.Error.info> BARRCURLY
%token <Support.Error.info> BARRSQUARE
%token <Support.Error.info> BOOL
%token <Support.Error.info> CASE
%token <Support.Error.info> COLON
%token <Support.Error.info> COLONCOLON
%token <Support.Error.info> COLONDASH
%token <Support.Error.info> COLONEQ
%token <Support.Error.info> COLONHASH
%token <Support.Error.info> COMMA
%token <Support.Error.info> DARROW
%token <Support.Error.info> DATATYPE
%token <Support.Error.info> DDARROW
%token <Support.Error.info> DOT
%token <Support.Error.info> DQUOTE
%token <Support.Error.info> ELSE
%token <Support.Error.info> EOF
%token <Support.Error.info> EQ
%token <Support.Error.info> EQEQ
%token <Support.Error.info> EXISTS
%token <Support.Error.info> FALSE
%token <Support.Error.info> FIX
%token <float Support.Error.withinfo> FLOATV
%token <Support.Error.info> FN
%token <Support.Error.info> GEQ
%token <Support.Error.info> GT
%token <Support.Error.info> HASH
%token <string Support.Error.withinfo> ID
%token <Support.Error.info> IF
%token <Support.Error.info> IFF
%token <Support.Error.info> IN
%token <Support.Error.info> INT
%token <int Support.Error.withinfo> INTV
%token <Support.Error.info> LAMBDA
%token <Support.Error.info> LCURLY
%token <Support.Error.info> LCURLYBAR
%token <Support.Error.info> LEFTARROW
%token <Support.Error.info> LEQ
%token <Support.Error.info> LET
%token <Support.Error.info> LETREC
%token <Support.Error.info> LPAREN
%token <Support.Error.info> LSQUARE
%token <Support.Error.info> LSQUAREBAR
%token <Support.Error.info> LT
%token <Support.Error.info> MINUS
%token <Support.Error.info> OF
%token <Support.Error.info> OR
%token <Support.Error.info> PLUS
%token <Support.Error.info> QUESTION
%token <Support.Error.info> RCURLY
%token <Support.Error.info> REC
%token <Support.Error.info> RPAREN
%token <Support.Error.info> RSQUARE
%token <Support.Error.info> SEMI
%token <Support.Error.info> SEMISEMI
%token <Support.Error.info> SLASH
%token <Support.Error.info> STAR
%token <string Support.Error.withinfo> STRINGV
%token <Support.Error.info> SUBTYPE
%token <Support.Error.info> THEN
%token <Support.Error.info> TOP
%token <Support.Error.info> TRIANGLE
%token <Support.Error.info> TRUE
%token <Support.Error.info> TYPE
%token <Support.Error.info> UFLOAT
%token <Support.Error.info> UNIT
%token <Support.Error.info> USCORE
%token <Support.Error.info> USTRING
%token <Support.Error.info> UUNIT
%token <Support.Error.info> VBAR
%nonassoc ALWAYS_SHIFT
%right ABSTRACTION DOT
%left SEMI
%right ARROW DARROW
%nonassoc ASSUME IN LET
%right ELSE
%right AS VBAR
%nonassoc CASE EQ FN ID IF IFF INTV LAMBDA OF QUESTION REC STAR STRINGV THEN
%nonassoc GEQ GT LEQ LT
%nonassoc COLON LCURLY LPAREN LSQUARE
%left AND MINUS PLUS
%left APPLICATION
%left APOSTROPHE
%type <Syntax.var_list -> string list -> Syntax.command * string list> command
%type < Syntax.var_list -> string list -> Syntax.term > term
%type < Syntax.var_list -> string list -> (Syntax.command list * Syntax.var_list)> toplevel
%%

toplevel:
  _1 = EOF
    {      ( fun vars prims -> ([], vars) )}
| _1 = command _2 = SEMISEMI _3 = toplevel
    {      ( fun vars prims ->
          let (cmd, vars') = _1 vars prims in
          let (cmds, vars'') = _3 vars' prims in
          (cmd::cmds, vars'') )}
| _1 = Datatype _2 = SEMISEMI _3 = toplevel
    {      (
	    fun vars prims ->
	      let (fi,name,params,constrs) = _1 vars prims in
          let dt_str =
            make_datatype fi vars prims name params constrs
          in
          let (dt_cmds, vars') = (!toplevel_parse_thunk) dt_str vars prims in
          let (cmds, vars'') = _3 vars' prims in
          (dt_cmds @ cmds, vars'')
      )}

command:
  _1 = term
    {      ( fun vars prims ->
          let t = _1 vars prims in (Eval(tm_info t, t), vars) )}
| _1 = Let
    {      ( fun vars prims ->
          (* The parser generator has a bug/feature so I MUST deconstruct and
             reconstruct this value. *)
          let (fi,x,tm) = _1 vars prims in
          Define (fi,x,tm), x::vars )}
| _1 = AssumeWord _2 = Environment _3 = COLONDASH _4 = Type _5 = SUBTYPE _6 = Type
    {      ( fun vars prims ->
          let ctx = _2 vars prims in
          let vars' = (var_list_from_ctx ctx) @ vars in
          Assume (ctx, _4 vars' prims, _6 vars' prims, _1), vars
      )}

AssumeWord:
  _1 = ASSUMENOT
    {              ( false )}
| _1 = ASSUME
    {              ( true )}

Environment:
  
    {                        ( fun vars prims -> empty_ctx )}
| _1 = NonEmptyEnvironment
    {                        ( _1 )}

NonEmptyEnvironment:
  _1 = Assumption
    {               ( fun vars prims ->
                   let var, bind = _1 vars prims in
                   add_binding empty_ctx var bind )}
| _1 = NonEmptyEnvironment _2 = COMMA _3 = Assumption
    {      ( fun vars prims ->
          let ctx = _1 vars prims in
          let vars' = var_list_from_ctx ctx in
          let var, bind = _3 (vars' @ vars) prims in
          add_binding ctx var bind
      )}

Assumption:
  _1 = ID _2 = COLON _3 = ident_free_term _4 = MaybeEqTerm
    {      ( fun vars prims ->
          _1.v, VarBind(_3 vars prims, _4 vars prims) )}
| _1 = ID _2 = COLON _3 = ident_free_term _4 = DOT _5 = term _6 = MaybeEqTerm
    {      ( fun vars prims ->
          let x = _1.v in
          let ty = _3 vars prims in
          x,
          VarBind(
            make_prim_app_sequence _1.i vars "Refine:" []
              [ty;
               TmFun(_1.i, x, ty, _5 (x::vars) prims)],
            _6 vars prims) )}

MaybeEqTerm:
  
    {                   ( fun vars prims -> None )}
| _1 = EQEQ _2 = term
    {                   ( fun vars prims -> Some (_2 vars prims) )}

Let:
  _1 = LET _2 = ID _3 = ParamSeq _4 = MaybeTy _5 = EQ _6 = term
    {      ( fun vars prims ->
          let params = _3 vars prims in
          let vars' =  (List.rev_map fst params) @ vars in
          let return = _4 vars' prims in
          let body = _6 vars' prims in
          _1, _2.v, make_lambda_sequence _1 vars params ?ret:return body
      )}
| _1 = LET _2 = REC _3 = ID _4 = ParamSeq _5 = MaybeTy _6 = EQ _7 = term
    {      ( fun vars prims ->
          _1, _3.v, (make_rec _1 vars prims _3.v
                       ~args:_4 ~ret:_5 ~body:_7)
      )}

Datatype:
  _1 = DATATYPE _2 = ID _3 = ParamSeq _4 = EQ _5 = ConstructorSeq
    {                                         (
    fun vars prims ->
      let params = _3 vars prims in
      let vars' = _2.v::((List.map (fun (x,ty) -> x) params) @ vars) in
      (_1, _2.v, params, _5 vars' prims)
 )}

ConstructorSeq:
  _1 = Constructor %prec VBAR
    {                               ( fun vars prims -> (_1 vars prims)::[] )}
| _1 = Constructor _2 = VBAR _3 = ConstructorSeq
    {                                     (
	fun vars prims -> (_1 vars prims)::(_3 (vars) prims)
	)}

Constructor:
  _1 = ID _2 = OF _3 = ParamSeq
    {      ( fun vars prims -> (_1.v, _3 vars prims) )}
| _1 = ID
    {      ( fun vars prims ->
          (*
          let (_, x) = pick_fresh_var vars "u" in
          let ty = TmPrimitive($1.i, "Unit", []) in
          *)
          (_1.v, []) )}

Type:
  _1 = term %prec ALWAYS_SHIFT
    {                               ( _1 )}

term:
  _1 = ID _2 = COLON _3 = ident_free_term _4 = DOT _5 = term
    {      ( fun vars prims ->
          make_refinement _1.i  vars _1.v
            (_3 vars prims)
            (_5 (_1.v::vars) prims) )}
| _1 = LCURLY _2 = ID _3 = COLON _4 = ident_free_term _5 = VBAR _6 = term _7 = RCURLY
    {      ( fun vars prims ->
          make_refinement _2.i  vars _2.v
            (_4 vars prims)
            (_6 (_2.v::vars) prims) )}
| _1 = ID _2 = COLON _3 = ident_free_term _4 = ARROW _5 = term %prec ABSTRACTION
    {      ( fun vars prims ->
          let x = _1.v in
          TmArrow(_1.i, x, _3 vars prims, _5 (x::vars) prims) )}
| _1 = ident_free_term %prec ARROW
    {                                  ( _1 )}

ident_free_term:
  _1 = LPAREN _2 = term _3 = RPAREN
    {                       ( _2 )}
| _1 = ID
    {       ( fun vars prims ->
           let fi = _1.i in
           if List.mem _1.v vars then
             var_to_term fi vars _1.v
           else if List.mem _1.v prims then
             tm_prim ~fi _1.v
           else
             error fi ("Identifier " ^ _1.v ^
                 " not bound to variable or primitive") )}
| _1 = LAMBDA _2 = ID _3 = COLON _4 = ident_free_term _5 = DOT _6 = term %prec ABSTRACTION
    {      ( fun vars prims ->
          let x = _2.v in
          TmFun(_1, x, _4 vars prims, _6 (x::vars) prims) )}
| _1 = Let _2 = IN _3 = term
    {      ( fun vars prims ->
          let (fi,x,arg) = _1 vars prims in
          TmLet(fi, x, arg, _3 (x::vars) prims) )}
| _1 = term _2 = ARROW _3 = term %prec ABSTRACTION
    {      ( fun vars prims ->
          let x = "_" in
          TmArrow(_2, x, _1 vars prims, _3 (x::vars) prims) )}
| _1 = term _2 = term %prec APPLICATION
    {      ( fun vars prims ->
          let t1 = _1 vars prims in
          let t2 = _2 vars prims in
          TmApp(tm_info t1, t1, t2) )}
| _1 = term _2 = AS _3 = term
    {      ( fun vars prims ->
          let tm = _1 vars prims in
          let ty = _3 vars prims in
          let info = tm_info tm in
          make_as info vars tm ty
      )}
| _1 = FN _2 = ParamSeq _3 = MaybeTy _4 = DARROW _5 = term %prec ABSTRACTION
    {      ( fun vars prims ->
          let params = _2 vars prims in
          let vars' =  (List.rev_map fst params) @ vars in
          let return = _3 vars' prims in
          let body = _5 vars' prims in
              make_lambda_sequence _1 vars params ?ret:return body
      )}
| _1 = REC _2 = ID _3 = ParamSeq _4 = MaybeTy _5 = DARROW _6 = term %prec ABSTRACTION
    {      ( fun vars prims ->
          make_rec _1 vars prims _2.v
            ~args:_3 ~ret:_4 ~body:_6
      )}
| _1 = term _2 = SEMI _3 = term
    {      ( fun vars prims ->
          let x = "_" in
          let t1 = _1 vars prims in
          let t2 = _3 (x::vars) prims in
          TmLet(tm_info t1, x, t1, t2) )}
| _1 = QUESTION
    {      ( fun vars prims -> tm_prim ~fi:_1 "Dynamic" )}
| _1 = STAR
    {      ( fun vars prims -> tm_prim ~fi:_1 "*" )}
| _1 = INTV
    {      ( fun vars prims -> tm_prim ~fi:_1.i (string_of_int _1.v) )}
| _1 = STRINGV
    {      ( fun vars prims -> tm_prim ~fi:_1.i ("\"" ^ _1.v ^ "\"") )}
| _1 = term _2 = EQ _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "inteq" []
            [_1 vars prims;
             _3 vars prims] )}
| _1 = term _2 = IFF _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "iff" []
            [_1 vars prims;
             _3 vars prims] )}
| _1 = term _2 = LEQ _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "leq" []
            [(_1 vars prims);
             (_3 vars prims)] )}
| _1 = term _2 = GEQ _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "geq" []
            [(_1 vars prims);
             (_3 vars prims)] )}
| _1 = term _2 = LT _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "lt" []
            [(_1 vars prims);
             (_3 vars prims)] )}
| _1 = term _2 = GT _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "gt" []
            [(_1 vars prims);
             (_3 vars prims)] )}
| _1 = term _2 = PLUS _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "add" []
            [(_1 vars prims); (_3 vars prims)] )}
| _1 = term _2 = MINUS _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "sub" []
            [(_1 vars prims); (_3 vars prims)] )}
| _1 = term _2 = AND _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "and" []
            [(_1 vars prims); (_3 vars prims)] )}
| _1 = term _2 = OR _3 = term
    {      ( fun vars prims ->
          make_prim_app_sequence _2 vars "or" []
            [(_1 vars prims); (_3 vars prims)] )}
| _1 = LCURLY _2 = LabelColonTyList _3 = RCURLY
    {      ( fun vars prims ->
          let labels, types = List.split (_2 vars prims) in
          make_prim_app_sequence _1 vars "Record" labels types
      )}
| _1 = LT _2 = LabelColonTyList _3 = GT
    {      ( fun vars prims ->
          let labels, types = List.split (_2 vars prims) in
          make_prim_app_sequence _1 vars "Variant" labels types
      )}
| _1 = LT _2 = ID _3 = EQ _4 = term _5 = GT
    {      ( fun vars prims ->
          let fi = _1 in
          let tm, ty = _4 vars prims, tm_prim ~fi "Dynamic" in
          make_prim_app_sequence fi vars "mkVariant" [_2.v] [ty; tm]
      )}
| _1 = IF _2 = LSQUARE _3 = Type _4 = RSQUARE _5 = term _6 = THEN _7 = term _8 = ELSE _9 = term
    {      ( fun vars prims ->
          let fi = _1 in
	      make_prim_app_sequence fi vars "IF" []
            [_3 vars prims;
	         _5 vars prims;
	         TmFun(fi, "_", tm_prim ~fi "Dynamic", _7 ("_"::vars) prims);
             TmFun(fi, "_", tm_prim ~fi "Dynamic", _9 ("_"::vars) prims) ]
      )}
| _1 = IF _2 = term _3 = THEN _4 = term _5 = ELSE _6 = term
    {      ( fun vars prims ->
          let fi = _1 in
	  let ph1 = tm_prim ~fi "Dynamic" in
	  let ph2 = tm_prim ~fi "Dynamic" in
	  let ph3 = tm_prim ~fi "Dynamic" in
	  make_prim_app_sequence fi vars "IF" []
            [ph1;
	     _2 vars prims;
	     TmFun(fi, "_", ph2, _4 ("_"::vars) prims);
             TmFun(fi, "_", ph3, _6 ("_"::vars) prims) ] )}

ParamSeq:
  
    {      ( fun vars prims -> [] )}
| _1 = Param _2 = ParamSeq
    {      ( fun vars prims ->
          let x,ty = _1 vars prims in
          (x,ty) :: (_2 (x::vars) prims) )}

Param:
  _1 = ID
    {      ( fun vars prims -> _1.v, tm_prim ~fi:_1.i "Dynamic" )}
| _1 = LPAREN _2 = ID _3 = COLON _4 = term _5 = RPAREN
    {      ( fun vars prims -> _2.v, _4 vars prims )}
| _1 = LPAREN _2 = ID _3 = COLON _4 = term _5 = DOT _6 = term _7 = RPAREN
    {      ( fun vars prims ->
          let ty = _4 vars prims in
          let refine = _6 (_2.v :: vars) prims in
          _2.v, make_refinement _2.i vars _2.v ty refine )}

MaybeTy:
  _1 = COLON _2 = term
    {                ( fun vars prims -> Some (_2 vars prims) )}
| 
    {                ( fun vars prims -> None )}

LabelColonTyList:
  _1 = NonEmptyLabelColonTyList
    {                             ( _1 )}
| 
    {                             ( fun vars prims -> [] )}

NonEmptyLabelColonTyList:
  _1 = ID _2 = COLON _3 = Type
    {      ( fun vars prims ->
          [_1.v, _3 vars prims] )}
| _1 = ID _2 = COLON _3 = Type _4 = COMMA _5 = NonEmptyLabelColonTyList
    {      ( fun vars prims ->
          let l = _1.v in
          (l, _3 vars prims) :: (_5 (l::vars) prims) )}

%%



