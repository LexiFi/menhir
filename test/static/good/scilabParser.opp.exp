File "scilabParser.mly", line 32, characters 36-42:
Warning: the token ANDAND is unused.
File "scilabParser.mly", line 43, characters 7-10:
Warning: the token EOF is unused.
File "scilabParser.mly", line 67, characters 10-22:
Warning: the token FUNCTIONCALL is unused.
File "scilabParser.mly", line 34, characters 37-46:
Warning: the token LINEBREAK is unused.
File "scilabParser.mly", line 33, characters 41-45:
Warning: the token OROR is unused.
File "scilabParser.mly", line 26, characters 7-10:
Warning: the token SOF is unused.
File "scilabParser.mly", line 27, characters 56-62:
Warning: the token SPACES is unused.
File "scilabParser.mly", line 36, characters 7-14:
Warning: the token WIERDOP is unused.
%{
  open ScilabAst
  open Lexing

  let extract_str_from_strExp exp = match exp.exp_desc with
    | ConstExp (StringExp strexp) -> strexp.stringExp_value
    | _ -> failwith "shouldn't happen"

  let create_loc start_pos end_pos =
    { first_line = start_pos.pos_lnum;
      first_column = (start_pos.pos_cnum - start_pos.pos_bol);
      last_line = end_pos.pos_lnum;
      last_column = (end_pos.pos_cnum - end_pos.pos_bol) }

  let create_exp loc desc =
    let infos = { is_verbose = false } in
    {exp_location = loc; exp_desc = desc; exp_info = infos}

  let create_dummy_exp () =
    create_exp dummy_loc (ConstExp (CommentExp { commentExp_comment = "dummy exp" }))

  let new_symbol s = ScilabSymbol.new_symbol s
  let simpleVar s = SimpleVar (new_symbol s)

%}
%start program
%token AND
%token ANDAND
%token ASSIGN
%token BOOLFALSE
%token BOOLTRUE
%token BREAK
%token CASE
%token CATCH
%token COLON
%token COMMA
%token <string> COMMENT
%token CONTINUE
%token CONTROLLDIVIDE
%token CONTROLRDIVIDE
%token CONTROLTIMES
%token DO
%token DOLLAR
%token DOT
%token DOTLDIVIDE
%token DOTPOWER
%token DOTQUOTE
%token DOTRDIVIDE
%token DOTTIMES
%token ELSE
%token ELSEIF
%token END
%token ENDFUNCTION
%token EOF
%token EOL
%token EQ
%token FOR
%token FUNCTION
%token GE
%token GT
%token HIDDEN
%token HIDDENFUNCTION
%token <string> ID
%token IF
%token KRONLDIVIDE
%token KRONRDIVIDE
%token KRONTIMES
%token LBRACE
%token LBRACK
%token LDIVIDE
%token LE
%token LINEBREAK
%token LPAREN
%token LT
%token MINUS
%token NE
%token NOT
%token <float> NUM
%token OR
%token OROR
%token OTHERWISE
%token PLUS
%token POWER
%token QUOTE
%token RBRACE
%token RBRACK
%token RDIVIDE
%token RETURN
%token RPAREN
%token SELECT
%token SEMI
%token SOF
%token SPACES
%token <string> STR
%token SWITCH
%token THEN
%token TIMES
%token TRY
%token <float> VARFLOAT
%token <float> VARINT
%token WHILE
%token WIERDOP
%nonassoc TOPLEVEL
%nonassoc HIGHLEVEL
%nonassoc UPLEVEL
%nonassoc LISTABLE
%nonassoc CONTROLBREAK
%left OR OROR
%left AND ANDAND
%left COLON COMMA
%left EQ GE GT LE LT NE
%left MINUS PLUS
%left CONTROLLDIVIDE CONTROLRDIVIDE CONTROLTIMES DOTLDIVIDE DOTRDIVIDE DOTTIMES KRONLDIVIDE KRONRDIVIDE KRONTIMES LDIVIDE RDIVIDE TIMES
%left DOTPOWER POWER
%left DOTQUOTE QUOTE
%left DOT
%left NOT
%nonassoc FUNCTIONCALL
%nonassoc BOOLFALSE BOOLTRUE
%nonassoc LBRACE LPAREN
%type <ScilabAst.ast> program
%%

program:
  _1 = expressions
    {                                                ( Exp _1 )}
| _1 = EOL _2 = expressions
    {                                                ( Exp _2 )}
| _1 = expressionLineBreak
    {                                                ( let seqexp = SeqExp [] in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  Exp (create_exp loc seqexp) )}
| 
    {                                                ( let seqexp = SeqExp [] in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  Exp (create_exp loc seqexp) )}

expressions:
  _1 = recursiveExpression
    {                                               ( let seqexp = SeqExp (List.rev _1) in
                                                 let off_st = Parsing.rhs_start_pos 1 in
                                                 let off_end = Parsing.rhs_end_pos 1 in
                                                 let loc = create_loc off_st off_end in
                                                 create_exp loc seqexp )}
| _1 = recursiveExpression _2 = expression
    {                                               ( let seqexp = SeqExp (List.rev (List.append (match _2.exp_desc with SeqExp l -> l | _ -> [_2]) _1)) in
                                                 let off_st = Parsing.rhs_start_pos 1 in
                                                 let off_end = Parsing.rhs_end_pos 2 in
                                                 let loc = create_loc off_st off_end in
                                                 create_exp loc seqexp )}
| _1 = recursiveExpression _2 = expression _3 = COMMENT
    {                                               ( let commentexp = CommentExp { commentExp_comment = _3 } in
                                                 let cmt_st = Parsing.rhs_start_pos 3 in
                                                 let cmt_end = Parsing.rhs_end_pos 3 in
                                                 let cmt_loc = create_loc cmt_st cmt_end in
                                                 let cmt_exp = create_exp cmt_loc (ConstExp commentexp) in
                                                 let seqexp = SeqExp (List.rev (List.append (List.append (match _2.exp_desc with SeqExp l -> l | _ -> [_2]) _1) [cmt_exp])) in
                                                 let off_st = Parsing.rhs_start_pos 1 in
                                                 let off_end = Parsing.rhs_end_pos 2 in
                                                 let loc = create_loc off_st off_end in
                                                 create_exp loc seqexp )}
| _1 = expression
    {                                               ( let seqexp = SeqExp (match _1.exp_desc with SeqExp l -> l | _ -> [_1]) in
                                                 let off_st = Parsing.rhs_start_pos 1 in
                                                 let off_end = Parsing.rhs_end_pos 1 in
                                                 let loc = create_loc off_st off_end in
                                                 create_exp loc seqexp )}
| _1 = expression _2 = COMMENT
    {                                               ( let commentexp = CommentExp { commentExp_comment = _2 } in
                                                 let cmt_st = Parsing.rhs_start_pos 2 in
                                                 let cmt_end = Parsing.rhs_end_pos 2 in
                                                 let cmt_loc = create_loc cmt_st cmt_end in
                                                 let cmt_exp = create_exp cmt_loc (ConstExp commentexp) in
                                                 let seqexp = SeqExp (
                                                   List.append (match _1.exp_desc with SeqExp l -> l | _ -> [_1]) [cmt_exp]) in
                                                 let off_st = Parsing.rhs_start_pos 1 in
                                                 let off_end = Parsing.rhs_end_pos 2 in
                                                 let loc = create_loc off_st off_end in
                                                 create_exp loc seqexp )}

recursiveExpression:
  _1 = recursiveExpression _2 = expression _3 = expressionLineBreak
    {                                                             ( List.append (match _2.exp_desc with SeqExp l -> l | _ -> [_2]) _1 )}
| _1 = recursiveExpression _2 = expression _3 = COMMENT _4 = expressionLineBreak
    {                                                             ( let commentexp = CommentExp { commentExp_comment = _3 } in
                                                               let cmt_st = Parsing.rhs_start_pos 3 in
                                                               let cmt_end = Parsing.rhs_end_pos 3 in
                                                               let cmt_loc = create_loc cmt_st cmt_end in
                                                               let cmt_exp = create_exp cmt_loc (ConstExp commentexp) in
                                                               cmt_exp::(List.append (match _2.exp_desc with SeqExp l -> l | _ -> [_2]) _1) )}
| _1 = expression _2 = COMMENT _3 = expressionLineBreak
    {                                                             ( let commentexp = CommentExp { commentExp_comment = _2 } in
                                                               let cmt_st = Parsing.rhs_start_pos 2 in
                                                               let cmt_end = Parsing.rhs_end_pos 2 in
                                                               let cmt_loc = create_loc cmt_st cmt_end in
                                                               let cmt_exp = create_exp cmt_loc (ConstExp commentexp) in
                                                               cmt_exp::(match _1.exp_desc with SeqExp l -> l | _ -> [_1]) )}
| _1 = expression _2 = expressionLineBreak
    {                                                             ( match _1.exp_desc with SeqExp l -> l | _ -> [_1] )}

expressionLineBreak:
  _1 = SEMI
    {                                              ( )}
| _1 = COMMA
    {                                              ( )}
| _1 = EOL
    {                                              ( )}
| _1 = expressionLineBreak _2 = SEMI
    {                                              ( )}
| _1 = expressionLineBreak _2 = COMMA
    {                                              ( )}
| _1 = expressionLineBreak _2 = EOL
    {                                              ( )}

expression:
  _1 = functionDeclaration
    {                         ( _1 )}
| _1 = functionCall %prec TOPLEVEL
    {                                                ( _1 )}
| _1 = variableDeclaration
    {                                                ( _1 )}
| _1 = ifControl
    {                                                ( _1 )}
| _1 = selectControl
    {                                                ( _1 )}
| _1 = forControl
    {                                                ( _1 )}
| _1 = whileControl
    {                                                ( _1 )}
| _1 = tryControl
    {                                                ( _1 )}
| _1 = variable %prec TOPLEVEL
    {                                                ( _1 )}
| _1 = implicitFunctionCall %prec TOPLEVEL
    {                                                ( let list = List.rev _1 in
                                                  let caller = List.hd list in
                                                  let args = List.tl list in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  let callexp = {callExp_name = caller;
                                                                 callExp_args = Array.of_list (List.rev args) } in
                                                  create_exp loc (CallExp callexp) )}
| _1 = BREAK
    {             ( let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (ControlExp BreakExp) )}
| _1 = CONTINUE
    {               ( let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (ControlExp ContinueExp) )}
| _1 = returnControl
    {                    ( _1 )}
| _1 = COMMENT
    {                                                ( let commentexp = CommentExp { commentExp_comment = _1 } in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (ConstExp commentexp) )}

implicitFunctionCall:
  _1 = implicitFunctionCall _2 = implicitCallable
    {                                                ( _2::_1 )}
| _1 = ID _2 = implicitCallable
    {                                                ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                  let varloc_end = Parsing.rhs_end_pos 1 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let var =
                                                    Var { var_location = varloc;
                                                          var_desc = simpleVar _1 } in
                                                  let varexp = create_exp varloc var in
                                                  _2::[varexp])}

implicitCallable:
  _1 = ID
    {                                                ( let strexp = StringExp
                                                    { stringExp_value = _1 ;
                                                      stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}
| _1 = VARINT
    {                                                ( let strexp = StringExp
                                                    { stringExp_value = string_of_float _1 ;
                                                      stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}
| _1 = NUM
    {                                                ( let strexp = StringExp
                                                    { stringExp_value = string_of_float _1 ;
                                                      stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}
| _1 = VARFLOAT
    {                                                ( let strexp = StringExp
                                                    { stringExp_value = string_of_float _1 ;
                                                      stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}
| _1 = STR
    {                                                ( let strexp = StringExp
                                                    { stringExp_value = _1 ;
                                                      stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}
| _1 = DOLLAR
    {                                                ( let strexp = StringExp
                                                    { stringExp_value = "$" ;
                                                      stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}
| _1 = BOOLTRUE
    {                                                ( let strexp = StringExp
                                                    { stringExp_value = "%t" ;
                                                      stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}
| _1 = BOOLFALSE
    {                                                ( let strexp = StringExp
                                                    { stringExp_value = "%f" ;
                                                      stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}
| _1 = implicitCallable _2 = DOT _3 = ID
    {                                                (  let strexp = StringExp
                                                     { stringExp_value =  (extract_str_from_strExp _1) ^ _3 ;
                                                       stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}

functionCall:
  _1 = simpleFunctionCall
    {                                                ( _1 )}
| _1 = specificFunctionCall
    {                                                ( _1 )}

specificFunctionCall:
  _1 = BOOLTRUE _2 = LPAREN _3 = functionArgs _4 = RPAREN
    {                                                ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                  let varloc_end = Parsing.rhs_end_pos 1 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let varexp =
                                                    Var { var_location = varloc;
                                                          var_desc = simpleVar "%t" } in
                                                  let callexp =
                                                    { callExp_name = create_exp varloc varexp;
                                                      callExp_args = Array.of_list (List.rev _3) } in
                                                  let fcall_st = Parsing.rhs_start_pos 1 in
                                                  let fcall_end = Parsing.rhs_end_pos 4 in
                                                  let loc = create_loc fcall_st fcall_end in
                                                  create_exp loc (CallExp callexp) )}
| _1 = BOOLFALSE _2 = LPAREN _3 = functionArgs _4 = RPAREN
    {                                                ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                  let varloc_end = Parsing.rhs_end_pos 1 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let varexp =
                                                    Var { var_location = varloc;
                                                          var_desc = simpleVar "%f" } in
                                                  let callexp =
                                                    { callExp_name = create_exp varloc varexp;
                                                      callExp_args = Array.of_list (List.rev _3) } in
                                                  let fcall_st = Parsing.rhs_start_pos 1 in
                                                  let fcall_end = Parsing.rhs_end_pos 4 in
                                                  let loc = create_loc fcall_st fcall_end in
                                                  create_exp loc (CallExp callexp) )}

simpleFunctionCall:
  _1 = ID _2 = LPAREN _3 = functionArgs _4 = RPAREN
    {                                                ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                  let varloc_end = Parsing.rhs_end_pos 1 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let varexp =
                                                    Var { var_location = varloc;
                                                          var_desc = simpleVar _1 } in
                                                  let callexp =
                                                    { callExp_name = create_exp varloc varexp;
                                                      callExp_args = Array.of_list (List.rev _3) } in
                                                  let fcall_st = Parsing.rhs_start_pos 1 in
                                                  let fcall_end = Parsing.rhs_end_pos 4 in
                                                  let loc = create_loc fcall_st fcall_end in
                                                  create_exp loc (CallExp callexp) )}

functionArgs:
  _1 = variable
    {                                                ( [_1] )}
| _1 = functionCall
    {                                                ( [_1] )}
| _1 = variableDeclaration
    {                                                ( [_1] )}
| 
    {                                                ( [] )}
| _1 = functionArgs _2 = COMMA _3 = variable
    {                                                ( _3::_1 )}
| _1 = functionArgs _2 = COMMA _3 = functionCall
    {                                                ( _3::_1 )}
| _1 = functionArgs _2 = COMMA _3 = variableDeclaration
    {                                               ( _3::_1 )}
| _1 = functionArgs _2 = COMMA
    {                                               ( _1 )}

functionDeclaration:
  _1 = FUNCTION _2 = ID _3 = ASSIGN _4 = ID _5 = functionDeclarationArguments _6 = functionDeclarationBreak _7 = functionBody _8 = functionDelimiter
    {                                                                                                             (
  let ret_st =  Parsing.rhs_start_pos 2 in
  let ret_end = Parsing.rhs_end_pos 2 in
  let ret_loc = create_loc ret_st ret_end in
  let var_ret = { var_location = ret_loc ;
                  var_desc = simpleVar _2 } in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list [var_ret] } in
  let args_st = Parsing.rhs_start_pos 5 in
  let args_end = Parsing.rhs_end_pos 5 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _5 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 8 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _4;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _7 } in
  create_exp fundec_loc (Dec fundec) )}
| _1 = FUNCTION _2 = COMMENT _3 = ID _4 = COMMENT _5 = ASSIGN _6 = ID _7 = functionDeclarationArguments _8 = functionDeclarationBreak _9 = functionBody _10 = functionDelimiter
    {                                                                                                                             (
  let ret_st =  Parsing.rhs_start_pos 3 in
  let ret_end = Parsing.rhs_end_pos 3 in
  let ret_loc = create_loc ret_st ret_end in
  let var_ret = { var_location = ret_loc ;
                  var_desc = simpleVar _3 } in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list [var_ret] } in
  let args_st = Parsing.rhs_start_pos 7 in
  let args_end = Parsing.rhs_end_pos 7 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _7 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 10 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _6;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _9 } in
  create_exp fundec_loc (Dec fundec) )}
| _1 = FUNCTION _2 = COMMENT _3 = LBRACK _4 = functionDeclarationReturns _5 = RBRACK _6 = COMMENT _7 = ASSIGN _8 = ID _9 = functionDeclarationArguments _10 = functionDeclarationBreak _11 = functionBody _12 = functionDelimiter
    {                                                                                                                                                                   (
  let ret_st =  Parsing.rhs_start_pos 4 in
  let ret_end = Parsing.rhs_end_pos 4 in
  let ret_loc = create_loc ret_st ret_end in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list _4 } in
  let args_st = Parsing.rhs_start_pos 9 in
  let args_end = Parsing.rhs_end_pos 9 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _9 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 12 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _8;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _11 } in
  create_exp fundec_loc (Dec fundec) )}
| _1 = FUNCTION _2 = LBRACK _3 = functionDeclarationReturns _4 = RBRACK _5 = ASSIGN _6 = ID _7 = functionDeclarationArguments _8 = functionDeclarationBreak _9 = functionBody _10 = functionDelimiter
    {                                                                                                                                                   (
  let ret_st =  Parsing.rhs_start_pos 3 in
  let ret_end = Parsing.rhs_end_pos 3 in
  let ret_loc = create_loc ret_st ret_end in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list _3 } in
  let args_st = Parsing.rhs_start_pos 7 in
  let args_end = Parsing.rhs_end_pos 7 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _7 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 10 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _6;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _9 } in
  create_exp fundec_loc (Dec fundec) )}
| _1 = FUNCTION _2 = LBRACK _3 = RBRACK _4 = ASSIGN _5 = ID _6 = functionDeclarationArguments _7 = functionDeclarationBreak _8 = functionBody _9 = functionDelimiter
    {                                                                                                                        (
  let ret_st =  Parsing.rhs_start_pos 2 in
  let ret_end = Parsing.rhs_end_pos 3 in
  let ret_loc = create_loc ret_st ret_end in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list [] } in
  let args_st = Parsing.rhs_start_pos 6 in
  let args_end = Parsing.rhs_end_pos 6 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _6 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 9 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _5;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _8 } in
  create_exp fundec_loc (Dec fundec) )}
| _1 = FUNCTION _2 = ID _3 = functionDeclarationArguments _4 = functionDeclarationBreak _5 = functionBody _6 = functionDelimiter
    {                                                                                                   (
  let ret_st =  Parsing.rhs_start_pos 1 in
  let ret_end = Parsing.rhs_end_pos 6 in
  let ret_loc = create_loc ret_st ret_end in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list [] } in
  let args_st = Parsing.rhs_start_pos 3 in
  let args_end = Parsing.rhs_end_pos 3 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _3 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 6 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _2;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _5 } in
  create_exp fundec_loc (Dec fundec) )}
| _1 = hiddenFun _2 = ID _3 = ASSIGN _4 = ID _5 = functionDeclarationArguments _6 = functionDeclarationBreak _7 = functionBody _8 = functionDelimiter
    {                                                                                                              (
  let ret_st =  Parsing.rhs_start_pos 2 in
  let ret_end = Parsing.rhs_end_pos 2 in
  let ret_loc = create_loc ret_st ret_end in
  let var_ret = { var_location = ret_loc ;
                  var_desc = simpleVar _2 } in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list [var_ret] } in
  let args_st = Parsing.rhs_start_pos 5 in
  let args_end = Parsing.rhs_end_pos 5 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _5 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 8 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _4;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _7 } in
  create_exp fundec_loc (Dec fundec) )}
| _1 = hiddenFun _2 = LBRACK _3 = functionDeclarationReturns _4 = RBRACK _5 = ASSIGN _6 = ID _7 = functionDeclarationArguments _8 = functionDeclarationBreak _9 = functionBody _10 = functionDelimiter
    {                                                                                                                                                    (
  let ret_st =  Parsing.rhs_start_pos 3 in
  let ret_end = Parsing.rhs_end_pos 3 in
  let ret_loc = create_loc ret_st ret_end in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list _3 } in
  let args_st = Parsing.rhs_start_pos 7 in
  let args_end = Parsing.rhs_end_pos 7 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _7 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 10 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _6;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _9 } in
  create_exp fundec_loc (Dec fundec) )}
| _1 = hiddenFun _2 = LBRACK _3 = RBRACK _4 = ASSIGN _5 = ID _6 = functionDeclarationArguments _7 = functionDeclarationBreak _8 = functionBody _9 = functionDelimiter
    {                                                                                                                         (
  let ret_st =  Parsing.rhs_start_pos 2 in
  let ret_end = Parsing.rhs_end_pos 3 in
  let ret_loc = create_loc ret_st ret_end in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list [] } in
  let args_st = Parsing.rhs_start_pos 6 in
  let args_end = Parsing.rhs_end_pos 6 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _6 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 9 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _5;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _8 } in
  create_exp fundec_loc (Dec fundec) )}
| _1 = hiddenFun _2 = ID _3 = functionDeclarationArguments _4 = functionDeclarationBreak _5 = functionBody _6 = functionDelimiter
    {                                                                                                    (
  let ret_st =  Parsing.rhs_start_pos 1 in
  let ret_end = Parsing.rhs_end_pos 6 in
  let ret_loc = create_loc ret_st ret_end in
  let ret_var_array = { arrayListVar_location = ret_loc;
                        arrayListVar_vars = Array.of_list [] } in
  let args_st = Parsing.rhs_start_pos 3 in
  let args_end = Parsing.rhs_end_pos 3 in
  let args_loc = create_loc args_st args_end in
  let args_var_array = { arrayListVar_location = args_loc;
                         arrayListVar_vars = Array.of_list _3 } in
  let fundec_st = Parsing.rhs_start_pos 1 in
  let fundec_end = Parsing.rhs_end_pos 6 in
  let fundec_loc = create_loc fundec_st fundec_end in
  let fundec = FunctionDec { functionDec_location = fundec_loc;
                             functionDec_symbol = new_symbol _2;
                             functionDec_args = args_var_array;
                             functionDec_returns = ret_var_array;
                             functionDec_body = _5 } in
  create_exp fundec_loc (Dec fundec) )}

functionDelimiter:
  _1 = END
    {                                                    ( )}
| _1 = ENDFUNCTION
    {                                                    ( )}

hiddenFun:
  _1 = HIDDENFUNCTION
    {                                                    ( )}
| _1 = HIDDEN _2 = FUNCTION
    {                                                    ( )}

functionDeclarationReturns:
  _1 = idList
    {                                                ( List.rev _1 )}

functionDeclarationArguments:
  _1 = LPAREN _2 = idList _3 = RPAREN
    {                                                ( List.rev _2 )}
| _1 = LPAREN _2 = RPAREN
    {                                                ( [] )}
| 
    {                                                ( [] )}

idList:
  _1 = idList _2 = COMMA _3 = ID
    {                                                ( let varloc_st = Parsing.rhs_start_pos 3 in
                                                  let varloc_end = Parsing.rhs_end_pos 3 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let varexp = { var_location = varloc;
                                                                 var_desc = simpleVar _3 } in
                                                  varexp::_1 )}
| _1 = ID
    {                                                ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                  let varloc_end = Parsing.rhs_end_pos 1 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let varexp = { var_location = varloc;
                                                                 var_desc = simpleVar _1 } in
                                                  [varexp] )}

functionDeclarationBreak:
  _1 = lineEnd
    {            ( )}
| _1 = SEMI
    {          ( )}
| _1 = SEMI _2 = EOL
    {             ( )}
| _1 = COMMA
    {           ( )}
| _1 = COMMA _2 = EOL
    {              ( )}
| _1 = COMMA _2 = COMMA
    {                                ( )}

functionBody:
  _1 = expressions
    {                                 ( _1 )}
| 
    {                                 ( let off_st = Parsing.rhs_start_pos 1 in
                                   let off_end = Parsing.rhs_end_pos 1 in
                                   let loc =
                                     create_loc off_st off_end in
                                   create_exp loc (SeqExp []) )}

condition:
  _1 = functionCall %prec HIGHLEVEL
    {                                                ( _1 )}
| _1 = variable %prec HIGHLEVEL
    {                                                ( _1 )}

comparison:
  _1 = variable _2 = AND _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpLogicalExp_logicalAnd in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (LogicalOpExp (oper,args))) )}
| _1 = variable _2 = AND _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpLogicalExp_logicalAnd in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (LogicalOpExp (oper,args))) )}
| _1 = functionCall _2 = AND _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpLogicalExp_logicalAnd in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (LogicalOpExp (oper,args))) )}
| _1 = functionCall _2 = AND _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpLogicalExp_logicalAnd in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (LogicalOpExp (oper,args))) )}
| _1 = variable _2 = OR _3 = variable
    {                                               ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpLogicalExp_logicalOr in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (LogicalOpExp (oper,args))) )}
| _1 = variable _2 = OR _3 = functionCall
    {                                               ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpLogicalExp_logicalOr in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (LogicalOpExp (oper,args))) )}
| _1 = functionCall _2 = OR _3 = variable
    {                                               ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpLogicalExp_logicalOr in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (LogicalOpExp (oper,args))) )}
| _1 = functionCall _2 = OR _3 = functionCall
    {                                               ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpLogicalExp_logicalOr in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (LogicalOpExp (oper,args))) )}
| _1 = variable _2 = EQ _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_eq in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = EQ _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_eq in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = EQ _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_eq in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = EQ _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_eq in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = NE _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_ne in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = NE _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_ne in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = NE _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_ne in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = NE _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_ne in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = LT _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_lt in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = LT _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_lt in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = LT _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_lt in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = LT _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_lt in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = GT _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_gt in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = GT _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_gt in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = GT _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_gt in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = GT _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_gt in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = LE _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_le in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = LE _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_le in
                                                  let args = { opExp_left  = _1 ;
                                                              opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = LE _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_le in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = LE _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_le in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = GE _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_ge in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = GE _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_ge in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = GE _3 = variable
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_ge in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = GE _3 = functionCall
    {                                                ( let cmploc_st = Parsing.rhs_start_pos 1 in
                                                  let cmploc_end = Parsing.rhs_end_pos 3 in
                                                  let cmploc = create_loc cmploc_st cmploc_end in
                                                  let oper = OpExp_ge in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp cmploc (MathExp (OpExp (oper,args))) )}

operation:
  _1 = variable _2 = PLUS _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_plus in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = PLUS _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_plus in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = PLUS _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_plus in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = PLUS _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_plus in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = MINUS _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_minus in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = MINUS _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_minus in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = MINUS _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_minus in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = MINUS _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_minus in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = TIMES _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_times in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = TIMES _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_times in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = TIMES _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_times in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = TIMES _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_times in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = DOTTIMES _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dottimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = DOTTIMES _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dottimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = DOTTIMES _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dottimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = DOTTIMES _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dottimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = KRONTIMES _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_krontimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = KRONTIMES _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_krontimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = KRONTIMES _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_krontimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = KRONTIMES _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_krontimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = CONTROLTIMES _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controltimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = CONTROLTIMES _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controltimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = CONTROLTIMES _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controltimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = CONTROLTIMES _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controltimes in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = RDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_rdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = RDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_rdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = RDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_rdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = RDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_rdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = DOTRDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dotrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = DOTRDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dotrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = DOTRDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dotrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = DOTRDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dotrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = KRONRDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_kronrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = KRONRDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_kronrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = KRONRDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_kronrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = KRONRDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_kronrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = CONTROLRDIVIDE _3 = variable
    {                                                    ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controlrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = CONTROLRDIVIDE _3 = functionCall
    {                                                    ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controlrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = CONTROLRDIVIDE _3 = variable
    {                                                    ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controlrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = CONTROLRDIVIDE _3 = functionCall
    {                                                    ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controlrdivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = LDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_ldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = LDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_ldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = LDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_ldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = LDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_ldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = DOTLDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dotldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = DOTLDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dotldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = DOTLDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dotldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = DOTLDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_dotldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = KRONLDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_kronldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = KRONLDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_kronldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = KRONLDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_kronldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = KRONLDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_kronldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = CONTROLLDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controlldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = CONTROLLDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controlldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = CONTROLLDIVIDE _3 = variable
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controlldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = CONTROLLDIVIDE _3 = functionCall
    {                                                ( let oploc_st = Parsing.rhs_start_pos 1 in
                                                  let oploc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc oploc_st oploc_end in
                                                  let oper = OpExp_controlldivide in
                                                  let args = { opExp_left  = _1 ;
                                                               opExp_right = _3 ;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = POWER _3 = variable
    {                                                ( let powloc_st = Parsing.rhs_start_pos 1 in
                                                  let powloc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc powloc_st powloc_end in
                                                  let oper = OpExp_power in
                                                  let left = _1 in
                                                  let right = _3 in
                                                  let args = { opExp_left  = left ;
                                                               opExp_right = right;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = POWER _3 = functionCall
    {                                                ( let powloc_st = Parsing.rhs_start_pos 1 in
                                                  let powloc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc powloc_st powloc_end in
                                                  let oper = OpExp_power in
                                                  let left = _1 in
                                                  let right = _3 in
                                                  let args = { opExp_left  = left ;
                                                               opExp_right = right;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = POWER _3 = variable
    {                                      ( let powloc_st = Parsing.rhs_start_pos 1 in
                                                 let powloc_end = Parsing.rhs_end_pos 3 in
                                                 let oploc = create_loc powloc_st powloc_end in
                                                 let oper = OpExp_power in
                                                 let left = _1 in
                                                 let right = _3 in
                                                 let args = { opExp_left  = left ;
                                                              opExp_right = right;
                                                              opExp_kind  = OpExp_invalid_kind } in
                                                 create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = POWER _3 = functionCall
    {                                               ( let powloc_st = Parsing.rhs_start_pos 1 in
                                                 let powloc_end = Parsing.rhs_end_pos 3 in
                                                 let oploc = create_loc powloc_st powloc_end in
                                                 let oper = OpExp_power in
                                                 let left = _1 in
                                                 let right = _3 in
                                                 let args = { opExp_left  = left ;
                                                              opExp_right = right;
                                                              opExp_kind  = OpExp_invalid_kind } in
                                                 create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = DOTPOWER _3 = variable
    {                                                   ( let powloc_st = Parsing.rhs_start_pos 1 in
                                                  let powloc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc powloc_st powloc_end in
                                                  let oper = OpExp_dotpower in
                                                  let left = _1 in
                                                  let right = _3 in
                                                  let args = { opExp_left  = left ;
                                                               opExp_right = right;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = variable _2 = DOTPOWER _3 = functionCall
    {                                                   ( let powloc_st = Parsing.rhs_start_pos 1 in
                                                  let powloc_end = Parsing.rhs_end_pos 3 in
                                                  let oploc = create_loc powloc_st powloc_end in
                                                  let oper = OpExp_dotpower in
                                                  let left = _1 in
                                                  let right = _3 in
                                                  let args = { opExp_left  = left ;
                                                               opExp_right = right;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = DOTPOWER _3 = variable
    {                                         ( let powloc_st = Parsing.rhs_start_pos 1 in
                                                 let powloc_end = Parsing.rhs_end_pos 3 in
                                                 let oploc = create_loc powloc_st powloc_end in
                                                 let oper = OpExp_dotpower in
                                                 let left = _1 in
                                                 let right = _3 in
                                                 let args = { opExp_left  = left ;
                                                              opExp_right = right;
                                                              opExp_kind  = OpExp_invalid_kind } in
                                                 create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = functionCall _2 = DOTPOWER _3 = functionCall
    {                                                  ( let powloc_st = Parsing.rhs_start_pos 1 in
                                                 let powloc_end = Parsing.rhs_end_pos 3 in
                                                 let oploc = create_loc powloc_st powloc_end in
                                                 let oper = OpExp_dotpower in
                                                 let left = _1 in
                                                 let right = _3 in
                                                 let args = { opExp_left  = left ;
                                                              opExp_right = right;
                                                              opExp_kind  = OpExp_invalid_kind } in
                                                 create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = MINUS _2 = variable
    {                                                ( let minloc_st = Parsing.rhs_start_pos 1 in
                                                  let minloc_end = Parsing.rhs_end_pos 2 in
                                                  let oploc = create_loc minloc_st minloc_end in
                                                  let oper = OpExp_unaryMinus in
                                                  let dummy_exp = DoubleExp
                                                    { doubleExp_value = 0.0;
                                                      doubleExp_bigDouble = () } in
                                                  let left = create_exp dummy_loc (ConstExp dummy_exp) in
                                                  let right = _2 in
                                                  let args = { opExp_left  = left ;
                                                               opExp_right = right;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = MINUS _2 = functionCall
    {                                                ( let minloc_st = Parsing.rhs_start_pos 1 in
                                                  let minloc_end = Parsing.rhs_end_pos 2 in
                                                  let oploc = create_loc minloc_st minloc_end in
                                                  let oper = OpExp_unaryMinus in
                                                  let dummy_exp = DoubleExp
                                                    { doubleExp_value = 0.0;
                                                      doubleExp_bigDouble = () } in
                                                  let left = create_exp dummy_loc (ConstExp dummy_exp) in
                                                  let right = _2 in
                                                  let args = { opExp_left  = left ;
                                                               opExp_right = right;
                                                               opExp_kind  = OpExp_invalid_kind } in
                                                  create_exp oploc (MathExp (OpExp (oper,args))) )}
| _1 = PLUS _2 = variable
    {                                                ( _2 )}
| _1 = PLUS _2 = functionCall
    {                                                ( _2 )}
| _1 = variable _2 = QUOTE
    {                          ( let tloc_st = Parsing.rhs_start_pos 1 in
                                                 let tloc_end = Parsing.rhs_end_pos 2 in
                                                 let tloc = create_loc tloc_st tloc_end in
                                                 let texp = { transposeExp_exp = _1;
                                                              transposeExp_conjugate = Conjugate} in
                                                 create_exp tloc (MathExp (TransposeExp texp)) )}
| _1 = functionCall _2 = QUOTE
    {                              ( let tloc_st = Parsing.rhs_start_pos 1 in
                                                 let tloc_end = Parsing.rhs_end_pos 2 in
                                                 let tloc = create_loc tloc_st tloc_end in
                                                 let texp = { transposeExp_exp = _1;
                                                              transposeExp_conjugate = Conjugate} in
                                                 create_exp tloc (MathExp (TransposeExp texp)) )}
| _1 = variable _2 = DOTQUOTE
    {                             ( let tloc_st = Parsing.rhs_start_pos 1 in
                                                 let tloc_end = Parsing.rhs_end_pos 2 in
                                                 let tloc = create_loc tloc_st tloc_end in
                                                 let texp = { transposeExp_exp = _1;
                                                              transposeExp_conjugate = NonConjugate} in
                                                 create_exp tloc (MathExp (TransposeExp texp)) )}
| _1 = functionCall _2 = DOTQUOTE
    {                                 ( let tloc_st = Parsing.rhs_start_pos 1 in
                                                 let tloc_end = Parsing.rhs_end_pos 2 in
                                                 let tloc = create_loc tloc_st tloc_end in
                                                 let texp = { transposeExp_exp = _1;
                                                              transposeExp_conjugate = NonConjugate} in
                                                 create_exp tloc (MathExp (TransposeExp texp)) )}

listableBegin:
  _1 = COLON _2 = variable
    {                                                ( _2 )}
| _1 = COLON _2 = functionCall
    {                                                ( _2 )}

listableEnd:
  _1 = listableBegin _2 = COLON _3 = variable
    {                                                ( { listExp_start = create_dummy_exp ();
                                                    listExp_step  = _1;
                                                    listExp_end   = _3 } )}
| _1 = listableBegin _2 = COLON _3 = functionCall
    {                                                ( { listExp_start = create_dummy_exp ();
                                                    listExp_step  = _1;
                                                    listExp_end   = _3 } )}
| _1 = listableBegin %prec LISTABLE
    {                                                ( let step_st = Parsing.rhs_start_pos 1  in
                                                  let step_end = Parsing.rhs_start_pos 1 in
                                                  let steploc = create_loc step_st step_end in
                                                  let stepexp =
                                                    DoubleExp { doubleExp_value = 1.0;
                                                                doubleExp_bigDouble = ()} in
                                                  let step_1 = create_exp steploc (ConstExp stepexp) in
                                                  { listExp_start = create_dummy_exp ();
                                                    listExp_step  = step_1;
                                                    listExp_end   = _1 } )}

variable:
  _1 = NOT _2 = variable %prec NOT
    {                                         ( let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 7 in
                                                  let loc = create_loc off_st off_end in
                                                  let nexp = NotExp { notExp_exp = _2 } in
                                                  create_exp loc (MathExp nexp) )}
| _1 = NOT _2 = functionCall %prec NOT
    {                                             ( let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 7 in
                                                  let loc = create_loc off_st off_end in
                                                  let nexp = NotExp { notExp_exp = _2 } in
                                                  create_exp loc (MathExp nexp) )}
| _1 = variable _2 = DOT _3 = ID %prec UPLEVEL
    {                                                ( let varloc_st = Parsing.rhs_start_pos 3 in
                                                  let varloc_end = Parsing.rhs_end_pos 3 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let varexp =
                                                    Var { var_location = varloc;
                                                          var_desc = simpleVar _3 } in
                                                  let fieldexp = { fieldExp_head = _1 ;
                                                                  fieldExp_tail = create_exp varloc varexp } in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = variable _2 = DOT _3 = keywords %prec UPLEVEL
    {                                              ( let fieldexp = { fieldExp_head = _1 ;
                                                                   fieldExp_tail = _3 } in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = variable _2 = DOT _3 = functionCall
    {                              ( let fieldexp = { fieldExp_head = _1 ;
                                                                   fieldExp_tail = _3 } in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = functionCall _2 = DOT _3 = variable
    {                              ( let fieldexp = { fieldExp_head = _1 ;
                                                                   fieldExp_tail = _3 } in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = functionCall _2 = DOT _3 = keywords
    {                                                ( let fieldexp = { fieldExp_head = _1 ;
                                                                   fieldExp_tail = _3 } in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = functionCall _2 = DOT _3 = functionCall
    {                                  ( let fieldexp = { fieldExp_head = _1 ;
                                                                   fieldExp_tail = _3 } in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = variable _2 = listableEnd
    {                                        ( let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 7 in
                                                  let loc = create_loc off_st off_end in
                                                  let lexp = { _2 with listExp_start = _1 } in
                                                  create_exp loc (ListExp lexp) )}
| _1 = functionCall _2 = listableEnd %prec UPLEVEL
    {                                                ( let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 7 in
                                                  let loc = create_loc off_st off_end in
                                                  let lexp = { _2 with listExp_start = _1 } in
                                                  create_exp loc (ListExp lexp) )}
| _1 = matrix
    {                                                ( _1 )}
| _1 = cell
    {                                                ( _1 )}
| _1 = operation %prec UPLEVEL
    {                                   ( _1 )}
| _1 = ID %prec LISTABLE
    {                                                ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                  let varloc_end = Parsing.rhs_end_pos 1 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let varexp =
                                                    Var { var_location = varloc;
                                                          var_desc = simpleVar _1 } in
                                                  create_exp varloc varexp )}
| _1 = VARINT %prec LISTABLE
    {                                                ( let doubleexp =
                                                    DoubleExp { doubleExp_value = _1;
                                                                doubleExp_bigDouble = ()} in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (ConstExp doubleexp) )}
| _1 = NUM %prec LISTABLE
    {                                                ( let doubleexp =
                                                    DoubleExp { doubleExp_value = _1;
                                                                doubleExp_bigDouble = ()} in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (ConstExp doubleexp) )}
| _1 = STR
    {                                                ( let strexp = StringExp
                                                    { stringExp_value = _1 ;
                                                      stringExp_bigString = () } in
                                                  let str_st = Parsing.rhs_start_pos 1 in
                                                  let str_end = Parsing.rhs_end_pos 1 in
                                                  let str_loc = create_loc str_st str_end in
                                                  create_exp str_loc (ConstExp strexp) )}
| _1 = DOLLAR
    {                                                ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                  let varloc_end = Parsing.rhs_end_pos 1 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let varexp =
                                                    Var { var_location = varloc;
                                                          var_desc = DollarVar } in
                                                  create_exp varloc varexp )}
| _1 = COLON
    {                                                ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                  let varloc_end = Parsing.rhs_end_pos 1 in
                                                  let varloc = create_loc varloc_st varloc_end in
                                                  let varexp =
                                                    Var { var_location = varloc;
                                                          var_desc = ColonVar } in
                                                  create_exp varloc varexp )}
| _1 = BOOLTRUE %prec BOOLTRUE
    {                                                ( let doubleexp =
                                                    BoolExp { boolExp_value = true;
                                                              boolExp_bigBool = ()} in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (ConstExp doubleexp) )}
| _1 = BOOLFALSE %prec BOOLFALSE
    {                                                ( let doubleexp =
                                                    BoolExp { boolExp_value = true;
                                                              boolExp_bigBool = ()} in
                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc = create_loc off_st off_end in
                                                  create_exp loc (ConstExp doubleexp) )}
| _1 = LPAREN _2 = variableFields _3 = RPAREN
    {                                 ( _2 )}
| _1 = comparison
    {                                                ( _1 )}
| _1 = variable _2 = LPAREN _3 = functionArgs _4 = RPAREN
    {                                                ( let callexp =
                                                    { callExp_name = _1;
                                                      callExp_args = Array.of_list (List.rev _3)} in
                                                  let fcall_st = Parsing.rhs_start_pos 1 in
                                                  let fcall_end = Parsing.rhs_end_pos 4 in
                                                  let loc = create_loc fcall_st fcall_end in
                                                  create_exp loc (CallExp callexp) )}
| _1 = functionCall _2 = LPAREN _3 = functionArgs _4 = RPAREN
    {                                                ( let callexp =
                                                    { callExp_name = _1;
                                                      callExp_args = Array.of_list (List.rev _3)} in
                                                  let fcall_st = Parsing.rhs_start_pos 1 in
                                                  let fcall_end = Parsing.rhs_end_pos 4 in
                                                  let loc = create_loc fcall_st fcall_end in
                                                  create_exp loc (CallExp callexp) )}

variableField:
  _1 = variable
    {                      ( _1 )}
| _1 = functionCall
    {                      ( _1 )}

variableFields:
  _1 = variableFields _2 = COMMA _3 = variableFields
    {                                                ( _1 )}
| _1 = variableField
    {                                                ( _1 )}
| 
    {                                                ( let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc =
                                                    create_loc off_st off_end in
                                                  create_exp loc (SeqExp []) )}

ifControl:
  _1 = IF _2 = condition _3 = thenTok _4 = thenBody _5 = END
    {                                                      ( let ifexp = IfExp
                                                          { ifExp_test = _2;
                                                            ifExp_then = _4;
                                                            ifExp_else = None;
                                                            ifExp_kind =
                                                              IfExp_expression_kind } in
                                                        let off_st = Parsing.rhs_start_pos 1 in
                                                        let off_end = Parsing.rhs_end_pos 5 in
                                                        let loc =
                                                          create_loc off_st off_end in
                                                        create_exp loc (ControlExp ifexp) )}
| _1 = IF _2 = condition _3 = thenTok _4 = thenBody _5 = elseTok _6 = elseBody _7 = END
    {                                                      ( let ifexp = IfExp
                                                          { ifExp_test = _2;
                                                            ifExp_then = _4;
                                                            ifExp_else = _6;
                                                            ifExp_kind =
                                                              IfExp_expression_kind } in
                                                        let off_st = Parsing.rhs_start_pos 1 in
                                                        let off_end = Parsing.rhs_end_pos 7 in
                                                        let loc =
                                                          create_loc off_st off_end in
                                                        create_exp loc (ControlExp ifexp) )}
| _1 = IF _2 = condition _3 = thenTok _4 = thenBody _5 = elseIfControl _6 = END
    {                                                         ( let ifexp = IfExp
                                                             { ifExp_test = _2;
                                                               ifExp_then = _4;
                                                               ifExp_else = Some _5;
                                                               ifExp_kind =
                                                                 IfExp_expression_kind } in
                                                        let off_st = Parsing.rhs_start_pos 1 in
                                                        let off_end = Parsing.rhs_end_pos 7 in
                                                        let loc =
                                                          create_loc off_st off_end in
                                                        create_exp loc (ControlExp ifexp) )}

thenBody:
  
    {                                               ( let off_st = Parsing.rhs_start_pos 1 in
                                                 let off_end = Parsing.rhs_end_pos 1 in
                                                 let loc =
                                                   create_loc off_st off_end in
                                                 create_exp loc (SeqExp []) )}
| _1 = expressions
    {                                               ( _1 )}

elseBody:
  
    {                                               ( None )}
| _1 = expressions
    {                                               ( Some _1 )}

ifConditionBreak:
  _1 = SEMI
    {            ( )}
| _1 = SEMI _2 = EOL
    {               ( )}
| _1 = COMMA
    {             ( )}
| _1 = COMMA _2 = EOL
    {                ( )}
| _1 = EOL
    {           ( )}

thenTok:
  _1 = THEN
    {                                                ( )}
| _1 = ifConditionBreak _2 = THEN
    {                           ( )}
| _1 = ifConditionBreak _2 = THEN _3 = EOL
    {                              ( )}
| _1 = THEN _2 = ifConditionBreak
    {                           ( )}
| _1 = ifConditionBreak
    {                      ( )}
| 
    {                                                ( )}

elseTok:
  _1 = ELSE
    {            ( )}
| _1 = ELSE _2 = COMMA
    {                 ( )}
| _1 = ELSE _2 = SEMI
    {                ( )}
| _1 = ELSE _2 = EOL
    {               ( )}
| _1 = ELSE _2 = COMMA _3 = EOL
    {                    ( )}
| _1 = ELSE _2 = SEMI _3 = EOL
    {                    ( )}

elseIfControl:
  _1 = ELSEIF _2 = condition _3 = thenTok _4 = thenBody
    {                                                      ( let ifexp =
                                                          ControlExp
                                                            (IfExp
                                                               { ifExp_test = _2;
                                                                 ifExp_then = _4;
                                                                 ifExp_else = None;
                                                                 ifExp_kind =
                                                                   IfExp_expression_kind }) in
                                                        let off_st = Parsing.rhs_start_pos 1 in
                                                        let off_end = Parsing.rhs_end_pos 4 in
                                                        let loc =
                                                          create_loc off_st off_end in
                                                        create_exp loc
                                                          (SeqExp [create_exp loc ifexp]) )}
| _1 = ELSEIF _2 = condition _3 = thenTok _4 = thenBody _5 = elseTok _6 = elseBody
    {                                                      ( let ifexp =
                                                          ControlExp
                                                            (IfExp
                                                               { ifExp_test = _2;
                                                                 ifExp_then = _4;
                                                                 ifExp_else = _6;
                                                                 ifExp_kind =
                                                                   IfExp_expression_kind }) in
                                                        let off_st = Parsing.rhs_start_pos 1 in
                                                        let off_end = Parsing.rhs_end_pos 6 in
                                                        let loc =
                                                          create_loc off_st off_end in
                                                        create_exp loc
                                                          (SeqExp [create_exp loc ifexp]) )}
| _1 = ELSEIF _2 = condition _3 = thenTok _4 = thenBody _5 = elseIfControl
    {                                                      ( let ifexp = ControlExp
                                                          (IfExp
                                                             { ifExp_test = _2;
                                                               ifExp_then = _4;
                                                               ifExp_else = Some _5;
                                                               ifExp_kind =
                                                                 IfExp_expression_kind }) in
                                                        let off_st = Parsing.rhs_start_pos 1 in
                                                        let off_end = Parsing.rhs_end_pos 6 in
                                                        let loc =
                                                          create_loc off_st off_end in
                                                        create_exp loc
                                                          (SeqExp [create_exp loc ifexp]) )}

selectControl:
  _1 = select _2 = selectable _3 = selectConditionBreak _4 = casesControl _5 = END
    {                                                                                       ( let select_exp = SelectExp
                                                                                           { selectExp_selectme = _2 ;
                                                                                             selectExp_cases    = Array.of_list (List.rev _4) ;
                                                                                             selectExp_default  = None } in
                                                                                         let select_st = Parsing.rhs_start_pos 1 in
                                                                                         let select_end = Parsing.rhs_end_pos 5 in
                                                                                         let select_loc = create_loc select_st select_end in
                                                                                         create_exp select_loc (ControlExp select_exp) )}
| _1 = select _2 = selectable _3 = selectConditionBreak _4 = casesControl _5 = defaultCase _6 = elseBody _7 = END
    {                                                                                       ( let default_st =  Parsing.rhs_start_pos 6 in
                                                                                         let default_end = Parsing.rhs_end_pos 6 in
                                                                                         let default_loc = create_loc default_st default_end in
                                                                                         let default =
                                                                                           match _6 with
                                                                                             | None -> None
                                                                                             | Some seqexp -> Some (default_loc,[seqexp]) in
                                                                                         let select_exp = SelectExp
                                                                                           { selectExp_selectme = _2 ;
                                                                                             selectExp_cases    = Array.of_list (List.rev _4) ;
                                                                                             selectExp_default  = default } in
                                                                                         let select_st = Parsing.rhs_start_pos 1 in
                                                                                         let select_end = Parsing.rhs_end_pos 7 in
                                                                                         let select_loc = create_loc select_st select_end in
                                                                                         create_exp select_loc (ControlExp select_exp) )}
| _1 = select _2 = selectable _3 = COMMENT _4 = selectConditionBreak _5 = casesControl _6 = END
    {                                                                                       ( let select_exp = SelectExp
                                                                                           { selectExp_selectme = _2 ;
                                                                                             selectExp_cases    = Array.of_list (List.rev _5) ;
                                                                                             selectExp_default  = None } in
                                                                                         let select_st = Parsing.rhs_start_pos 1 in
                                                                                         let select_end = Parsing.rhs_end_pos 6 in
                                                                                         let select_loc = create_loc select_st select_end in
                                                                                         create_exp select_loc (ControlExp select_exp) )}
| _1 = select _2 = selectable _3 = COMMENT _4 = selectConditionBreak _5 = casesControl _6 = defaultCase _7 = elseBody _8 = END
    {                                                                                       ( let default_st =  Parsing.rhs_start_pos 7 in
                                                                                         let default_end = Parsing.rhs_end_pos 7 in
                                                                                         let default_loc = create_loc default_st default_end in
                                                                                         let default =  match _7 with
                                                                                           | None -> None
                                                                                           | Some seqexp -> Some (default_loc,[seqexp]) in
                                                                                         let select_exp = SelectExp
                                                                                           { selectExp_selectme = _2 ;
                                                                                             selectExp_cases    = Array.of_list (List.rev _5) ;
                                                                                             selectExp_default  = default } in
                                                                                         let select_st = Parsing.rhs_start_pos 1 in
                                                                                         let select_end = Parsing.rhs_end_pos 8 in
                                                                                         let select_loc = create_loc select_st select_end in
                                                                                         create_exp select_loc (ControlExp select_exp) )}

select:
  _1 = SELECT
    {                                   ( )}
| _1 = SWITCH
    {                                   ( )}

defaultCase:
  _1 = elseTok
    {                                   ( )}
| _1 = OTHERWISE
    {                                   ( )}
| _1 = OTHERWISE _2 = COMMA
    {                                   ( )}
| _1 = OTHERWISE _2 = SEMI
    {                                   ( )}
| _1 = OTHERWISE _2 = EOL
    {                                   ( )}
| _1 = OTHERWISE _2 = COMMA _3 = EOL
    {                                   ( )}
| _1 = OTHERWISE _2 = SEMI _3 = EOL
    {                                   ( )}

selectable:
  _1 = variable
    {                                   ( _1 )}
| _1 = functionCall
    {                                   ( _1 )}

selectConditionBreak:
  _1 = EOL
    {                                   ( )}
| _1 = COMMA
    {                                   ( )}
| _1 = SEMI
    {                                   ( )}
| _1 = COMMA _2 = EOL
    {                                   ( )}
| _1 = SEMI _2 = EOL
    {                                   ( )}

casesControl:
  _1 = CASE _2 = variable _3 = caseControlBreak _4 = caseBody
    {                                                           ( let casetest_st = Parsing.rhs_start_pos 2 in
                                                             let casetest_end = Parsing.rhs_end_pos 2 in
                                                             let casetest_loc = create_loc casetest_st casetest_end in
                                                             let casebody_st = Parsing.rhs_start_pos 4 in
                                                             let casebody_end = Parsing.rhs_end_pos 4 in
                                                             let casebody_loc = create_loc casebody_st casebody_end in
                                                             let casexp = { caseExp_location = casetest_loc ;
                                                                            caseExp_test = _2 ;
                                                                            caseExp_body_location = casebody_loc ;
                                                                            caseExp_body = _4 } in
                                                             [casexp] )}
| _1 = CASE _2 = functionCall _3 = caseControlBreak _4 = caseBody
    {                                                           ( let casetest_st = Parsing.rhs_start_pos 2 in
                                                             let casetest_end = Parsing.rhs_end_pos 2 in
                                                             let casetest_loc = create_loc casetest_st casetest_end in
                                                             let casebody_st = Parsing.rhs_start_pos 4 in
                                                             let casebody_end = Parsing.rhs_end_pos 4 in
                                                             let casebody_loc = create_loc casebody_st casebody_end in
                                                             let casexp = { caseExp_location = casetest_loc ;
                                                                            caseExp_test = _2 ;
                                                                            caseExp_body_location = casebody_loc ;
                                                                            caseExp_body = _4 } in
                                                             [casexp] )}
| _1 = comments _2 = CASE _3 = variable _4 = caseControlBreak _5 = caseBody
    {                                                           ( let casetest_st = Parsing.rhs_start_pos 3 in
                                                             let casetest_end = Parsing.rhs_end_pos 3 in
                                                             let casetest_loc = create_loc casetest_st casetest_end in
                                                             let casebody_st = Parsing.rhs_start_pos 5 in
                                                             let casebody_end = Parsing.rhs_end_pos 5 in
                                                             let casebody_loc = create_loc casebody_st casebody_end in
                                                             let casexp = { caseExp_location = casetest_loc ;
                                                                            caseExp_test = _3 ;
                                                                            caseExp_body_location = casebody_loc ;
                                                                            caseExp_body = _5 } in
                                                             [casexp] )}
| _1 = comments _2 = CASE _3 = functionCall _4 = caseControlBreak _5 = caseBody
    {                                                           ( let casetest_st = Parsing.rhs_start_pos 3 in
                                                             let casetest_end = Parsing.rhs_end_pos 3 in
                                                             let casetest_loc = create_loc casetest_st casetest_end in
                                                             let casebody_st = Parsing.rhs_start_pos 5 in
                                                             let casebody_end = Parsing.rhs_end_pos 5 in
                                                             let casebody_loc = create_loc casebody_st casebody_end in
                                                             let casexp = { caseExp_location = casetest_loc ;
                                                                            caseExp_test = _3 ;
                                                                            caseExp_body_location = casebody_loc ;
                                                                            caseExp_body = _5 } in
                                                             [casexp] )}
| _1 = casesControl _2 = CASE _3 = variable _4 = caseControlBreak _5 = caseBody
    {                                                           ( let casetest_st = Parsing.rhs_start_pos 3 in
                                                             let casetest_end = Parsing.rhs_end_pos 3 in
                                                             let casetest_loc = create_loc casetest_st casetest_end in
                                                             let casebody_st = Parsing.rhs_start_pos 5 in
                                                             let casebody_end = Parsing.rhs_end_pos 5 in
                                                             let casebody_loc = create_loc casebody_st casebody_end in
                                                             let casexp = { caseExp_location = casetest_loc ;
                                                                            caseExp_test = _3 ;
                                                                            caseExp_body_location = casebody_loc ;
                                                                            caseExp_body = _5 } in
                                                             casexp::_1 )}
| _1 = casesControl _2 = CASE _3 = functionCall _4 = caseControlBreak _5 = caseBody
    {                                                           ( let casetest_st = Parsing.rhs_start_pos 3 in
                                                             let casetest_end = Parsing.rhs_end_pos 3 in
                                                             let casetest_loc = create_loc casetest_st casetest_end in
                                                             let casebody_st = Parsing.rhs_start_pos 5 in
                                                             let casebody_end = Parsing.rhs_end_pos 5 in
                                                             let casebody_loc = create_loc casebody_st casebody_end in
                                                             let casexp = { caseExp_location = casetest_loc ;
                                                                            caseExp_test = _3 ;
                                                                            caseExp_body_location = casebody_loc ;
                                                                            caseExp_body = _5 } in
                                                             casexp::_1 )}

caseBody:
  _1 = expressions
    {                                   (
  match _1.exp_desc with
    | SeqExp l -> l
    | _ -> [] )}
| 
    {                                   ( [] )}

caseControlBreak:
  _1 = THEN
    {                                   ( )}
| _1 = COMMA
    {                                   ( )}
| _1 = SEMI
    {                                   ( )}
| _1 = EOL
    {                                   ( )}
| _1 = THEN _2 = EOL
    {                                   ( )}
| _1 = COMMA _2 = EOL
    {                                   ( )}
| _1 = SEMI _2 = EOL
    {                                   ( )}
| _1 = THEN _2 = COMMA
    {                                   ( )}
| _1 = THEN _2 = COMMA _3 = EOL
    {                                   ( )}
| _1 = THEN _2 = SEMI
    {                                   ( )}
| _1 = THEN _2 = SEMI _3 = EOL
    {                                   ( )}
|  %prec CONTROLBREAK
    {                                   ( )}

forControl:
  _1 = FOR _2 = ID _3 = ASSIGN _4 = forIterator _5 = forConditionBreak _6 = forBody _7 = END
    {                                                                        ( let vardec_st = Parsing.rhs_start_pos 2 in
                                                                          let vardec_end = Parsing.rhs_end_pos 2 in
                                                                          let vardec_loc = create_loc vardec_st vardec_end in
                                                                          let vardec_desc =
                                                                            { varDec_name = new_symbol _2;
                                                                              varDec_init = _4;
                                                                              varDec_kind = VarDec_invalid_kind} in
                                                                          let forexp = ForExp
                                                                            { forExp_vardec_location = vardec_loc;
                                                                              forExp_vardec = vardec_desc;
                                                                              forExp_body = _6 } in
                                                                          let off_st = Parsing.rhs_start_pos 1 in
                                                                          let off_end = Parsing.rhs_end_pos 7 in
                                                                          let loc = create_loc off_st off_end in
                                                                          create_exp loc (ControlExp forexp) )}
| _1 = FOR _2 = LPAREN _3 = ID _4 = ASSIGN _5 = forIterator _6 = RPAREN _7 = forConditionBreak _8 = forBody _9 = END
    {                                                                        ( let vardec_st = Parsing.rhs_start_pos 3 in
                                                                          let vardec_end = Parsing.rhs_end_pos 3 in
                                                                          let vardec_loc = create_loc vardec_st vardec_end in
                                                                          let vardec_desc =
                                                                            { varDec_name = new_symbol _3;
                                                                              varDec_init = _5;
                                                                              varDec_kind = VarDec_invalid_kind} in
                                                                          let forexp = ForExp
                                                                            { forExp_vardec_location = vardec_loc;
                                                                              forExp_vardec = vardec_desc;
                                                                              forExp_body = _8 } in
                                                                          let off_st = Parsing.rhs_start_pos 1 in
                                                                          let off_end = Parsing.rhs_end_pos 9 in
                                                                          let loc = create_loc off_st off_end in
                                                                          create_exp loc (ControlExp forexp))}

forIterator:
  _1 = functionCall %prec UPLEVEL
    {                                                ( _1 )}
| _1 = variable %prec UPLEVEL
    {                                                ( _1 )}

forConditionBreak:
  _1 = EOL
    {           ( )}
| _1 = SEMI
    {            ( )}
| _1 = SEMI _2 = EOL
    {               ( )}
| _1 = COMMA
    {             ( )}
| _1 = COMMA _2 = EOL
    {                ( )}
| _1 = DO
    {          ( )}
| _1 = DO _2 = EOL
    {             ( )}
| 
    {                  ( )}

forBody:
  _1 = expressions
    {                                                ( _1 )}
| 
    {                                                ( let off_st = Parsing.rhs_start_pos 1 in
                                                  let off_end = Parsing.rhs_end_pos 1 in
                                                  let loc =
                                                    create_loc off_st off_end in
                                                  create_exp loc (SeqExp []) )}

whileControl:
  _1 = WHILE _2 = condition _3 = whileConditionBreak _4 = whileBody _5 = END
    {                                                                          ( let wexp =
                                                                              WhileExp
                                                                                { whileExp_test = _2;
                                                                                  whileExp_body = _4 } in
                                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                                            let off_end = Parsing.rhs_end_pos 7 in
                                                                            let loc = create_loc off_st off_end in
                                                                            let controlexp = create_exp loc (ControlExp wexp) in
                                                                            let seqexp = SeqExp (controlexp::[]) in
                                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                                            let off_end = Parsing.rhs_end_pos 5 in
                                                                            let loc = create_loc off_st off_end in
                                                                            create_exp loc seqexp )}
| _1 = WHILE _2 = condition _3 = whileConditionBreak _4 = whileBody _5 = elseTok _6 = elseWhileBody _7 = END
    {                                                                          ( let wexp =
                                                                              WhileExp
                                                                                { whileExp_test = _2;
                                                                                  whileExp_body = _4 } in
                                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                                            let off_end = Parsing.rhs_end_pos 7 in
                                                                            let loc = create_loc off_st off_end in
                                                                            let controlexp = create_exp loc (ControlExp wexp) in
                                                                            let seqexp = SeqExp (controlexp::_6) in
                                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                                            let off_end = Parsing.rhs_end_pos 7 in
                                                                            let loc = create_loc off_st off_end in
                                                                            create_exp loc seqexp )}

whileBody:
  
    {                        ( let off_st = Parsing.rhs_start_pos 1 in
                          let off_end = Parsing.rhs_end_pos 1 in
                          let loc =
                            create_loc off_st off_end in
                          create_exp loc (SeqExp []) )}
| _1 = expressions
    {                        ( _1 )}

elseWhileBody:
  
    {                        ( [] )}
| _1 = expressions
    {                        ( match _1.exp_desc with | SeqExp l -> l | _ -> [] )}

whileConditionBreak:
  _1 = COMMA
    {                        ( )}
| _1 = SEMI
    {                        ( )}
| _1 = DO
    {                        ( )}
| _1 = DO _2 = COMMA
    {                        ( )}
| _1 = DO _2 = SEMI
    {                        ( )}
| _1 = THEN
    {                        ( )}
| _1 = THEN _2 = COMMA
    {                        ( )}
| _1 = THEN _2 = SEMI
    {                        ( )}
| _1 = COMMENT _2 = EOL
    {                        ( )}
| _1 = EOL
    {                        ( )}
| _1 = COMMA _2 = EOL
    {                        ( )}
| _1 = SEMI _2 = EOL
    {                        ( )}
| _1 = DO _2 = EOL
    {                        ( )}
| _1 = DO _2 = COMMA _3 = EOL
    {                        ( )}
| _1 = DO _2 = SEMI _3 = EOL
    {                        ( )}
| _1 = THEN _2 = EOL
    {                        ( )}
| _1 = THEN _2 = COMMA _3 = EOL
    {                        ( )}
| _1 = THEN _2 = SEMI _3 = EOL
    {                        ( )}

tryControl:
  _1 = tryTok _2 = catchBody _3 = catchTok _4 = catchBody _5 = END
    {                                                   ( let test_loc_st = Parsing.rhs_start_pos 2 in
                                                     let test_loc_end = Parsing.rhs_end_pos 2 in
                                                     let test_loc = create_loc test_loc_st test_loc_end in
                                                     let body_loc_st = Parsing.rhs_start_pos 4 in
                                                     let body_loc_end = Parsing.rhs_start_pos 4 in
                                                     let body_loc = create_loc body_loc_st body_loc_end in
                                                     let tryexp =
                                                       TryCatchExp
                                                         { tryCatchExp_tryme_location = test_loc;
                                                           tryCatchExp_tryme = _2;
                                                           tryCatchExp_catchme_location = body_loc;
                                                           tryCatchExp_catchme = _4} in
                                                     let off_st = Parsing.rhs_start_pos 1 in
                                                     let off_end = Parsing.rhs_end_pos 5 in
                                                     let loc = create_loc off_st off_end in
                                                     create_exp loc (ControlExp tryexp) )}
| _1 = tryTok _2 = catchBody _3 = END
    {                                                   ( let test_loc_st = Parsing.rhs_start_pos 2 in
                                                     let test_loc_end = Parsing.rhs_end_pos 2 in
                                                     let test_loc = create_loc test_loc_st test_loc_end in
                                                     let off_st = Parsing.rhs_start_pos 1 in
                                                     let off_end = Parsing.rhs_end_pos 3 in
                                                     let loc = create_loc off_st off_end in
                                                     let tryexp =
                                                       TryCatchExp
                                                         { tryCatchExp_tryme_location = test_loc;
                                                           tryCatchExp_tryme = _2;
                                                           tryCatchExp_catchme_location = loc;
                                                           tryCatchExp_catchme = []} in
                                                     create_exp loc (ControlExp tryexp) )}

tryTok:
  _1 = TRY
    {                                                   ( )}
| _1 = TRY _2 = SEMI
    {                                                   ( )}
| _1 = TRY _2 = COMMA
    {                                                   ( )}
| _1 = TRY _2 = EOL
    {                                                   ( )}
| _1 = TRY _2 = SEMI _3 = EOL
    {                                                   ( )}
| _1 = TRY _2 = COMMA _3 = EOL
    {                                                   ( )}

catchTok:
  _1 = CATCH
    {                                                   ( )}
| _1 = CATCH _2 = SEMI
    {                                                   ( )}
| _1 = CATCH _2 = COMMA
    {                                                   ( )}
| _1 = CATCH _2 = EOL
    {                                                   ( )}
| _1 = CATCH _2 = SEMI _3 = EOL
    {                                                   ( )}
| _1 = CATCH _2 = COMMA _3 = EOL
    {                                                   ( )}

catchBody:
  _1 = expressions
    {                                                   ( match _1.exp_desc with | SeqExp l -> l | _ -> [] )}
| 
    {                                                   ( [] )}

returnControl:
  _1 = RETURN
    {                                                   ( let off_st = Parsing.rhs_start_pos 1 in
                                                     let off_end = Parsing.rhs_end_pos 1 in
                                                     let loc = create_loc off_st off_end in
                                                     let retexp =
                                                       ReturnExp { returnExp_exp = None} in
                                                     create_exp loc (ControlExp retexp) )}
| _1 = RETURN _2 = variable
    {                                                   ( let off_st = Parsing.rhs_start_pos 1 in
                                                     let off_end = Parsing.rhs_end_pos 1 in
                                                     let loc = create_loc off_st off_end in
                                                     let retexp =
                                                       ReturnExp { returnExp_exp = Some _2} in
                                                     create_exp loc (ControlExp retexp) )}

cell:
  _1 = LBRACE _2 = matrixOrCellLines _3 = RBRACE
    {                                                          ( let mle = Array.of_list (List.rev _2) in
                                                            let mathexp = CellExp { matrixExp_lines = mle } in
                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                            let off_end = Parsing.rhs_end_pos 3 in
                                                            let loc = create_loc off_st off_end in
                                                            create_exp loc (MathExp mathexp) )}
| _1 = LBRACE _2 = matrixOrCellLines _3 = matrixOrCellColumns _4 = RBRACE
    {                                                          ( let st_line = Parsing.rhs_start_pos 3 in
                                                            let end_line = Parsing.rhs_end_pos 3 in
                                                            let loc_line = create_loc st_line end_line in
                                                            let col =
                                                              { matrixLineExp_location = loc_line;
                                                                matrixLineExp_columns = Array.of_list _3 } in
                                                            let mle = Array.of_list (List.rev (col::_2)) in
                                                            let mathexp = CellExp { matrixExp_lines = mle } in
                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                            let off_end = Parsing.rhs_end_pos 4 in
                                                            let loc = create_loc off_st off_end in
                                                            create_exp loc (MathExp mathexp) )}
| _1 = LBRACE _2 = EOL _3 = matrixOrCellLines _4 = matrixOrCellColumns _5 = RBRACE
    {                                                          ( let st_line = Parsing.rhs_start_pos 4 in
                                                            let end_line = Parsing.rhs_end_pos 4 in
                                                            let loc_line = create_loc st_line end_line in
                                                            let col =
                                                              { matrixLineExp_location = loc_line;
                                                                matrixLineExp_columns = Array.of_list _4 } in
                                                            let mle = Array.of_list (List.rev (col::_3)) in
                                                            let mathexp = CellExp { matrixExp_lines = mle } in
                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                            let off_end = Parsing.rhs_end_pos 5 in
                                                            let loc = create_loc off_st off_end in
                                                            create_exp loc (MathExp mathexp) )}
| _1 = LBRACE _2 = EOL _3 = matrixOrCellLines _4 = RBRACE
    {                                                          ( let mle = Array.of_list (List.rev _3) in
                                                            let mathexp = CellExp { matrixExp_lines = mle } in
                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                            let off_end = Parsing.rhs_end_pos 4 in
                                                            let loc = create_loc off_st off_end in
                                                            create_exp loc (MathExp mathexp) )}
| _1 = LBRACE _2 = matrixOrCellColumns _3 = RBRACE
    {                                                          ( let st_line = Parsing.rhs_start_pos 2 in
                                                            let end_line = Parsing.rhs_end_pos 2 in
                                                            let loc_line = create_loc st_line end_line in
                                                            let mlec =
                                                              { matrixLineExp_location = loc_line;
                                                                matrixLineExp_columns = Array.of_list (List.rev _2) } in
                                                            let mle = Array.of_list [mlec] in
                                                            let mathexp =
                                                              CellExp { matrixExp_lines = mle } in
                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                            let off_end = Parsing.rhs_end_pos 3 in
                                                            let loc = create_loc off_st off_end in
                                                            create_exp loc (MathExp mathexp) )}
| _1 = LBRACE _2 = EOL _3 = matrixOrCellColumns _4 = RBRACE
    {                                            ( let st_line = Parsing.rhs_start_pos 3 in
                                                            let end_line = Parsing.rhs_end_pos 3 in
                                                            let loc_line = create_loc st_line end_line in
                                                            let mlec =
                                                              { matrixLineExp_location = loc_line;
                                                                matrixLineExp_columns = Array.of_list (List.rev _3) } in
                                                            let mle = Array.of_list [mlec] in
                                                            let mathexp =
                                                              CellExp { matrixExp_lines = mle } in
                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                            let off_end = Parsing.rhs_end_pos 4 in
                                                            let loc = create_loc off_st off_end in
                                                            create_exp loc (MathExp mathexp) )}
| _1 = LBRACE _2 = EOL _3 = RBRACE
    {                                                          ( let mle = Array.of_list [] in
                                                            let mathexp = CellExp { matrixExp_lines = mle } in
                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                            let off_end = Parsing.rhs_end_pos 3 in
                                                            let loc = create_loc off_st off_end in
                                                            create_exp loc (MathExp mathexp) )}
| _1 = LBRACE _2 = RBRACE
    {                                                          ( let mle = Array.of_list [] in
                                                            let mathexp = CellExp { matrixExp_lines = mle } in
                                                            let off_st = Parsing.rhs_start_pos 1 in
                                                            let off_end = Parsing.rhs_end_pos 2 in
                                                            let loc = create_loc off_st off_end in
                                                            create_exp loc (MathExp mathexp) )}

matrix:
  _1 = LBRACK _2 = matrixOrCellLines _3 = RBRACK
    {                                              ( let mle = Array.of_list (List.rev _2) in
                                                let mathexp =
                                                  MatrixExp { matrixExp_lines = mle } in
                                                let off_st = Parsing.rhs_start_pos 1 in
                                                let off_end = Parsing.rhs_end_pos 3 in
                                                let loc = create_loc off_st off_end in
                                                create_exp loc (MathExp mathexp) )}
| _1 = LBRACK _2 = EOL _3 = matrixOrCellLines _4 = RBRACK
    {                                              ( let mle = Array.of_list (List.rev _3) in
                                                let mathexp =
                                                  MatrixExp { matrixExp_lines = mle } in
                                                let off_st = Parsing.rhs_start_pos 1 in
                                                let off_end = Parsing.rhs_end_pos 4 in
                                                let loc = create_loc off_st off_end in
                                                create_exp loc (MathExp mathexp) )}
| _1 = LBRACK _2 = matrixOrCellColumns _3 = RBRACK
    {                                              ( let st_line = Parsing.rhs_start_pos 2 in
                                                let end_line = Parsing.rhs_end_pos 2 in
                                                let loc_line = create_loc st_line end_line in
                                                let mlec =
                                                  { matrixLineExp_location = loc_line;
                                                    matrixLineExp_columns = Array.of_list (List.rev _2) } in
                                                let mle = Array.of_list [mlec] in
                                                let mathexp =
                                                  MatrixExp { matrixExp_lines = mle } in
                                                let off_st = Parsing.rhs_start_pos 1 in
                                                let off_end = Parsing.rhs_end_pos 3 in
                                                let loc = create_loc off_st off_end in
                                                create_exp loc (MathExp mathexp) )}
| _1 = LBRACK _2 = EOL _3 = matrixOrCellColumns _4 = RBRACK
    {                                               ( let st_line = Parsing.rhs_start_pos 3 in
                                                 let end_line = Parsing.rhs_end_pos 3 in
                                                 let loc_line = create_loc st_line end_line in
                                                 let mlec =
                                                   { matrixLineExp_location = loc_line;
                                                     matrixLineExp_columns = Array.of_list (List.rev _3) } in
                                                 let mle = Array.of_list [mlec] in
                                                 let mathexp =
                                                   MatrixExp { matrixExp_lines = mle } in
                                                 let off_st = Parsing.rhs_start_pos 1 in
                                                 let off_end = Parsing.rhs_end_pos 4 in
                                                 let loc = create_loc off_st off_end in
                                                 create_exp loc (MathExp mathexp) )}
| _1 = LBRACK _2 = matrixOrCellLines _3 = matrixOrCellColumns _4 = RBRACK
    {                                              ( let st_line = Parsing.rhs_start_pos 3 in
                                                let end_line = Parsing.rhs_end_pos 3 in
                                                let loc_line = create_loc st_line end_line in
                                                let col =
                                                  { matrixLineExp_location = loc_line;
                                                    matrixLineExp_columns = Array.of_list (List.rev _3) } in
                                                let mle = Array.of_list (List.rev (col::_2)) in
                                                let mathexp =
                                                  MatrixExp { matrixExp_lines = mle } in
                                                let off_st = Parsing.rhs_start_pos 1 in
                                                let off_end = Parsing.rhs_end_pos 4 in
                                                let loc = create_loc off_st off_end in
                                                create_exp loc (MathExp mathexp) )}
| _1 = LBRACK _2 = EOL _3 = matrixOrCellLines _4 = matrixOrCellColumns _5 = RBRACK
    {                                              ( let st_line = Parsing.rhs_start_pos 3 in
                                                let end_line = Parsing.rhs_end_pos 3 in
                                                let loc_line = create_loc st_line end_line in
                                                let col =
                                                  { matrixLineExp_location = loc_line;
                                                    matrixLineExp_columns = Array.of_list (List.rev _4) } in
                                                let mle = Array.of_list (List.rev (col::_3)) in
                                                let mathexp =
                                                  MatrixExp { matrixExp_lines = mle } in
                                                let off_st = Parsing.rhs_start_pos 1 in
                                                let off_end = Parsing.rhs_end_pos 4 in
                                                let loc = create_loc off_st off_end in
                                                create_exp loc (MathExp mathexp) )}
| _1 = LBRACK _2 = EOL _3 = RBRACK
    {                                              ( let mle =
                                                  (Array.of_list []:matrixLineExp array) in
                                                let mathexp =
                                                  MatrixExp { matrixExp_lines = mle } in
                                                let off_st = Parsing.rhs_start_pos 1 in
                                                let off_end = Parsing.rhs_end_pos 3 in
                                                let loc = create_loc off_st off_end in
                                                create_exp loc (MathExp mathexp) )}
| _1 = LBRACK _2 = RBRACK
    {                                              ( let mle =
                                                  (Array.of_list []:matrixLineExp array) in
                                                let mathexp =
                                                  MatrixExp { matrixExp_lines = mle } in
                                                let off_st = Parsing.rhs_start_pos 1 in
                                                let off_end = Parsing.rhs_end_pos 2 in
                                                let loc = create_loc off_st off_end in
                                                create_exp loc (MathExp mathexp) )}

matrixOrCellLines:
  _1 = matrixOrCellLines _2 = matrixOrCellLine
    {                                                   ( _2::_1 )}
| _1 = matrixOrCellLine
    {                                                      ( [_1])}

matrixOrCellLineBreak:
  _1 = SEMI
    {                                                                (  )}
| _1 = EOL
    {                                                                (  )}
| _1 = matrixOrCellLineBreak _2 = EOL
    {                                                                (  )}
| _1 = matrixOrCellLineBreak _2 = SEMI
    {                                                                (  )}

matrixOrCellLine:
  _1 = matrixOrCellColumns _2 = matrixOrCellLineBreak
    {                                                                     ( let st_line = Parsing.rhs_start_pos 1 in
                                                                       let end_line = Parsing.rhs_end_pos 1 in
                                                                       let loc_line = create_loc st_line end_line in
                                                                       { matrixLineExp_location = loc_line;
                                                                         matrixLineExp_columns =
                                                                           Array.of_list (List.rev _1) } )}
| _1 = matrixOrCellColumns _2 = matrixOrCellColumnsBreak _3 = matrixOrCellLineBreak
    {                                                                     ( let st_line = Parsing.rhs_start_pos 1 in
                                                                       let end_line = Parsing.rhs_end_pos 1 in
                                                                       let loc_line = create_loc st_line end_line in
                                                                       { matrixLineExp_location = loc_line;
                                                                         matrixLineExp_columns =
                                                                           Array.of_list (List.rev _1) } )}

matrixOrCellColumns:
  _1 = matrixOrCellColumns _2 = matrixOrCellColumnsBreak _3 = variable %prec HIGHLEVEL
    {                                                                              ( _3::_1 )}
| _1 = matrixOrCellColumns _2 = matrixOrCellColumnsBreak _3 = functionCall %prec HIGHLEVEL
    {                                                                              ( _3::_1 )}
| _1 = matrixOrCellColumns _2 = variable %prec HIGHLEVEL
    {                                                                              ( _2::_1 )}
| _1 = matrixOrCellColumns _2 = functionCall %prec HIGHLEVEL
    {                                                                              ( _2::_1 )}
| _1 = matrixOrCellColumns _2 = COMMENT %prec HIGHLEVEL
    {                                                                              ( let commentexp = CommentExp { commentExp_comment = _2 } in
                                                                                let cmt_st = Parsing.rhs_start_pos 2 in
                                                                                let cmt_end = Parsing.rhs_end_pos 2 in
                                                                                let cmt_loc = create_loc cmt_st cmt_end in
                                                                                let cmt_exp = create_exp cmt_loc (ConstExp commentexp) in
                                                                                cmt_exp::_1 )}
| _1 = variable %prec HIGHLEVEL
    {                                                                              ( [_1] )}
| _1 = functionCall %prec HIGHLEVEL
    {                                                                              ( [_1] )}
| _1 = COMMENT %prec HIGHLEVEL
    {                                                                              ( let commentexp = CommentExp { commentExp_comment = _1 } in
                                                                                let cmt_st = Parsing.rhs_start_pos 1 in
                                                                                let cmt_end = Parsing.rhs_end_pos 1 in
                                                                                let cmt_loc = create_loc cmt_st cmt_end in
                                                                                let cmt_exp = create_exp cmt_loc (ConstExp commentexp) in
                                                                                [cmt_exp] )}

matrixOrCellColumnsBreak:
  _1 = matrixOrCellColumnsBreak _2 = COMMA
    {                                    (  )}
| _1 = COMMA
    {               (  )}

variableDeclaration:
  _1 = assignable _2 = ASSIGN _3 = variable %prec HIGHLEVEL
    {                                                                ( let assignexp =
                                                                    AssignExp {assignExp_left_exp = _1;
                                                                               assignExp_right_exp = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc assignexp )}
| _1 = assignable _2 = ASSIGN _3 = functionCall %prec HIGHLEVEL
    {                                                                ( let assignexp =
                                                                    AssignExp {assignExp_left_exp = _1;
                                                                               assignExp_right_exp = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc assignexp )}
| _1 = functionCall _2 = ASSIGN _3 = variable %prec HIGHLEVEL
    {                                                                ( let assignexp =
                                                                    AssignExp {assignExp_left_exp = _1;
                                                                               assignExp_right_exp = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc assignexp )}
| _1 = functionCall _2 = ASSIGN _3 = functionCall %prec HIGHLEVEL
    {                                                                ( let assignexp =
                                                                    AssignExp {assignExp_left_exp = _1;
                                                                               assignExp_right_exp = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc assignexp )}
| _1 = assignable _2 = ASSIGN _3 = returnControl
    {                                                                ( let assignexp =
                                                                    AssignExp {assignExp_left_exp = _1;
                                                                               assignExp_right_exp = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc assignexp )}
| _1 = functionCall _2 = ASSIGN _3 = returnControl
    {                                                                ( let assignexp =
                                                                    AssignExp {assignExp_left_exp = _1;
                                                                               assignExp_right_exp = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc assignexp )}

assignable:
  _1 = variable _2 = DOT _3 = ID %prec UPLEVEL
    {                                                                ( let varloc_st = Parsing.rhs_start_pos 3 in
                                                                  let varloc_end = Parsing.rhs_end_pos 3 in
                                                                  let varloc = create_loc varloc_st varloc_end in
                                                                  let varexp =
                                                                    Var { var_location = varloc;
                                                                          var_desc = simpleVar _3 } in
                                                                  let fieldexp = { fieldExp_head = _1 ;
                                                                                   fieldExp_tail = create_exp varloc varexp } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = variable _2 = DOT _3 = keywords %prec UPLEVEL
    {                                                              ( let fieldexp = { fieldExp_head = _1 ;
                                                                                   fieldExp_tail = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = variable _2 = DOT _3 = functionCall
    {                                              ( let fieldexp = { fieldExp_head = _1 ;
                                                                                   fieldExp_tail = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = functionCall _2 = DOT _3 = variable
    {                                              ( let fieldexp = { fieldExp_head = _1 ;
                                                                                   fieldExp_tail = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = functionCall _2 = DOT _3 = keywords
    {                                                                ( let fieldexp = { fieldExp_head = _1 ;
                                                                                   fieldExp_tail = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = functionCall _2 = DOT _3 = functionCall
    {                                                  ( let fieldexp = { fieldExp_head = _1 ;
                                                                                   fieldExp_tail = _3 } in
                                                                  let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc (FieldExp fieldexp) )}
| _1 = ID %prec LISTABLE
    {                                                                ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                                  let varloc_end = Parsing.rhs_end_pos 1 in
                                                                  let varloc = create_loc varloc_st varloc_end in
                                                                  let varexp =
                                                                    Var { var_location = varloc;
                                                                          var_desc = simpleVar _1 } in
                                                                  create_exp varloc varexp)}
| _1 = multipleResults
    {                              ( _1 )}
| _1 = variable _2 = LPAREN _3 = functionArgs _4 = RPAREN
    {                                                                ( let callexp =
                                                                    { callExp_name = _1;
                                                                      callExp_args = Array.of_list (List.rev _3) } in
                                                                  let fcall_st = Parsing.rhs_start_pos 1 in
                                                                  let fcall_end = Parsing.rhs_end_pos 4 in
                                                                  let loc = create_loc fcall_st fcall_end in
                                                                  create_exp loc (CallExp callexp) )}
| _1 = functionCall _2 = LPAREN _3 = functionArgs _4 = RPAREN
    {                                                                ( let callexp =
                                                                    { callExp_name = _1;
                                                                      callExp_args = Array.of_list (List.rev _3) } in
                                                                  let fcall_st = Parsing.rhs_start_pos 1 in
                                                                  let fcall_end = Parsing.rhs_end_pos 4 in
                                                                  let loc = create_loc fcall_st fcall_end in
                                                                  create_exp loc (CallExp callexp) )}

multipleResults:
  _1 = LBRACK _2 = matrixOrCellColumns _3 = RBRACK
    {                                                 ( let off_st = Parsing.rhs_start_pos 1 in
                                                                  let off_end = Parsing.rhs_end_pos 3 in
                                                                  let loc = create_loc off_st off_end in
                                                                  create_exp loc (AssignListExp (Array.of_list (List.rev _2))) )}

comments:
  _1 = COMMENT _2 = EOL
    {                                                    ( )}
| _1 = comments _2 = COMMENT _3 = EOL
    {                                                    ( )}

lineEnd:
  _1 = EOL
    {                                                    ( )}
| _1 = COMMENT _2 = EOL
    {                                                    ( )}

keywords:
  _1 = IF
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "if" } in
                                                      create_exp varloc var )}
| _1 = THEN
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "then" } in
                                                      create_exp varloc var )}
| _1 = ELSE
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "else" } in
                                                      create_exp varloc var )}
| _1 = ELSEIF
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "elseif" } in
                                                      create_exp varloc var )}
| _1 = END
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "end" } in
                                                      create_exp varloc var )}
| _1 = SELECT
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "select" } in
                                                      create_exp varloc var )}
| _1 = SWITCH
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "switch" } in
                                                      create_exp varloc var )}
| _1 = OTHERWISE
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "otherwise" } in
                                                      create_exp varloc var )}
| _1 = CASE
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "case" } in
                                                      create_exp varloc var )}
| _1 = FUNCTION
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "function" } in
                                                      create_exp varloc var )}
| _1 = ENDFUNCTION
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "endfunction" } in
                                                      create_exp varloc var )}
| _1 = HIDDENFUNCTION
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "hiddenfunction" } in
                                                      create_exp varloc var )}
| _1 = HIDDEN
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "hidden" } in
                                                      create_exp varloc var )}
| _1 = FOR
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "for" } in
                                                      create_exp varloc var )}
| _1 = WHILE
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "while" } in
                                                      create_exp varloc var )}
| _1 = DO
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "do" } in
                                                      create_exp varloc var )}
| _1 = BREAK
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "break" } in
                                                      create_exp varloc var )}
| _1 = TRY
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "try" } in
                                                      create_exp varloc var )}
| _1 = CATCH
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "catch" } in
                                                      create_exp varloc var )}
| _1 = RETURN
    {                                                    ( let varloc_st = Parsing.rhs_start_pos 1 in
                                                      let varloc_end = Parsing.rhs_end_pos 1 in
                                                      let varloc = create_loc varloc_st varloc_end in
                                                      let var =
                                                        Var { var_location = varloc;
                                                              var_desc = simpleVar "return" } in
                                                      create_exp varloc var )}

%%
