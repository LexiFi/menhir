%{
  (* exception ParseError of token * Lexing.position * Lexing.position *)

  let make_loc pos = pos

  open Sexp

  let locate pos sexp =
      let location = make_loc pos in At (location, sexp)

  (*  (* the interpretation where (c c c c c . d) means (c c c c (c . d)) *)
      let mkPair (cars, cdr) =
          match List.rev cars with
          | [car]          -> Pair(car, cdr)
          | last::revfront -> List (List.rev(Pair(last, cdr) :: revfront))
          | _              -> assert false
  *)

  let mkList = function [s] -> s | ss -> List ss

  (* the interpretation where (c c c c c . d) means ((c c c c c) . d)) *)
  let mkPair (cars, cdr) = Pair(mkList cars, cdr)



%}
%start sexp
%token AT
%token BRA
%token DOT
%token EOF
%token <string> ID
%token <int> INT
%token KET
%token MINUS
%token PLUS
%token <string> STRING
%type <Sexp.sexp> sexp
%%

option_PLUS_:
  
    {    ( None )}
| x = PLUS
    {    ( Some x )}

list_sexpr_:
  
    {    ( [] )}
| x = sexpr xs = list_sexpr_
    {    ( x :: xs )}

sexp:
  sexpr = sexpr
    {             ( sexpr )}
| _1 = EOF
    {             ( EndFile )}

sexpr:
  _1 = STRING
    {let _1_1 = _1 in
                                  String  _1_1}
| _1 = option_PLUS_ i = INT
    {let number =                         ( i   ) in
                                  Int  number}
| _1 = MINUS i = INT
    {let number =                         ( - i ) in
                                  Int  number}
| _1 = ID
    {let _1_1 = _1 in
                                  Id  _1_1}
| _1 = BRA _1_inlined1 = list_sexpr_ _3 = KET
    {let sexprs = _1_inlined1 in
                                  List  sexprs}
| _1 = BRA _1_inlined1 = list_sexpr_ _3 = DOT cdr = pairs _5 = KET
    {let car = _1_inlined1 in
                                            mkPair  (car, cdr)}
| _1 = AT s = sexpr
    {let _endpos = _endpos_s_ in
let _startpos = _startpos__1_ in
let _loc = (_startpos, _endpos) in
                                 (locate _loc s)}

pairs:
  sexpr = sexpr
    {sexpr}
| _1 = list_sexpr_ _2 = DOT cdr = pairs
    {let car = _1 in
                                  mkPair  (car, cdr)}

%%
