State 0:
## Known stack suffix:
##
## LR(1) items:
top' -> . top [ # ]
## Transitions:
-- On VAR shift to state 1
-- On TYPE shift to state 202
-- On RESOURCE shift to state 206
-- On REG shift to state 215
-- On OP shift to state 401
-- On MODE shift to state 444
-- On MEM shift to state 455
-- On LET shift to state 464
-- On EXTEND shift to state 468
-- On EXCEPTION shift to state 473
-- On CANON shift to state 475
-- On top shift to state 490
-- On specs shift to state 491
-- On VarSpec shift to state 493
-- On TypeSpec shift to state 494
-- On ResourceSpec shift to state 495
-- On RegisterSpec shift to state 496
-- On OpSpec shift to state 497
-- On ModeSpec shift to state 498
-- On MemorySpec shift to state 499
-- On MachineSpec shift to state 507
-- On LetDef shift to state 501
-- On ExtendSpec shift to state 502
-- On ExtendHeader shift to state 503
-- On ExceptionSpec shift to state 505
-- On CanonSpec shift to state 506
## Reductions:

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
VarSpec -> VAR . LocatedID LBRACK RegPart RBRACK [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 2
-- On LocatedID shift to state 3
## Reductions:

State 2:
## Known stack suffix:
## ID
## LR(1) items:
LocatedID -> ID . [ VAR TYPE RESOURCE REG OP MODE MEM LPAREN LET LBRACK EXTEND EXCEPTION EQ EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production LocatedID -> ID
-- On TYPE reduce production LocatedID -> ID
-- On RESOURCE reduce production LocatedID -> ID
-- On REG reduce production LocatedID -> ID
-- On OP reduce production LocatedID -> ID
-- On MODE reduce production LocatedID -> ID
-- On MEM reduce production LocatedID -> ID
-- On LPAREN reduce production LocatedID -> ID
-- On LET reduce production LocatedID -> ID
-- On LBRACK reduce production LocatedID -> ID
-- On EXTEND reduce production LocatedID -> ID
-- On EXCEPTION reduce production LocatedID -> ID
-- On EQ reduce production LocatedID -> ID
-- On EOF reduce production LocatedID -> ID
-- On COMMA reduce production LocatedID -> ID
-- On CANON reduce production LocatedID -> ID

State 3:
## Known stack suffix:
## VAR LocatedID
## LR(1) items:
VarSpec -> VAR LocatedID . LBRACK RegPart RBRACK [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On LBRACK shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## VAR LocatedID LBRACK
## LR(1) items:
VarSpec -> VAR LocatedID LBRACK . RegPart RBRACK [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On IF shift to state 13
-- On ID shift to state 195
-- On FORMAT shift to state 16
-- On FLOAT shift to state 122
-- On FIXED_CONST shift to state 20
-- On FIX shift to state 128
-- On EXCLAM shift to state 21
-- On ENUM shift to state 134
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On TypeExpr shift to state 146
-- On Type shift to state 196
-- On RegPart shift to state 197
-- On LetExpr shift to state 199
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 5:
## Known stack suffix:
## TILD
## LR(1) items:
Expr -> TILD . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 194
-- On Constant shift to state 76
## Reductions:

State 6:
## Known stack suffix:
## SWITCH
## LR(1) items:
Expr -> SWITCH . LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## SWITCH LPAREN
## LR(1) items:
Expr -> SWITCH LPAREN . Expr RPAREN LBRACE CaseExprBody RBRACE [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 175
-- On Constant shift to state 76
## Reductions:

State 8:
## Known stack suffix:
## STRING_CONST
## LR(1) items:
Constant -> STRING_CONST . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> STRING_CONST . LPAREN ArgList RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 9
## Reductions:
-- On VOLATILE reduce production Constant -> STRING_CONST
-- On VAR reduce production Constant -> STRING_CONST
-- On USES reduce production Constant -> STRING_CONST
-- On TYPE reduce production Constant -> STRING_CONST
-- On THEN reduce production Constant -> STRING_CONST
-- On SYNTAX reduce production Constant -> STRING_CONST
-- On STAR reduce production Constant -> STRING_CONST
-- On SLASH reduce production Constant -> STRING_CONST
-- On SEMI reduce production Constant -> STRING_CONST
-- On RPAREN reduce production Constant -> STRING_CONST
-- On ROTATE_RIGHT reduce production Constant -> STRING_CONST
-- On ROTATE_LEFT reduce production Constant -> STRING_CONST
-- On RIGHT_SHIFT reduce production Constant -> STRING_CONST
-- On RESOURCE reduce production Constant -> STRING_CONST
-- On REG reduce production Constant -> STRING_CONST
-- On RBRACK reduce production Constant -> STRING_CONST
-- On RBRACE reduce production Constant -> STRING_CONST
-- On PORTS reduce production Constant -> STRING_CONST
-- On PLUS reduce production Constant -> STRING_CONST
-- On PIPE reduce production Constant -> STRING_CONST
-- On PERCENT reduce production Constant -> STRING_CONST
-- On OR reduce production Constant -> STRING_CONST
-- On OP reduce production Constant -> STRING_CONST
-- On NEQ reduce production Constant -> STRING_CONST
-- On MODE reduce production Constant -> STRING_CONST
-- On MINUS reduce production Constant -> STRING_CONST
-- On MEM reduce production Constant -> STRING_CONST
-- On LT reduce production Constant -> STRING_CONST
-- On LET reduce production Constant -> STRING_CONST
-- On LEQ reduce production Constant -> STRING_CONST
-- On LEFT_SHIFT reduce production Constant -> STRING_CONST
-- On INITIALA reduce production Constant -> STRING_CONST
-- On IMAGE reduce production Constant -> STRING_CONST
-- On ID reduce production Constant -> STRING_CONST
-- On GT reduce production Constant -> STRING_CONST
-- On GEQ reduce production Constant -> STRING_CONST
-- On EXTEND reduce production Constant -> STRING_CONST
-- On EXCEPTION reduce production Constant -> STRING_CONST
-- On EQU reduce production Constant -> STRING_CONST
-- On EOF reduce production Constant -> STRING_CONST
-- On ENDIF reduce production Constant -> STRING_CONST
-- On ELSE reduce production Constant -> STRING_CONST
-- On DOUBLE_STAR reduce production Constant -> STRING_CONST
-- On DOUBLE_DOT reduce production Constant -> STRING_CONST
-- On DOUBLE_COLON reduce production Constant -> STRING_CONST
-- On DEFAULT reduce production Constant -> STRING_CONST
-- On COMMA reduce production Constant -> STRING_CONST
-- On COLON reduce production Constant -> STRING_CONST
-- On CIRC reduce production Constant -> STRING_CONST
-- On CASE reduce production Constant -> STRING_CONST
-- On CANON reduce production Constant -> STRING_CONST
-- On BIT_LEFT reduce production Constant -> STRING_CONST
-- On AND reduce production Constant -> STRING_CONST
-- On AMPERS reduce production Constant -> STRING_CONST
-- On ALIAS reduce production Constant -> STRING_CONST
-- On ACTION reduce production Constant -> STRING_CONST

State 9:
## Known stack suffix:
## STRING_CONST LPAREN
## LR(1) items:
Expr -> STRING_CONST LPAREN . ArgList RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 152
-- On Constant shift to state 76
-- On ArgList shift to state 173
## Reductions:
-- On RPAREN reduce production ArgList ->
-- On COMMA reduce production ArgList ->

State 10:
## Known stack suffix:
## PLUS
## LR(1) items:
Expr -> PLUS . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 172
-- On Constant shift to state 76
## Reductions:

State 11:
## Known stack suffix:
## MINUS
## LR(1) items:
Expr -> MINUS . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 171
-- On Constant shift to state 76
## Reductions:

State 12:
## Known stack suffix:
## LPAREN
## LR(1) items:
Expr -> LPAREN . Expr RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 169
-- On Constant shift to state 76
## Reductions:

State 13:
## Known stack suffix:
## IF
## LR(1) items:
Expr -> IF . Expr THEN Expr ELSE Expr ENDIF [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 163
-- On Constant shift to state 76
## Reductions:

State 14:
## Known stack suffix:
## ID
## LR(1) items:
Expr -> ID . DOT SYNTAX [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> ID . DOT IMAGE [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> ID . DOT ID [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> ID . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> ID . LBRACK Expr RBRACK [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LBRACK shift to state 15
-- On DOT shift to state 159
## Reductions:
-- On VOLATILE reduce production Expr -> ID
-- On VAR reduce production Expr -> ID
-- On USES reduce production Expr -> ID
-- On TYPE reduce production Expr -> ID
-- On THEN reduce production Expr -> ID
-- On SYNTAX reduce production Expr -> ID
-- On STAR reduce production Expr -> ID
-- On SLASH reduce production Expr -> ID
-- On SEMI reduce production Expr -> ID
-- On RPAREN reduce production Expr -> ID
-- On ROTATE_RIGHT reduce production Expr -> ID
-- On ROTATE_LEFT reduce production Expr -> ID
-- On RIGHT_SHIFT reduce production Expr -> ID
-- On RESOURCE reduce production Expr -> ID
-- On REG reduce production Expr -> ID
-- On RBRACK reduce production Expr -> ID
-- On RBRACE reduce production Expr -> ID
-- On PORTS reduce production Expr -> ID
-- On PLUS reduce production Expr -> ID
-- On PIPE reduce production Expr -> ID
-- On PERCENT reduce production Expr -> ID
-- On OR reduce production Expr -> ID
-- On OP reduce production Expr -> ID
-- On NEQ reduce production Expr -> ID
-- On MODE reduce production Expr -> ID
-- On MINUS reduce production Expr -> ID
-- On MEM reduce production Expr -> ID
-- On LT reduce production Expr -> ID
-- On LET reduce production Expr -> ID
-- On LEQ reduce production Expr -> ID
-- On LEFT_SHIFT reduce production Expr -> ID
-- On INITIALA reduce production Expr -> ID
-- On IMAGE reduce production Expr -> ID
-- On ID reduce production Expr -> ID
-- On GT reduce production Expr -> ID
-- On GEQ reduce production Expr -> ID
-- On EXTEND reduce production Expr -> ID
-- On EXCEPTION reduce production Expr -> ID
-- On EQU reduce production Expr -> ID
-- On EOF reduce production Expr -> ID
-- On ENDIF reduce production Expr -> ID
-- On ELSE reduce production Expr -> ID
-- On DOUBLE_STAR reduce production Expr -> ID
-- On DOUBLE_DOT reduce production Expr -> ID
-- On DOUBLE_COLON reduce production Expr -> ID
-- On DEFAULT reduce production Expr -> ID
-- On COMMA reduce production Expr -> ID
-- On COLON reduce production Expr -> ID
-- On CIRC reduce production Expr -> ID
-- On CASE reduce production Expr -> ID
-- On CANON reduce production Expr -> ID
-- On BIT_LEFT reduce production Expr -> ID
-- On AND reduce production Expr -> ID
-- On AMPERS reduce production Expr -> ID
-- On ALIAS reduce production Expr -> ID
-- On ACTION reduce production Expr -> ID

State 15:
## Known stack suffix:
## ID LBRACK
## LR(1) items:
Expr -> ID LBRACK . Expr RBRACK [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 157
-- On Constant shift to state 76
## Reductions:

State 16:
## Known stack suffix:
## FORMAT
## LR(1) items:
Expr -> FORMAT . LPAREN STRING_CONST COMMA ArgList RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## FORMAT LPAREN
## LR(1) items:
Expr -> FORMAT LPAREN . STRING_CONST COMMA ArgList RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STRING_CONST shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## FORMAT LPAREN STRING_CONST
## LR(1) items:
Expr -> FORMAT LPAREN STRING_CONST . COMMA ArgList RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On COMMA shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## FORMAT LPAREN STRING_CONST COMMA
## LR(1) items:
Expr -> FORMAT LPAREN STRING_CONST COMMA . ArgList RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 152
-- On Constant shift to state 76
-- On ArgList shift to state 153
## Reductions:
-- On RPAREN reduce production ArgList ->
-- On COMMA reduce production ArgList ->

State 20:
## Known stack suffix:
## FIXED_CONST
## LR(1) items:
Constant -> FIXED_CONST . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Constant -> FIXED_CONST
-- On VAR reduce production Constant -> FIXED_CONST
-- On USES reduce production Constant -> FIXED_CONST
-- On TYPE reduce production Constant -> FIXED_CONST
-- On THEN reduce production Constant -> FIXED_CONST
-- On SYNTAX reduce production Constant -> FIXED_CONST
-- On STAR reduce production Constant -> FIXED_CONST
-- On SLASH reduce production Constant -> FIXED_CONST
-- On SEMI reduce production Constant -> FIXED_CONST
-- On RPAREN reduce production Constant -> FIXED_CONST
-- On ROTATE_RIGHT reduce production Constant -> FIXED_CONST
-- On ROTATE_LEFT reduce production Constant -> FIXED_CONST
-- On RIGHT_SHIFT reduce production Constant -> FIXED_CONST
-- On RESOURCE reduce production Constant -> FIXED_CONST
-- On REG reduce production Constant -> FIXED_CONST
-- On RBRACK reduce production Constant -> FIXED_CONST
-- On RBRACE reduce production Constant -> FIXED_CONST
-- On PORTS reduce production Constant -> FIXED_CONST
-- On PLUS reduce production Constant -> FIXED_CONST
-- On PIPE reduce production Constant -> FIXED_CONST
-- On PERCENT reduce production Constant -> FIXED_CONST
-- On OR reduce production Constant -> FIXED_CONST
-- On OP reduce production Constant -> FIXED_CONST
-- On NEQ reduce production Constant -> FIXED_CONST
-- On MODE reduce production Constant -> FIXED_CONST
-- On MINUS reduce production Constant -> FIXED_CONST
-- On MEM reduce production Constant -> FIXED_CONST
-- On LT reduce production Constant -> FIXED_CONST
-- On LET reduce production Constant -> FIXED_CONST
-- On LEQ reduce production Constant -> FIXED_CONST
-- On LEFT_SHIFT reduce production Constant -> FIXED_CONST
-- On INITIALA reduce production Constant -> FIXED_CONST
-- On IMAGE reduce production Constant -> FIXED_CONST
-- On ID reduce production Constant -> FIXED_CONST
-- On GT reduce production Constant -> FIXED_CONST
-- On GEQ reduce production Constant -> FIXED_CONST
-- On EXTEND reduce production Constant -> FIXED_CONST
-- On EXCEPTION reduce production Constant -> FIXED_CONST
-- On EQU reduce production Constant -> FIXED_CONST
-- On EOF reduce production Constant -> FIXED_CONST
-- On ENDIF reduce production Constant -> FIXED_CONST
-- On ELSE reduce production Constant -> FIXED_CONST
-- On DOUBLE_STAR reduce production Constant -> FIXED_CONST
-- On DOUBLE_DOT reduce production Constant -> FIXED_CONST
-- On DOUBLE_COLON reduce production Constant -> FIXED_CONST
-- On DEFAULT reduce production Constant -> FIXED_CONST
-- On COMMA reduce production Constant -> FIXED_CONST
-- On COLON reduce production Constant -> FIXED_CONST
-- On CIRC reduce production Constant -> FIXED_CONST
-- On CASE reduce production Constant -> FIXED_CONST
-- On CANON reduce production Constant -> FIXED_CONST
-- On BIT_LEFT reduce production Constant -> FIXED_CONST
-- On AND reduce production Constant -> FIXED_CONST
-- On AMPERS reduce production Constant -> FIXED_CONST
-- On ALIAS reduce production Constant -> FIXED_CONST
-- On ACTION reduce production Constant -> FIXED_CONST

State 21:
## Known stack suffix:
## EXCLAM
## LR(1) items:
Expr -> EXCLAM . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 151
-- On Constant shift to state 76
## Reductions:

State 22:
## Known stack suffix:
## COERCE
## LR(1) items:
Expr -> COERCE . LPAREN Type COMMA Expr RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## COERCE LPAREN
## LR(1) items:
Expr -> COERCE LPAREN . Type COMMA Expr RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On ID shift to state 121
-- On FLOAT shift to state 122
-- On FIX shift to state 128
-- On ENUM shift to state 134
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On TypeExpr shift to state 146
-- On Type shift to state 147
## Reductions:

State 24:
## Known stack suffix:
## LBRACK
## LR(1) items:
TypeExpr -> LBRACK . LetExpr DOUBLE_DOT LetExpr RBRACK [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 31
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 25:
## Known stack suffix:
## CARD_CONST_64
## LR(1) items:
Constant -> CARD_CONST_64 . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Constant -> CARD_CONST_64
-- On VAR reduce production Constant -> CARD_CONST_64
-- On USES reduce production Constant -> CARD_CONST_64
-- On TYPE reduce production Constant -> CARD_CONST_64
-- On THEN reduce production Constant -> CARD_CONST_64
-- On SYNTAX reduce production Constant -> CARD_CONST_64
-- On STAR reduce production Constant -> CARD_CONST_64
-- On SLASH reduce production Constant -> CARD_CONST_64
-- On SEMI reduce production Constant -> CARD_CONST_64
-- On RPAREN reduce production Constant -> CARD_CONST_64
-- On ROTATE_RIGHT reduce production Constant -> CARD_CONST_64
-- On ROTATE_LEFT reduce production Constant -> CARD_CONST_64
-- On RIGHT_SHIFT reduce production Constant -> CARD_CONST_64
-- On RESOURCE reduce production Constant -> CARD_CONST_64
-- On REG reduce production Constant -> CARD_CONST_64
-- On RBRACK reduce production Constant -> CARD_CONST_64
-- On RBRACE reduce production Constant -> CARD_CONST_64
-- On PORTS reduce production Constant -> CARD_CONST_64
-- On PLUS reduce production Constant -> CARD_CONST_64
-- On PIPE reduce production Constant -> CARD_CONST_64
-- On PERCENT reduce production Constant -> CARD_CONST_64
-- On OR reduce production Constant -> CARD_CONST_64
-- On OP reduce production Constant -> CARD_CONST_64
-- On NEQ reduce production Constant -> CARD_CONST_64
-- On MODE reduce production Constant -> CARD_CONST_64
-- On MINUS reduce production Constant -> CARD_CONST_64
-- On MEM reduce production Constant -> CARD_CONST_64
-- On LT reduce production Constant -> CARD_CONST_64
-- On LET reduce production Constant -> CARD_CONST_64
-- On LEQ reduce production Constant -> CARD_CONST_64
-- On LEFT_SHIFT reduce production Constant -> CARD_CONST_64
-- On INITIALA reduce production Constant -> CARD_CONST_64
-- On IMAGE reduce production Constant -> CARD_CONST_64
-- On ID reduce production Constant -> CARD_CONST_64
-- On GT reduce production Constant -> CARD_CONST_64
-- On GEQ reduce production Constant -> CARD_CONST_64
-- On EXTEND reduce production Constant -> CARD_CONST_64
-- On EXCEPTION reduce production Constant -> CARD_CONST_64
-- On EQU reduce production Constant -> CARD_CONST_64
-- On EOF reduce production Constant -> CARD_CONST_64
-- On ENDIF reduce production Constant -> CARD_CONST_64
-- On ELSE reduce production Constant -> CARD_CONST_64
-- On DOUBLE_STAR reduce production Constant -> CARD_CONST_64
-- On DOUBLE_DOT reduce production Constant -> CARD_CONST_64
-- On DOUBLE_COLON reduce production Constant -> CARD_CONST_64
-- On DEFAULT reduce production Constant -> CARD_CONST_64
-- On COMMA reduce production Constant -> CARD_CONST_64
-- On COLON reduce production Constant -> CARD_CONST_64
-- On CIRC reduce production Constant -> CARD_CONST_64
-- On CASE reduce production Constant -> CARD_CONST_64
-- On CANON reduce production Constant -> CARD_CONST_64
-- On BIT_LEFT reduce production Constant -> CARD_CONST_64
-- On AND reduce production Constant -> CARD_CONST_64
-- On AMPERS reduce production Constant -> CARD_CONST_64
-- On ALIAS reduce production Constant -> CARD_CONST_64
-- On ACTION reduce production Constant -> CARD_CONST_64

State 26:
## Known stack suffix:
## CARD_CONST
## LR(1) items:
Constant -> CARD_CONST . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Constant -> CARD_CONST
-- On VAR reduce production Constant -> CARD_CONST
-- On USES reduce production Constant -> CARD_CONST
-- On TYPE reduce production Constant -> CARD_CONST
-- On THEN reduce production Constant -> CARD_CONST
-- On SYNTAX reduce production Constant -> CARD_CONST
-- On STAR reduce production Constant -> CARD_CONST
-- On SLASH reduce production Constant -> CARD_CONST
-- On SEMI reduce production Constant -> CARD_CONST
-- On RPAREN reduce production Constant -> CARD_CONST
-- On ROTATE_RIGHT reduce production Constant -> CARD_CONST
-- On ROTATE_LEFT reduce production Constant -> CARD_CONST
-- On RIGHT_SHIFT reduce production Constant -> CARD_CONST
-- On RESOURCE reduce production Constant -> CARD_CONST
-- On REG reduce production Constant -> CARD_CONST
-- On RBRACK reduce production Constant -> CARD_CONST
-- On RBRACE reduce production Constant -> CARD_CONST
-- On PORTS reduce production Constant -> CARD_CONST
-- On PLUS reduce production Constant -> CARD_CONST
-- On PIPE reduce production Constant -> CARD_CONST
-- On PERCENT reduce production Constant -> CARD_CONST
-- On OR reduce production Constant -> CARD_CONST
-- On OP reduce production Constant -> CARD_CONST
-- On NEQ reduce production Constant -> CARD_CONST
-- On MODE reduce production Constant -> CARD_CONST
-- On MINUS reduce production Constant -> CARD_CONST
-- On MEM reduce production Constant -> CARD_CONST
-- On LT reduce production Constant -> CARD_CONST
-- On LET reduce production Constant -> CARD_CONST
-- On LEQ reduce production Constant -> CARD_CONST
-- On LEFT_SHIFT reduce production Constant -> CARD_CONST
-- On INITIALA reduce production Constant -> CARD_CONST
-- On IMAGE reduce production Constant -> CARD_CONST
-- On ID reduce production Constant -> CARD_CONST
-- On GT reduce production Constant -> CARD_CONST
-- On GEQ reduce production Constant -> CARD_CONST
-- On EXTEND reduce production Constant -> CARD_CONST
-- On EXCEPTION reduce production Constant -> CARD_CONST
-- On EQU reduce production Constant -> CARD_CONST
-- On EOF reduce production Constant -> CARD_CONST
-- On ENDIF reduce production Constant -> CARD_CONST
-- On ELSE reduce production Constant -> CARD_CONST
-- On DOUBLE_STAR reduce production Constant -> CARD_CONST
-- On DOUBLE_DOT reduce production Constant -> CARD_CONST
-- On DOUBLE_COLON reduce production Constant -> CARD_CONST
-- On DEFAULT reduce production Constant -> CARD_CONST
-- On COMMA reduce production Constant -> CARD_CONST
-- On COLON reduce production Constant -> CARD_CONST
-- On CIRC reduce production Constant -> CARD_CONST
-- On CASE reduce production Constant -> CARD_CONST
-- On CANON reduce production Constant -> CARD_CONST
-- On BIT_LEFT reduce production Constant -> CARD_CONST
-- On AND reduce production Constant -> CARD_CONST
-- On AMPERS reduce production Constant -> CARD_CONST
-- On ALIAS reduce production Constant -> CARD_CONST
-- On ACTION reduce production Constant -> CARD_CONST

State 27:
## Known stack suffix:
## BIN_CONST_64
## LR(1) items:
Constant -> BIN_CONST_64 . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Constant -> BIN_CONST_64
-- On VAR reduce production Constant -> BIN_CONST_64
-- On USES reduce production Constant -> BIN_CONST_64
-- On TYPE reduce production Constant -> BIN_CONST_64
-- On THEN reduce production Constant -> BIN_CONST_64
-- On SYNTAX reduce production Constant -> BIN_CONST_64
-- On STAR reduce production Constant -> BIN_CONST_64
-- On SLASH reduce production Constant -> BIN_CONST_64
-- On SEMI reduce production Constant -> BIN_CONST_64
-- On RPAREN reduce production Constant -> BIN_CONST_64
-- On ROTATE_RIGHT reduce production Constant -> BIN_CONST_64
-- On ROTATE_LEFT reduce production Constant -> BIN_CONST_64
-- On RIGHT_SHIFT reduce production Constant -> BIN_CONST_64
-- On RESOURCE reduce production Constant -> BIN_CONST_64
-- On REG reduce production Constant -> BIN_CONST_64
-- On RBRACK reduce production Constant -> BIN_CONST_64
-- On RBRACE reduce production Constant -> BIN_CONST_64
-- On PORTS reduce production Constant -> BIN_CONST_64
-- On PLUS reduce production Constant -> BIN_CONST_64
-- On PIPE reduce production Constant -> BIN_CONST_64
-- On PERCENT reduce production Constant -> BIN_CONST_64
-- On OR reduce production Constant -> BIN_CONST_64
-- On OP reduce production Constant -> BIN_CONST_64
-- On NEQ reduce production Constant -> BIN_CONST_64
-- On MODE reduce production Constant -> BIN_CONST_64
-- On MINUS reduce production Constant -> BIN_CONST_64
-- On MEM reduce production Constant -> BIN_CONST_64
-- On LT reduce production Constant -> BIN_CONST_64
-- On LET reduce production Constant -> BIN_CONST_64
-- On LEQ reduce production Constant -> BIN_CONST_64
-- On LEFT_SHIFT reduce production Constant -> BIN_CONST_64
-- On INITIALA reduce production Constant -> BIN_CONST_64
-- On IMAGE reduce production Constant -> BIN_CONST_64
-- On ID reduce production Constant -> BIN_CONST_64
-- On GT reduce production Constant -> BIN_CONST_64
-- On GEQ reduce production Constant -> BIN_CONST_64
-- On EXTEND reduce production Constant -> BIN_CONST_64
-- On EXCEPTION reduce production Constant -> BIN_CONST_64
-- On EQU reduce production Constant -> BIN_CONST_64
-- On EOF reduce production Constant -> BIN_CONST_64
-- On ENDIF reduce production Constant -> BIN_CONST_64
-- On ELSE reduce production Constant -> BIN_CONST_64
-- On DOUBLE_STAR reduce production Constant -> BIN_CONST_64
-- On DOUBLE_DOT reduce production Constant -> BIN_CONST_64
-- On DOUBLE_COLON reduce production Constant -> BIN_CONST_64
-- On DEFAULT reduce production Constant -> BIN_CONST_64
-- On COMMA reduce production Constant -> BIN_CONST_64
-- On COLON reduce production Constant -> BIN_CONST_64
-- On CIRC reduce production Constant -> BIN_CONST_64
-- On CASE reduce production Constant -> BIN_CONST_64
-- On CANON reduce production Constant -> BIN_CONST_64
-- On BIT_LEFT reduce production Constant -> BIN_CONST_64
-- On AND reduce production Constant -> BIN_CONST_64
-- On AMPERS reduce production Constant -> BIN_CONST_64
-- On ALIAS reduce production Constant -> BIN_CONST_64
-- On ACTION reduce production Constant -> BIN_CONST_64

State 28:
## Known stack suffix:
## BIN_CONST
## LR(1) items:
Constant -> BIN_CONST . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Constant -> BIN_CONST
-- On VAR reduce production Constant -> BIN_CONST
-- On USES reduce production Constant -> BIN_CONST
-- On TYPE reduce production Constant -> BIN_CONST
-- On THEN reduce production Constant -> BIN_CONST
-- On SYNTAX reduce production Constant -> BIN_CONST
-- On STAR reduce production Constant -> BIN_CONST
-- On SLASH reduce production Constant -> BIN_CONST
-- On SEMI reduce production Constant -> BIN_CONST
-- On RPAREN reduce production Constant -> BIN_CONST
-- On ROTATE_RIGHT reduce production Constant -> BIN_CONST
-- On ROTATE_LEFT reduce production Constant -> BIN_CONST
-- On RIGHT_SHIFT reduce production Constant -> BIN_CONST
-- On RESOURCE reduce production Constant -> BIN_CONST
-- On REG reduce production Constant -> BIN_CONST
-- On RBRACK reduce production Constant -> BIN_CONST
-- On RBRACE reduce production Constant -> BIN_CONST
-- On PORTS reduce production Constant -> BIN_CONST
-- On PLUS reduce production Constant -> BIN_CONST
-- On PIPE reduce production Constant -> BIN_CONST
-- On PERCENT reduce production Constant -> BIN_CONST
-- On OR reduce production Constant -> BIN_CONST
-- On OP reduce production Constant -> BIN_CONST
-- On NEQ reduce production Constant -> BIN_CONST
-- On MODE reduce production Constant -> BIN_CONST
-- On MINUS reduce production Constant -> BIN_CONST
-- On MEM reduce production Constant -> BIN_CONST
-- On LT reduce production Constant -> BIN_CONST
-- On LET reduce production Constant -> BIN_CONST
-- On LEQ reduce production Constant -> BIN_CONST
-- On LEFT_SHIFT reduce production Constant -> BIN_CONST
-- On INITIALA reduce production Constant -> BIN_CONST
-- On IMAGE reduce production Constant -> BIN_CONST
-- On ID reduce production Constant -> BIN_CONST
-- On GT reduce production Constant -> BIN_CONST
-- On GEQ reduce production Constant -> BIN_CONST
-- On EXTEND reduce production Constant -> BIN_CONST
-- On EXCEPTION reduce production Constant -> BIN_CONST
-- On EQU reduce production Constant -> BIN_CONST
-- On EOF reduce production Constant -> BIN_CONST
-- On ENDIF reduce production Constant -> BIN_CONST
-- On ELSE reduce production Constant -> BIN_CONST
-- On DOUBLE_STAR reduce production Constant -> BIN_CONST
-- On DOUBLE_DOT reduce production Constant -> BIN_CONST
-- On DOUBLE_COLON reduce production Constant -> BIN_CONST
-- On DEFAULT reduce production Constant -> BIN_CONST
-- On COMMA reduce production Constant -> BIN_CONST
-- On COLON reduce production Constant -> BIN_CONST
-- On CIRC reduce production Constant -> BIN_CONST
-- On CASE reduce production Constant -> BIN_CONST
-- On CANON reduce production Constant -> BIN_CONST
-- On BIT_LEFT reduce production Constant -> BIN_CONST
-- On AND reduce production Constant -> BIN_CONST
-- On AMPERS reduce production Constant -> BIN_CONST
-- On ALIAS reduce production Constant -> BIN_CONST
-- On ACTION reduce production Constant -> BIN_CONST

State 29:
## Known stack suffix:
## AROBAS
## LR(1) items:
Expr -> AROBAS . STRING_CONST [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STRING_CONST shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## AROBAS STRING_CONST
## LR(1) items:
Expr -> AROBAS STRING_CONST . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> AROBAS STRING_CONST
-- On VAR reduce production Expr -> AROBAS STRING_CONST
-- On USES reduce production Expr -> AROBAS STRING_CONST
-- On TYPE reduce production Expr -> AROBAS STRING_CONST
-- On THEN reduce production Expr -> AROBAS STRING_CONST
-- On SYNTAX reduce production Expr -> AROBAS STRING_CONST
-- On STAR reduce production Expr -> AROBAS STRING_CONST
-- On SLASH reduce production Expr -> AROBAS STRING_CONST
-- On SEMI reduce production Expr -> AROBAS STRING_CONST
-- On RPAREN reduce production Expr -> AROBAS STRING_CONST
-- On ROTATE_RIGHT reduce production Expr -> AROBAS STRING_CONST
-- On ROTATE_LEFT reduce production Expr -> AROBAS STRING_CONST
-- On RIGHT_SHIFT reduce production Expr -> AROBAS STRING_CONST
-- On RESOURCE reduce production Expr -> AROBAS STRING_CONST
-- On REG reduce production Expr -> AROBAS STRING_CONST
-- On RBRACK reduce production Expr -> AROBAS STRING_CONST
-- On RBRACE reduce production Expr -> AROBAS STRING_CONST
-- On PORTS reduce production Expr -> AROBAS STRING_CONST
-- On PLUS reduce production Expr -> AROBAS STRING_CONST
-- On PIPE reduce production Expr -> AROBAS STRING_CONST
-- On PERCENT reduce production Expr -> AROBAS STRING_CONST
-- On OR reduce production Expr -> AROBAS STRING_CONST
-- On OP reduce production Expr -> AROBAS STRING_CONST
-- On NEQ reduce production Expr -> AROBAS STRING_CONST
-- On MODE reduce production Expr -> AROBAS STRING_CONST
-- On MINUS reduce production Expr -> AROBAS STRING_CONST
-- On MEM reduce production Expr -> AROBAS STRING_CONST
-- On LT reduce production Expr -> AROBAS STRING_CONST
-- On LET reduce production Expr -> AROBAS STRING_CONST
-- On LEQ reduce production Expr -> AROBAS STRING_CONST
-- On LEFT_SHIFT reduce production Expr -> AROBAS STRING_CONST
-- On INITIALA reduce production Expr -> AROBAS STRING_CONST
-- On IMAGE reduce production Expr -> AROBAS STRING_CONST
-- On ID reduce production Expr -> AROBAS STRING_CONST
-- On GT reduce production Expr -> AROBAS STRING_CONST
-- On GEQ reduce production Expr -> AROBAS STRING_CONST
-- On EXTEND reduce production Expr -> AROBAS STRING_CONST
-- On EXCEPTION reduce production Expr -> AROBAS STRING_CONST
-- On EQU reduce production Expr -> AROBAS STRING_CONST
-- On EOF reduce production Expr -> AROBAS STRING_CONST
-- On ENDIF reduce production Expr -> AROBAS STRING_CONST
-- On ELSE reduce production Expr -> AROBAS STRING_CONST
-- On DOUBLE_STAR reduce production Expr -> AROBAS STRING_CONST
-- On DOUBLE_DOT reduce production Expr -> AROBAS STRING_CONST
-- On DOUBLE_COLON reduce production Expr -> AROBAS STRING_CONST
-- On DEFAULT reduce production Expr -> AROBAS STRING_CONST
-- On COMMA reduce production Expr -> AROBAS STRING_CONST
-- On COLON reduce production Expr -> AROBAS STRING_CONST
-- On CIRC reduce production Expr -> AROBAS STRING_CONST
-- On CASE reduce production Expr -> AROBAS STRING_CONST
-- On CANON reduce production Expr -> AROBAS STRING_CONST
-- On BIT_LEFT reduce production Expr -> AROBAS STRING_CONST
-- On AND reduce production Expr -> AROBAS STRING_CONST
-- On AMPERS reduce production Expr -> AROBAS STRING_CONST
-- On ALIAS reduce production Expr -> AROBAS STRING_CONST
-- On ACTION reduce production Expr -> AROBAS STRING_CONST

State 31:
## Known stack suffix:
## LBRACK LetExpr
## LR(1) items:
TypeExpr -> LBRACK LetExpr . DOUBLE_DOT LetExpr RBRACK [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On DOUBLE_DOT shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## LBRACK LetExpr DOUBLE_DOT
## LR(1) items:
TypeExpr -> LBRACK LetExpr DOUBLE_DOT . LetExpr RBRACK [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 33
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 33:
## Known stack suffix:
## LBRACK LetExpr DOUBLE_DOT LetExpr
## LR(1) items:
TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr . RBRACK [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On RBRACK shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
## LR(1) items:
TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK . [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On TYPE reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On STRING_CONST reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On RPAREN reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On RESOURCE reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On REG reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On RBRACK reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On OP reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On MODE reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On MEM reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On LET reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On EXTEND reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On EXCEPTION reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On EOF reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On COMMA reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK
-- On CANON reduce production TypeExpr -> LBRACK LetExpr DOUBLE_DOT LetExpr RBRACK

State 35:
## Known stack suffix:
## Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON COMMA CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
LetExpr -> Expr . [ VOLATILE VAR USES TYPE RPAREN RESOURCE REG RBRACK PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF DOUBLE_DOT COMMA CANON ALIAS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On VOLATILE reduce production LetExpr -> Expr
-- On VAR reduce production LetExpr -> Expr
-- On USES reduce production LetExpr -> Expr
-- On TYPE reduce production LetExpr -> Expr
-- On RPAREN reduce production LetExpr -> Expr
-- On RESOURCE reduce production LetExpr -> Expr
-- On REG reduce production LetExpr -> Expr
-- On RBRACK reduce production LetExpr -> Expr
-- On PORTS reduce production LetExpr -> Expr
-- On OP reduce production LetExpr -> Expr
-- On MODE reduce production LetExpr -> Expr
-- On MEM reduce production LetExpr -> Expr
-- On LET reduce production LetExpr -> Expr
-- On INITIALA reduce production LetExpr -> Expr
-- On ID reduce production LetExpr -> Expr
-- On EXTEND reduce production LetExpr -> Expr
-- On EXCEPTION reduce production LetExpr -> Expr
-- On EOF reduce production LetExpr -> Expr
-- On DOUBLE_DOT reduce production LetExpr -> Expr
-- On COMMA reduce production LetExpr -> Expr
-- On CANON reduce production LetExpr -> Expr
-- On ALIAS reduce production LetExpr -> Expr

State 36:
## Known stack suffix:
## Expr STAR
## LR(1) items:
Expr -> Expr STAR . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 37
-- On Constant shift to state 76
## Reductions:

State 37:
## Known stack suffix:
## Expr STAR Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr STAR Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr STAR Expr
-- On VAR reduce production Expr -> Expr STAR Expr
-- On USES reduce production Expr -> Expr STAR Expr
-- On TYPE reduce production Expr -> Expr STAR Expr
-- On THEN reduce production Expr -> Expr STAR Expr
-- On SYNTAX reduce production Expr -> Expr STAR Expr
-- On STAR reduce production Expr -> Expr STAR Expr
-- On SLASH reduce production Expr -> Expr STAR Expr
-- On SEMI reduce production Expr -> Expr STAR Expr
-- On RPAREN reduce production Expr -> Expr STAR Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr STAR Expr
-- On ROTATE_LEFT reduce production Expr -> Expr STAR Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr STAR Expr
-- On RESOURCE reduce production Expr -> Expr STAR Expr
-- On REG reduce production Expr -> Expr STAR Expr
-- On RBRACK reduce production Expr -> Expr STAR Expr
-- On RBRACE reduce production Expr -> Expr STAR Expr
-- On PORTS reduce production Expr -> Expr STAR Expr
-- On PLUS reduce production Expr -> Expr STAR Expr
-- On PIPE reduce production Expr -> Expr STAR Expr
-- On PERCENT reduce production Expr -> Expr STAR Expr
-- On OR reduce production Expr -> Expr STAR Expr
-- On OP reduce production Expr -> Expr STAR Expr
-- On NEQ reduce production Expr -> Expr STAR Expr
-- On MODE reduce production Expr -> Expr STAR Expr
-- On MINUS reduce production Expr -> Expr STAR Expr
-- On MEM reduce production Expr -> Expr STAR Expr
-- On LT reduce production Expr -> Expr STAR Expr
-- On LET reduce production Expr -> Expr STAR Expr
-- On LEQ reduce production Expr -> Expr STAR Expr
-- On LEFT_SHIFT reduce production Expr -> Expr STAR Expr
-- On INITIALA reduce production Expr -> Expr STAR Expr
-- On IMAGE reduce production Expr -> Expr STAR Expr
-- On ID reduce production Expr -> Expr STAR Expr
-- On GT reduce production Expr -> Expr STAR Expr
-- On GEQ reduce production Expr -> Expr STAR Expr
-- On EXTEND reduce production Expr -> Expr STAR Expr
-- On EXCEPTION reduce production Expr -> Expr STAR Expr
-- On EQU reduce production Expr -> Expr STAR Expr
-- On EOF reduce production Expr -> Expr STAR Expr
-- On ENDIF reduce production Expr -> Expr STAR Expr
-- On ELSE reduce production Expr -> Expr STAR Expr
-- On DOUBLE_DOT reduce production Expr -> Expr STAR Expr
-- On DOUBLE_COLON reduce production Expr -> Expr STAR Expr
-- On DEFAULT reduce production Expr -> Expr STAR Expr
-- On COMMA reduce production Expr -> Expr STAR Expr
-- On COLON reduce production Expr -> Expr STAR Expr
-- On CIRC reduce production Expr -> Expr STAR Expr
-- On CASE reduce production Expr -> Expr STAR Expr
-- On CANON reduce production Expr -> Expr STAR Expr
-- On AND reduce production Expr -> Expr STAR Expr
-- On AMPERS reduce production Expr -> Expr STAR Expr
-- On ALIAS reduce production Expr -> Expr STAR Expr
-- On ACTION reduce production Expr -> Expr STAR Expr

State 38:
## Known stack suffix:
## Expr DOUBLE_STAR
## LR(1) items:
Expr -> Expr DOUBLE_STAR . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 39
-- On Constant shift to state 76
## Reductions:

State 39:
## Known stack suffix:
## Expr DOUBLE_STAR Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr DOUBLE_STAR Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr DOUBLE_STAR Expr
-- On VAR reduce production Expr -> Expr DOUBLE_STAR Expr
-- On USES reduce production Expr -> Expr DOUBLE_STAR Expr
-- On TYPE reduce production Expr -> Expr DOUBLE_STAR Expr
-- On THEN reduce production Expr -> Expr DOUBLE_STAR Expr
-- On SYNTAX reduce production Expr -> Expr DOUBLE_STAR Expr
-- On STAR reduce production Expr -> Expr DOUBLE_STAR Expr
-- On SLASH reduce production Expr -> Expr DOUBLE_STAR Expr
-- On SEMI reduce production Expr -> Expr DOUBLE_STAR Expr
-- On RPAREN reduce production Expr -> Expr DOUBLE_STAR Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr DOUBLE_STAR Expr
-- On ROTATE_LEFT reduce production Expr -> Expr DOUBLE_STAR Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr DOUBLE_STAR Expr
-- On RESOURCE reduce production Expr -> Expr DOUBLE_STAR Expr
-- On REG reduce production Expr -> Expr DOUBLE_STAR Expr
-- On RBRACK reduce production Expr -> Expr DOUBLE_STAR Expr
-- On RBRACE reduce production Expr -> Expr DOUBLE_STAR Expr
-- On PORTS reduce production Expr -> Expr DOUBLE_STAR Expr
-- On PLUS reduce production Expr -> Expr DOUBLE_STAR Expr
-- On PIPE reduce production Expr -> Expr DOUBLE_STAR Expr
-- On PERCENT reduce production Expr -> Expr DOUBLE_STAR Expr
-- On OR reduce production Expr -> Expr DOUBLE_STAR Expr
-- On OP reduce production Expr -> Expr DOUBLE_STAR Expr
-- On NEQ reduce production Expr -> Expr DOUBLE_STAR Expr
-- On MODE reduce production Expr -> Expr DOUBLE_STAR Expr
-- On MINUS reduce production Expr -> Expr DOUBLE_STAR Expr
-- On MEM reduce production Expr -> Expr DOUBLE_STAR Expr
-- On LT reduce production Expr -> Expr DOUBLE_STAR Expr
-- On LET reduce production Expr -> Expr DOUBLE_STAR Expr
-- On LEQ reduce production Expr -> Expr DOUBLE_STAR Expr
-- On LEFT_SHIFT reduce production Expr -> Expr DOUBLE_STAR Expr
-- On INITIALA reduce production Expr -> Expr DOUBLE_STAR Expr
-- On IMAGE reduce production Expr -> Expr DOUBLE_STAR Expr
-- On ID reduce production Expr -> Expr DOUBLE_STAR Expr
-- On GT reduce production Expr -> Expr DOUBLE_STAR Expr
-- On GEQ reduce production Expr -> Expr DOUBLE_STAR Expr
-- On EXTEND reduce production Expr -> Expr DOUBLE_STAR Expr
-- On EXCEPTION reduce production Expr -> Expr DOUBLE_STAR Expr
-- On EQU reduce production Expr -> Expr DOUBLE_STAR Expr
-- On EOF reduce production Expr -> Expr DOUBLE_STAR Expr
-- On ENDIF reduce production Expr -> Expr DOUBLE_STAR Expr
-- On ELSE reduce production Expr -> Expr DOUBLE_STAR Expr
-- On DOUBLE_DOT reduce production Expr -> Expr DOUBLE_STAR Expr
-- On DOUBLE_COLON reduce production Expr -> Expr DOUBLE_STAR Expr
-- On DEFAULT reduce production Expr -> Expr DOUBLE_STAR Expr
-- On COMMA reduce production Expr -> Expr DOUBLE_STAR Expr
-- On COLON reduce production Expr -> Expr DOUBLE_STAR Expr
-- On CIRC reduce production Expr -> Expr DOUBLE_STAR Expr
-- On CASE reduce production Expr -> Expr DOUBLE_STAR Expr
-- On CANON reduce production Expr -> Expr DOUBLE_STAR Expr
-- On AND reduce production Expr -> Expr DOUBLE_STAR Expr
-- On AMPERS reduce production Expr -> Expr DOUBLE_STAR Expr
-- On ALIAS reduce production Expr -> Expr DOUBLE_STAR Expr
-- On ACTION reduce production Expr -> Expr DOUBLE_STAR Expr

State 40:
## Known stack suffix:
## Expr BIT_LEFT
## LR(1) items:
Expr -> Expr BIT_LEFT . Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 72
## Reductions:

State 41:
## Known stack suffix:
## TILD
## LR(1) items:
Bit_Expr -> TILD . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 71
## Reductions:

State 42:
## Known stack suffix:
## STRING_CONST
## LR(1) items:
Bit_Expr -> STRING_CONST . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
## Reductions:
-- On STAR reduce production Bit_Expr -> STRING_CONST
-- On SLASH reduce production Bit_Expr -> STRING_CONST
-- On RPAREN reduce production Bit_Expr -> STRING_CONST
-- On PLUS reduce production Bit_Expr -> STRING_CONST
-- On PIPE reduce production Bit_Expr -> STRING_CONST
-- On PERCENT reduce production Bit_Expr -> STRING_CONST
-- On MINUS reduce production Bit_Expr -> STRING_CONST
-- On GT reduce production Bit_Expr -> STRING_CONST
-- On DOUBLE_STAR reduce production Bit_Expr -> STRING_CONST
-- On DOUBLE_DOT reduce production Bit_Expr -> STRING_CONST
-- On CIRC reduce production Bit_Expr -> STRING_CONST
-- On AMPERS reduce production Bit_Expr -> STRING_CONST

State 43:
## Known stack suffix:
## PLUS
## LR(1) items:
Bit_Expr -> PLUS . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 70
## Reductions:

State 44:
## Known stack suffix:
## MINUS
## LR(1) items:
Bit_Expr -> MINUS . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 69
## Reductions:

State 45:
## Known stack suffix:
## LPAREN
## LR(1) items:
Bit_Expr -> LPAREN . Bit_Expr RPAREN [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 49
## Reductions:

State 46:
## Known stack suffix:
## ID
## LR(1) items:
Bit_Expr -> ID . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
## Reductions:
-- On STAR reduce production Bit_Expr -> ID
-- On SLASH reduce production Bit_Expr -> ID
-- On RPAREN reduce production Bit_Expr -> ID
-- On PLUS reduce production Bit_Expr -> ID
-- On PIPE reduce production Bit_Expr -> ID
-- On PERCENT reduce production Bit_Expr -> ID
-- On MINUS reduce production Bit_Expr -> ID
-- On GT reduce production Bit_Expr -> ID
-- On DOUBLE_STAR reduce production Bit_Expr -> ID
-- On DOUBLE_DOT reduce production Bit_Expr -> ID
-- On CIRC reduce production Bit_Expr -> ID
-- On AMPERS reduce production Bit_Expr -> ID

State 47:
## Known stack suffix:
## FIXED_CONST
## LR(1) items:
Bit_Expr -> FIXED_CONST . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
## Reductions:
-- On STAR reduce production Bit_Expr -> FIXED_CONST
-- On SLASH reduce production Bit_Expr -> FIXED_CONST
-- On RPAREN reduce production Bit_Expr -> FIXED_CONST
-- On PLUS reduce production Bit_Expr -> FIXED_CONST
-- On PIPE reduce production Bit_Expr -> FIXED_CONST
-- On PERCENT reduce production Bit_Expr -> FIXED_CONST
-- On MINUS reduce production Bit_Expr -> FIXED_CONST
-- On GT reduce production Bit_Expr -> FIXED_CONST
-- On DOUBLE_STAR reduce production Bit_Expr -> FIXED_CONST
-- On DOUBLE_DOT reduce production Bit_Expr -> FIXED_CONST
-- On CIRC reduce production Bit_Expr -> FIXED_CONST
-- On AMPERS reduce production Bit_Expr -> FIXED_CONST

State 48:
## Known stack suffix:
## CARD_CONST
## LR(1) items:
Bit_Expr -> CARD_CONST . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
## Reductions:
-- On STAR reduce production Bit_Expr -> CARD_CONST
-- On SLASH reduce production Bit_Expr -> CARD_CONST
-- On RPAREN reduce production Bit_Expr -> CARD_CONST
-- On PLUS reduce production Bit_Expr -> CARD_CONST
-- On PIPE reduce production Bit_Expr -> CARD_CONST
-- On PERCENT reduce production Bit_Expr -> CARD_CONST
-- On MINUS reduce production Bit_Expr -> CARD_CONST
-- On GT reduce production Bit_Expr -> CARD_CONST
-- On DOUBLE_STAR reduce production Bit_Expr -> CARD_CONST
-- On DOUBLE_DOT reduce production Bit_Expr -> CARD_CONST
-- On CIRC reduce production Bit_Expr -> CARD_CONST
-- On AMPERS reduce production Bit_Expr -> CARD_CONST

State 49:
## Known stack suffix:
## LPAREN Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> LPAREN Bit_Expr . RPAREN [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On RPAREN shift to state 56
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On DOUBLE_STAR shift to state 52
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 50:
## Known stack suffix:
## Bit_Expr STAR
## LR(1) items:
Bit_Expr -> Bit_Expr STAR . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## Bit_Expr STAR Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr STAR Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On DOUBLE_STAR shift to state 52
## Reductions:
-- On STAR reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On SLASH reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On RPAREN reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On PLUS reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On PIPE reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On PERCENT reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On MINUS reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On GT reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On CIRC reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr
-- On AMPERS reduce production Bit_Expr -> Bit_Expr STAR Bit_Expr

State 52:
## Known stack suffix:
## Bit_Expr DOUBLE_STAR
## LR(1) items:
Bit_Expr -> Bit_Expr DOUBLE_STAR . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## Bit_Expr DOUBLE_STAR Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On DOUBLE_STAR shift to state 52
## Reductions:
-- On STAR reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On SLASH reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On RPAREN reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On PLUS reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On PIPE reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On PERCENT reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On MINUS reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On GT reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On CIRC reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr
-- On AMPERS reduce production Bit_Expr -> Bit_Expr DOUBLE_STAR Bit_Expr

State 54:
## Known stack suffix:
## Bit_Expr SLASH
## LR(1) items:
Bit_Expr -> Bit_Expr SLASH . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## Bit_Expr SLASH Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr SLASH Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On DOUBLE_STAR shift to state 52
## Reductions:
-- On STAR reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On SLASH reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On RPAREN reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On PLUS reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On PIPE reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On PERCENT reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On MINUS reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On GT reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On CIRC reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr
-- On AMPERS reduce production Bit_Expr -> Bit_Expr SLASH Bit_Expr

State 56:
## Known stack suffix:
## LPAREN Bit_Expr RPAREN
## LR(1) items:
Bit_Expr -> LPAREN Bit_Expr RPAREN . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
## Reductions:
-- On STAR reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On SLASH reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On RPAREN reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On PLUS reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On PIPE reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On PERCENT reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On MINUS reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On GT reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On DOUBLE_STAR reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On DOUBLE_DOT reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On CIRC reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN
-- On AMPERS reduce production Bit_Expr -> LPAREN Bit_Expr RPAREN

State 57:
## Known stack suffix:
## Bit_Expr PLUS
## LR(1) items:
Bit_Expr -> Bit_Expr PLUS . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## Bit_Expr PLUS Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr PLUS Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PERCENT shift to state 59
-- On DOUBLE_STAR shift to state 52
## Reductions:
-- On RPAREN reduce production Bit_Expr -> Bit_Expr PLUS Bit_Expr
-- On PLUS reduce production Bit_Expr -> Bit_Expr PLUS Bit_Expr
-- On PIPE reduce production Bit_Expr -> Bit_Expr PLUS Bit_Expr
-- On MINUS reduce production Bit_Expr -> Bit_Expr PLUS Bit_Expr
-- On GT reduce production Bit_Expr -> Bit_Expr PLUS Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> Bit_Expr PLUS Bit_Expr
-- On CIRC reduce production Bit_Expr -> Bit_Expr PLUS Bit_Expr
-- On AMPERS reduce production Bit_Expr -> Bit_Expr PLUS Bit_Expr

State 59:
## Known stack suffix:
## Bit_Expr PERCENT
## LR(1) items:
Bit_Expr -> Bit_Expr PERCENT . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## Bit_Expr PERCENT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr PERCENT Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On DOUBLE_STAR shift to state 52
## Reductions:
-- On STAR reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On SLASH reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On RPAREN reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On PLUS reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On PIPE reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On PERCENT reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On MINUS reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On GT reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On CIRC reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr
-- On AMPERS reduce production Bit_Expr -> Bit_Expr PERCENT Bit_Expr

State 61:
## Known stack suffix:
## Bit_Expr PIPE
## LR(1) items:
Bit_Expr -> Bit_Expr PIPE . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## Bit_Expr PIPE Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr PIPE Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On DOUBLE_STAR shift to state 52
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:
-- On RPAREN reduce production Bit_Expr -> Bit_Expr PIPE Bit_Expr
-- On PIPE reduce production Bit_Expr -> Bit_Expr PIPE Bit_Expr
-- On GT reduce production Bit_Expr -> Bit_Expr PIPE Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> Bit_Expr PIPE Bit_Expr

State 63:
## Known stack suffix:
## Bit_Expr MINUS
## LR(1) items:
Bit_Expr -> Bit_Expr MINUS . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## Bit_Expr MINUS Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr MINUS Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PERCENT shift to state 59
-- On DOUBLE_STAR shift to state 52
## Reductions:
-- On RPAREN reduce production Bit_Expr -> Bit_Expr MINUS Bit_Expr
-- On PLUS reduce production Bit_Expr -> Bit_Expr MINUS Bit_Expr
-- On PIPE reduce production Bit_Expr -> Bit_Expr MINUS Bit_Expr
-- On MINUS reduce production Bit_Expr -> Bit_Expr MINUS Bit_Expr
-- On GT reduce production Bit_Expr -> Bit_Expr MINUS Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> Bit_Expr MINUS Bit_Expr
-- On CIRC reduce production Bit_Expr -> Bit_Expr MINUS Bit_Expr
-- On AMPERS reduce production Bit_Expr -> Bit_Expr MINUS Bit_Expr

State 65:
## Known stack suffix:
## Bit_Expr CIRC
## LR(1) items:
Bit_Expr -> Bit_Expr CIRC . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## Bit_Expr CIRC Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr CIRC Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On DOUBLE_STAR shift to state 52
-- On AMPERS shift to state 67
## Reductions:
-- On RPAREN reduce production Bit_Expr -> Bit_Expr CIRC Bit_Expr
-- On PIPE reduce production Bit_Expr -> Bit_Expr CIRC Bit_Expr
-- On GT reduce production Bit_Expr -> Bit_Expr CIRC Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> Bit_Expr CIRC Bit_Expr
-- On CIRC reduce production Bit_Expr -> Bit_Expr CIRC Bit_Expr

State 67:
## Known stack suffix:
## Bit_Expr AMPERS
## LR(1) items:
Bit_Expr -> Bit_Expr AMPERS . Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## Bit_Expr AMPERS Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr AMPERS Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On DOUBLE_STAR shift to state 52
## Reductions:
-- On RPAREN reduce production Bit_Expr -> Bit_Expr AMPERS Bit_Expr
-- On PIPE reduce production Bit_Expr -> Bit_Expr AMPERS Bit_Expr
-- On GT reduce production Bit_Expr -> Bit_Expr AMPERS Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> Bit_Expr AMPERS Bit_Expr
-- On CIRC reduce production Bit_Expr -> Bit_Expr AMPERS Bit_Expr
-- On AMPERS reduce production Bit_Expr -> Bit_Expr AMPERS Bit_Expr

State 69:
## Known stack suffix:
## MINUS Bit_Expr
## LR(1) items:
Bit_Expr -> MINUS Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PERCENT shift to state 59
-- On DOUBLE_STAR shift to state 52
## Reductions:
-- On RPAREN reduce production Bit_Expr -> MINUS Bit_Expr
-- On PLUS reduce production Bit_Expr -> MINUS Bit_Expr
-- On PIPE reduce production Bit_Expr -> MINUS Bit_Expr
-- On MINUS reduce production Bit_Expr -> MINUS Bit_Expr
-- On GT reduce production Bit_Expr -> MINUS Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> MINUS Bit_Expr
-- On CIRC reduce production Bit_Expr -> MINUS Bit_Expr
-- On AMPERS reduce production Bit_Expr -> MINUS Bit_Expr

State 70:
## Known stack suffix:
## PLUS Bit_Expr
## LR(1) items:
Bit_Expr -> PLUS Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PERCENT shift to state 59
-- On DOUBLE_STAR shift to state 52
## Reductions:
-- On RPAREN reduce production Bit_Expr -> PLUS Bit_Expr
-- On PLUS reduce production Bit_Expr -> PLUS Bit_Expr
-- On PIPE reduce production Bit_Expr -> PLUS Bit_Expr
-- On MINUS reduce production Bit_Expr -> PLUS Bit_Expr
-- On GT reduce production Bit_Expr -> PLUS Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> PLUS Bit_Expr
-- On CIRC reduce production Bit_Expr -> PLUS Bit_Expr
-- On AMPERS reduce production Bit_Expr -> PLUS Bit_Expr

State 71:
## Known stack suffix:
## TILD Bit_Expr
## LR(1) items:
Bit_Expr -> TILD Bit_Expr . [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH RPAREN PLUS PIPE PERCENT MINUS GT DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
## Transitions:
## Reductions:
-- On STAR reduce production Bit_Expr -> TILD Bit_Expr
-- On SLASH reduce production Bit_Expr -> TILD Bit_Expr
-- On RPAREN reduce production Bit_Expr -> TILD Bit_Expr
-- On PLUS reduce production Bit_Expr -> TILD Bit_Expr
-- On PIPE reduce production Bit_Expr -> TILD Bit_Expr
-- On PERCENT reduce production Bit_Expr -> TILD Bit_Expr
-- On MINUS reduce production Bit_Expr -> TILD Bit_Expr
-- On GT reduce production Bit_Expr -> TILD Bit_Expr
-- On DOUBLE_STAR reduce production Bit_Expr -> TILD Bit_Expr
-- On DOUBLE_DOT reduce production Bit_Expr -> TILD Bit_Expr
-- On CIRC reduce production Bit_Expr -> TILD Bit_Expr
-- On AMPERS reduce production Bit_Expr -> TILD Bit_Expr

State 72:
## Known stack suffix:
## Expr BIT_LEFT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Expr -> Expr BIT_LEFT Bit_Expr . DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On DOUBLE_STAR shift to state 52
-- On DOUBLE_DOT shift to state 73
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 73:
## Known stack suffix:
## Expr BIT_LEFT Bit_Expr DOUBLE_DOT
## LR(1) items:
Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT . Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr . GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On GT shift to state 75
-- On DOUBLE_STAR shift to state 52
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 75:
## Known stack suffix:
## Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
## LR(1) items:
Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On VAR reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On USES reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On TYPE reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On THEN reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On SYNTAX reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On STAR reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On SLASH reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On SEMI reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On RPAREN reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ROTATE_RIGHT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ROTATE_LEFT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On RIGHT_SHIFT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On RESOURCE reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On REG reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On RBRACK reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On RBRACE reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On PORTS reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On PLUS reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On PIPE reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On PERCENT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On OR reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On OP reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On NEQ reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On MODE reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On MINUS reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On MEM reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On LT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On LET reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On LEQ reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On LEFT_SHIFT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On INITIALA reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On IMAGE reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ID reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On GT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On GEQ reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EXTEND reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EXCEPTION reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EQU reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EOF reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ENDIF reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ELSE reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On DOUBLE_STAR reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On DOUBLE_DOT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On DOUBLE_COLON reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On DEFAULT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On COMMA reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On COLON reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On CIRC reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On CASE reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On CANON reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On BIT_LEFT reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On AND reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On AMPERS reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ALIAS reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ACTION reduce production Expr -> Expr BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT

State 76:
## Known stack suffix:
## Constant
## LR(1) items:
Expr -> Constant . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> Constant
-- On VAR reduce production Expr -> Constant
-- On USES reduce production Expr -> Constant
-- On TYPE reduce production Expr -> Constant
-- On THEN reduce production Expr -> Constant
-- On SYNTAX reduce production Expr -> Constant
-- On STAR reduce production Expr -> Constant
-- On SLASH reduce production Expr -> Constant
-- On SEMI reduce production Expr -> Constant
-- On RPAREN reduce production Expr -> Constant
-- On ROTATE_RIGHT reduce production Expr -> Constant
-- On ROTATE_LEFT reduce production Expr -> Constant
-- On RIGHT_SHIFT reduce production Expr -> Constant
-- On RESOURCE reduce production Expr -> Constant
-- On REG reduce production Expr -> Constant
-- On RBRACK reduce production Expr -> Constant
-- On RBRACE reduce production Expr -> Constant
-- On PORTS reduce production Expr -> Constant
-- On PLUS reduce production Expr -> Constant
-- On PIPE reduce production Expr -> Constant
-- On PERCENT reduce production Expr -> Constant
-- On OR reduce production Expr -> Constant
-- On OP reduce production Expr -> Constant
-- On NEQ reduce production Expr -> Constant
-- On MODE reduce production Expr -> Constant
-- On MINUS reduce production Expr -> Constant
-- On MEM reduce production Expr -> Constant
-- On LT reduce production Expr -> Constant
-- On LET reduce production Expr -> Constant
-- On LEQ reduce production Expr -> Constant
-- On LEFT_SHIFT reduce production Expr -> Constant
-- On INITIALA reduce production Expr -> Constant
-- On IMAGE reduce production Expr -> Constant
-- On ID reduce production Expr -> Constant
-- On GT reduce production Expr -> Constant
-- On GEQ reduce production Expr -> Constant
-- On EXTEND reduce production Expr -> Constant
-- On EXCEPTION reduce production Expr -> Constant
-- On EQU reduce production Expr -> Constant
-- On EOF reduce production Expr -> Constant
-- On ENDIF reduce production Expr -> Constant
-- On ELSE reduce production Expr -> Constant
-- On DOUBLE_STAR reduce production Expr -> Constant
-- On DOUBLE_DOT reduce production Expr -> Constant
-- On DOUBLE_COLON reduce production Expr -> Constant
-- On DEFAULT reduce production Expr -> Constant
-- On COMMA reduce production Expr -> Constant
-- On COLON reduce production Expr -> Constant
-- On CIRC reduce production Expr -> Constant
-- On CASE reduce production Expr -> Constant
-- On CANON reduce production Expr -> Constant
-- On BIT_LEFT reduce production Expr -> Constant
-- On AND reduce production Expr -> Constant
-- On AMPERS reduce production Expr -> Constant
-- On ALIAS reduce production Expr -> Constant
-- On ACTION reduce production Expr -> Constant

State 77:
## Known stack suffix:
## Expr SLASH
## LR(1) items:
Expr -> Expr SLASH . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 78
-- On Constant shift to state 76
## Reductions:

State 78:
## Known stack suffix:
## Expr SLASH Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr SLASH Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr SLASH Expr
-- On VAR reduce production Expr -> Expr SLASH Expr
-- On USES reduce production Expr -> Expr SLASH Expr
-- On TYPE reduce production Expr -> Expr SLASH Expr
-- On THEN reduce production Expr -> Expr SLASH Expr
-- On SYNTAX reduce production Expr -> Expr SLASH Expr
-- On STAR reduce production Expr -> Expr SLASH Expr
-- On SLASH reduce production Expr -> Expr SLASH Expr
-- On SEMI reduce production Expr -> Expr SLASH Expr
-- On RPAREN reduce production Expr -> Expr SLASH Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr SLASH Expr
-- On ROTATE_LEFT reduce production Expr -> Expr SLASH Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr SLASH Expr
-- On RESOURCE reduce production Expr -> Expr SLASH Expr
-- On REG reduce production Expr -> Expr SLASH Expr
-- On RBRACK reduce production Expr -> Expr SLASH Expr
-- On RBRACE reduce production Expr -> Expr SLASH Expr
-- On PORTS reduce production Expr -> Expr SLASH Expr
-- On PLUS reduce production Expr -> Expr SLASH Expr
-- On PIPE reduce production Expr -> Expr SLASH Expr
-- On PERCENT reduce production Expr -> Expr SLASH Expr
-- On OR reduce production Expr -> Expr SLASH Expr
-- On OP reduce production Expr -> Expr SLASH Expr
-- On NEQ reduce production Expr -> Expr SLASH Expr
-- On MODE reduce production Expr -> Expr SLASH Expr
-- On MINUS reduce production Expr -> Expr SLASH Expr
-- On MEM reduce production Expr -> Expr SLASH Expr
-- On LT reduce production Expr -> Expr SLASH Expr
-- On LET reduce production Expr -> Expr SLASH Expr
-- On LEQ reduce production Expr -> Expr SLASH Expr
-- On LEFT_SHIFT reduce production Expr -> Expr SLASH Expr
-- On INITIALA reduce production Expr -> Expr SLASH Expr
-- On IMAGE reduce production Expr -> Expr SLASH Expr
-- On ID reduce production Expr -> Expr SLASH Expr
-- On GT reduce production Expr -> Expr SLASH Expr
-- On GEQ reduce production Expr -> Expr SLASH Expr
-- On EXTEND reduce production Expr -> Expr SLASH Expr
-- On EXCEPTION reduce production Expr -> Expr SLASH Expr
-- On EQU reduce production Expr -> Expr SLASH Expr
-- On EOF reduce production Expr -> Expr SLASH Expr
-- On ENDIF reduce production Expr -> Expr SLASH Expr
-- On ELSE reduce production Expr -> Expr SLASH Expr
-- On DOUBLE_DOT reduce production Expr -> Expr SLASH Expr
-- On DOUBLE_COLON reduce production Expr -> Expr SLASH Expr
-- On DEFAULT reduce production Expr -> Expr SLASH Expr
-- On COMMA reduce production Expr -> Expr SLASH Expr
-- On COLON reduce production Expr -> Expr SLASH Expr
-- On CIRC reduce production Expr -> Expr SLASH Expr
-- On CASE reduce production Expr -> Expr SLASH Expr
-- On CANON reduce production Expr -> Expr SLASH Expr
-- On AND reduce production Expr -> Expr SLASH Expr
-- On AMPERS reduce production Expr -> Expr SLASH Expr
-- On ALIAS reduce production Expr -> Expr SLASH Expr
-- On ACTION reduce production Expr -> Expr SLASH Expr

State 79:
## Known stack suffix:
## Expr ROTATE_RIGHT
## LR(1) items:
Expr -> Expr ROTATE_RIGHT . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 80
-- On Constant shift to state 76
## Reductions:

State 80:
## Known stack suffix:
## Expr ROTATE_RIGHT Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr ROTATE_RIGHT Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On VAR reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On USES reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On TYPE reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On THEN reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On SYNTAX reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On SEMI reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On RPAREN reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On ROTATE_LEFT reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On RESOURCE reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On REG reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On RBRACK reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On RBRACE reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On PORTS reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On PIPE reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On OR reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On OP reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On NEQ reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On MODE reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On MEM reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On LT reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On LET reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On LEQ reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On LEFT_SHIFT reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On INITIALA reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On IMAGE reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On ID reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On GT reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On GEQ reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On EXTEND reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On EXCEPTION reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On EQU reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On EOF reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On ENDIF reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On ELSE reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On DOUBLE_DOT reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On DOUBLE_COLON reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On DEFAULT reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On COMMA reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On COLON reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On CIRC reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On CASE reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On CANON reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On AND reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On AMPERS reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On ALIAS reduce production Expr -> Expr ROTATE_RIGHT Expr
-- On ACTION reduce production Expr -> Expr ROTATE_RIGHT Expr

State 81:
## Known stack suffix:
## Expr PLUS
## LR(1) items:
Expr -> Expr PLUS . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 82
-- On Constant shift to state 76
## Reductions:

State 82:
## Known stack suffix:
## Expr PLUS Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr PLUS Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On PERCENT shift to state 83
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr PLUS Expr
-- On VAR reduce production Expr -> Expr PLUS Expr
-- On USES reduce production Expr -> Expr PLUS Expr
-- On TYPE reduce production Expr -> Expr PLUS Expr
-- On THEN reduce production Expr -> Expr PLUS Expr
-- On SYNTAX reduce production Expr -> Expr PLUS Expr
-- On SEMI reduce production Expr -> Expr PLUS Expr
-- On RPAREN reduce production Expr -> Expr PLUS Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr PLUS Expr
-- On ROTATE_LEFT reduce production Expr -> Expr PLUS Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr PLUS Expr
-- On RESOURCE reduce production Expr -> Expr PLUS Expr
-- On REG reduce production Expr -> Expr PLUS Expr
-- On RBRACK reduce production Expr -> Expr PLUS Expr
-- On RBRACE reduce production Expr -> Expr PLUS Expr
-- On PORTS reduce production Expr -> Expr PLUS Expr
-- On PLUS reduce production Expr -> Expr PLUS Expr
-- On PIPE reduce production Expr -> Expr PLUS Expr
-- On OR reduce production Expr -> Expr PLUS Expr
-- On OP reduce production Expr -> Expr PLUS Expr
-- On NEQ reduce production Expr -> Expr PLUS Expr
-- On MODE reduce production Expr -> Expr PLUS Expr
-- On MINUS reduce production Expr -> Expr PLUS Expr
-- On MEM reduce production Expr -> Expr PLUS Expr
-- On LT reduce production Expr -> Expr PLUS Expr
-- On LET reduce production Expr -> Expr PLUS Expr
-- On LEQ reduce production Expr -> Expr PLUS Expr
-- On LEFT_SHIFT reduce production Expr -> Expr PLUS Expr
-- On INITIALA reduce production Expr -> Expr PLUS Expr
-- On IMAGE reduce production Expr -> Expr PLUS Expr
-- On ID reduce production Expr -> Expr PLUS Expr
-- On GT reduce production Expr -> Expr PLUS Expr
-- On GEQ reduce production Expr -> Expr PLUS Expr
-- On EXTEND reduce production Expr -> Expr PLUS Expr
-- On EXCEPTION reduce production Expr -> Expr PLUS Expr
-- On EQU reduce production Expr -> Expr PLUS Expr
-- On EOF reduce production Expr -> Expr PLUS Expr
-- On ENDIF reduce production Expr -> Expr PLUS Expr
-- On ELSE reduce production Expr -> Expr PLUS Expr
-- On DOUBLE_DOT reduce production Expr -> Expr PLUS Expr
-- On DOUBLE_COLON reduce production Expr -> Expr PLUS Expr
-- On DEFAULT reduce production Expr -> Expr PLUS Expr
-- On COMMA reduce production Expr -> Expr PLUS Expr
-- On COLON reduce production Expr -> Expr PLUS Expr
-- On CIRC reduce production Expr -> Expr PLUS Expr
-- On CASE reduce production Expr -> Expr PLUS Expr
-- On CANON reduce production Expr -> Expr PLUS Expr
-- On AND reduce production Expr -> Expr PLUS Expr
-- On AMPERS reduce production Expr -> Expr PLUS Expr
-- On ALIAS reduce production Expr -> Expr PLUS Expr
-- On ACTION reduce production Expr -> Expr PLUS Expr

State 83:
## Known stack suffix:
## Expr PERCENT
## LR(1) items:
Expr -> Expr PERCENT . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 84
-- On Constant shift to state 76
## Reductions:

State 84:
## Known stack suffix:
## Expr PERCENT Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr PERCENT Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr PERCENT Expr
-- On VAR reduce production Expr -> Expr PERCENT Expr
-- On USES reduce production Expr -> Expr PERCENT Expr
-- On TYPE reduce production Expr -> Expr PERCENT Expr
-- On THEN reduce production Expr -> Expr PERCENT Expr
-- On SYNTAX reduce production Expr -> Expr PERCENT Expr
-- On STAR reduce production Expr -> Expr PERCENT Expr
-- On SLASH reduce production Expr -> Expr PERCENT Expr
-- On SEMI reduce production Expr -> Expr PERCENT Expr
-- On RPAREN reduce production Expr -> Expr PERCENT Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr PERCENT Expr
-- On ROTATE_LEFT reduce production Expr -> Expr PERCENT Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr PERCENT Expr
-- On RESOURCE reduce production Expr -> Expr PERCENT Expr
-- On REG reduce production Expr -> Expr PERCENT Expr
-- On RBRACK reduce production Expr -> Expr PERCENT Expr
-- On RBRACE reduce production Expr -> Expr PERCENT Expr
-- On PORTS reduce production Expr -> Expr PERCENT Expr
-- On PLUS reduce production Expr -> Expr PERCENT Expr
-- On PIPE reduce production Expr -> Expr PERCENT Expr
-- On PERCENT reduce production Expr -> Expr PERCENT Expr
-- On OR reduce production Expr -> Expr PERCENT Expr
-- On OP reduce production Expr -> Expr PERCENT Expr
-- On NEQ reduce production Expr -> Expr PERCENT Expr
-- On MODE reduce production Expr -> Expr PERCENT Expr
-- On MINUS reduce production Expr -> Expr PERCENT Expr
-- On MEM reduce production Expr -> Expr PERCENT Expr
-- On LT reduce production Expr -> Expr PERCENT Expr
-- On LET reduce production Expr -> Expr PERCENT Expr
-- On LEQ reduce production Expr -> Expr PERCENT Expr
-- On LEFT_SHIFT reduce production Expr -> Expr PERCENT Expr
-- On INITIALA reduce production Expr -> Expr PERCENT Expr
-- On IMAGE reduce production Expr -> Expr PERCENT Expr
-- On ID reduce production Expr -> Expr PERCENT Expr
-- On GT reduce production Expr -> Expr PERCENT Expr
-- On GEQ reduce production Expr -> Expr PERCENT Expr
-- On EXTEND reduce production Expr -> Expr PERCENT Expr
-- On EXCEPTION reduce production Expr -> Expr PERCENT Expr
-- On EQU reduce production Expr -> Expr PERCENT Expr
-- On EOF reduce production Expr -> Expr PERCENT Expr
-- On ENDIF reduce production Expr -> Expr PERCENT Expr
-- On ELSE reduce production Expr -> Expr PERCENT Expr
-- On DOUBLE_DOT reduce production Expr -> Expr PERCENT Expr
-- On DOUBLE_COLON reduce production Expr -> Expr PERCENT Expr
-- On DEFAULT reduce production Expr -> Expr PERCENT Expr
-- On COMMA reduce production Expr -> Expr PERCENT Expr
-- On COLON reduce production Expr -> Expr PERCENT Expr
-- On CIRC reduce production Expr -> Expr PERCENT Expr
-- On CASE reduce production Expr -> Expr PERCENT Expr
-- On CANON reduce production Expr -> Expr PERCENT Expr
-- On AND reduce production Expr -> Expr PERCENT Expr
-- On AMPERS reduce production Expr -> Expr PERCENT Expr
-- On ALIAS reduce production Expr -> Expr PERCENT Expr
-- On ACTION reduce production Expr -> Expr PERCENT Expr

State 85:
## Known stack suffix:
## Expr MINUS
## LR(1) items:
Expr -> Expr MINUS . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 86
-- On Constant shift to state 76
## Reductions:

State 86:
## Known stack suffix:
## Expr MINUS Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr MINUS Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On PERCENT shift to state 83
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr MINUS Expr
-- On VAR reduce production Expr -> Expr MINUS Expr
-- On USES reduce production Expr -> Expr MINUS Expr
-- On TYPE reduce production Expr -> Expr MINUS Expr
-- On THEN reduce production Expr -> Expr MINUS Expr
-- On SYNTAX reduce production Expr -> Expr MINUS Expr
-- On SEMI reduce production Expr -> Expr MINUS Expr
-- On RPAREN reduce production Expr -> Expr MINUS Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr MINUS Expr
-- On ROTATE_LEFT reduce production Expr -> Expr MINUS Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr MINUS Expr
-- On RESOURCE reduce production Expr -> Expr MINUS Expr
-- On REG reduce production Expr -> Expr MINUS Expr
-- On RBRACK reduce production Expr -> Expr MINUS Expr
-- On RBRACE reduce production Expr -> Expr MINUS Expr
-- On PORTS reduce production Expr -> Expr MINUS Expr
-- On PLUS reduce production Expr -> Expr MINUS Expr
-- On PIPE reduce production Expr -> Expr MINUS Expr
-- On OR reduce production Expr -> Expr MINUS Expr
-- On OP reduce production Expr -> Expr MINUS Expr
-- On NEQ reduce production Expr -> Expr MINUS Expr
-- On MODE reduce production Expr -> Expr MINUS Expr
-- On MINUS reduce production Expr -> Expr MINUS Expr
-- On MEM reduce production Expr -> Expr MINUS Expr
-- On LT reduce production Expr -> Expr MINUS Expr
-- On LET reduce production Expr -> Expr MINUS Expr
-- On LEQ reduce production Expr -> Expr MINUS Expr
-- On LEFT_SHIFT reduce production Expr -> Expr MINUS Expr
-- On INITIALA reduce production Expr -> Expr MINUS Expr
-- On IMAGE reduce production Expr -> Expr MINUS Expr
-- On ID reduce production Expr -> Expr MINUS Expr
-- On GT reduce production Expr -> Expr MINUS Expr
-- On GEQ reduce production Expr -> Expr MINUS Expr
-- On EXTEND reduce production Expr -> Expr MINUS Expr
-- On EXCEPTION reduce production Expr -> Expr MINUS Expr
-- On EQU reduce production Expr -> Expr MINUS Expr
-- On EOF reduce production Expr -> Expr MINUS Expr
-- On ENDIF reduce production Expr -> Expr MINUS Expr
-- On ELSE reduce production Expr -> Expr MINUS Expr
-- On DOUBLE_DOT reduce production Expr -> Expr MINUS Expr
-- On DOUBLE_COLON reduce production Expr -> Expr MINUS Expr
-- On DEFAULT reduce production Expr -> Expr MINUS Expr
-- On COMMA reduce production Expr -> Expr MINUS Expr
-- On COLON reduce production Expr -> Expr MINUS Expr
-- On CIRC reduce production Expr -> Expr MINUS Expr
-- On CASE reduce production Expr -> Expr MINUS Expr
-- On CANON reduce production Expr -> Expr MINUS Expr
-- On AND reduce production Expr -> Expr MINUS Expr
-- On AMPERS reduce production Expr -> Expr MINUS Expr
-- On ALIAS reduce production Expr -> Expr MINUS Expr
-- On ACTION reduce production Expr -> Expr MINUS Expr

State 87:
## Known stack suffix:
## Expr ROTATE_LEFT
## LR(1) items:
Expr -> Expr ROTATE_LEFT . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 88
-- On Constant shift to state 76
## Reductions:

State 88:
## Known stack suffix:
## Expr ROTATE_LEFT Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr ROTATE_LEFT Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr ROTATE_LEFT Expr
-- On VAR reduce production Expr -> Expr ROTATE_LEFT Expr
-- On USES reduce production Expr -> Expr ROTATE_LEFT Expr
-- On TYPE reduce production Expr -> Expr ROTATE_LEFT Expr
-- On THEN reduce production Expr -> Expr ROTATE_LEFT Expr
-- On SYNTAX reduce production Expr -> Expr ROTATE_LEFT Expr
-- On SEMI reduce production Expr -> Expr ROTATE_LEFT Expr
-- On RPAREN reduce production Expr -> Expr ROTATE_LEFT Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr ROTATE_LEFT Expr
-- On ROTATE_LEFT reduce production Expr -> Expr ROTATE_LEFT Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr ROTATE_LEFT Expr
-- On RESOURCE reduce production Expr -> Expr ROTATE_LEFT Expr
-- On REG reduce production Expr -> Expr ROTATE_LEFT Expr
-- On RBRACK reduce production Expr -> Expr ROTATE_LEFT Expr
-- On RBRACE reduce production Expr -> Expr ROTATE_LEFT Expr
-- On PORTS reduce production Expr -> Expr ROTATE_LEFT Expr
-- On PIPE reduce production Expr -> Expr ROTATE_LEFT Expr
-- On OR reduce production Expr -> Expr ROTATE_LEFT Expr
-- On OP reduce production Expr -> Expr ROTATE_LEFT Expr
-- On NEQ reduce production Expr -> Expr ROTATE_LEFT Expr
-- On MODE reduce production Expr -> Expr ROTATE_LEFT Expr
-- On MEM reduce production Expr -> Expr ROTATE_LEFT Expr
-- On LT reduce production Expr -> Expr ROTATE_LEFT Expr
-- On LET reduce production Expr -> Expr ROTATE_LEFT Expr
-- On LEQ reduce production Expr -> Expr ROTATE_LEFT Expr
-- On LEFT_SHIFT reduce production Expr -> Expr ROTATE_LEFT Expr
-- On INITIALA reduce production Expr -> Expr ROTATE_LEFT Expr
-- On IMAGE reduce production Expr -> Expr ROTATE_LEFT Expr
-- On ID reduce production Expr -> Expr ROTATE_LEFT Expr
-- On GT reduce production Expr -> Expr ROTATE_LEFT Expr
-- On GEQ reduce production Expr -> Expr ROTATE_LEFT Expr
-- On EXTEND reduce production Expr -> Expr ROTATE_LEFT Expr
-- On EXCEPTION reduce production Expr -> Expr ROTATE_LEFT Expr
-- On EQU reduce production Expr -> Expr ROTATE_LEFT Expr
-- On EOF reduce production Expr -> Expr ROTATE_LEFT Expr
-- On ENDIF reduce production Expr -> Expr ROTATE_LEFT Expr
-- On ELSE reduce production Expr -> Expr ROTATE_LEFT Expr
-- On DOUBLE_DOT reduce production Expr -> Expr ROTATE_LEFT Expr
-- On DOUBLE_COLON reduce production Expr -> Expr ROTATE_LEFT Expr
-- On DEFAULT reduce production Expr -> Expr ROTATE_LEFT Expr
-- On COMMA reduce production Expr -> Expr ROTATE_LEFT Expr
-- On COLON reduce production Expr -> Expr ROTATE_LEFT Expr
-- On CIRC reduce production Expr -> Expr ROTATE_LEFT Expr
-- On CASE reduce production Expr -> Expr ROTATE_LEFT Expr
-- On CANON reduce production Expr -> Expr ROTATE_LEFT Expr
-- On AND reduce production Expr -> Expr ROTATE_LEFT Expr
-- On AMPERS reduce production Expr -> Expr ROTATE_LEFT Expr
-- On ALIAS reduce production Expr -> Expr ROTATE_LEFT Expr
-- On ACTION reduce production Expr -> Expr ROTATE_LEFT Expr

State 89:
## Known stack suffix:
## Expr RIGHT_SHIFT
## LR(1) items:
Expr -> Expr RIGHT_SHIFT . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 90
-- On Constant shift to state 76
## Reductions:

State 90:
## Known stack suffix:
## Expr RIGHT_SHIFT Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr RIGHT_SHIFT Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On VAR reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On USES reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On TYPE reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On THEN reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On SYNTAX reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On SEMI reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On RPAREN reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On ROTATE_LEFT reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On RESOURCE reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On REG reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On RBRACK reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On RBRACE reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On PORTS reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On PIPE reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On OR reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On OP reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On NEQ reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On MODE reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On MEM reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On LT reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On LET reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On LEQ reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On LEFT_SHIFT reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On INITIALA reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On IMAGE reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On ID reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On GT reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On GEQ reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On EXTEND reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On EXCEPTION reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On EQU reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On EOF reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On ENDIF reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On ELSE reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On DOUBLE_DOT reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On DOUBLE_COLON reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On DEFAULT reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On COMMA reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On COLON reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On CIRC reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On CASE reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On CANON reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On AND reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On AMPERS reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On ALIAS reduce production Expr -> Expr RIGHT_SHIFT Expr
-- On ACTION reduce production Expr -> Expr RIGHT_SHIFT Expr

State 91:
## Known stack suffix:
## Expr PIPE
## LR(1) items:
Expr -> Expr PIPE . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 92
-- On Constant shift to state 76
## Reductions:

State 92:
## Known stack suffix:
## Expr PIPE Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr PIPE Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AMPERS shift to state 109
## Reductions:
-- On VOLATILE reduce production Expr -> Expr PIPE Expr
-- On VAR reduce production Expr -> Expr PIPE Expr
-- On USES reduce production Expr -> Expr PIPE Expr
-- On TYPE reduce production Expr -> Expr PIPE Expr
-- On THEN reduce production Expr -> Expr PIPE Expr
-- On SYNTAX reduce production Expr -> Expr PIPE Expr
-- On SEMI reduce production Expr -> Expr PIPE Expr
-- On RPAREN reduce production Expr -> Expr PIPE Expr
-- On RESOURCE reduce production Expr -> Expr PIPE Expr
-- On REG reduce production Expr -> Expr PIPE Expr
-- On RBRACK reduce production Expr -> Expr PIPE Expr
-- On RBRACE reduce production Expr -> Expr PIPE Expr
-- On PORTS reduce production Expr -> Expr PIPE Expr
-- On PIPE reduce production Expr -> Expr PIPE Expr
-- On OR reduce production Expr -> Expr PIPE Expr
-- On OP reduce production Expr -> Expr PIPE Expr
-- On MODE reduce production Expr -> Expr PIPE Expr
-- On MEM reduce production Expr -> Expr PIPE Expr
-- On LET reduce production Expr -> Expr PIPE Expr
-- On INITIALA reduce production Expr -> Expr PIPE Expr
-- On IMAGE reduce production Expr -> Expr PIPE Expr
-- On ID reduce production Expr -> Expr PIPE Expr
-- On EXTEND reduce production Expr -> Expr PIPE Expr
-- On EXCEPTION reduce production Expr -> Expr PIPE Expr
-- On EOF reduce production Expr -> Expr PIPE Expr
-- On ENDIF reduce production Expr -> Expr PIPE Expr
-- On ELSE reduce production Expr -> Expr PIPE Expr
-- On DOUBLE_DOT reduce production Expr -> Expr PIPE Expr
-- On DOUBLE_COLON reduce production Expr -> Expr PIPE Expr
-- On DEFAULT reduce production Expr -> Expr PIPE Expr
-- On COMMA reduce production Expr -> Expr PIPE Expr
-- On COLON reduce production Expr -> Expr PIPE Expr
-- On CASE reduce production Expr -> Expr PIPE Expr
-- On CANON reduce production Expr -> Expr PIPE Expr
-- On AND reduce production Expr -> Expr PIPE Expr
-- On ALIAS reduce production Expr -> Expr PIPE Expr
-- On ACTION reduce production Expr -> Expr PIPE Expr

State 93:
## Known stack suffix:
## Expr NEQ
## LR(1) items:
Expr -> Expr NEQ . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 94
-- On Constant shift to state 76
## Reductions:

State 94:
## Known stack suffix:
## Expr NEQ Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr NEQ Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr NEQ Expr
-- On VAR reduce production Expr -> Expr NEQ Expr
-- On USES reduce production Expr -> Expr NEQ Expr
-- On TYPE reduce production Expr -> Expr NEQ Expr
-- On THEN reduce production Expr -> Expr NEQ Expr
-- On SYNTAX reduce production Expr -> Expr NEQ Expr
-- On SEMI reduce production Expr -> Expr NEQ Expr
-- On RPAREN reduce production Expr -> Expr NEQ Expr
-- On RESOURCE reduce production Expr -> Expr NEQ Expr
-- On REG reduce production Expr -> Expr NEQ Expr
-- On RBRACK reduce production Expr -> Expr NEQ Expr
-- On RBRACE reduce production Expr -> Expr NEQ Expr
-- On PORTS reduce production Expr -> Expr NEQ Expr
-- On PIPE reduce production Expr -> Expr NEQ Expr
-- On OR reduce production Expr -> Expr NEQ Expr
-- On OP reduce production Expr -> Expr NEQ Expr
-- On NEQ reduce production Expr -> Expr NEQ Expr
-- On MODE reduce production Expr -> Expr NEQ Expr
-- On MEM reduce production Expr -> Expr NEQ Expr
-- On LET reduce production Expr -> Expr NEQ Expr
-- On INITIALA reduce production Expr -> Expr NEQ Expr
-- On IMAGE reduce production Expr -> Expr NEQ Expr
-- On ID reduce production Expr -> Expr NEQ Expr
-- On EXTEND reduce production Expr -> Expr NEQ Expr
-- On EXCEPTION reduce production Expr -> Expr NEQ Expr
-- On EQU reduce production Expr -> Expr NEQ Expr
-- On EOF reduce production Expr -> Expr NEQ Expr
-- On ENDIF reduce production Expr -> Expr NEQ Expr
-- On ELSE reduce production Expr -> Expr NEQ Expr
-- On DOUBLE_DOT reduce production Expr -> Expr NEQ Expr
-- On DOUBLE_COLON reduce production Expr -> Expr NEQ Expr
-- On DEFAULT reduce production Expr -> Expr NEQ Expr
-- On COMMA reduce production Expr -> Expr NEQ Expr
-- On COLON reduce production Expr -> Expr NEQ Expr
-- On CIRC reduce production Expr -> Expr NEQ Expr
-- On CASE reduce production Expr -> Expr NEQ Expr
-- On CANON reduce production Expr -> Expr NEQ Expr
-- On AND reduce production Expr -> Expr NEQ Expr
-- On AMPERS reduce production Expr -> Expr NEQ Expr
-- On ALIAS reduce production Expr -> Expr NEQ Expr
-- On ACTION reduce production Expr -> Expr NEQ Expr

State 95:
## Known stack suffix:
## Expr LT
## LR(1) items:
Expr -> Expr LT . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 96
-- On Constant shift to state 76
## Reductions:

State 96:
## Known stack suffix:
## Expr LT Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr LT Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On LEFT_SHIFT shift to state 97
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr LT Expr
-- On VAR reduce production Expr -> Expr LT Expr
-- On USES reduce production Expr -> Expr LT Expr
-- On TYPE reduce production Expr -> Expr LT Expr
-- On THEN reduce production Expr -> Expr LT Expr
-- On SYNTAX reduce production Expr -> Expr LT Expr
-- On SEMI reduce production Expr -> Expr LT Expr
-- On RPAREN reduce production Expr -> Expr LT Expr
-- On RESOURCE reduce production Expr -> Expr LT Expr
-- On REG reduce production Expr -> Expr LT Expr
-- On RBRACK reduce production Expr -> Expr LT Expr
-- On RBRACE reduce production Expr -> Expr LT Expr
-- On PORTS reduce production Expr -> Expr LT Expr
-- On PIPE reduce production Expr -> Expr LT Expr
-- On OR reduce production Expr -> Expr LT Expr
-- On OP reduce production Expr -> Expr LT Expr
-- On NEQ reduce production Expr -> Expr LT Expr
-- On MODE reduce production Expr -> Expr LT Expr
-- On MEM reduce production Expr -> Expr LT Expr
-- On LT reduce production Expr -> Expr LT Expr
-- On LET reduce production Expr -> Expr LT Expr
-- On LEQ reduce production Expr -> Expr LT Expr
-- On INITIALA reduce production Expr -> Expr LT Expr
-- On IMAGE reduce production Expr -> Expr LT Expr
-- On ID reduce production Expr -> Expr LT Expr
-- On GT reduce production Expr -> Expr LT Expr
-- On GEQ reduce production Expr -> Expr LT Expr
-- On EXTEND reduce production Expr -> Expr LT Expr
-- On EXCEPTION reduce production Expr -> Expr LT Expr
-- On EQU reduce production Expr -> Expr LT Expr
-- On EOF reduce production Expr -> Expr LT Expr
-- On ENDIF reduce production Expr -> Expr LT Expr
-- On ELSE reduce production Expr -> Expr LT Expr
-- On DOUBLE_DOT reduce production Expr -> Expr LT Expr
-- On DOUBLE_COLON reduce production Expr -> Expr LT Expr
-- On DEFAULT reduce production Expr -> Expr LT Expr
-- On COMMA reduce production Expr -> Expr LT Expr
-- On COLON reduce production Expr -> Expr LT Expr
-- On CIRC reduce production Expr -> Expr LT Expr
-- On CASE reduce production Expr -> Expr LT Expr
-- On CANON reduce production Expr -> Expr LT Expr
-- On AND reduce production Expr -> Expr LT Expr
-- On AMPERS reduce production Expr -> Expr LT Expr
-- On ALIAS reduce production Expr -> Expr LT Expr
-- On ACTION reduce production Expr -> Expr LT Expr

State 97:
## Known stack suffix:
## Expr LEFT_SHIFT
## LR(1) items:
Expr -> Expr LEFT_SHIFT . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 98
-- On Constant shift to state 76
## Reductions:

State 98:
## Known stack suffix:
## Expr LEFT_SHIFT Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr LEFT_SHIFT Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr LEFT_SHIFT Expr
-- On VAR reduce production Expr -> Expr LEFT_SHIFT Expr
-- On USES reduce production Expr -> Expr LEFT_SHIFT Expr
-- On TYPE reduce production Expr -> Expr LEFT_SHIFT Expr
-- On THEN reduce production Expr -> Expr LEFT_SHIFT Expr
-- On SYNTAX reduce production Expr -> Expr LEFT_SHIFT Expr
-- On SEMI reduce production Expr -> Expr LEFT_SHIFT Expr
-- On RPAREN reduce production Expr -> Expr LEFT_SHIFT Expr
-- On ROTATE_RIGHT reduce production Expr -> Expr LEFT_SHIFT Expr
-- On ROTATE_LEFT reduce production Expr -> Expr LEFT_SHIFT Expr
-- On RIGHT_SHIFT reduce production Expr -> Expr LEFT_SHIFT Expr
-- On RESOURCE reduce production Expr -> Expr LEFT_SHIFT Expr
-- On REG reduce production Expr -> Expr LEFT_SHIFT Expr
-- On RBRACK reduce production Expr -> Expr LEFT_SHIFT Expr
-- On RBRACE reduce production Expr -> Expr LEFT_SHIFT Expr
-- On PORTS reduce production Expr -> Expr LEFT_SHIFT Expr
-- On PIPE reduce production Expr -> Expr LEFT_SHIFT Expr
-- On OR reduce production Expr -> Expr LEFT_SHIFT Expr
-- On OP reduce production Expr -> Expr LEFT_SHIFT Expr
-- On NEQ reduce production Expr -> Expr LEFT_SHIFT Expr
-- On MODE reduce production Expr -> Expr LEFT_SHIFT Expr
-- On MEM reduce production Expr -> Expr LEFT_SHIFT Expr
-- On LT reduce production Expr -> Expr LEFT_SHIFT Expr
-- On LET reduce production Expr -> Expr LEFT_SHIFT Expr
-- On LEQ reduce production Expr -> Expr LEFT_SHIFT Expr
-- On LEFT_SHIFT reduce production Expr -> Expr LEFT_SHIFT Expr
-- On INITIALA reduce production Expr -> Expr LEFT_SHIFT Expr
-- On IMAGE reduce production Expr -> Expr LEFT_SHIFT Expr
-- On ID reduce production Expr -> Expr LEFT_SHIFT Expr
-- On GT reduce production Expr -> Expr LEFT_SHIFT Expr
-- On GEQ reduce production Expr -> Expr LEFT_SHIFT Expr
-- On EXTEND reduce production Expr -> Expr LEFT_SHIFT Expr
-- On EXCEPTION reduce production Expr -> Expr LEFT_SHIFT Expr
-- On EQU reduce production Expr -> Expr LEFT_SHIFT Expr
-- On EOF reduce production Expr -> Expr LEFT_SHIFT Expr
-- On ENDIF reduce production Expr -> Expr LEFT_SHIFT Expr
-- On ELSE reduce production Expr -> Expr LEFT_SHIFT Expr
-- On DOUBLE_DOT reduce production Expr -> Expr LEFT_SHIFT Expr
-- On DOUBLE_COLON reduce production Expr -> Expr LEFT_SHIFT Expr
-- On DEFAULT reduce production Expr -> Expr LEFT_SHIFT Expr
-- On COMMA reduce production Expr -> Expr LEFT_SHIFT Expr
-- On COLON reduce production Expr -> Expr LEFT_SHIFT Expr
-- On CIRC reduce production Expr -> Expr LEFT_SHIFT Expr
-- On CASE reduce production Expr -> Expr LEFT_SHIFT Expr
-- On CANON reduce production Expr -> Expr LEFT_SHIFT Expr
-- On AND reduce production Expr -> Expr LEFT_SHIFT Expr
-- On AMPERS reduce production Expr -> Expr LEFT_SHIFT Expr
-- On ALIAS reduce production Expr -> Expr LEFT_SHIFT Expr
-- On ACTION reduce production Expr -> Expr LEFT_SHIFT Expr

State 99:
## Known stack suffix:
## Expr LEQ
## LR(1) items:
Expr -> Expr LEQ . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 100
-- On Constant shift to state 76
## Reductions:

State 100:
## Known stack suffix:
## Expr LEQ Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr LEQ Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On LEFT_SHIFT shift to state 97
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr LEQ Expr
-- On VAR reduce production Expr -> Expr LEQ Expr
-- On USES reduce production Expr -> Expr LEQ Expr
-- On TYPE reduce production Expr -> Expr LEQ Expr
-- On THEN reduce production Expr -> Expr LEQ Expr
-- On SYNTAX reduce production Expr -> Expr LEQ Expr
-- On SEMI reduce production Expr -> Expr LEQ Expr
-- On RPAREN reduce production Expr -> Expr LEQ Expr
-- On RESOURCE reduce production Expr -> Expr LEQ Expr
-- On REG reduce production Expr -> Expr LEQ Expr
-- On RBRACK reduce production Expr -> Expr LEQ Expr
-- On RBRACE reduce production Expr -> Expr LEQ Expr
-- On PORTS reduce production Expr -> Expr LEQ Expr
-- On PIPE reduce production Expr -> Expr LEQ Expr
-- On OR reduce production Expr -> Expr LEQ Expr
-- On OP reduce production Expr -> Expr LEQ Expr
-- On NEQ reduce production Expr -> Expr LEQ Expr
-- On MODE reduce production Expr -> Expr LEQ Expr
-- On MEM reduce production Expr -> Expr LEQ Expr
-- On LT reduce production Expr -> Expr LEQ Expr
-- On LET reduce production Expr -> Expr LEQ Expr
-- On LEQ reduce production Expr -> Expr LEQ Expr
-- On INITIALA reduce production Expr -> Expr LEQ Expr
-- On IMAGE reduce production Expr -> Expr LEQ Expr
-- On ID reduce production Expr -> Expr LEQ Expr
-- On GT reduce production Expr -> Expr LEQ Expr
-- On GEQ reduce production Expr -> Expr LEQ Expr
-- On EXTEND reduce production Expr -> Expr LEQ Expr
-- On EXCEPTION reduce production Expr -> Expr LEQ Expr
-- On EQU reduce production Expr -> Expr LEQ Expr
-- On EOF reduce production Expr -> Expr LEQ Expr
-- On ENDIF reduce production Expr -> Expr LEQ Expr
-- On ELSE reduce production Expr -> Expr LEQ Expr
-- On DOUBLE_DOT reduce production Expr -> Expr LEQ Expr
-- On DOUBLE_COLON reduce production Expr -> Expr LEQ Expr
-- On DEFAULT reduce production Expr -> Expr LEQ Expr
-- On COMMA reduce production Expr -> Expr LEQ Expr
-- On COLON reduce production Expr -> Expr LEQ Expr
-- On CIRC reduce production Expr -> Expr LEQ Expr
-- On CASE reduce production Expr -> Expr LEQ Expr
-- On CANON reduce production Expr -> Expr LEQ Expr
-- On AND reduce production Expr -> Expr LEQ Expr
-- On AMPERS reduce production Expr -> Expr LEQ Expr
-- On ALIAS reduce production Expr -> Expr LEQ Expr
-- On ACTION reduce production Expr -> Expr LEQ Expr

State 101:
## Known stack suffix:
## Expr GT
## LR(1) items:
Expr -> Expr GT . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 102
-- On Constant shift to state 76
## Reductions:

State 102:
## Known stack suffix:
## Expr GT Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr GT Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On LEFT_SHIFT shift to state 97
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr GT Expr
-- On VAR reduce production Expr -> Expr GT Expr
-- On USES reduce production Expr -> Expr GT Expr
-- On TYPE reduce production Expr -> Expr GT Expr
-- On THEN reduce production Expr -> Expr GT Expr
-- On SYNTAX reduce production Expr -> Expr GT Expr
-- On SEMI reduce production Expr -> Expr GT Expr
-- On RPAREN reduce production Expr -> Expr GT Expr
-- On RESOURCE reduce production Expr -> Expr GT Expr
-- On REG reduce production Expr -> Expr GT Expr
-- On RBRACK reduce production Expr -> Expr GT Expr
-- On RBRACE reduce production Expr -> Expr GT Expr
-- On PORTS reduce production Expr -> Expr GT Expr
-- On PIPE reduce production Expr -> Expr GT Expr
-- On OR reduce production Expr -> Expr GT Expr
-- On OP reduce production Expr -> Expr GT Expr
-- On NEQ reduce production Expr -> Expr GT Expr
-- On MODE reduce production Expr -> Expr GT Expr
-- On MEM reduce production Expr -> Expr GT Expr
-- On LT reduce production Expr -> Expr GT Expr
-- On LET reduce production Expr -> Expr GT Expr
-- On LEQ reduce production Expr -> Expr GT Expr
-- On INITIALA reduce production Expr -> Expr GT Expr
-- On IMAGE reduce production Expr -> Expr GT Expr
-- On ID reduce production Expr -> Expr GT Expr
-- On GT reduce production Expr -> Expr GT Expr
-- On GEQ reduce production Expr -> Expr GT Expr
-- On EXTEND reduce production Expr -> Expr GT Expr
-- On EXCEPTION reduce production Expr -> Expr GT Expr
-- On EQU reduce production Expr -> Expr GT Expr
-- On EOF reduce production Expr -> Expr GT Expr
-- On ENDIF reduce production Expr -> Expr GT Expr
-- On ELSE reduce production Expr -> Expr GT Expr
-- On DOUBLE_DOT reduce production Expr -> Expr GT Expr
-- On DOUBLE_COLON reduce production Expr -> Expr GT Expr
-- On DEFAULT reduce production Expr -> Expr GT Expr
-- On COMMA reduce production Expr -> Expr GT Expr
-- On COLON reduce production Expr -> Expr GT Expr
-- On CIRC reduce production Expr -> Expr GT Expr
-- On CASE reduce production Expr -> Expr GT Expr
-- On CANON reduce production Expr -> Expr GT Expr
-- On AND reduce production Expr -> Expr GT Expr
-- On AMPERS reduce production Expr -> Expr GT Expr
-- On ALIAS reduce production Expr -> Expr GT Expr
-- On ACTION reduce production Expr -> Expr GT Expr

State 103:
## Known stack suffix:
## Expr GEQ
## LR(1) items:
Expr -> Expr GEQ . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 104
-- On Constant shift to state 76
## Reductions:

State 104:
## Known stack suffix:
## Expr GEQ Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr GEQ Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On LEFT_SHIFT shift to state 97
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr GEQ Expr
-- On VAR reduce production Expr -> Expr GEQ Expr
-- On USES reduce production Expr -> Expr GEQ Expr
-- On TYPE reduce production Expr -> Expr GEQ Expr
-- On THEN reduce production Expr -> Expr GEQ Expr
-- On SYNTAX reduce production Expr -> Expr GEQ Expr
-- On SEMI reduce production Expr -> Expr GEQ Expr
-- On RPAREN reduce production Expr -> Expr GEQ Expr
-- On RESOURCE reduce production Expr -> Expr GEQ Expr
-- On REG reduce production Expr -> Expr GEQ Expr
-- On RBRACK reduce production Expr -> Expr GEQ Expr
-- On RBRACE reduce production Expr -> Expr GEQ Expr
-- On PORTS reduce production Expr -> Expr GEQ Expr
-- On PIPE reduce production Expr -> Expr GEQ Expr
-- On OR reduce production Expr -> Expr GEQ Expr
-- On OP reduce production Expr -> Expr GEQ Expr
-- On NEQ reduce production Expr -> Expr GEQ Expr
-- On MODE reduce production Expr -> Expr GEQ Expr
-- On MEM reduce production Expr -> Expr GEQ Expr
-- On LT reduce production Expr -> Expr GEQ Expr
-- On LET reduce production Expr -> Expr GEQ Expr
-- On LEQ reduce production Expr -> Expr GEQ Expr
-- On INITIALA reduce production Expr -> Expr GEQ Expr
-- On IMAGE reduce production Expr -> Expr GEQ Expr
-- On ID reduce production Expr -> Expr GEQ Expr
-- On GT reduce production Expr -> Expr GEQ Expr
-- On GEQ reduce production Expr -> Expr GEQ Expr
-- On EXTEND reduce production Expr -> Expr GEQ Expr
-- On EXCEPTION reduce production Expr -> Expr GEQ Expr
-- On EQU reduce production Expr -> Expr GEQ Expr
-- On EOF reduce production Expr -> Expr GEQ Expr
-- On ENDIF reduce production Expr -> Expr GEQ Expr
-- On ELSE reduce production Expr -> Expr GEQ Expr
-- On DOUBLE_DOT reduce production Expr -> Expr GEQ Expr
-- On DOUBLE_COLON reduce production Expr -> Expr GEQ Expr
-- On DEFAULT reduce production Expr -> Expr GEQ Expr
-- On COMMA reduce production Expr -> Expr GEQ Expr
-- On COLON reduce production Expr -> Expr GEQ Expr
-- On CIRC reduce production Expr -> Expr GEQ Expr
-- On CASE reduce production Expr -> Expr GEQ Expr
-- On CANON reduce production Expr -> Expr GEQ Expr
-- On AND reduce production Expr -> Expr GEQ Expr
-- On AMPERS reduce production Expr -> Expr GEQ Expr
-- On ALIAS reduce production Expr -> Expr GEQ Expr
-- On ACTION reduce production Expr -> Expr GEQ Expr

State 105:
## Known stack suffix:
## Expr EQU
## LR(1) items:
Expr -> Expr EQU . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 106
-- On Constant shift to state 76
## Reductions:

State 106:
## Known stack suffix:
## Expr EQU Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr EQU Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr EQU Expr
-- On VAR reduce production Expr -> Expr EQU Expr
-- On USES reduce production Expr -> Expr EQU Expr
-- On TYPE reduce production Expr -> Expr EQU Expr
-- On THEN reduce production Expr -> Expr EQU Expr
-- On SYNTAX reduce production Expr -> Expr EQU Expr
-- On SEMI reduce production Expr -> Expr EQU Expr
-- On RPAREN reduce production Expr -> Expr EQU Expr
-- On RESOURCE reduce production Expr -> Expr EQU Expr
-- On REG reduce production Expr -> Expr EQU Expr
-- On RBRACK reduce production Expr -> Expr EQU Expr
-- On RBRACE reduce production Expr -> Expr EQU Expr
-- On PORTS reduce production Expr -> Expr EQU Expr
-- On PIPE reduce production Expr -> Expr EQU Expr
-- On OR reduce production Expr -> Expr EQU Expr
-- On OP reduce production Expr -> Expr EQU Expr
-- On NEQ reduce production Expr -> Expr EQU Expr
-- On MODE reduce production Expr -> Expr EQU Expr
-- On MEM reduce production Expr -> Expr EQU Expr
-- On LET reduce production Expr -> Expr EQU Expr
-- On INITIALA reduce production Expr -> Expr EQU Expr
-- On IMAGE reduce production Expr -> Expr EQU Expr
-- On ID reduce production Expr -> Expr EQU Expr
-- On EXTEND reduce production Expr -> Expr EQU Expr
-- On EXCEPTION reduce production Expr -> Expr EQU Expr
-- On EQU reduce production Expr -> Expr EQU Expr
-- On EOF reduce production Expr -> Expr EQU Expr
-- On ENDIF reduce production Expr -> Expr EQU Expr
-- On ELSE reduce production Expr -> Expr EQU Expr
-- On DOUBLE_DOT reduce production Expr -> Expr EQU Expr
-- On DOUBLE_COLON reduce production Expr -> Expr EQU Expr
-- On DEFAULT reduce production Expr -> Expr EQU Expr
-- On COMMA reduce production Expr -> Expr EQU Expr
-- On COLON reduce production Expr -> Expr EQU Expr
-- On CIRC reduce production Expr -> Expr EQU Expr
-- On CASE reduce production Expr -> Expr EQU Expr
-- On CANON reduce production Expr -> Expr EQU Expr
-- On AND reduce production Expr -> Expr EQU Expr
-- On AMPERS reduce production Expr -> Expr EQU Expr
-- On ALIAS reduce production Expr -> Expr EQU Expr
-- On ACTION reduce production Expr -> Expr EQU Expr

State 107:
## Known stack suffix:
## Expr CIRC
## LR(1) items:
Expr -> Expr CIRC . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 108
-- On Constant shift to state 76
## Reductions:

State 108:
## Known stack suffix:
## Expr CIRC Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr CIRC Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
-- On AMPERS shift to state 109
## Reductions:
-- On VOLATILE reduce production Expr -> Expr CIRC Expr
-- On VAR reduce production Expr -> Expr CIRC Expr
-- On USES reduce production Expr -> Expr CIRC Expr
-- On TYPE reduce production Expr -> Expr CIRC Expr
-- On THEN reduce production Expr -> Expr CIRC Expr
-- On SYNTAX reduce production Expr -> Expr CIRC Expr
-- On SEMI reduce production Expr -> Expr CIRC Expr
-- On RPAREN reduce production Expr -> Expr CIRC Expr
-- On RESOURCE reduce production Expr -> Expr CIRC Expr
-- On REG reduce production Expr -> Expr CIRC Expr
-- On RBRACK reduce production Expr -> Expr CIRC Expr
-- On RBRACE reduce production Expr -> Expr CIRC Expr
-- On PORTS reduce production Expr -> Expr CIRC Expr
-- On PIPE reduce production Expr -> Expr CIRC Expr
-- On OR reduce production Expr -> Expr CIRC Expr
-- On OP reduce production Expr -> Expr CIRC Expr
-- On MODE reduce production Expr -> Expr CIRC Expr
-- On MEM reduce production Expr -> Expr CIRC Expr
-- On LET reduce production Expr -> Expr CIRC Expr
-- On INITIALA reduce production Expr -> Expr CIRC Expr
-- On IMAGE reduce production Expr -> Expr CIRC Expr
-- On ID reduce production Expr -> Expr CIRC Expr
-- On EXTEND reduce production Expr -> Expr CIRC Expr
-- On EXCEPTION reduce production Expr -> Expr CIRC Expr
-- On EOF reduce production Expr -> Expr CIRC Expr
-- On ENDIF reduce production Expr -> Expr CIRC Expr
-- On ELSE reduce production Expr -> Expr CIRC Expr
-- On DOUBLE_DOT reduce production Expr -> Expr CIRC Expr
-- On DOUBLE_COLON reduce production Expr -> Expr CIRC Expr
-- On DEFAULT reduce production Expr -> Expr CIRC Expr
-- On COMMA reduce production Expr -> Expr CIRC Expr
-- On COLON reduce production Expr -> Expr CIRC Expr
-- On CIRC reduce production Expr -> Expr CIRC Expr
-- On CASE reduce production Expr -> Expr CIRC Expr
-- On CANON reduce production Expr -> Expr CIRC Expr
-- On AND reduce production Expr -> Expr CIRC Expr
-- On ALIAS reduce production Expr -> Expr CIRC Expr
-- On ACTION reduce production Expr -> Expr CIRC Expr

State 109:
## Known stack suffix:
## Expr AMPERS
## LR(1) items:
Expr -> Expr AMPERS . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 110
-- On Constant shift to state 76
## Reductions:

State 110:
## Known stack suffix:
## Expr AMPERS Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr AMPERS Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PERCENT shift to state 83
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> Expr AMPERS Expr
-- On VAR reduce production Expr -> Expr AMPERS Expr
-- On USES reduce production Expr -> Expr AMPERS Expr
-- On TYPE reduce production Expr -> Expr AMPERS Expr
-- On THEN reduce production Expr -> Expr AMPERS Expr
-- On SYNTAX reduce production Expr -> Expr AMPERS Expr
-- On SEMI reduce production Expr -> Expr AMPERS Expr
-- On RPAREN reduce production Expr -> Expr AMPERS Expr
-- On RESOURCE reduce production Expr -> Expr AMPERS Expr
-- On REG reduce production Expr -> Expr AMPERS Expr
-- On RBRACK reduce production Expr -> Expr AMPERS Expr
-- On RBRACE reduce production Expr -> Expr AMPERS Expr
-- On PORTS reduce production Expr -> Expr AMPERS Expr
-- On PIPE reduce production Expr -> Expr AMPERS Expr
-- On OR reduce production Expr -> Expr AMPERS Expr
-- On OP reduce production Expr -> Expr AMPERS Expr
-- On MODE reduce production Expr -> Expr AMPERS Expr
-- On MEM reduce production Expr -> Expr AMPERS Expr
-- On LET reduce production Expr -> Expr AMPERS Expr
-- On INITIALA reduce production Expr -> Expr AMPERS Expr
-- On IMAGE reduce production Expr -> Expr AMPERS Expr
-- On ID reduce production Expr -> Expr AMPERS Expr
-- On EXTEND reduce production Expr -> Expr AMPERS Expr
-- On EXCEPTION reduce production Expr -> Expr AMPERS Expr
-- On EOF reduce production Expr -> Expr AMPERS Expr
-- On ENDIF reduce production Expr -> Expr AMPERS Expr
-- On ELSE reduce production Expr -> Expr AMPERS Expr
-- On DOUBLE_DOT reduce production Expr -> Expr AMPERS Expr
-- On DOUBLE_COLON reduce production Expr -> Expr AMPERS Expr
-- On DEFAULT reduce production Expr -> Expr AMPERS Expr
-- On COMMA reduce production Expr -> Expr AMPERS Expr
-- On COLON reduce production Expr -> Expr AMPERS Expr
-- On CIRC reduce production Expr -> Expr AMPERS Expr
-- On CASE reduce production Expr -> Expr AMPERS Expr
-- On CANON reduce production Expr -> Expr AMPERS Expr
-- On AND reduce production Expr -> Expr AMPERS Expr
-- On AMPERS reduce production Expr -> Expr AMPERS Expr
-- On ALIAS reduce production Expr -> Expr AMPERS Expr
-- On ACTION reduce production Expr -> Expr AMPERS Expr

State 111:
## Known stack suffix:
## Expr OR
## LR(1) items:
Expr -> Expr OR . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 112
-- On Constant shift to state 76
## Reductions:

State 112:
## Known stack suffix:
## Expr OR Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr OR Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On VOLATILE reduce production Expr -> Expr OR Expr
-- On VAR reduce production Expr -> Expr OR Expr
-- On USES reduce production Expr -> Expr OR Expr
-- On TYPE reduce production Expr -> Expr OR Expr
-- On THEN reduce production Expr -> Expr OR Expr
-- On SYNTAX reduce production Expr -> Expr OR Expr
-- On SEMI reduce production Expr -> Expr OR Expr
-- On RPAREN reduce production Expr -> Expr OR Expr
-- On RESOURCE reduce production Expr -> Expr OR Expr
-- On REG reduce production Expr -> Expr OR Expr
-- On RBRACK reduce production Expr -> Expr OR Expr
-- On RBRACE reduce production Expr -> Expr OR Expr
-- On PORTS reduce production Expr -> Expr OR Expr
-- On OR reduce production Expr -> Expr OR Expr
-- On OP reduce production Expr -> Expr OR Expr
-- On MODE reduce production Expr -> Expr OR Expr
-- On MEM reduce production Expr -> Expr OR Expr
-- On LET reduce production Expr -> Expr OR Expr
-- On INITIALA reduce production Expr -> Expr OR Expr
-- On IMAGE reduce production Expr -> Expr OR Expr
-- On ID reduce production Expr -> Expr OR Expr
-- On EXTEND reduce production Expr -> Expr OR Expr
-- On EXCEPTION reduce production Expr -> Expr OR Expr
-- On EOF reduce production Expr -> Expr OR Expr
-- On ENDIF reduce production Expr -> Expr OR Expr
-- On ELSE reduce production Expr -> Expr OR Expr
-- On DOUBLE_DOT reduce production Expr -> Expr OR Expr
-- On DOUBLE_COLON reduce production Expr -> Expr OR Expr
-- On DEFAULT reduce production Expr -> Expr OR Expr
-- On COMMA reduce production Expr -> Expr OR Expr
-- On COLON reduce production Expr -> Expr OR Expr
-- On CASE reduce production Expr -> Expr OR Expr
-- On CANON reduce production Expr -> Expr OR Expr
-- On ALIAS reduce production Expr -> Expr OR Expr
-- On ACTION reduce production Expr -> Expr OR Expr

State 113:
## Known stack suffix:
## Expr AND
## LR(1) items:
Expr -> Expr AND . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 114
-- On Constant shift to state 76
## Reductions:

State 114:
## Known stack suffix:
## Expr AND Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr AND Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AMPERS shift to state 109
## Reductions:
-- On VOLATILE reduce production Expr -> Expr AND Expr
-- On VAR reduce production Expr -> Expr AND Expr
-- On USES reduce production Expr -> Expr AND Expr
-- On TYPE reduce production Expr -> Expr AND Expr
-- On THEN reduce production Expr -> Expr AND Expr
-- On SYNTAX reduce production Expr -> Expr AND Expr
-- On SEMI reduce production Expr -> Expr AND Expr
-- On RPAREN reduce production Expr -> Expr AND Expr
-- On RESOURCE reduce production Expr -> Expr AND Expr
-- On REG reduce production Expr -> Expr AND Expr
-- On RBRACK reduce production Expr -> Expr AND Expr
-- On RBRACE reduce production Expr -> Expr AND Expr
-- On PORTS reduce production Expr -> Expr AND Expr
-- On OR reduce production Expr -> Expr AND Expr
-- On OP reduce production Expr -> Expr AND Expr
-- On MODE reduce production Expr -> Expr AND Expr
-- On MEM reduce production Expr -> Expr AND Expr
-- On LET reduce production Expr -> Expr AND Expr
-- On INITIALA reduce production Expr -> Expr AND Expr
-- On IMAGE reduce production Expr -> Expr AND Expr
-- On ID reduce production Expr -> Expr AND Expr
-- On EXTEND reduce production Expr -> Expr AND Expr
-- On EXCEPTION reduce production Expr -> Expr AND Expr
-- On EOF reduce production Expr -> Expr AND Expr
-- On ENDIF reduce production Expr -> Expr AND Expr
-- On ELSE reduce production Expr -> Expr AND Expr
-- On DOUBLE_DOT reduce production Expr -> Expr AND Expr
-- On DOUBLE_COLON reduce production Expr -> Expr AND Expr
-- On DEFAULT reduce production Expr -> Expr AND Expr
-- On COMMA reduce production Expr -> Expr AND Expr
-- On COLON reduce production Expr -> Expr AND Expr
-- On CASE reduce production Expr -> Expr AND Expr
-- On CANON reduce production Expr -> Expr AND Expr
-- On AND reduce production Expr -> Expr AND Expr
-- On ALIAS reduce production Expr -> Expr AND Expr
-- On ACTION reduce production Expr -> Expr AND Expr

State 115:
## Known stack suffix:
## Expr DOUBLE_COLON
## LR(1) items:
Expr -> Expr DOUBLE_COLON . Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 116
-- On Constant shift to state 76
## Reductions:

State 116:
## Known stack suffix:
## Expr DOUBLE_COLON Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr DOUBLE_COLON Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On VOLATILE reduce production Expr -> Expr DOUBLE_COLON Expr
-- On VAR reduce production Expr -> Expr DOUBLE_COLON Expr
-- On USES reduce production Expr -> Expr DOUBLE_COLON Expr
-- On TYPE reduce production Expr -> Expr DOUBLE_COLON Expr
-- On THEN reduce production Expr -> Expr DOUBLE_COLON Expr
-- On SYNTAX reduce production Expr -> Expr DOUBLE_COLON Expr
-- On SEMI reduce production Expr -> Expr DOUBLE_COLON Expr
-- On RPAREN reduce production Expr -> Expr DOUBLE_COLON Expr
-- On RESOURCE reduce production Expr -> Expr DOUBLE_COLON Expr
-- On REG reduce production Expr -> Expr DOUBLE_COLON Expr
-- On RBRACK reduce production Expr -> Expr DOUBLE_COLON Expr
-- On RBRACE reduce production Expr -> Expr DOUBLE_COLON Expr
-- On PORTS reduce production Expr -> Expr DOUBLE_COLON Expr
-- On OP reduce production Expr -> Expr DOUBLE_COLON Expr
-- On MODE reduce production Expr -> Expr DOUBLE_COLON Expr
-- On MEM reduce production Expr -> Expr DOUBLE_COLON Expr
-- On LET reduce production Expr -> Expr DOUBLE_COLON Expr
-- On INITIALA reduce production Expr -> Expr DOUBLE_COLON Expr
-- On IMAGE reduce production Expr -> Expr DOUBLE_COLON Expr
-- On ID reduce production Expr -> Expr DOUBLE_COLON Expr
-- On EXTEND reduce production Expr -> Expr DOUBLE_COLON Expr
-- On EXCEPTION reduce production Expr -> Expr DOUBLE_COLON Expr
-- On EOF reduce production Expr -> Expr DOUBLE_COLON Expr
-- On ENDIF reduce production Expr -> Expr DOUBLE_COLON Expr
-- On ELSE reduce production Expr -> Expr DOUBLE_COLON Expr
-- On DOUBLE_DOT reduce production Expr -> Expr DOUBLE_COLON Expr
-- On DOUBLE_COLON reduce production Expr -> Expr DOUBLE_COLON Expr
-- On DEFAULT reduce production Expr -> Expr DOUBLE_COLON Expr
-- On COMMA reduce production Expr -> Expr DOUBLE_COLON Expr
-- On COLON reduce production Expr -> Expr DOUBLE_COLON Expr
-- On CASE reduce production Expr -> Expr DOUBLE_COLON Expr
-- On CANON reduce production Expr -> Expr DOUBLE_COLON Expr
-- On ALIAS reduce production Expr -> Expr DOUBLE_COLON Expr
-- On ACTION reduce production Expr -> Expr DOUBLE_COLON Expr

State 117:
## Known stack suffix:
## INT
## LR(1) items:
TypeExpr -> INT . LPAREN LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On LPAREN shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## INT LPAREN
## LR(1) items:
TypeExpr -> INT LPAREN . LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 119
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 119:
## Known stack suffix:
## INT LPAREN LetExpr
## LR(1) items:
TypeExpr -> INT LPAREN LetExpr . RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On RPAREN shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## INT LPAREN LetExpr RPAREN
## LR(1) items:
TypeExpr -> INT LPAREN LetExpr RPAREN . [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On TYPE reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On STRING_CONST reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On RPAREN reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On RESOURCE reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On REG reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On RBRACK reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On OP reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On MODE reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On MEM reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On LET reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On EXTEND reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On EXCEPTION reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On EOF reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On COMMA reduce production TypeExpr -> INT LPAREN LetExpr RPAREN
-- On CANON reduce production TypeExpr -> INT LPAREN LetExpr RPAREN

State 121:
## Known stack suffix:
## ID
## LR(1) items:
Type -> ID . [ STRING_CONST RPAREN RBRACK COMMA ]
## Transitions:
## Reductions:
-- On STRING_CONST reduce production Type -> ID
-- On RPAREN reduce production Type -> ID
-- On RBRACK reduce production Type -> ID
-- On COMMA reduce production Type -> ID

State 122:
## Known stack suffix:
## FLOAT
## LR(1) items:
TypeExpr -> FLOAT . LPAREN LetExpr COMMA LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On LPAREN shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## FLOAT LPAREN
## LR(1) items:
TypeExpr -> FLOAT LPAREN . LetExpr COMMA LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 124
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 124:
## Known stack suffix:
## FLOAT LPAREN LetExpr
## LR(1) items:
TypeExpr -> FLOAT LPAREN LetExpr . COMMA LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On COMMA shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## FLOAT LPAREN LetExpr COMMA
## LR(1) items:
TypeExpr -> FLOAT LPAREN LetExpr COMMA . LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 126
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 126:
## Known stack suffix:
## FLOAT LPAREN LetExpr COMMA LetExpr
## LR(1) items:
TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr . RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On RPAREN shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
## LR(1) items:
TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN . [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On TYPE reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On STRING_CONST reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On RPAREN reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On RESOURCE reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On REG reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On RBRACK reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On OP reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On MODE reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On MEM reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On LET reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On EXTEND reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On EXCEPTION reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On EOF reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On COMMA reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN
-- On CANON reduce production TypeExpr -> FLOAT LPAREN LetExpr COMMA LetExpr RPAREN

State 128:
## Known stack suffix:
## FIX
## LR(1) items:
TypeExpr -> FIX . LPAREN LetExpr COMMA LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On LPAREN shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## FIX LPAREN
## LR(1) items:
TypeExpr -> FIX LPAREN . LetExpr COMMA LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 130
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 130:
## Known stack suffix:
## FIX LPAREN LetExpr
## LR(1) items:
TypeExpr -> FIX LPAREN LetExpr . COMMA LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On COMMA shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## FIX LPAREN LetExpr COMMA
## LR(1) items:
TypeExpr -> FIX LPAREN LetExpr COMMA . LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 132
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 132:
## Known stack suffix:
## FIX LPAREN LetExpr COMMA LetExpr
## LR(1) items:
TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr . RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On RPAREN shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## FIX LPAREN LetExpr COMMA LetExpr RPAREN
## LR(1) items:
TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN . [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On TYPE reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On STRING_CONST reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On RPAREN reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On RESOURCE reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On REG reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On RBRACK reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On OP reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On MODE reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On MEM reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On LET reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On EXTEND reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On EXCEPTION reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On EOF reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On COMMA reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN
-- On CANON reduce production TypeExpr -> FIX LPAREN LetExpr COMMA LetExpr RPAREN

State 134:
## Known stack suffix:
## ENUM
## LR(1) items:
TypeExpr -> ENUM . LPAREN IdentifierList RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On LPAREN shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## ENUM LPAREN
## LR(1) items:
TypeExpr -> ENUM LPAREN . IdentifierList RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On ID shift to state 136
-- On IdentifierList shift to state 137
## Reductions:

State 136:
## Known stack suffix:
## ID
## LR(1) items:
IdentifierList -> ID . [ VAR TYPE RPAREN RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production IdentifierList -> ID
-- On TYPE reduce production IdentifierList -> ID
-- On RPAREN reduce production IdentifierList -> ID
-- On RESOURCE reduce production IdentifierList -> ID
-- On REG reduce production IdentifierList -> ID
-- On OP reduce production IdentifierList -> ID
-- On MODE reduce production IdentifierList -> ID
-- On MEM reduce production IdentifierList -> ID
-- On LET reduce production IdentifierList -> ID
-- On EXTEND reduce production IdentifierList -> ID
-- On EXCEPTION reduce production IdentifierList -> ID
-- On EOF reduce production IdentifierList -> ID
-- On COMMA reduce production IdentifierList -> ID
-- On CANON reduce production IdentifierList -> ID

State 137:
## Known stack suffix:
## ENUM LPAREN IdentifierList
## LR(1) items:
IdentifierList -> IdentifierList . COMMA ID [ RPAREN COMMA ]
TypeExpr -> ENUM LPAREN IdentifierList . RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On RPAREN shift to state 138
-- On COMMA shift to state 139
## Reductions:

State 138:
## Known stack suffix:
## ENUM LPAREN IdentifierList RPAREN
## LR(1) items:
TypeExpr -> ENUM LPAREN IdentifierList RPAREN . [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On TYPE reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On STRING_CONST reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On RPAREN reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On RESOURCE reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On REG reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On RBRACK reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On OP reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On MODE reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On MEM reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On LET reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On EXTEND reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On EXCEPTION reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On EOF reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On COMMA reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN
-- On CANON reduce production TypeExpr -> ENUM LPAREN IdentifierList RPAREN

State 139:
## Known stack suffix:
## IdentifierList COMMA
## LR(1) items:
IdentifierList -> IdentifierList COMMA . ID [ VAR TYPE RPAREN RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On ID shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## IdentifierList COMMA ID
## LR(1) items:
IdentifierList -> IdentifierList COMMA ID . [ VAR TYPE RPAREN RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production IdentifierList -> IdentifierList COMMA ID
-- On TYPE reduce production IdentifierList -> IdentifierList COMMA ID
-- On RPAREN reduce production IdentifierList -> IdentifierList COMMA ID
-- On RESOURCE reduce production IdentifierList -> IdentifierList COMMA ID
-- On REG reduce production IdentifierList -> IdentifierList COMMA ID
-- On OP reduce production IdentifierList -> IdentifierList COMMA ID
-- On MODE reduce production IdentifierList -> IdentifierList COMMA ID
-- On MEM reduce production IdentifierList -> IdentifierList COMMA ID
-- On LET reduce production IdentifierList -> IdentifierList COMMA ID
-- On EXTEND reduce production IdentifierList -> IdentifierList COMMA ID
-- On EXCEPTION reduce production IdentifierList -> IdentifierList COMMA ID
-- On EOF reduce production IdentifierList -> IdentifierList COMMA ID
-- On COMMA reduce production IdentifierList -> IdentifierList COMMA ID
-- On CANON reduce production IdentifierList -> IdentifierList COMMA ID

State 141:
## Known stack suffix:
## CARD
## LR(1) items:
TypeExpr -> CARD . LPAREN LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On LPAREN shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## CARD LPAREN
## LR(1) items:
TypeExpr -> CARD LPAREN . LetExpr RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 143
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 143:
## Known stack suffix:
## CARD LPAREN LetExpr
## LR(1) items:
TypeExpr -> CARD LPAREN LetExpr . RPAREN [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On RPAREN shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## CARD LPAREN LetExpr RPAREN
## LR(1) items:
TypeExpr -> CARD LPAREN LetExpr RPAREN . [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On TYPE reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On STRING_CONST reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On RPAREN reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On RESOURCE reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On REG reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On RBRACK reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On OP reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On MODE reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On MEM reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On LET reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On EXTEND reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On EXCEPTION reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On EOF reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On COMMA reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN
-- On CANON reduce production TypeExpr -> CARD LPAREN LetExpr RPAREN

State 145:
## Known stack suffix:
## BOOL
## LR(1) items:
TypeExpr -> BOOL . [ VAR TYPE STRING_CONST RPAREN RESOURCE REG RBRACK OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production TypeExpr -> BOOL
-- On TYPE reduce production TypeExpr -> BOOL
-- On STRING_CONST reduce production TypeExpr -> BOOL
-- On RPAREN reduce production TypeExpr -> BOOL
-- On RESOURCE reduce production TypeExpr -> BOOL
-- On REG reduce production TypeExpr -> BOOL
-- On RBRACK reduce production TypeExpr -> BOOL
-- On OP reduce production TypeExpr -> BOOL
-- On MODE reduce production TypeExpr -> BOOL
-- On MEM reduce production TypeExpr -> BOOL
-- On LET reduce production TypeExpr -> BOOL
-- On EXTEND reduce production TypeExpr -> BOOL
-- On EXCEPTION reduce production TypeExpr -> BOOL
-- On EOF reduce production TypeExpr -> BOOL
-- On COMMA reduce production TypeExpr -> BOOL
-- On CANON reduce production TypeExpr -> BOOL

State 146:
## Known stack suffix:
## TypeExpr
## LR(1) items:
Type -> TypeExpr . [ STRING_CONST RPAREN RBRACK COMMA ]
## Transitions:
## Reductions:
-- On STRING_CONST reduce production Type -> TypeExpr
-- On RPAREN reduce production Type -> TypeExpr
-- On RBRACK reduce production Type -> TypeExpr
-- On COMMA reduce production Type -> TypeExpr

State 147:
## Known stack suffix:
## COERCE LPAREN Type
## LR(1) items:
Expr -> COERCE LPAREN Type . COMMA Expr RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On COMMA shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## COERCE LPAREN Type COMMA
## LR(1) items:
Expr -> COERCE LPAREN Type COMMA . Expr RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 149
-- On Constant shift to state 76
## Reductions:

State 149:
## Known stack suffix:
## COERCE LPAREN Type COMMA Expr
## LR(1) items:
Expr -> COERCE LPAREN Type COMMA Expr . RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On RPAREN shift to state 150
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 150:
## Known stack suffix:
## COERCE LPAREN Type COMMA Expr RPAREN
## LR(1) items:
Expr -> COERCE LPAREN Type COMMA Expr RPAREN . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On VAR reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On USES reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On TYPE reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On THEN reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On SYNTAX reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On STAR reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On SLASH reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On SEMI reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On RPAREN reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On ROTATE_RIGHT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On ROTATE_LEFT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On RIGHT_SHIFT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On RESOURCE reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On REG reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On RBRACK reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On RBRACE reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On PORTS reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On PLUS reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On PIPE reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On PERCENT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On OR reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On OP reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On NEQ reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On MODE reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On MINUS reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On MEM reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On LT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On LET reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On LEQ reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On LEFT_SHIFT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On INITIALA reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On IMAGE reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On ID reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On GT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On GEQ reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On EXTEND reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On EXCEPTION reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On EQU reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On EOF reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On ENDIF reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On ELSE reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On DOUBLE_STAR reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On DOUBLE_DOT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On DOUBLE_COLON reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On DEFAULT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On COMMA reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On COLON reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On CIRC reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On CASE reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On CANON reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On BIT_LEFT reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On AND reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On AMPERS reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On ALIAS reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN
-- On ACTION reduce production Expr -> COERCE LPAREN Type COMMA Expr RPAREN

State 151:
## Known stack suffix:
## EXCLAM Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> EXCLAM Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AMPERS shift to state 109
## Reductions:
-- On VOLATILE reduce production Expr -> EXCLAM Expr
-- On VAR reduce production Expr -> EXCLAM Expr
-- On USES reduce production Expr -> EXCLAM Expr
-- On TYPE reduce production Expr -> EXCLAM Expr
-- On THEN reduce production Expr -> EXCLAM Expr
-- On SYNTAX reduce production Expr -> EXCLAM Expr
-- On SEMI reduce production Expr -> EXCLAM Expr
-- On RPAREN reduce production Expr -> EXCLAM Expr
-- On RESOURCE reduce production Expr -> EXCLAM Expr
-- On REG reduce production Expr -> EXCLAM Expr
-- On RBRACK reduce production Expr -> EXCLAM Expr
-- On RBRACE reduce production Expr -> EXCLAM Expr
-- On PORTS reduce production Expr -> EXCLAM Expr
-- On OR reduce production Expr -> EXCLAM Expr
-- On OP reduce production Expr -> EXCLAM Expr
-- On MODE reduce production Expr -> EXCLAM Expr
-- On MEM reduce production Expr -> EXCLAM Expr
-- On LET reduce production Expr -> EXCLAM Expr
-- On INITIALA reduce production Expr -> EXCLAM Expr
-- On IMAGE reduce production Expr -> EXCLAM Expr
-- On ID reduce production Expr -> EXCLAM Expr
-- On EXTEND reduce production Expr -> EXCLAM Expr
-- On EXCEPTION reduce production Expr -> EXCLAM Expr
-- On EOF reduce production Expr -> EXCLAM Expr
-- On ENDIF reduce production Expr -> EXCLAM Expr
-- On ELSE reduce production Expr -> EXCLAM Expr
-- On DOUBLE_DOT reduce production Expr -> EXCLAM Expr
-- On DOUBLE_COLON reduce production Expr -> EXCLAM Expr
-- On DEFAULT reduce production Expr -> EXCLAM Expr
-- On COMMA reduce production Expr -> EXCLAM Expr
-- On COLON reduce production Expr -> EXCLAM Expr
-- On CASE reduce production Expr -> EXCLAM Expr
-- On CANON reduce production Expr -> EXCLAM Expr
-- On AND reduce production Expr -> EXCLAM Expr
-- On ALIAS reduce production Expr -> EXCLAM Expr
-- On ACTION reduce production Expr -> EXCLAM Expr

State 152:
## Known stack suffix:
## Expr
## LR(1) items:
ArgList -> Expr . [ RPAREN COMMA ]
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On RPAREN reduce production ArgList -> Expr
-- On COMMA reduce production ArgList -> Expr

State 153:
## Known stack suffix:
## FORMAT LPAREN STRING_CONST COMMA ArgList
## LR(1) items:
ArgList -> ArgList . COMMA Expr [ RPAREN COMMA ]
Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList . RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On RPAREN shift to state 154
-- On COMMA shift to state 155
## Reductions:

State 154:
## Known stack suffix:
## FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
## LR(1) items:
Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On VAR reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On USES reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On TYPE reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On THEN reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On SYNTAX reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On STAR reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On SLASH reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On SEMI reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On RPAREN reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On ROTATE_RIGHT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On ROTATE_LEFT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On RIGHT_SHIFT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On RESOURCE reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On REG reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On RBRACK reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On RBRACE reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On PORTS reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On PLUS reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On PIPE reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On PERCENT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On OR reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On OP reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On NEQ reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On MODE reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On MINUS reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On MEM reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On LT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On LET reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On LEQ reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On LEFT_SHIFT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On INITIALA reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On IMAGE reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On ID reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On GT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On GEQ reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On EXTEND reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On EXCEPTION reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On EQU reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On EOF reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On ENDIF reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On ELSE reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On DOUBLE_STAR reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On DOUBLE_DOT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On DOUBLE_COLON reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On DEFAULT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On COMMA reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On COLON reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On CIRC reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On CASE reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On CANON reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On BIT_LEFT reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On AND reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On AMPERS reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On ALIAS reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN
-- On ACTION reduce production Expr -> FORMAT LPAREN STRING_CONST COMMA ArgList RPAREN

State 155:
## Known stack suffix:
## ArgList COMMA
## LR(1) items:
ArgList -> ArgList COMMA . Expr [ RPAREN COMMA ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 156
-- On Constant shift to state 76
## Reductions:

State 156:
## Known stack suffix:
## ArgList COMMA Expr
## LR(1) items:
ArgList -> ArgList COMMA Expr . [ RPAREN COMMA ]
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On RPAREN reduce production ArgList -> ArgList COMMA Expr
-- On COMMA reduce production ArgList -> ArgList COMMA Expr

State 157:
## Known stack suffix:
## ID LBRACK Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> ID LBRACK Expr . RBRACK [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On RBRACK shift to state 158
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 158:
## Known stack suffix:
## ID LBRACK Expr RBRACK
## LR(1) items:
Expr -> ID LBRACK Expr RBRACK . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> ID LBRACK Expr RBRACK
-- On VAR reduce production Expr -> ID LBRACK Expr RBRACK
-- On USES reduce production Expr -> ID LBRACK Expr RBRACK
-- On TYPE reduce production Expr -> ID LBRACK Expr RBRACK
-- On THEN reduce production Expr -> ID LBRACK Expr RBRACK
-- On SYNTAX reduce production Expr -> ID LBRACK Expr RBRACK
-- On STAR reduce production Expr -> ID LBRACK Expr RBRACK
-- On SLASH reduce production Expr -> ID LBRACK Expr RBRACK
-- On SEMI reduce production Expr -> ID LBRACK Expr RBRACK
-- On RPAREN reduce production Expr -> ID LBRACK Expr RBRACK
-- On ROTATE_RIGHT reduce production Expr -> ID LBRACK Expr RBRACK
-- On ROTATE_LEFT reduce production Expr -> ID LBRACK Expr RBRACK
-- On RIGHT_SHIFT reduce production Expr -> ID LBRACK Expr RBRACK
-- On RESOURCE reduce production Expr -> ID LBRACK Expr RBRACK
-- On REG reduce production Expr -> ID LBRACK Expr RBRACK
-- On RBRACK reduce production Expr -> ID LBRACK Expr RBRACK
-- On RBRACE reduce production Expr -> ID LBRACK Expr RBRACK
-- On PORTS reduce production Expr -> ID LBRACK Expr RBRACK
-- On PLUS reduce production Expr -> ID LBRACK Expr RBRACK
-- On PIPE reduce production Expr -> ID LBRACK Expr RBRACK
-- On PERCENT reduce production Expr -> ID LBRACK Expr RBRACK
-- On OR reduce production Expr -> ID LBRACK Expr RBRACK
-- On OP reduce production Expr -> ID LBRACK Expr RBRACK
-- On NEQ reduce production Expr -> ID LBRACK Expr RBRACK
-- On MODE reduce production Expr -> ID LBRACK Expr RBRACK
-- On MINUS reduce production Expr -> ID LBRACK Expr RBRACK
-- On MEM reduce production Expr -> ID LBRACK Expr RBRACK
-- On LT reduce production Expr -> ID LBRACK Expr RBRACK
-- On LET reduce production Expr -> ID LBRACK Expr RBRACK
-- On LEQ reduce production Expr -> ID LBRACK Expr RBRACK
-- On LEFT_SHIFT reduce production Expr -> ID LBRACK Expr RBRACK
-- On INITIALA reduce production Expr -> ID LBRACK Expr RBRACK
-- On IMAGE reduce production Expr -> ID LBRACK Expr RBRACK
-- On ID reduce production Expr -> ID LBRACK Expr RBRACK
-- On GT reduce production Expr -> ID LBRACK Expr RBRACK
-- On GEQ reduce production Expr -> ID LBRACK Expr RBRACK
-- On EXTEND reduce production Expr -> ID LBRACK Expr RBRACK
-- On EXCEPTION reduce production Expr -> ID LBRACK Expr RBRACK
-- On EQU reduce production Expr -> ID LBRACK Expr RBRACK
-- On EOF reduce production Expr -> ID LBRACK Expr RBRACK
-- On ENDIF reduce production Expr -> ID LBRACK Expr RBRACK
-- On ELSE reduce production Expr -> ID LBRACK Expr RBRACK
-- On DOUBLE_STAR reduce production Expr -> ID LBRACK Expr RBRACK
-- On DOUBLE_DOT reduce production Expr -> ID LBRACK Expr RBRACK
-- On DOUBLE_COLON reduce production Expr -> ID LBRACK Expr RBRACK
-- On DEFAULT reduce production Expr -> ID LBRACK Expr RBRACK
-- On COMMA reduce production Expr -> ID LBRACK Expr RBRACK
-- On COLON reduce production Expr -> ID LBRACK Expr RBRACK
-- On CIRC reduce production Expr -> ID LBRACK Expr RBRACK
-- On CASE reduce production Expr -> ID LBRACK Expr RBRACK
-- On CANON reduce production Expr -> ID LBRACK Expr RBRACK
-- On BIT_LEFT reduce production Expr -> ID LBRACK Expr RBRACK
-- On AND reduce production Expr -> ID LBRACK Expr RBRACK
-- On AMPERS reduce production Expr -> ID LBRACK Expr RBRACK
-- On ALIAS reduce production Expr -> ID LBRACK Expr RBRACK
-- On ACTION reduce production Expr -> ID LBRACK Expr RBRACK

State 159:
## Known stack suffix:
## ID DOT
## LR(1) items:
Expr -> ID DOT . SYNTAX [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> ID DOT . IMAGE [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> ID DOT . ID [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On SYNTAX shift to state 160
-- On IMAGE shift to state 161
-- On ID shift to state 162
## Reductions:

State 160:
## Known stack suffix:
## ID DOT SYNTAX
## LR(1) items:
Expr -> ID DOT SYNTAX . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> ID DOT SYNTAX
-- On VAR reduce production Expr -> ID DOT SYNTAX
-- On USES reduce production Expr -> ID DOT SYNTAX
-- On TYPE reduce production Expr -> ID DOT SYNTAX
-- On THEN reduce production Expr -> ID DOT SYNTAX
-- On SYNTAX reduce production Expr -> ID DOT SYNTAX
-- On STAR reduce production Expr -> ID DOT SYNTAX
-- On SLASH reduce production Expr -> ID DOT SYNTAX
-- On SEMI reduce production Expr -> ID DOT SYNTAX
-- On RPAREN reduce production Expr -> ID DOT SYNTAX
-- On ROTATE_RIGHT reduce production Expr -> ID DOT SYNTAX
-- On ROTATE_LEFT reduce production Expr -> ID DOT SYNTAX
-- On RIGHT_SHIFT reduce production Expr -> ID DOT SYNTAX
-- On RESOURCE reduce production Expr -> ID DOT SYNTAX
-- On REG reduce production Expr -> ID DOT SYNTAX
-- On RBRACK reduce production Expr -> ID DOT SYNTAX
-- On RBRACE reduce production Expr -> ID DOT SYNTAX
-- On PORTS reduce production Expr -> ID DOT SYNTAX
-- On PLUS reduce production Expr -> ID DOT SYNTAX
-- On PIPE reduce production Expr -> ID DOT SYNTAX
-- On PERCENT reduce production Expr -> ID DOT SYNTAX
-- On OR reduce production Expr -> ID DOT SYNTAX
-- On OP reduce production Expr -> ID DOT SYNTAX
-- On NEQ reduce production Expr -> ID DOT SYNTAX
-- On MODE reduce production Expr -> ID DOT SYNTAX
-- On MINUS reduce production Expr -> ID DOT SYNTAX
-- On MEM reduce production Expr -> ID DOT SYNTAX
-- On LT reduce production Expr -> ID DOT SYNTAX
-- On LET reduce production Expr -> ID DOT SYNTAX
-- On LEQ reduce production Expr -> ID DOT SYNTAX
-- On LEFT_SHIFT reduce production Expr -> ID DOT SYNTAX
-- On INITIALA reduce production Expr -> ID DOT SYNTAX
-- On IMAGE reduce production Expr -> ID DOT SYNTAX
-- On ID reduce production Expr -> ID DOT SYNTAX
-- On GT reduce production Expr -> ID DOT SYNTAX
-- On GEQ reduce production Expr -> ID DOT SYNTAX
-- On EXTEND reduce production Expr -> ID DOT SYNTAX
-- On EXCEPTION reduce production Expr -> ID DOT SYNTAX
-- On EQU reduce production Expr -> ID DOT SYNTAX
-- On EOF reduce production Expr -> ID DOT SYNTAX
-- On ENDIF reduce production Expr -> ID DOT SYNTAX
-- On ELSE reduce production Expr -> ID DOT SYNTAX
-- On DOUBLE_STAR reduce production Expr -> ID DOT SYNTAX
-- On DOUBLE_DOT reduce production Expr -> ID DOT SYNTAX
-- On DOUBLE_COLON reduce production Expr -> ID DOT SYNTAX
-- On DEFAULT reduce production Expr -> ID DOT SYNTAX
-- On COMMA reduce production Expr -> ID DOT SYNTAX
-- On COLON reduce production Expr -> ID DOT SYNTAX
-- On CIRC reduce production Expr -> ID DOT SYNTAX
-- On CASE reduce production Expr -> ID DOT SYNTAX
-- On CANON reduce production Expr -> ID DOT SYNTAX
-- On BIT_LEFT reduce production Expr -> ID DOT SYNTAX
-- On AND reduce production Expr -> ID DOT SYNTAX
-- On AMPERS reduce production Expr -> ID DOT SYNTAX
-- On ALIAS reduce production Expr -> ID DOT SYNTAX
-- On ACTION reduce production Expr -> ID DOT SYNTAX

State 161:
## Known stack suffix:
## ID DOT IMAGE
## LR(1) items:
Expr -> ID DOT IMAGE . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> ID DOT IMAGE
-- On VAR reduce production Expr -> ID DOT IMAGE
-- On USES reduce production Expr -> ID DOT IMAGE
-- On TYPE reduce production Expr -> ID DOT IMAGE
-- On THEN reduce production Expr -> ID DOT IMAGE
-- On SYNTAX reduce production Expr -> ID DOT IMAGE
-- On STAR reduce production Expr -> ID DOT IMAGE
-- On SLASH reduce production Expr -> ID DOT IMAGE
-- On SEMI reduce production Expr -> ID DOT IMAGE
-- On RPAREN reduce production Expr -> ID DOT IMAGE
-- On ROTATE_RIGHT reduce production Expr -> ID DOT IMAGE
-- On ROTATE_LEFT reduce production Expr -> ID DOT IMAGE
-- On RIGHT_SHIFT reduce production Expr -> ID DOT IMAGE
-- On RESOURCE reduce production Expr -> ID DOT IMAGE
-- On REG reduce production Expr -> ID DOT IMAGE
-- On RBRACK reduce production Expr -> ID DOT IMAGE
-- On RBRACE reduce production Expr -> ID DOT IMAGE
-- On PORTS reduce production Expr -> ID DOT IMAGE
-- On PLUS reduce production Expr -> ID DOT IMAGE
-- On PIPE reduce production Expr -> ID DOT IMAGE
-- On PERCENT reduce production Expr -> ID DOT IMAGE
-- On OR reduce production Expr -> ID DOT IMAGE
-- On OP reduce production Expr -> ID DOT IMAGE
-- On NEQ reduce production Expr -> ID DOT IMAGE
-- On MODE reduce production Expr -> ID DOT IMAGE
-- On MINUS reduce production Expr -> ID DOT IMAGE
-- On MEM reduce production Expr -> ID DOT IMAGE
-- On LT reduce production Expr -> ID DOT IMAGE
-- On LET reduce production Expr -> ID DOT IMAGE
-- On LEQ reduce production Expr -> ID DOT IMAGE
-- On LEFT_SHIFT reduce production Expr -> ID DOT IMAGE
-- On INITIALA reduce production Expr -> ID DOT IMAGE
-- On IMAGE reduce production Expr -> ID DOT IMAGE
-- On ID reduce production Expr -> ID DOT IMAGE
-- On GT reduce production Expr -> ID DOT IMAGE
-- On GEQ reduce production Expr -> ID DOT IMAGE
-- On EXTEND reduce production Expr -> ID DOT IMAGE
-- On EXCEPTION reduce production Expr -> ID DOT IMAGE
-- On EQU reduce production Expr -> ID DOT IMAGE
-- On EOF reduce production Expr -> ID DOT IMAGE
-- On ENDIF reduce production Expr -> ID DOT IMAGE
-- On ELSE reduce production Expr -> ID DOT IMAGE
-- On DOUBLE_STAR reduce production Expr -> ID DOT IMAGE
-- On DOUBLE_DOT reduce production Expr -> ID DOT IMAGE
-- On DOUBLE_COLON reduce production Expr -> ID DOT IMAGE
-- On DEFAULT reduce production Expr -> ID DOT IMAGE
-- On COMMA reduce production Expr -> ID DOT IMAGE
-- On COLON reduce production Expr -> ID DOT IMAGE
-- On CIRC reduce production Expr -> ID DOT IMAGE
-- On CASE reduce production Expr -> ID DOT IMAGE
-- On CANON reduce production Expr -> ID DOT IMAGE
-- On BIT_LEFT reduce production Expr -> ID DOT IMAGE
-- On AND reduce production Expr -> ID DOT IMAGE
-- On AMPERS reduce production Expr -> ID DOT IMAGE
-- On ALIAS reduce production Expr -> ID DOT IMAGE
-- On ACTION reduce production Expr -> ID DOT IMAGE

State 162:
## Known stack suffix:
## ID DOT ID
## LR(1) items:
Expr -> ID DOT ID . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> ID DOT ID
-- On VAR reduce production Expr -> ID DOT ID
-- On USES reduce production Expr -> ID DOT ID
-- On TYPE reduce production Expr -> ID DOT ID
-- On THEN reduce production Expr -> ID DOT ID
-- On SYNTAX reduce production Expr -> ID DOT ID
-- On STAR reduce production Expr -> ID DOT ID
-- On SLASH reduce production Expr -> ID DOT ID
-- On SEMI reduce production Expr -> ID DOT ID
-- On RPAREN reduce production Expr -> ID DOT ID
-- On ROTATE_RIGHT reduce production Expr -> ID DOT ID
-- On ROTATE_LEFT reduce production Expr -> ID DOT ID
-- On RIGHT_SHIFT reduce production Expr -> ID DOT ID
-- On RESOURCE reduce production Expr -> ID DOT ID
-- On REG reduce production Expr -> ID DOT ID
-- On RBRACK reduce production Expr -> ID DOT ID
-- On RBRACE reduce production Expr -> ID DOT ID
-- On PORTS reduce production Expr -> ID DOT ID
-- On PLUS reduce production Expr -> ID DOT ID
-- On PIPE reduce production Expr -> ID DOT ID
-- On PERCENT reduce production Expr -> ID DOT ID
-- On OR reduce production Expr -> ID DOT ID
-- On OP reduce production Expr -> ID DOT ID
-- On NEQ reduce production Expr -> ID DOT ID
-- On MODE reduce production Expr -> ID DOT ID
-- On MINUS reduce production Expr -> ID DOT ID
-- On MEM reduce production Expr -> ID DOT ID
-- On LT reduce production Expr -> ID DOT ID
-- On LET reduce production Expr -> ID DOT ID
-- On LEQ reduce production Expr -> ID DOT ID
-- On LEFT_SHIFT reduce production Expr -> ID DOT ID
-- On INITIALA reduce production Expr -> ID DOT ID
-- On IMAGE reduce production Expr -> ID DOT ID
-- On ID reduce production Expr -> ID DOT ID
-- On GT reduce production Expr -> ID DOT ID
-- On GEQ reduce production Expr -> ID DOT ID
-- On EXTEND reduce production Expr -> ID DOT ID
-- On EXCEPTION reduce production Expr -> ID DOT ID
-- On EQU reduce production Expr -> ID DOT ID
-- On EOF reduce production Expr -> ID DOT ID
-- On ENDIF reduce production Expr -> ID DOT ID
-- On ELSE reduce production Expr -> ID DOT ID
-- On DOUBLE_STAR reduce production Expr -> ID DOT ID
-- On DOUBLE_DOT reduce production Expr -> ID DOT ID
-- On DOUBLE_COLON reduce production Expr -> ID DOT ID
-- On DEFAULT reduce production Expr -> ID DOT ID
-- On COMMA reduce production Expr -> ID DOT ID
-- On COLON reduce production Expr -> ID DOT ID
-- On CIRC reduce production Expr -> ID DOT ID
-- On CASE reduce production Expr -> ID DOT ID
-- On CANON reduce production Expr -> ID DOT ID
-- On BIT_LEFT reduce production Expr -> ID DOT ID
-- On AND reduce production Expr -> ID DOT ID
-- On AMPERS reduce production Expr -> ID DOT ID
-- On ALIAS reduce production Expr -> ID DOT ID
-- On ACTION reduce production Expr -> ID DOT ID

State 163:
## Known stack suffix:
## IF Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> IF Expr . THEN Expr ELSE Expr ENDIF [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On THEN shift to state 164
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 164:
## Known stack suffix:
## IF Expr THEN
## LR(1) items:
Expr -> IF Expr THEN . Expr ELSE Expr ENDIF [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 165
-- On Constant shift to state 76
## Reductions:

State 165:
## Known stack suffix:
## IF Expr THEN Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ELSE DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> IF Expr THEN Expr . ELSE Expr ENDIF [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On ELSE shift to state 166
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 166:
## Known stack suffix:
## IF Expr THEN Expr ELSE
## LR(1) items:
Expr -> IF Expr THEN Expr ELSE . Expr ENDIF [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 167
-- On Constant shift to state 76
## Reductions:

State 167:
## Known stack suffix:
## IF Expr THEN Expr ELSE Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU ENDIF DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> IF Expr THEN Expr ELSE Expr . ENDIF [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On ENDIF shift to state 168
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 168:
## Known stack suffix:
## IF Expr THEN Expr ELSE Expr ENDIF
## LR(1) items:
Expr -> IF Expr THEN Expr ELSE Expr ENDIF . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On VAR reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On USES reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On TYPE reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On THEN reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On SYNTAX reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On STAR reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On SLASH reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On SEMI reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On RPAREN reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On ROTATE_RIGHT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On ROTATE_LEFT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On RIGHT_SHIFT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On RESOURCE reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On REG reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On RBRACK reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On RBRACE reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On PORTS reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On PLUS reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On PIPE reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On PERCENT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On OR reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On OP reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On NEQ reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On MODE reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On MINUS reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On MEM reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On LT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On LET reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On LEQ reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On LEFT_SHIFT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On INITIALA reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On IMAGE reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On ID reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On GT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On GEQ reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On EXTEND reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On EXCEPTION reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On EQU reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On EOF reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On ENDIF reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On ELSE reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On DOUBLE_STAR reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On DOUBLE_DOT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On DOUBLE_COLON reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On DEFAULT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On COMMA reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On COLON reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On CIRC reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On CASE reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On CANON reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On BIT_LEFT reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On AND reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On AMPERS reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On ALIAS reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF
-- On ACTION reduce production Expr -> IF Expr THEN Expr ELSE Expr ENDIF

State 169:
## Known stack suffix:
## LPAREN Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> LPAREN Expr . RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On RPAREN shift to state 170
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 170:
## Known stack suffix:
## LPAREN Expr RPAREN
## LR(1) items:
Expr -> LPAREN Expr RPAREN . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> LPAREN Expr RPAREN
-- On VAR reduce production Expr -> LPAREN Expr RPAREN
-- On USES reduce production Expr -> LPAREN Expr RPAREN
-- On TYPE reduce production Expr -> LPAREN Expr RPAREN
-- On THEN reduce production Expr -> LPAREN Expr RPAREN
-- On SYNTAX reduce production Expr -> LPAREN Expr RPAREN
-- On STAR reduce production Expr -> LPAREN Expr RPAREN
-- On SLASH reduce production Expr -> LPAREN Expr RPAREN
-- On SEMI reduce production Expr -> LPAREN Expr RPAREN
-- On RPAREN reduce production Expr -> LPAREN Expr RPAREN
-- On ROTATE_RIGHT reduce production Expr -> LPAREN Expr RPAREN
-- On ROTATE_LEFT reduce production Expr -> LPAREN Expr RPAREN
-- On RIGHT_SHIFT reduce production Expr -> LPAREN Expr RPAREN
-- On RESOURCE reduce production Expr -> LPAREN Expr RPAREN
-- On REG reduce production Expr -> LPAREN Expr RPAREN
-- On RBRACK reduce production Expr -> LPAREN Expr RPAREN
-- On RBRACE reduce production Expr -> LPAREN Expr RPAREN
-- On PORTS reduce production Expr -> LPAREN Expr RPAREN
-- On PLUS reduce production Expr -> LPAREN Expr RPAREN
-- On PIPE reduce production Expr -> LPAREN Expr RPAREN
-- On PERCENT reduce production Expr -> LPAREN Expr RPAREN
-- On OR reduce production Expr -> LPAREN Expr RPAREN
-- On OP reduce production Expr -> LPAREN Expr RPAREN
-- On NEQ reduce production Expr -> LPAREN Expr RPAREN
-- On MODE reduce production Expr -> LPAREN Expr RPAREN
-- On MINUS reduce production Expr -> LPAREN Expr RPAREN
-- On MEM reduce production Expr -> LPAREN Expr RPAREN
-- On LT reduce production Expr -> LPAREN Expr RPAREN
-- On LET reduce production Expr -> LPAREN Expr RPAREN
-- On LEQ reduce production Expr -> LPAREN Expr RPAREN
-- On LEFT_SHIFT reduce production Expr -> LPAREN Expr RPAREN
-- On INITIALA reduce production Expr -> LPAREN Expr RPAREN
-- On IMAGE reduce production Expr -> LPAREN Expr RPAREN
-- On ID reduce production Expr -> LPAREN Expr RPAREN
-- On GT reduce production Expr -> LPAREN Expr RPAREN
-- On GEQ reduce production Expr -> LPAREN Expr RPAREN
-- On EXTEND reduce production Expr -> LPAREN Expr RPAREN
-- On EXCEPTION reduce production Expr -> LPAREN Expr RPAREN
-- On EQU reduce production Expr -> LPAREN Expr RPAREN
-- On EOF reduce production Expr -> LPAREN Expr RPAREN
-- On ENDIF reduce production Expr -> LPAREN Expr RPAREN
-- On ELSE reduce production Expr -> LPAREN Expr RPAREN
-- On DOUBLE_STAR reduce production Expr -> LPAREN Expr RPAREN
-- On DOUBLE_DOT reduce production Expr -> LPAREN Expr RPAREN
-- On DOUBLE_COLON reduce production Expr -> LPAREN Expr RPAREN
-- On DEFAULT reduce production Expr -> LPAREN Expr RPAREN
-- On COMMA reduce production Expr -> LPAREN Expr RPAREN
-- On COLON reduce production Expr -> LPAREN Expr RPAREN
-- On CIRC reduce production Expr -> LPAREN Expr RPAREN
-- On CASE reduce production Expr -> LPAREN Expr RPAREN
-- On CANON reduce production Expr -> LPAREN Expr RPAREN
-- On BIT_LEFT reduce production Expr -> LPAREN Expr RPAREN
-- On AND reduce production Expr -> LPAREN Expr RPAREN
-- On AMPERS reduce production Expr -> LPAREN Expr RPAREN
-- On ALIAS reduce production Expr -> LPAREN Expr RPAREN
-- On ACTION reduce production Expr -> LPAREN Expr RPAREN

State 171:
## Known stack suffix:
## MINUS Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> MINUS Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> MINUS Expr
-- On VAR reduce production Expr -> MINUS Expr
-- On USES reduce production Expr -> MINUS Expr
-- On TYPE reduce production Expr -> MINUS Expr
-- On THEN reduce production Expr -> MINUS Expr
-- On SYNTAX reduce production Expr -> MINUS Expr
-- On STAR reduce production Expr -> MINUS Expr
-- On SLASH reduce production Expr -> MINUS Expr
-- On SEMI reduce production Expr -> MINUS Expr
-- On RPAREN reduce production Expr -> MINUS Expr
-- On ROTATE_RIGHT reduce production Expr -> MINUS Expr
-- On ROTATE_LEFT reduce production Expr -> MINUS Expr
-- On RIGHT_SHIFT reduce production Expr -> MINUS Expr
-- On RESOURCE reduce production Expr -> MINUS Expr
-- On REG reduce production Expr -> MINUS Expr
-- On RBRACK reduce production Expr -> MINUS Expr
-- On RBRACE reduce production Expr -> MINUS Expr
-- On PORTS reduce production Expr -> MINUS Expr
-- On PLUS reduce production Expr -> MINUS Expr
-- On PIPE reduce production Expr -> MINUS Expr
-- On PERCENT reduce production Expr -> MINUS Expr
-- On OR reduce production Expr -> MINUS Expr
-- On OP reduce production Expr -> MINUS Expr
-- On NEQ reduce production Expr -> MINUS Expr
-- On MODE reduce production Expr -> MINUS Expr
-- On MINUS reduce production Expr -> MINUS Expr
-- On MEM reduce production Expr -> MINUS Expr
-- On LT reduce production Expr -> MINUS Expr
-- On LET reduce production Expr -> MINUS Expr
-- On LEQ reduce production Expr -> MINUS Expr
-- On LEFT_SHIFT reduce production Expr -> MINUS Expr
-- On INITIALA reduce production Expr -> MINUS Expr
-- On IMAGE reduce production Expr -> MINUS Expr
-- On ID reduce production Expr -> MINUS Expr
-- On GT reduce production Expr -> MINUS Expr
-- On GEQ reduce production Expr -> MINUS Expr
-- On EXTEND reduce production Expr -> MINUS Expr
-- On EXCEPTION reduce production Expr -> MINUS Expr
-- On EQU reduce production Expr -> MINUS Expr
-- On EOF reduce production Expr -> MINUS Expr
-- On ENDIF reduce production Expr -> MINUS Expr
-- On ELSE reduce production Expr -> MINUS Expr
-- On DOUBLE_STAR reduce production Expr -> MINUS Expr
-- On DOUBLE_DOT reduce production Expr -> MINUS Expr
-- On DOUBLE_COLON reduce production Expr -> MINUS Expr
-- On DEFAULT reduce production Expr -> MINUS Expr
-- On COMMA reduce production Expr -> MINUS Expr
-- On COLON reduce production Expr -> MINUS Expr
-- On CIRC reduce production Expr -> MINUS Expr
-- On CASE reduce production Expr -> MINUS Expr
-- On CANON reduce production Expr -> MINUS Expr
-- On AND reduce production Expr -> MINUS Expr
-- On AMPERS reduce production Expr -> MINUS Expr
-- On ALIAS reduce production Expr -> MINUS Expr
-- On ACTION reduce production Expr -> MINUS Expr

State 172:
## Known stack suffix:
## PLUS Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> PLUS Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> PLUS Expr
-- On VAR reduce production Expr -> PLUS Expr
-- On USES reduce production Expr -> PLUS Expr
-- On TYPE reduce production Expr -> PLUS Expr
-- On THEN reduce production Expr -> PLUS Expr
-- On SYNTAX reduce production Expr -> PLUS Expr
-- On STAR reduce production Expr -> PLUS Expr
-- On SLASH reduce production Expr -> PLUS Expr
-- On SEMI reduce production Expr -> PLUS Expr
-- On RPAREN reduce production Expr -> PLUS Expr
-- On ROTATE_RIGHT reduce production Expr -> PLUS Expr
-- On ROTATE_LEFT reduce production Expr -> PLUS Expr
-- On RIGHT_SHIFT reduce production Expr -> PLUS Expr
-- On RESOURCE reduce production Expr -> PLUS Expr
-- On REG reduce production Expr -> PLUS Expr
-- On RBRACK reduce production Expr -> PLUS Expr
-- On RBRACE reduce production Expr -> PLUS Expr
-- On PORTS reduce production Expr -> PLUS Expr
-- On PLUS reduce production Expr -> PLUS Expr
-- On PIPE reduce production Expr -> PLUS Expr
-- On PERCENT reduce production Expr -> PLUS Expr
-- On OR reduce production Expr -> PLUS Expr
-- On OP reduce production Expr -> PLUS Expr
-- On NEQ reduce production Expr -> PLUS Expr
-- On MODE reduce production Expr -> PLUS Expr
-- On MINUS reduce production Expr -> PLUS Expr
-- On MEM reduce production Expr -> PLUS Expr
-- On LT reduce production Expr -> PLUS Expr
-- On LET reduce production Expr -> PLUS Expr
-- On LEQ reduce production Expr -> PLUS Expr
-- On LEFT_SHIFT reduce production Expr -> PLUS Expr
-- On INITIALA reduce production Expr -> PLUS Expr
-- On IMAGE reduce production Expr -> PLUS Expr
-- On ID reduce production Expr -> PLUS Expr
-- On GT reduce production Expr -> PLUS Expr
-- On GEQ reduce production Expr -> PLUS Expr
-- On EXTEND reduce production Expr -> PLUS Expr
-- On EXCEPTION reduce production Expr -> PLUS Expr
-- On EQU reduce production Expr -> PLUS Expr
-- On EOF reduce production Expr -> PLUS Expr
-- On ENDIF reduce production Expr -> PLUS Expr
-- On ELSE reduce production Expr -> PLUS Expr
-- On DOUBLE_STAR reduce production Expr -> PLUS Expr
-- On DOUBLE_DOT reduce production Expr -> PLUS Expr
-- On DOUBLE_COLON reduce production Expr -> PLUS Expr
-- On DEFAULT reduce production Expr -> PLUS Expr
-- On COMMA reduce production Expr -> PLUS Expr
-- On COLON reduce production Expr -> PLUS Expr
-- On CIRC reduce production Expr -> PLUS Expr
-- On CASE reduce production Expr -> PLUS Expr
-- On CANON reduce production Expr -> PLUS Expr
-- On AND reduce production Expr -> PLUS Expr
-- On AMPERS reduce production Expr -> PLUS Expr
-- On ALIAS reduce production Expr -> PLUS Expr
-- On ACTION reduce production Expr -> PLUS Expr

State 173:
## Known stack suffix:
## STRING_CONST LPAREN ArgList
## LR(1) items:
ArgList -> ArgList . COMMA Expr [ RPAREN COMMA ]
Expr -> STRING_CONST LPAREN ArgList . RPAREN [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On RPAREN shift to state 174
-- On COMMA shift to state 155
## Reductions:

State 174:
## Known stack suffix:
## STRING_CONST LPAREN ArgList RPAREN
## LR(1) items:
Expr -> STRING_CONST LPAREN ArgList RPAREN . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On VAR reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On USES reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On TYPE reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On THEN reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On SYNTAX reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On STAR reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On SLASH reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On SEMI reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On RPAREN reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On ROTATE_RIGHT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On ROTATE_LEFT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On RIGHT_SHIFT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On RESOURCE reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On REG reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On RBRACK reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On RBRACE reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On PORTS reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On PLUS reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On PIPE reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On PERCENT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On OR reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On OP reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On NEQ reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On MODE reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On MINUS reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On MEM reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On LT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On LET reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On LEQ reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On LEFT_SHIFT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On INITIALA reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On IMAGE reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On ID reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On GT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On GEQ reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On EXTEND reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On EXCEPTION reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On EQU reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On EOF reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On ENDIF reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On ELSE reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On DOUBLE_STAR reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On DOUBLE_DOT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On DOUBLE_COLON reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On DEFAULT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On COMMA reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On COLON reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On CIRC reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On CASE reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On CANON reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On BIT_LEFT reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On AND reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On AMPERS reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On ALIAS reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN
-- On ACTION reduce production Expr -> STRING_CONST LPAREN ArgList RPAREN

State 175:
## Known stack suffix:
## SWITCH LPAREN Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> SWITCH LPAREN Expr . RPAREN LBRACE CaseExprBody RBRACE [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On RPAREN shift to state 176
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 176:
## Known stack suffix:
## SWITCH LPAREN Expr RPAREN
## LR(1) items:
Expr -> SWITCH LPAREN Expr RPAREN . LBRACE CaseExprBody RBRACE [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LBRACE shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## SWITCH LPAREN Expr RPAREN LBRACE
## LR(1) items:
Expr -> SWITCH LPAREN Expr RPAREN LBRACE . CaseExprBody RBRACE [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On CASE shift to state 178
-- On OptCaseExprList shift to state 182
-- On CaseExprStat shift to state 188
-- On CaseExprList shift to state 191
-- On CaseExprBody shift to state 192
## Reductions:
-- On DEFAULT reduce production OptCaseExprList ->

State 178:
## Known stack suffix:
## CASE
## LR(1) items:
CaseExprStat -> CASE . Expr COLON Expr [ RBRACE DEFAULT CASE ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 179
-- On Constant shift to state 76
## Reductions:

State 179:
## Known stack suffix:
## CASE Expr
## LR(1) items:
CaseExprStat -> CASE Expr . COLON Expr [ RBRACE DEFAULT CASE ]
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On COLON shift to state 180
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 180:
## Known stack suffix:
## CASE Expr COLON
## LR(1) items:
CaseExprStat -> CASE Expr COLON . Expr [ RBRACE DEFAULT CASE ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 181
-- On Constant shift to state 76
## Reductions:

State 181:
## Known stack suffix:
## CASE Expr COLON Expr
## LR(1) items:
CaseExprStat -> CASE Expr COLON Expr . [ RBRACE DEFAULT CASE ]
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON DEFAULT CIRC CASE BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On RBRACE reduce production CaseExprStat -> CASE Expr COLON Expr
-- On DEFAULT reduce production CaseExprStat -> CASE Expr COLON Expr
-- On CASE reduce production CaseExprStat -> CASE Expr COLON Expr

State 182:
## Known stack suffix:
## OptCaseExprList
## LR(1) items:
CaseExprBody -> OptCaseExprList . ExprDefault OptCaseExprList [ RBRACE ]
## Transitions:
-- On DEFAULT shift to state 183
-- On ExprDefault shift to state 186
## Reductions:

State 183:
## Known stack suffix:
## DEFAULT
## LR(1) items:
ExprDefault -> DEFAULT . COLON Expr [ RBRACE CASE ]
## Transitions:
-- On COLON shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## DEFAULT COLON
## LR(1) items:
ExprDefault -> DEFAULT COLON . Expr [ RBRACE CASE ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 185
-- On Constant shift to state 76
## Reductions:

State 185:
## Known stack suffix:
## DEFAULT COLON Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC CASE BIT_LEFT AND AMPERS ]
ExprDefault -> DEFAULT COLON Expr . [ RBRACE CASE ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On RBRACE reduce production ExprDefault -> DEFAULT COLON Expr
-- On CASE reduce production ExprDefault -> DEFAULT COLON Expr

State 186:
## Known stack suffix:
## OptCaseExprList ExprDefault
## LR(1) items:
CaseExprBody -> OptCaseExprList ExprDefault . OptCaseExprList [ RBRACE ]
## Transitions:
-- On CASE shift to state 178
-- On OptCaseExprList shift to state 187
-- On CaseExprStat shift to state 188
-- On CaseExprList shift to state 189
## Reductions:
-- On RBRACE reduce production OptCaseExprList ->

State 187:
## Known stack suffix:
## OptCaseExprList ExprDefault OptCaseExprList
## LR(1) items:
CaseExprBody -> OptCaseExprList ExprDefault OptCaseExprList . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production CaseExprBody -> OptCaseExprList ExprDefault OptCaseExprList

State 188:
## Known stack suffix:
## CaseExprStat
## LR(1) items:
CaseExprList -> CaseExprStat . [ RBRACE DEFAULT CASE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production CaseExprList -> CaseExprStat
-- On DEFAULT reduce production CaseExprList -> CaseExprStat
-- On CASE reduce production CaseExprList -> CaseExprStat

State 189:
## Known stack suffix:
## CaseExprList
## LR(1) items:
CaseExprList -> CaseExprList . CaseExprStat [ RBRACE CASE ]
OptCaseExprList -> CaseExprList . [ RBRACE ]
## Transitions:
-- On CASE shift to state 178
-- On CaseExprStat shift to state 190
## Reductions:
-- On RBRACE reduce production OptCaseExprList -> CaseExprList

State 190:
## Known stack suffix:
## CaseExprList CaseExprStat
## LR(1) items:
CaseExprList -> CaseExprList CaseExprStat . [ RBRACE DEFAULT CASE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production CaseExprList -> CaseExprList CaseExprStat
-- On DEFAULT reduce production CaseExprList -> CaseExprList CaseExprStat
-- On CASE reduce production CaseExprList -> CaseExprList CaseExprStat

State 191:
## Known stack suffix:
## CaseExprList
## LR(1) items:
CaseExprBody -> CaseExprList . [ RBRACE ]
CaseExprList -> CaseExprList . CaseExprStat [ RBRACE DEFAULT CASE ]
OptCaseExprList -> CaseExprList . [ DEFAULT ]
## Transitions:
-- On CASE shift to state 178
-- On CaseExprStat shift to state 190
## Reductions:
-- On RBRACE reduce production CaseExprBody -> CaseExprList
-- On DEFAULT reduce production OptCaseExprList -> CaseExprList

State 192:
## Known stack suffix:
## SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody
## LR(1) items:
Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody . RBRACE [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On RBRACE shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
## LR(1) items:
Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On VAR reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On USES reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On TYPE reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On THEN reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On SYNTAX reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On STAR reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On SLASH reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On SEMI reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On RPAREN reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On ROTATE_RIGHT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On ROTATE_LEFT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On RIGHT_SHIFT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On RESOURCE reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On REG reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On RBRACK reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On RBRACE reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On PORTS reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On PLUS reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On PIPE reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On PERCENT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On OR reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On OP reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On NEQ reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On MODE reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On MINUS reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On MEM reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On LT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On LET reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On LEQ reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On LEFT_SHIFT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On INITIALA reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On IMAGE reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On ID reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On GT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On GEQ reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On EXTEND reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On EXCEPTION reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On EQU reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On EOF reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On ENDIF reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On ELSE reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On DOUBLE_STAR reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On DOUBLE_DOT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On DOUBLE_COLON reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On DEFAULT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On COMMA reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On COLON reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On CIRC reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On CASE reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On CANON reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On BIT_LEFT reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On AND reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On AMPERS reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On ALIAS reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE
-- On ACTION reduce production Expr -> SWITCH LPAREN Expr RPAREN LBRACE CaseExprBody RBRACE

State 194:
## Known stack suffix:
## TILD Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> TILD Expr . [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE THEN SYNTAX STAR SLASH SEMI RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG RBRACK RBRACE PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF ENDIF ELSE DOUBLE_STAR DOUBLE_DOT DOUBLE_COLON DEFAULT COMMA COLON CIRC CASE CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On BIT_LEFT shift to state 40
## Reductions:
-- On VOLATILE reduce production Expr -> TILD Expr
-- On VAR reduce production Expr -> TILD Expr
-- On USES reduce production Expr -> TILD Expr
-- On TYPE reduce production Expr -> TILD Expr
-- On THEN reduce production Expr -> TILD Expr
-- On SYNTAX reduce production Expr -> TILD Expr
-- On STAR reduce production Expr -> TILD Expr
-- On SLASH reduce production Expr -> TILD Expr
-- On SEMI reduce production Expr -> TILD Expr
-- On RPAREN reduce production Expr -> TILD Expr
-- On ROTATE_RIGHT reduce production Expr -> TILD Expr
-- On ROTATE_LEFT reduce production Expr -> TILD Expr
-- On RIGHT_SHIFT reduce production Expr -> TILD Expr
-- On RESOURCE reduce production Expr -> TILD Expr
-- On REG reduce production Expr -> TILD Expr
-- On RBRACK reduce production Expr -> TILD Expr
-- On RBRACE reduce production Expr -> TILD Expr
-- On PORTS reduce production Expr -> TILD Expr
-- On PLUS reduce production Expr -> TILD Expr
-- On PIPE reduce production Expr -> TILD Expr
-- On PERCENT reduce production Expr -> TILD Expr
-- On OR reduce production Expr -> TILD Expr
-- On OP reduce production Expr -> TILD Expr
-- On NEQ reduce production Expr -> TILD Expr
-- On MODE reduce production Expr -> TILD Expr
-- On MINUS reduce production Expr -> TILD Expr
-- On MEM reduce production Expr -> TILD Expr
-- On LT reduce production Expr -> TILD Expr
-- On LET reduce production Expr -> TILD Expr
-- On LEQ reduce production Expr -> TILD Expr
-- On LEFT_SHIFT reduce production Expr -> TILD Expr
-- On INITIALA reduce production Expr -> TILD Expr
-- On IMAGE reduce production Expr -> TILD Expr
-- On ID reduce production Expr -> TILD Expr
-- On GT reduce production Expr -> TILD Expr
-- On GEQ reduce production Expr -> TILD Expr
-- On EXTEND reduce production Expr -> TILD Expr
-- On EXCEPTION reduce production Expr -> TILD Expr
-- On EQU reduce production Expr -> TILD Expr
-- On EOF reduce production Expr -> TILD Expr
-- On ENDIF reduce production Expr -> TILD Expr
-- On ELSE reduce production Expr -> TILD Expr
-- On DOUBLE_STAR reduce production Expr -> TILD Expr
-- On DOUBLE_DOT reduce production Expr -> TILD Expr
-- On DOUBLE_COLON reduce production Expr -> TILD Expr
-- On DEFAULT reduce production Expr -> TILD Expr
-- On COMMA reduce production Expr -> TILD Expr
-- On COLON reduce production Expr -> TILD Expr
-- On CIRC reduce production Expr -> TILD Expr
-- On CASE reduce production Expr -> TILD Expr
-- On CANON reduce production Expr -> TILD Expr
-- On AND reduce production Expr -> TILD Expr
-- On AMPERS reduce production Expr -> TILD Expr
-- On ALIAS reduce production Expr -> TILD Expr
-- On ACTION reduce production Expr -> TILD Expr

State 195:
## Known stack suffix:
## ID
## LR(1) items:
Expr -> ID . DOT SYNTAX [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> ID . DOT IMAGE [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> ID . DOT ID [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> ID . [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Expr -> ID . LBRACK Expr RBRACK [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COMMA CIRC BIT_LEFT AND AMPERS ]
Type -> ID . [ RBRACK ]
## Transitions:
-- On LBRACK shift to state 15
-- On DOT shift to state 159
## Reductions:
-- On STAR reduce production Expr -> ID
-- On SLASH reduce production Expr -> ID
-- On ROTATE_RIGHT reduce production Expr -> ID
-- On ROTATE_LEFT reduce production Expr -> ID
-- On RIGHT_SHIFT reduce production Expr -> ID
-- On RBRACK reduce production Type -> ID
-- On PLUS reduce production Expr -> ID
-- On PIPE reduce production Expr -> ID
-- On PERCENT reduce production Expr -> ID
-- On OR reduce production Expr -> ID
-- On NEQ reduce production Expr -> ID
-- On MINUS reduce production Expr -> ID
-- On LT reduce production Expr -> ID
-- On LEQ reduce production Expr -> ID
-- On LEFT_SHIFT reduce production Expr -> ID
-- On GT reduce production Expr -> ID
-- On GEQ reduce production Expr -> ID
-- On EQU reduce production Expr -> ID
-- On DOUBLE_STAR reduce production Expr -> ID
-- On DOUBLE_COLON reduce production Expr -> ID
-- On COMMA reduce production Expr -> ID
-- On CIRC reduce production Expr -> ID
-- On BIT_LEFT reduce production Expr -> ID
-- On AND reduce production Expr -> ID
-- On AMPERS reduce production Expr -> ID

State 196:
## Known stack suffix:
## Type
## LR(1) items:
RegPart -> Type . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK reduce production RegPart -> Type

State 197:
## Known stack suffix:
## VAR LocatedID LBRACK RegPart
## LR(1) items:
VarSpec -> VAR LocatedID LBRACK RegPart . RBRACK [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On RBRACK shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## VAR LocatedID LBRACK RegPart RBRACK
## LR(1) items:
VarSpec -> VAR LocatedID LBRACK RegPart RBRACK . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On TYPE reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On RESOURCE reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On REG reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On OP reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On MODE reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On MEM reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On LET reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On EXTEND reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On EXCEPTION reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On EOF reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK
-- On CANON reduce production VarSpec -> VAR LocatedID LBRACK RegPart RBRACK

State 199:
## Known stack suffix:
## LetExpr
## LR(1) items:
RegPart -> LetExpr . COMMA Type [ RBRACK ]
## Transitions:
-- On COMMA shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## LetExpr COMMA
## LR(1) items:
RegPart -> LetExpr COMMA . Type [ RBRACK ]
## Transitions:
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On ID shift to state 121
-- On FLOAT shift to state 122
-- On FIX shift to state 128
-- On ENUM shift to state 134
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On TypeExpr shift to state 146
-- On Type shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## LetExpr COMMA Type
## LR(1) items:
RegPart -> LetExpr COMMA Type . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK reduce production RegPart -> LetExpr COMMA Type

State 202:
## Known stack suffix:
## TYPE
## LR(1) items:
TypeSpec -> TYPE . LocatedID EQ TypeExpr [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 2
-- On LocatedID shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## TYPE LocatedID
## LR(1) items:
TypeSpec -> TYPE LocatedID . EQ TypeExpr [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On EQ shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## TYPE LocatedID EQ
## LR(1) items:
TypeSpec -> TYPE LocatedID EQ . TypeExpr [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On FLOAT shift to state 122
-- On FIX shift to state 128
-- On ENUM shift to state 134
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On TypeExpr shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## TYPE LocatedID EQ TypeExpr
## LR(1) items:
TypeSpec -> TYPE LocatedID EQ TypeExpr . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On TYPE reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On RESOURCE reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On REG reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On OP reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On MODE reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On MEM reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On LET reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On EXTEND reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On EXCEPTION reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On EOF reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr
-- On CANON reduce production TypeSpec -> TYPE LocatedID EQ TypeExpr

State 206:
## Known stack suffix:
## RESOURCE
## LR(1) items:
ResourceSpec -> RESOURCE . ResourceList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 2
-- On ResourceList shift to state 207
-- On Resource shift to state 214
-- On LocatedID shift to state 210
## Reductions:

State 207:
## Known stack suffix:
## RESOURCE ResourceList
## LR(1) items:
ResourceList -> ResourceList . COMMA Resource [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
ResourceSpec -> RESOURCE ResourceList . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On COMMA shift to state 208
## Reductions:
-- On VAR reduce production ResourceSpec -> RESOURCE ResourceList
-- On TYPE reduce production ResourceSpec -> RESOURCE ResourceList
-- On RESOURCE reduce production ResourceSpec -> RESOURCE ResourceList
-- On REG reduce production ResourceSpec -> RESOURCE ResourceList
-- On OP reduce production ResourceSpec -> RESOURCE ResourceList
-- On MODE reduce production ResourceSpec -> RESOURCE ResourceList
-- On MEM reduce production ResourceSpec -> RESOURCE ResourceList
-- On LET reduce production ResourceSpec -> RESOURCE ResourceList
-- On EXTEND reduce production ResourceSpec -> RESOURCE ResourceList
-- On EXCEPTION reduce production ResourceSpec -> RESOURCE ResourceList
-- On EOF reduce production ResourceSpec -> RESOURCE ResourceList
-- On CANON reduce production ResourceSpec -> RESOURCE ResourceList

State 208:
## Known stack suffix:
## ResourceList COMMA
## LR(1) items:
ResourceList -> ResourceList COMMA . Resource [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On ID shift to state 2
-- On Resource shift to state 209
-- On LocatedID shift to state 210
## Reductions:

State 209:
## Known stack suffix:
## ResourceList COMMA Resource
## LR(1) items:
ResourceList -> ResourceList COMMA Resource . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production ResourceList -> ResourceList COMMA Resource
-- On TYPE reduce production ResourceList -> ResourceList COMMA Resource
-- On RESOURCE reduce production ResourceList -> ResourceList COMMA Resource
-- On REG reduce production ResourceList -> ResourceList COMMA Resource
-- On OP reduce production ResourceList -> ResourceList COMMA Resource
-- On MODE reduce production ResourceList -> ResourceList COMMA Resource
-- On MEM reduce production ResourceList -> ResourceList COMMA Resource
-- On LET reduce production ResourceList -> ResourceList COMMA Resource
-- On EXTEND reduce production ResourceList -> ResourceList COMMA Resource
-- On EXCEPTION reduce production ResourceList -> ResourceList COMMA Resource
-- On EOF reduce production ResourceList -> ResourceList COMMA Resource
-- On COMMA reduce production ResourceList -> ResourceList COMMA Resource
-- On CANON reduce production ResourceList -> ResourceList COMMA Resource

State 210:
## Known stack suffix:
## LocatedID
## LR(1) items:
Resource -> LocatedID . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
Resource -> LocatedID . LBRACK CARD_CONST RBRACK [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On LBRACK shift to state 211
## Reductions:
-- On VAR reduce production Resource -> LocatedID
-- On TYPE reduce production Resource -> LocatedID
-- On RESOURCE reduce production Resource -> LocatedID
-- On REG reduce production Resource -> LocatedID
-- On OP reduce production Resource -> LocatedID
-- On MODE reduce production Resource -> LocatedID
-- On MEM reduce production Resource -> LocatedID
-- On LET reduce production Resource -> LocatedID
-- On EXTEND reduce production Resource -> LocatedID
-- On EXCEPTION reduce production Resource -> LocatedID
-- On EOF reduce production Resource -> LocatedID
-- On COMMA reduce production Resource -> LocatedID
-- On CANON reduce production Resource -> LocatedID

State 211:
## Known stack suffix:
## LocatedID LBRACK
## LR(1) items:
Resource -> LocatedID LBRACK . CARD_CONST RBRACK [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On CARD_CONST shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## LocatedID LBRACK CARD_CONST
## LR(1) items:
Resource -> LocatedID LBRACK CARD_CONST . RBRACK [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On RBRACK shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## LocatedID LBRACK CARD_CONST RBRACK
## LR(1) items:
Resource -> LocatedID LBRACK CARD_CONST RBRACK . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On TYPE reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On RESOURCE reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On REG reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On OP reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On MODE reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On MEM reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On LET reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On EXTEND reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On EXCEPTION reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On EOF reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On COMMA reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK
-- On CANON reduce production Resource -> LocatedID LBRACK CARD_CONST RBRACK

State 214:
## Known stack suffix:
## Resource
## LR(1) items:
ResourceList -> Resource . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production ResourceList -> Resource
-- On TYPE reduce production ResourceList -> Resource
-- On RESOURCE reduce production ResourceList -> Resource
-- On REG reduce production ResourceList -> Resource
-- On OP reduce production ResourceList -> Resource
-- On MODE reduce production ResourceList -> Resource
-- On MEM reduce production ResourceList -> Resource
-- On LET reduce production ResourceList -> Resource
-- On EXTEND reduce production ResourceList -> Resource
-- On EXCEPTION reduce production ResourceList -> Resource
-- On EOF reduce production ResourceList -> Resource
-- On COMMA reduce production ResourceList -> Resource
-- On CANON reduce production ResourceList -> Resource

State 215:
## Known stack suffix:
## REG
## LR(1) items:
RegisterSpec -> REG . LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 2
-- On LocatedID shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## REG LocatedID
## LR(1) items:
RegisterSpec -> REG LocatedID . LBRACK RegPart RBRACK OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On LBRACK shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## REG LocatedID LBRACK
## LR(1) items:
RegisterSpec -> REG LocatedID LBRACK . RegPart RBRACK OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On IF shift to state 13
-- On ID shift to state 195
-- On FORMAT shift to state 16
-- On FLOAT shift to state 122
-- On FIXED_CONST shift to state 20
-- On FIX shift to state 128
-- On EXCLAM shift to state 21
-- On ENUM shift to state 134
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On TypeExpr shift to state 146
-- On Type shift to state 196
-- On RegPart shift to state 218
-- On LetExpr shift to state 199
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 218:
## Known stack suffix:
## REG LocatedID LBRACK RegPart
## LR(1) items:
RegisterSpec -> REG LocatedID LBRACK RegPart . RBRACK OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On RBRACK shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## REG LocatedID LBRACK RegPart RBRACK
## LR(1) items:
RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK . OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On VOLATILE shift to state 220
-- On USES shift to state 223
-- On PORTS shift to state 304
-- On INITIALA shift to state 309
-- On ID shift to state 312
-- On ALIAS shift to state 384
-- On OptionalMemAttrDefList shift to state 397
-- On MemAttrDefList shift to state 398
-- On MemAttrDef shift to state 400
## Reductions:
-- On VAR reduce production OptionalMemAttrDefList ->
-- On TYPE reduce production OptionalMemAttrDefList ->
-- On RESOURCE reduce production OptionalMemAttrDefList ->
-- On REG reduce production OptionalMemAttrDefList ->
-- On OP reduce production OptionalMemAttrDefList ->
-- On MODE reduce production OptionalMemAttrDefList ->
-- On MEM reduce production OptionalMemAttrDefList ->
-- On LET reduce production OptionalMemAttrDefList ->
-- On EXTEND reduce production OptionalMemAttrDefList ->
-- On EXCEPTION reduce production OptionalMemAttrDefList ->
-- On EOF reduce production OptionalMemAttrDefList ->
-- On CANON reduce production OptionalMemAttrDefList ->

State 220:
## Known stack suffix:
## VOLATILE
## LR(1) items:
MemAttrDef -> VOLATILE . EQ LetExpr [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On EQ shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## VOLATILE EQ
## LR(1) items:
MemAttrDef -> VOLATILE EQ . LetExpr [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 222
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 222:
## Known stack suffix:
## VOLATILE EQ LetExpr
## LR(1) items:
MemAttrDef -> VOLATILE EQ LetExpr . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On VAR reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On USES reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On TYPE reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On RESOURCE reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On REG reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On PORTS reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On OP reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On MODE reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On MEM reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On LET reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On INITIALA reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On ID reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On EXTEND reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On EXCEPTION reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On EOF reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On CANON reduce production MemAttrDef -> VOLATILE EQ LetExpr
-- On ALIAS reduce production MemAttrDef -> VOLATILE EQ LetExpr

State 223:
## Known stack suffix:
## USES
## LR(1) items:
MemAttrDef -> USES . EQ UsesDef [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On EQ shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## USES EQ
## LR(1) items:
MemAttrDef -> USES EQ . UsesDef [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On LPAREN shift to state 225
-- On LBRACE shift to state 226
-- On IF shift to state 273
-- On ID shift to state 276
-- On UsesOrSequence shift to state 282
-- On UsesLocationList shift to state 279
-- On UsesLocation shift to state 271
-- On UsesIndirectAtom shift to state 284
-- On UsesIfAtom shift to state 288
-- On UsesDef shift to state 303
-- On UsesCondAtom shift to state 286
-- On UsesAndAtom shift to state 287
## Reductions:

State 225:
## Known stack suffix:
## LPAREN
## LR(1) items:
UsesIndirectAtom -> LPAREN . UsesDef RPAREN [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 225
-- On LBRACE shift to state 226
-- On IF shift to state 273
-- On ID shift to state 276
-- On UsesOrSequence shift to state 282
-- On UsesLocationList shift to state 279
-- On UsesLocation shift to state 271
-- On UsesIndirectAtom shift to state 284
-- On UsesIfAtom shift to state 288
-- On UsesDef shift to state 301
-- On UsesCondAtom shift to state 286
-- On UsesAndAtom shift to state 287
## Reductions:

State 226:
## Known stack suffix:
## LBRACE
## LR(1) items:
UsesCondAtom -> LBRACE . Expr RBRACE UsesAndAtom [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 227
-- On Constant shift to state 76
## Reductions:

State 227:
## Known stack suffix:
## LBRACE Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
UsesCondAtom -> LBRACE Expr . RBRACE UsesAndAtom [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On RBRACE shift to state 228
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 228:
## Known stack suffix:
## LBRACE Expr RBRACE
## LR(1) items:
UsesCondAtom -> LBRACE Expr RBRACE . UsesAndAtom [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On ID shift to state 229
-- On UsesLocationList shift to state 243
-- On UsesLocation shift to state 271
-- On UsesAndAtom shift to state 272
## Reductions:

State 229:
## Known stack suffix:
## ID
## LR(1) items:
UsesLocation -> ID . Opt_Bit_Optr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
UsesLocation -> ID . LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LBRACK shift to state 230
-- On BIT_LEFT shift to state 236
-- On Opt_Bit_Optr shift to state 242
## Reductions:
-- On VOLATILE reduce production Opt_Bit_Optr ->
-- On VAR reduce production Opt_Bit_Optr ->
-- On USES reduce production Opt_Bit_Optr ->
-- On TYPE reduce production Opt_Bit_Optr ->
-- On SYNTAX reduce production Opt_Bit_Optr ->
-- On SHARP reduce production Opt_Bit_Optr ->
-- On RPAREN reduce production Opt_Bit_Optr ->
-- On RESOURCE reduce production Opt_Bit_Optr ->
-- On REG reduce production Opt_Bit_Optr ->
-- On PORTS reduce production Opt_Bit_Optr ->
-- On PIPE reduce production Opt_Bit_Optr ->
-- On OP reduce production Opt_Bit_Optr ->
-- On MODE reduce production Opt_Bit_Optr ->
-- On MEM reduce production Opt_Bit_Optr ->
-- On LET reduce production Opt_Bit_Optr ->
-- On INITIALA reduce production Opt_Bit_Optr ->
-- On IMAGE reduce production Opt_Bit_Optr ->
-- On ID reduce production Opt_Bit_Optr ->
-- On EXTEND reduce production Opt_Bit_Optr ->
-- On EXCEPTION reduce production Opt_Bit_Optr ->
-- On EOF reduce production Opt_Bit_Optr ->
-- On ENDIF reduce production Opt_Bit_Optr ->
-- On ELSE reduce production Opt_Bit_Optr ->
-- On COMMA reduce production Opt_Bit_Optr ->
-- On COLON reduce production Opt_Bit_Optr ->
-- On CANON reduce production Opt_Bit_Optr ->
-- On AND reduce production Opt_Bit_Optr ->
-- On AMPERS reduce production Opt_Bit_Optr ->
-- On ALIAS reduce production Opt_Bit_Optr ->
-- On ACTION reduce production Opt_Bit_Optr ->

State 230:
## Known stack suffix:
## ID LBRACK
## LR(1) items:
UsesLocation -> ID LBRACK . Expr RBRACK Opt_SecDim Opt_Bit_Optr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 231
-- On Constant shift to state 76
## Reductions:

State 231:
## Known stack suffix:
## ID LBRACK Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
UsesLocation -> ID LBRACK Expr . RBRACK Opt_SecDim Opt_Bit_Optr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On RBRACK shift to state 232
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 232:
## Known stack suffix:
## ID LBRACK Expr RBRACK
## LR(1) items:
UsesLocation -> ID LBRACK Expr RBRACK . Opt_SecDim Opt_Bit_Optr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LBRACK shift to state 233
-- On Opt_SecDim shift to state 235
## Reductions:
-- On VOLATILE reduce production Opt_SecDim ->
-- On VAR reduce production Opt_SecDim ->
-- On USES reduce production Opt_SecDim ->
-- On TYPE reduce production Opt_SecDim ->
-- On SYNTAX reduce production Opt_SecDim ->
-- On SHARP reduce production Opt_SecDim ->
-- On RPAREN reduce production Opt_SecDim ->
-- On RESOURCE reduce production Opt_SecDim ->
-- On REG reduce production Opt_SecDim ->
-- On PORTS reduce production Opt_SecDim ->
-- On PIPE reduce production Opt_SecDim ->
-- On OP reduce production Opt_SecDim ->
-- On MODE reduce production Opt_SecDim ->
-- On MEM reduce production Opt_SecDim ->
-- On LET reduce production Opt_SecDim ->
-- On INITIALA reduce production Opt_SecDim ->
-- On IMAGE reduce production Opt_SecDim ->
-- On ID reduce production Opt_SecDim ->
-- On EXTEND reduce production Opt_SecDim ->
-- On EXCEPTION reduce production Opt_SecDim ->
-- On EOF reduce production Opt_SecDim ->
-- On ENDIF reduce production Opt_SecDim ->
-- On ELSE reduce production Opt_SecDim ->
-- On COMMA reduce production Opt_SecDim ->
-- On COLON reduce production Opt_SecDim ->
-- On CANON reduce production Opt_SecDim ->
-- On BIT_LEFT reduce production Opt_SecDim ->
-- On AND reduce production Opt_SecDim ->
-- On AMPERS reduce production Opt_SecDim ->
-- On ALIAS reduce production Opt_SecDim ->
-- On ACTION reduce production Opt_SecDim ->

State 233:
## Known stack suffix:
## LBRACK
## LR(1) items:
Opt_SecDim -> LBRACK . RBRACK [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
-- On RBRACK shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## LBRACK RBRACK
## LR(1) items:
Opt_SecDim -> LBRACK RBRACK . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON BIT_LEFT AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Opt_SecDim -> LBRACK RBRACK
-- On VAR reduce production Opt_SecDim -> LBRACK RBRACK
-- On USES reduce production Opt_SecDim -> LBRACK RBRACK
-- On TYPE reduce production Opt_SecDim -> LBRACK RBRACK
-- On SYNTAX reduce production Opt_SecDim -> LBRACK RBRACK
-- On SHARP reduce production Opt_SecDim -> LBRACK RBRACK
-- On RPAREN reduce production Opt_SecDim -> LBRACK RBRACK
-- On RESOURCE reduce production Opt_SecDim -> LBRACK RBRACK
-- On REG reduce production Opt_SecDim -> LBRACK RBRACK
-- On PORTS reduce production Opt_SecDim -> LBRACK RBRACK
-- On PIPE reduce production Opt_SecDim -> LBRACK RBRACK
-- On OP reduce production Opt_SecDim -> LBRACK RBRACK
-- On MODE reduce production Opt_SecDim -> LBRACK RBRACK
-- On MEM reduce production Opt_SecDim -> LBRACK RBRACK
-- On LET reduce production Opt_SecDim -> LBRACK RBRACK
-- On INITIALA reduce production Opt_SecDim -> LBRACK RBRACK
-- On IMAGE reduce production Opt_SecDim -> LBRACK RBRACK
-- On ID reduce production Opt_SecDim -> LBRACK RBRACK
-- On EXTEND reduce production Opt_SecDim -> LBRACK RBRACK
-- On EXCEPTION reduce production Opt_SecDim -> LBRACK RBRACK
-- On EOF reduce production Opt_SecDim -> LBRACK RBRACK
-- On ENDIF reduce production Opt_SecDim -> LBRACK RBRACK
-- On ELSE reduce production Opt_SecDim -> LBRACK RBRACK
-- On COMMA reduce production Opt_SecDim -> LBRACK RBRACK
-- On COLON reduce production Opt_SecDim -> LBRACK RBRACK
-- On CANON reduce production Opt_SecDim -> LBRACK RBRACK
-- On BIT_LEFT reduce production Opt_SecDim -> LBRACK RBRACK
-- On AND reduce production Opt_SecDim -> LBRACK RBRACK
-- On AMPERS reduce production Opt_SecDim -> LBRACK RBRACK
-- On ALIAS reduce production Opt_SecDim -> LBRACK RBRACK
-- On ACTION reduce production Opt_SecDim -> LBRACK RBRACK

State 235:
## Known stack suffix:
## ID LBRACK Expr RBRACK Opt_SecDim
## LR(1) items:
UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim . Opt_Bit_Optr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On BIT_LEFT shift to state 236
-- On Opt_Bit_Optr shift to state 241
## Reductions:
-- On VOLATILE reduce production Opt_Bit_Optr ->
-- On VAR reduce production Opt_Bit_Optr ->
-- On USES reduce production Opt_Bit_Optr ->
-- On TYPE reduce production Opt_Bit_Optr ->
-- On SYNTAX reduce production Opt_Bit_Optr ->
-- On SHARP reduce production Opt_Bit_Optr ->
-- On RPAREN reduce production Opt_Bit_Optr ->
-- On RESOURCE reduce production Opt_Bit_Optr ->
-- On REG reduce production Opt_Bit_Optr ->
-- On PORTS reduce production Opt_Bit_Optr ->
-- On PIPE reduce production Opt_Bit_Optr ->
-- On OP reduce production Opt_Bit_Optr ->
-- On MODE reduce production Opt_Bit_Optr ->
-- On MEM reduce production Opt_Bit_Optr ->
-- On LET reduce production Opt_Bit_Optr ->
-- On INITIALA reduce production Opt_Bit_Optr ->
-- On IMAGE reduce production Opt_Bit_Optr ->
-- On ID reduce production Opt_Bit_Optr ->
-- On EXTEND reduce production Opt_Bit_Optr ->
-- On EXCEPTION reduce production Opt_Bit_Optr ->
-- On EOF reduce production Opt_Bit_Optr ->
-- On ENDIF reduce production Opt_Bit_Optr ->
-- On ELSE reduce production Opt_Bit_Optr ->
-- On COMMA reduce production Opt_Bit_Optr ->
-- On COLON reduce production Opt_Bit_Optr ->
-- On CANON reduce production Opt_Bit_Optr ->
-- On AND reduce production Opt_Bit_Optr ->
-- On AMPERS reduce production Opt_Bit_Optr ->
-- On ALIAS reduce production Opt_Bit_Optr ->
-- On ACTION reduce production Opt_Bit_Optr ->

State 236:
## Known stack suffix:
## BIT_LEFT
## LR(1) items:
Opt_Bit_Optr -> BIT_LEFT . Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## BIT_LEFT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Opt_Bit_Optr -> BIT_LEFT Bit_Expr . DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On DOUBLE_STAR shift to state 52
-- On DOUBLE_DOT shift to state 238
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 238:
## Known stack suffix:
## BIT_LEFT Bit_Expr DOUBLE_DOT
## LR(1) items:
Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT . Bit_Expr GT [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr . GT [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On GT shift to state 240
-- On DOUBLE_STAR shift to state 52
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 240:
## Known stack suffix:
## BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
## LR(1) items:
Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On VAR reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On USES reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On TYPE reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On SYNTAX reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On SHARP reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On RPAREN reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On RESOURCE reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On REG reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On PORTS reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On PIPE reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On OP reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On MODE reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On MEM reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On LET reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On INITIALA reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On IMAGE reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ID reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EXTEND reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EXCEPTION reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EOF reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ENDIF reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ELSE reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On COMMA reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On COLON reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On CANON reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On AND reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On AMPERS reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ALIAS reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ACTION reduce production Opt_Bit_Optr -> BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT

State 241:
## Known stack suffix:
## ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
## LR(1) items:
UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On VAR reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On USES reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On TYPE reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On SYNTAX reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On SHARP reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On RPAREN reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On RESOURCE reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On REG reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On PORTS reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On PIPE reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On OP reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On MODE reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On MEM reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On LET reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On INITIALA reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On IMAGE reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On ID reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On EXTEND reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On EXCEPTION reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On EOF reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On ENDIF reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On ELSE reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On COMMA reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On COLON reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On CANON reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On AND reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On AMPERS reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On ALIAS reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr
-- On ACTION reduce production UsesLocation -> ID LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr

State 242:
## Known stack suffix:
## ID Opt_Bit_Optr
## LR(1) items:
UsesLocation -> ID Opt_Bit_Optr . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesLocation -> ID Opt_Bit_Optr
-- On VAR reduce production UsesLocation -> ID Opt_Bit_Optr
-- On USES reduce production UsesLocation -> ID Opt_Bit_Optr
-- On TYPE reduce production UsesLocation -> ID Opt_Bit_Optr
-- On SYNTAX reduce production UsesLocation -> ID Opt_Bit_Optr
-- On SHARP reduce production UsesLocation -> ID Opt_Bit_Optr
-- On RPAREN reduce production UsesLocation -> ID Opt_Bit_Optr
-- On RESOURCE reduce production UsesLocation -> ID Opt_Bit_Optr
-- On REG reduce production UsesLocation -> ID Opt_Bit_Optr
-- On PORTS reduce production UsesLocation -> ID Opt_Bit_Optr
-- On PIPE reduce production UsesLocation -> ID Opt_Bit_Optr
-- On OP reduce production UsesLocation -> ID Opt_Bit_Optr
-- On MODE reduce production UsesLocation -> ID Opt_Bit_Optr
-- On MEM reduce production UsesLocation -> ID Opt_Bit_Optr
-- On LET reduce production UsesLocation -> ID Opt_Bit_Optr
-- On INITIALA reduce production UsesLocation -> ID Opt_Bit_Optr
-- On IMAGE reduce production UsesLocation -> ID Opt_Bit_Optr
-- On ID reduce production UsesLocation -> ID Opt_Bit_Optr
-- On EXTEND reduce production UsesLocation -> ID Opt_Bit_Optr
-- On EXCEPTION reduce production UsesLocation -> ID Opt_Bit_Optr
-- On EOF reduce production UsesLocation -> ID Opt_Bit_Optr
-- On ENDIF reduce production UsesLocation -> ID Opt_Bit_Optr
-- On ELSE reduce production UsesLocation -> ID Opt_Bit_Optr
-- On COMMA reduce production UsesLocation -> ID Opt_Bit_Optr
-- On COLON reduce production UsesLocation -> ID Opt_Bit_Optr
-- On CANON reduce production UsesLocation -> ID Opt_Bit_Optr
-- On AND reduce production UsesLocation -> ID Opt_Bit_Optr
-- On AMPERS reduce production UsesLocation -> ID Opt_Bit_Optr
-- On ALIAS reduce production UsesLocation -> ID Opt_Bit_Optr
-- On ACTION reduce production UsesLocation -> ID Opt_Bit_Optr

State 243:
## Known stack suffix:
## UsesLocationList
## LR(1) items:
UsesAndAtom -> UsesLocationList . UsesActionList [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
UsesLocationList -> UsesLocationList . AMPERS UsesLocation [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AMPERS ALIAS ACTION ]
## Transitions:
-- On SHARP shift to state 244
-- On COLON shift to state 248
-- On AMPERS shift to state 252
-- On UsesActionList shift to state 254
-- On TimeActionList shift to state 255
-- On ActionTimeList shift to state 263
## Reductions:
-- On VOLATILE reduce production UsesActionList ->
-- On VAR reduce production UsesActionList ->
-- On USES reduce production UsesActionList ->
-- On TYPE reduce production UsesActionList ->
-- On SYNTAX reduce production UsesActionList ->
-- On RPAREN reduce production UsesActionList ->
-- On RESOURCE reduce production UsesActionList ->
-- On REG reduce production UsesActionList ->
-- On PORTS reduce production UsesActionList ->
-- On PIPE reduce production UsesActionList ->
-- On OP reduce production UsesActionList ->
-- On MODE reduce production UsesActionList ->
-- On MEM reduce production UsesActionList ->
-- On LET reduce production UsesActionList ->
-- On INITIALA reduce production UsesActionList ->
-- On IMAGE reduce production UsesActionList ->
-- On ID reduce production UsesActionList ->
-- On EXTEND reduce production UsesActionList ->
-- On EXCEPTION reduce production UsesActionList ->
-- On EOF reduce production UsesActionList ->
-- On ENDIF reduce production UsesActionList ->
-- On ELSE reduce production UsesActionList ->
-- On COMMA reduce production UsesActionList ->
-- On CANON reduce production UsesActionList ->
-- On ALIAS reduce production UsesActionList ->
-- On ACTION reduce production UsesActionList ->

State 244:
## Known stack suffix:
## SHARP
## LR(1) items:
ActionTimeList -> SHARP . LBRACE Expr RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
## Transitions:
-- On LBRACE shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## SHARP LBRACE
## LR(1) items:
ActionTimeList -> SHARP LBRACE . Expr RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 246
-- On Constant shift to state 76
## Reductions:

State 246:
## Known stack suffix:
## SHARP LBRACE Expr
## LR(1) items:
ActionTimeList -> SHARP LBRACE Expr . RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On RBRACE shift to state 247
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 247:
## Known stack suffix:
## SHARP LBRACE Expr RBRACE
## LR(1) items:
ActionTimeList -> SHARP LBRACE Expr RBRACE . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On VAR reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On USES reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On TYPE reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On SYNTAX reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On RPAREN reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On RESOURCE reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On REG reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On PORTS reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On PIPE reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On OP reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On MODE reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On MEM reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On LET reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On INITIALA reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On IMAGE reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On ID reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On EXTEND reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On EXCEPTION reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On EOF reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On ENDIF reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On ELSE reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On COMMA reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On COLON reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On CANON reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On ALIAS reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE
-- On ACTION reduce production ActionTimeList -> SHARP LBRACE Expr RBRACE

State 248:
## Known stack suffix:
## COLON
## LR(1) items:
TimeActionList -> COLON . UsesActionAttr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On ID shift to state 249
-- On ACTION shift to state 250
-- On UsesActionAttr shift to state 251
## Reductions:

State 249:
## Known stack suffix:
## ID
## LR(1) items:
UsesActionAttr -> ID . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesActionAttr -> ID
-- On VAR reduce production UsesActionAttr -> ID
-- On USES reduce production UsesActionAttr -> ID
-- On TYPE reduce production UsesActionAttr -> ID
-- On SYNTAX reduce production UsesActionAttr -> ID
-- On SHARP reduce production UsesActionAttr -> ID
-- On RPAREN reduce production UsesActionAttr -> ID
-- On RESOURCE reduce production UsesActionAttr -> ID
-- On REG reduce production UsesActionAttr -> ID
-- On PORTS reduce production UsesActionAttr -> ID
-- On PIPE reduce production UsesActionAttr -> ID
-- On OP reduce production UsesActionAttr -> ID
-- On MODE reduce production UsesActionAttr -> ID
-- On MEM reduce production UsesActionAttr -> ID
-- On LET reduce production UsesActionAttr -> ID
-- On INITIALA reduce production UsesActionAttr -> ID
-- On IMAGE reduce production UsesActionAttr -> ID
-- On ID reduce production UsesActionAttr -> ID
-- On EXTEND reduce production UsesActionAttr -> ID
-- On EXCEPTION reduce production UsesActionAttr -> ID
-- On EOF reduce production UsesActionAttr -> ID
-- On ENDIF reduce production UsesActionAttr -> ID
-- On ELSE reduce production UsesActionAttr -> ID
-- On COMMA reduce production UsesActionAttr -> ID
-- On CANON reduce production UsesActionAttr -> ID
-- On ALIAS reduce production UsesActionAttr -> ID
-- On ACTION reduce production UsesActionAttr -> ID

State 250:
## Known stack suffix:
## ACTION
## LR(1) items:
UsesActionAttr -> ACTION . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesActionAttr -> ACTION
-- On VAR reduce production UsesActionAttr -> ACTION
-- On USES reduce production UsesActionAttr -> ACTION
-- On TYPE reduce production UsesActionAttr -> ACTION
-- On SYNTAX reduce production UsesActionAttr -> ACTION
-- On SHARP reduce production UsesActionAttr -> ACTION
-- On RPAREN reduce production UsesActionAttr -> ACTION
-- On RESOURCE reduce production UsesActionAttr -> ACTION
-- On REG reduce production UsesActionAttr -> ACTION
-- On PORTS reduce production UsesActionAttr -> ACTION
-- On PIPE reduce production UsesActionAttr -> ACTION
-- On OP reduce production UsesActionAttr -> ACTION
-- On MODE reduce production UsesActionAttr -> ACTION
-- On MEM reduce production UsesActionAttr -> ACTION
-- On LET reduce production UsesActionAttr -> ACTION
-- On INITIALA reduce production UsesActionAttr -> ACTION
-- On IMAGE reduce production UsesActionAttr -> ACTION
-- On ID reduce production UsesActionAttr -> ACTION
-- On EXTEND reduce production UsesActionAttr -> ACTION
-- On EXCEPTION reduce production UsesActionAttr -> ACTION
-- On EOF reduce production UsesActionAttr -> ACTION
-- On ENDIF reduce production UsesActionAttr -> ACTION
-- On ELSE reduce production UsesActionAttr -> ACTION
-- On COMMA reduce production UsesActionAttr -> ACTION
-- On CANON reduce production UsesActionAttr -> ACTION
-- On ALIAS reduce production UsesActionAttr -> ACTION
-- On ACTION reduce production UsesActionAttr -> ACTION

State 251:
## Known stack suffix:
## COLON UsesActionAttr
## LR(1) items:
TimeActionList -> COLON UsesActionAttr . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production TimeActionList -> COLON UsesActionAttr
-- On VAR reduce production TimeActionList -> COLON UsesActionAttr
-- On USES reduce production TimeActionList -> COLON UsesActionAttr
-- On TYPE reduce production TimeActionList -> COLON UsesActionAttr
-- On SYNTAX reduce production TimeActionList -> COLON UsesActionAttr
-- On SHARP reduce production TimeActionList -> COLON UsesActionAttr
-- On RPAREN reduce production TimeActionList -> COLON UsesActionAttr
-- On RESOURCE reduce production TimeActionList -> COLON UsesActionAttr
-- On REG reduce production TimeActionList -> COLON UsesActionAttr
-- On PORTS reduce production TimeActionList -> COLON UsesActionAttr
-- On PIPE reduce production TimeActionList -> COLON UsesActionAttr
-- On OP reduce production TimeActionList -> COLON UsesActionAttr
-- On MODE reduce production TimeActionList -> COLON UsesActionAttr
-- On MEM reduce production TimeActionList -> COLON UsesActionAttr
-- On LET reduce production TimeActionList -> COLON UsesActionAttr
-- On INITIALA reduce production TimeActionList -> COLON UsesActionAttr
-- On IMAGE reduce production TimeActionList -> COLON UsesActionAttr
-- On ID reduce production TimeActionList -> COLON UsesActionAttr
-- On EXTEND reduce production TimeActionList -> COLON UsesActionAttr
-- On EXCEPTION reduce production TimeActionList -> COLON UsesActionAttr
-- On EOF reduce production TimeActionList -> COLON UsesActionAttr
-- On ENDIF reduce production TimeActionList -> COLON UsesActionAttr
-- On ELSE reduce production TimeActionList -> COLON UsesActionAttr
-- On COMMA reduce production TimeActionList -> COLON UsesActionAttr
-- On CANON reduce production TimeActionList -> COLON UsesActionAttr
-- On ALIAS reduce production TimeActionList -> COLON UsesActionAttr
-- On ACTION reduce production TimeActionList -> COLON UsesActionAttr

State 252:
## Known stack suffix:
## UsesLocationList AMPERS
## LR(1) items:
UsesLocationList -> UsesLocationList AMPERS . UsesLocation [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On ID shift to state 229
-- On UsesLocation shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## UsesLocationList AMPERS UsesLocation
## LR(1) items:
UsesLocationList -> UsesLocationList AMPERS UsesLocation . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On VAR reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On USES reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On TYPE reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On SYNTAX reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On SHARP reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On RPAREN reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On RESOURCE reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On REG reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On PORTS reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On PIPE reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On OP reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On MODE reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On MEM reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On LET reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On INITIALA reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On IMAGE reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On ID reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On EXTEND reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On EXCEPTION reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On EOF reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On ENDIF reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On ELSE reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On COMMA reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On COLON reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On CANON reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On AND reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On AMPERS reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On ALIAS reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation
-- On ACTION reduce production UsesLocationList -> UsesLocationList AMPERS UsesLocation

State 254:
## Known stack suffix:
## UsesLocationList UsesActionList
## LR(1) items:
UsesAndAtom -> UsesLocationList UsesActionList . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On VAR reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On USES reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On TYPE reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On SYNTAX reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On RPAREN reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On RESOURCE reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On REG reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On PORTS reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On PIPE reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On OP reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On MODE reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On MEM reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On LET reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On INITIALA reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On IMAGE reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On ID reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On EXTEND reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On EXCEPTION reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On EOF reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On ENDIF reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On ELSE reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On COMMA reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On CANON reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On ALIAS reduce production UsesAndAtom -> UsesLocationList UsesActionList
-- On ACTION reduce production UsesAndAtom -> UsesLocationList UsesActionList

State 255:
## Known stack suffix:
## TimeActionList
## LR(1) items:
TimeActionList -> TimeActionList . SHARP LBRACE Expr RBRACE COLON UsesActionAttr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
UsesActionList -> TimeActionList . OptionalTime [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On SHARP shift to state 256
-- On OptionalTime shift to state 262
## Reductions:
-- On VOLATILE reduce production OptionalTime ->
-- On VAR reduce production OptionalTime ->
-- On USES reduce production OptionalTime ->
-- On TYPE reduce production OptionalTime ->
-- On SYNTAX reduce production OptionalTime ->
-- On RPAREN reduce production OptionalTime ->
-- On RESOURCE reduce production OptionalTime ->
-- On REG reduce production OptionalTime ->
-- On PORTS reduce production OptionalTime ->
-- On PIPE reduce production OptionalTime ->
-- On OP reduce production OptionalTime ->
-- On MODE reduce production OptionalTime ->
-- On MEM reduce production OptionalTime ->
-- On LET reduce production OptionalTime ->
-- On INITIALA reduce production OptionalTime ->
-- On IMAGE reduce production OptionalTime ->
-- On ID reduce production OptionalTime ->
-- On EXTEND reduce production OptionalTime ->
-- On EXCEPTION reduce production OptionalTime ->
-- On EOF reduce production OptionalTime ->
-- On ENDIF reduce production OptionalTime ->
-- On ELSE reduce production OptionalTime ->
-- On COMMA reduce production OptionalTime ->
-- On CANON reduce production OptionalTime ->
-- On ALIAS reduce production OptionalTime ->
-- On ACTION reduce production OptionalTime ->

State 256:
## Known stack suffix:
## TimeActionList SHARP
## LR(1) items:
OptionalTime -> SHARP . LBRACE Expr RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
TimeActionList -> TimeActionList SHARP . LBRACE Expr RBRACE COLON UsesActionAttr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On LBRACE shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## TimeActionList SHARP LBRACE
## LR(1) items:
OptionalTime -> SHARP LBRACE . Expr RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
TimeActionList -> TimeActionList SHARP LBRACE . Expr RBRACE COLON UsesActionAttr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 258
-- On Constant shift to state 76
## Reductions:

State 258:
## Known stack suffix:
## TimeActionList SHARP LBRACE Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
OptionalTime -> SHARP LBRACE Expr . RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
TimeActionList -> TimeActionList SHARP LBRACE Expr . RBRACE COLON UsesActionAttr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On RBRACE shift to state 259
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 259:
## Known stack suffix:
## TimeActionList SHARP LBRACE Expr RBRACE
## LR(1) items:
OptionalTime -> SHARP LBRACE Expr RBRACE . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE . COLON UsesActionAttr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On COLON shift to state 260
## Reductions:
-- On VOLATILE reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On VAR reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On USES reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On TYPE reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On SYNTAX reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On RPAREN reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On RESOURCE reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On REG reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On PORTS reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On PIPE reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On OP reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On MODE reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On MEM reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On LET reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On INITIALA reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On IMAGE reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On ID reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On EXTEND reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On EXCEPTION reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On EOF reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On ENDIF reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On ELSE reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On COMMA reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On CANON reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On ALIAS reduce production OptionalTime -> SHARP LBRACE Expr RBRACE
-- On ACTION reduce production OptionalTime -> SHARP LBRACE Expr RBRACE

State 260:
## Known stack suffix:
## TimeActionList SHARP LBRACE Expr RBRACE COLON
## LR(1) items:
TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON . UsesActionAttr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On ID shift to state 249
-- On ACTION shift to state 250
-- On UsesActionAttr shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
## LR(1) items:
TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On VAR reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On USES reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On TYPE reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On SYNTAX reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On SHARP reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On RPAREN reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On RESOURCE reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On REG reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On PORTS reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On PIPE reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On OP reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On MODE reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On MEM reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On LET reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On INITIALA reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On IMAGE reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On ID reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On EXTEND reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On EXCEPTION reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On EOF reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On ENDIF reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On ELSE reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On COMMA reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On CANON reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On ALIAS reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr
-- On ACTION reduce production TimeActionList -> TimeActionList SHARP LBRACE Expr RBRACE COLON UsesActionAttr

State 262:
## Known stack suffix:
## TimeActionList OptionalTime
## LR(1) items:
UsesActionList -> TimeActionList OptionalTime . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesActionList -> TimeActionList OptionalTime
-- On VAR reduce production UsesActionList -> TimeActionList OptionalTime
-- On USES reduce production UsesActionList -> TimeActionList OptionalTime
-- On TYPE reduce production UsesActionList -> TimeActionList OptionalTime
-- On SYNTAX reduce production UsesActionList -> TimeActionList OptionalTime
-- On RPAREN reduce production UsesActionList -> TimeActionList OptionalTime
-- On RESOURCE reduce production UsesActionList -> TimeActionList OptionalTime
-- On REG reduce production UsesActionList -> TimeActionList OptionalTime
-- On PORTS reduce production UsesActionList -> TimeActionList OptionalTime
-- On PIPE reduce production UsesActionList -> TimeActionList OptionalTime
-- On OP reduce production UsesActionList -> TimeActionList OptionalTime
-- On MODE reduce production UsesActionList -> TimeActionList OptionalTime
-- On MEM reduce production UsesActionList -> TimeActionList OptionalTime
-- On LET reduce production UsesActionList -> TimeActionList OptionalTime
-- On INITIALA reduce production UsesActionList -> TimeActionList OptionalTime
-- On IMAGE reduce production UsesActionList -> TimeActionList OptionalTime
-- On ID reduce production UsesActionList -> TimeActionList OptionalTime
-- On EXTEND reduce production UsesActionList -> TimeActionList OptionalTime
-- On EXCEPTION reduce production UsesActionList -> TimeActionList OptionalTime
-- On EOF reduce production UsesActionList -> TimeActionList OptionalTime
-- On ENDIF reduce production UsesActionList -> TimeActionList OptionalTime
-- On ELSE reduce production UsesActionList -> TimeActionList OptionalTime
-- On COMMA reduce production UsesActionList -> TimeActionList OptionalTime
-- On CANON reduce production UsesActionList -> TimeActionList OptionalTime
-- On ALIAS reduce production UsesActionList -> TimeActionList OptionalTime
-- On ACTION reduce production UsesActionList -> TimeActionList OptionalTime

State 263:
## Known stack suffix:
## ActionTimeList
## LR(1) items:
ActionTimeList -> ActionTimeList . COLON UsesActionAttr SHARP LBRACE Expr RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
UsesActionList -> ActionTimeList . OptionalAction [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On COLON shift to state 264
-- On OptionalAction shift to state 270
## Reductions:
-- On VOLATILE reduce production OptionalAction ->
-- On VAR reduce production OptionalAction ->
-- On USES reduce production OptionalAction ->
-- On TYPE reduce production OptionalAction ->
-- On SYNTAX reduce production OptionalAction ->
-- On RPAREN reduce production OptionalAction ->
-- On RESOURCE reduce production OptionalAction ->
-- On REG reduce production OptionalAction ->
-- On PORTS reduce production OptionalAction ->
-- On PIPE reduce production OptionalAction ->
-- On OP reduce production OptionalAction ->
-- On MODE reduce production OptionalAction ->
-- On MEM reduce production OptionalAction ->
-- On LET reduce production OptionalAction ->
-- On INITIALA reduce production OptionalAction ->
-- On IMAGE reduce production OptionalAction ->
-- On ID reduce production OptionalAction ->
-- On EXTEND reduce production OptionalAction ->
-- On EXCEPTION reduce production OptionalAction ->
-- On EOF reduce production OptionalAction ->
-- On ENDIF reduce production OptionalAction ->
-- On ELSE reduce production OptionalAction ->
-- On COMMA reduce production OptionalAction ->
-- On CANON reduce production OptionalAction ->
-- On ALIAS reduce production OptionalAction ->
-- On ACTION reduce production OptionalAction ->

State 264:
## Known stack suffix:
## ActionTimeList COLON
## LR(1) items:
ActionTimeList -> ActionTimeList COLON . UsesActionAttr SHARP LBRACE Expr RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
OptionalAction -> COLON . UsesActionAttr [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On ID shift to state 249
-- On ACTION shift to state 250
-- On UsesActionAttr shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## ActionTimeList COLON UsesActionAttr
## LR(1) items:
ActionTimeList -> ActionTimeList COLON UsesActionAttr . SHARP LBRACE Expr RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
OptionalAction -> COLON UsesActionAttr . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On SHARP shift to state 266
## Reductions:
-- On VOLATILE reduce production OptionalAction -> COLON UsesActionAttr
-- On VAR reduce production OptionalAction -> COLON UsesActionAttr
-- On USES reduce production OptionalAction -> COLON UsesActionAttr
-- On TYPE reduce production OptionalAction -> COLON UsesActionAttr
-- On SYNTAX reduce production OptionalAction -> COLON UsesActionAttr
-- On RPAREN reduce production OptionalAction -> COLON UsesActionAttr
-- On RESOURCE reduce production OptionalAction -> COLON UsesActionAttr
-- On REG reduce production OptionalAction -> COLON UsesActionAttr
-- On PORTS reduce production OptionalAction -> COLON UsesActionAttr
-- On PIPE reduce production OptionalAction -> COLON UsesActionAttr
-- On OP reduce production OptionalAction -> COLON UsesActionAttr
-- On MODE reduce production OptionalAction -> COLON UsesActionAttr
-- On MEM reduce production OptionalAction -> COLON UsesActionAttr
-- On LET reduce production OptionalAction -> COLON UsesActionAttr
-- On INITIALA reduce production OptionalAction -> COLON UsesActionAttr
-- On IMAGE reduce production OptionalAction -> COLON UsesActionAttr
-- On ID reduce production OptionalAction -> COLON UsesActionAttr
-- On EXTEND reduce production OptionalAction -> COLON UsesActionAttr
-- On EXCEPTION reduce production OptionalAction -> COLON UsesActionAttr
-- On EOF reduce production OptionalAction -> COLON UsesActionAttr
-- On ENDIF reduce production OptionalAction -> COLON UsesActionAttr
-- On ELSE reduce production OptionalAction -> COLON UsesActionAttr
-- On COMMA reduce production OptionalAction -> COLON UsesActionAttr
-- On CANON reduce production OptionalAction -> COLON UsesActionAttr
-- On ALIAS reduce production OptionalAction -> COLON UsesActionAttr
-- On ACTION reduce production OptionalAction -> COLON UsesActionAttr

State 266:
## Known stack suffix:
## ActionTimeList COLON UsesActionAttr SHARP
## LR(1) items:
ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP . LBRACE Expr RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
## Transitions:
-- On LBRACE shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## ActionTimeList COLON UsesActionAttr SHARP LBRACE
## LR(1) items:
ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE . Expr RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 268
-- On Constant shift to state 76
## Reductions:

State 268:
## Known stack suffix:
## ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr
## LR(1) items:
ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr . RBRACE [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACE PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On RBRACE shift to state 269
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 269:
## Known stack suffix:
## ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
## LR(1) items:
ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On VAR reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On USES reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On TYPE reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On SYNTAX reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On RPAREN reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On RESOURCE reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On REG reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On PORTS reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On PIPE reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On OP reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On MODE reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On MEM reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On LET reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On INITIALA reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On IMAGE reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On ID reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On EXTEND reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On EXCEPTION reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On EOF reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On ENDIF reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On ELSE reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On COMMA reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On COLON reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On CANON reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On ALIAS reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE
-- On ACTION reduce production ActionTimeList -> ActionTimeList COLON UsesActionAttr SHARP LBRACE Expr RBRACE

State 270:
## Known stack suffix:
## ActionTimeList OptionalAction
## LR(1) items:
UsesActionList -> ActionTimeList OptionalAction . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesActionList -> ActionTimeList OptionalAction
-- On VAR reduce production UsesActionList -> ActionTimeList OptionalAction
-- On USES reduce production UsesActionList -> ActionTimeList OptionalAction
-- On TYPE reduce production UsesActionList -> ActionTimeList OptionalAction
-- On SYNTAX reduce production UsesActionList -> ActionTimeList OptionalAction
-- On RPAREN reduce production UsesActionList -> ActionTimeList OptionalAction
-- On RESOURCE reduce production UsesActionList -> ActionTimeList OptionalAction
-- On REG reduce production UsesActionList -> ActionTimeList OptionalAction
-- On PORTS reduce production UsesActionList -> ActionTimeList OptionalAction
-- On PIPE reduce production UsesActionList -> ActionTimeList OptionalAction
-- On OP reduce production UsesActionList -> ActionTimeList OptionalAction
-- On MODE reduce production UsesActionList -> ActionTimeList OptionalAction
-- On MEM reduce production UsesActionList -> ActionTimeList OptionalAction
-- On LET reduce production UsesActionList -> ActionTimeList OptionalAction
-- On INITIALA reduce production UsesActionList -> ActionTimeList OptionalAction
-- On IMAGE reduce production UsesActionList -> ActionTimeList OptionalAction
-- On ID reduce production UsesActionList -> ActionTimeList OptionalAction
-- On EXTEND reduce production UsesActionList -> ActionTimeList OptionalAction
-- On EXCEPTION reduce production UsesActionList -> ActionTimeList OptionalAction
-- On EOF reduce production UsesActionList -> ActionTimeList OptionalAction
-- On ENDIF reduce production UsesActionList -> ActionTimeList OptionalAction
-- On ELSE reduce production UsesActionList -> ActionTimeList OptionalAction
-- On COMMA reduce production UsesActionList -> ActionTimeList OptionalAction
-- On CANON reduce production UsesActionList -> ActionTimeList OptionalAction
-- On ALIAS reduce production UsesActionList -> ActionTimeList OptionalAction
-- On ACTION reduce production UsesActionList -> ActionTimeList OptionalAction

State 271:
## Known stack suffix:
## UsesLocation
## LR(1) items:
UsesLocationList -> UsesLocation . [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesLocationList -> UsesLocation
-- On VAR reduce production UsesLocationList -> UsesLocation
-- On USES reduce production UsesLocationList -> UsesLocation
-- On TYPE reduce production UsesLocationList -> UsesLocation
-- On SYNTAX reduce production UsesLocationList -> UsesLocation
-- On SHARP reduce production UsesLocationList -> UsesLocation
-- On RPAREN reduce production UsesLocationList -> UsesLocation
-- On RESOURCE reduce production UsesLocationList -> UsesLocation
-- On REG reduce production UsesLocationList -> UsesLocation
-- On PORTS reduce production UsesLocationList -> UsesLocation
-- On PIPE reduce production UsesLocationList -> UsesLocation
-- On OP reduce production UsesLocationList -> UsesLocation
-- On MODE reduce production UsesLocationList -> UsesLocation
-- On MEM reduce production UsesLocationList -> UsesLocation
-- On LET reduce production UsesLocationList -> UsesLocation
-- On INITIALA reduce production UsesLocationList -> UsesLocation
-- On IMAGE reduce production UsesLocationList -> UsesLocation
-- On ID reduce production UsesLocationList -> UsesLocation
-- On EXTEND reduce production UsesLocationList -> UsesLocation
-- On EXCEPTION reduce production UsesLocationList -> UsesLocation
-- On EOF reduce production UsesLocationList -> UsesLocation
-- On ENDIF reduce production UsesLocationList -> UsesLocation
-- On ELSE reduce production UsesLocationList -> UsesLocation
-- On COMMA reduce production UsesLocationList -> UsesLocation
-- On COLON reduce production UsesLocationList -> UsesLocation
-- On CANON reduce production UsesLocationList -> UsesLocation
-- On AND reduce production UsesLocationList -> UsesLocation
-- On AMPERS reduce production UsesLocationList -> UsesLocation
-- On ALIAS reduce production UsesLocationList -> UsesLocation
-- On ACTION reduce production UsesLocationList -> UsesLocation

State 272:
## Known stack suffix:
## LBRACE Expr RBRACE UsesAndAtom
## LR(1) items:
UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On VAR reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On USES reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On TYPE reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On SYNTAX reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On RPAREN reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On RESOURCE reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On REG reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On PORTS reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On PIPE reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On OP reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On MODE reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On MEM reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On LET reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On INITIALA reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On IMAGE reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On ID reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On EXTEND reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On EXCEPTION reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On EOF reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On ENDIF reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On ELSE reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On COMMA reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On CANON reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On ALIAS reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom
-- On ACTION reduce production UsesCondAtom -> LBRACE Expr RBRACE UsesAndAtom

State 273:
## Known stack suffix:
## IF
## LR(1) items:
UsesIfAtom -> IF . Expr THEN UsesIfAtom OptionalElseAtom ENDIF [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 274
-- On Constant shift to state 76
## Reductions:

State 274:
## Known stack suffix:
## IF Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
UsesIfAtom -> IF Expr . THEN UsesIfAtom OptionalElseAtom ENDIF [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On THEN shift to state 275
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 275:
## Known stack suffix:
## IF Expr THEN
## LR(1) items:
UsesIfAtom -> IF Expr THEN . UsesIfAtom OptionalElseAtom ENDIF [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 225
-- On LBRACE shift to state 226
-- On IF shift to state 273
-- On ID shift to state 276
-- On UsesLocationList shift to state 279
-- On UsesLocation shift to state 271
-- On UsesIndirectAtom shift to state 284
-- On UsesIfAtom shift to state 296
-- On UsesCondAtom shift to state 286
-- On UsesAndAtom shift to state 287
## Reductions:

State 276:
## Known stack suffix:
## ID
## LR(1) items:
UsesIndirectAtom -> ID . DOT USES [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
UsesLocation -> ID . Opt_Bit_Optr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
UsesLocation -> ID . LBRACK Expr RBRACK Opt_SecDim Opt_Bit_Optr [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On LBRACK shift to state 230
-- On DOT shift to state 277
-- On BIT_LEFT shift to state 236
-- On Opt_Bit_Optr shift to state 242
## Reductions:
-- On VOLATILE reduce production Opt_Bit_Optr ->
-- On VAR reduce production Opt_Bit_Optr ->
-- On USES reduce production Opt_Bit_Optr ->
-- On TYPE reduce production Opt_Bit_Optr ->
-- On SYNTAX reduce production Opt_Bit_Optr ->
-- On SHARP reduce production Opt_Bit_Optr ->
-- On RPAREN reduce production Opt_Bit_Optr ->
-- On RESOURCE reduce production Opt_Bit_Optr ->
-- On REG reduce production Opt_Bit_Optr ->
-- On PORTS reduce production Opt_Bit_Optr ->
-- On PIPE reduce production Opt_Bit_Optr ->
-- On OP reduce production Opt_Bit_Optr ->
-- On MODE reduce production Opt_Bit_Optr ->
-- On MEM reduce production Opt_Bit_Optr ->
-- On LET reduce production Opt_Bit_Optr ->
-- On INITIALA reduce production Opt_Bit_Optr ->
-- On IMAGE reduce production Opt_Bit_Optr ->
-- On ID reduce production Opt_Bit_Optr ->
-- On EXTEND reduce production Opt_Bit_Optr ->
-- On EXCEPTION reduce production Opt_Bit_Optr ->
-- On EOF reduce production Opt_Bit_Optr ->
-- On ENDIF reduce production Opt_Bit_Optr ->
-- On ELSE reduce production Opt_Bit_Optr ->
-- On COMMA reduce production Opt_Bit_Optr ->
-- On COLON reduce production Opt_Bit_Optr ->
-- On CANON reduce production Opt_Bit_Optr ->
-- On AND reduce production Opt_Bit_Optr ->
-- On AMPERS reduce production Opt_Bit_Optr ->
-- On ALIAS reduce production Opt_Bit_Optr ->
-- On ACTION reduce production Opt_Bit_Optr ->

State 277:
## Known stack suffix:
## ID DOT
## LR(1) items:
UsesIndirectAtom -> ID DOT . USES [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On USES shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## ID DOT USES
## LR(1) items:
UsesIndirectAtom -> ID DOT USES . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesIndirectAtom -> ID DOT USES
-- On VAR reduce production UsesIndirectAtom -> ID DOT USES
-- On USES reduce production UsesIndirectAtom -> ID DOT USES
-- On TYPE reduce production UsesIndirectAtom -> ID DOT USES
-- On SYNTAX reduce production UsesIndirectAtom -> ID DOT USES
-- On RPAREN reduce production UsesIndirectAtom -> ID DOT USES
-- On RESOURCE reduce production UsesIndirectAtom -> ID DOT USES
-- On REG reduce production UsesIndirectAtom -> ID DOT USES
-- On PORTS reduce production UsesIndirectAtom -> ID DOT USES
-- On PIPE reduce production UsesIndirectAtom -> ID DOT USES
-- On OP reduce production UsesIndirectAtom -> ID DOT USES
-- On MODE reduce production UsesIndirectAtom -> ID DOT USES
-- On MEM reduce production UsesIndirectAtom -> ID DOT USES
-- On LET reduce production UsesIndirectAtom -> ID DOT USES
-- On INITIALA reduce production UsesIndirectAtom -> ID DOT USES
-- On IMAGE reduce production UsesIndirectAtom -> ID DOT USES
-- On ID reduce production UsesIndirectAtom -> ID DOT USES
-- On EXTEND reduce production UsesIndirectAtom -> ID DOT USES
-- On EXCEPTION reduce production UsesIndirectAtom -> ID DOT USES
-- On EOF reduce production UsesIndirectAtom -> ID DOT USES
-- On ENDIF reduce production UsesIndirectAtom -> ID DOT USES
-- On ELSE reduce production UsesIndirectAtom -> ID DOT USES
-- On COMMA reduce production UsesIndirectAtom -> ID DOT USES
-- On CANON reduce production UsesIndirectAtom -> ID DOT USES
-- On ALIAS reduce production UsesIndirectAtom -> ID DOT USES
-- On ACTION reduce production UsesIndirectAtom -> ID DOT USES

State 279:
## Known stack suffix:
## UsesLocationList
## LR(1) items:
UsesAndAtom -> UsesLocationList . UsesActionList [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
UsesIndirectAtom -> UsesLocationList . AND ID DOT USES [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
UsesIndirectAtom -> UsesLocationList . AND LPAREN UsesDef RPAREN [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
UsesLocationList -> UsesLocationList . AMPERS UsesLocation [ VOLATILE VAR USES TYPE SYNTAX SHARP RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA COLON CANON AND AMPERS ALIAS ACTION ]
## Transitions:
-- On SHARP shift to state 244
-- On COLON shift to state 248
-- On AND shift to state 280
-- On AMPERS shift to state 252
-- On UsesActionList shift to state 254
-- On TimeActionList shift to state 255
-- On ActionTimeList shift to state 263
## Reductions:
-- On VOLATILE reduce production UsesActionList ->
-- On VAR reduce production UsesActionList ->
-- On USES reduce production UsesActionList ->
-- On TYPE reduce production UsesActionList ->
-- On SYNTAX reduce production UsesActionList ->
-- On RPAREN reduce production UsesActionList ->
-- On RESOURCE reduce production UsesActionList ->
-- On REG reduce production UsesActionList ->
-- On PORTS reduce production UsesActionList ->
-- On PIPE reduce production UsesActionList ->
-- On OP reduce production UsesActionList ->
-- On MODE reduce production UsesActionList ->
-- On MEM reduce production UsesActionList ->
-- On LET reduce production UsesActionList ->
-- On INITIALA reduce production UsesActionList ->
-- On IMAGE reduce production UsesActionList ->
-- On ID reduce production UsesActionList ->
-- On EXTEND reduce production UsesActionList ->
-- On EXCEPTION reduce production UsesActionList ->
-- On EOF reduce production UsesActionList ->
-- On ENDIF reduce production UsesActionList ->
-- On ELSE reduce production UsesActionList ->
-- On COMMA reduce production UsesActionList ->
-- On CANON reduce production UsesActionList ->
-- On ALIAS reduce production UsesActionList ->
-- On ACTION reduce production UsesActionList ->

State 280:
## Known stack suffix:
## UsesLocationList AND
## LR(1) items:
UsesIndirectAtom -> UsesLocationList AND . ID DOT USES [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
UsesIndirectAtom -> UsesLocationList AND . LPAREN UsesDef RPAREN [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 281
-- On ID shift to state 293
## Reductions:

State 281:
## Known stack suffix:
## UsesLocationList AND LPAREN
## LR(1) items:
UsesIndirectAtom -> UsesLocationList AND LPAREN . UsesDef RPAREN [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 225
-- On LBRACE shift to state 226
-- On IF shift to state 273
-- On ID shift to state 276
-- On UsesOrSequence shift to state 282
-- On UsesLocationList shift to state 279
-- On UsesLocation shift to state 271
-- On UsesIndirectAtom shift to state 284
-- On UsesIfAtom shift to state 288
-- On UsesDef shift to state 289
-- On UsesCondAtom shift to state 286
-- On UsesAndAtom shift to state 287
## Reductions:

State 282:
## Known stack suffix:
## UsesOrSequence
## LR(1) items:
UsesDef -> UsesOrSequence . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION ]
UsesOrSequence -> UsesOrSequence . PIPE UsesIfAtom [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION ]
## Transitions:
-- On PIPE shift to state 283
## Reductions:
-- On VOLATILE reduce production UsesDef -> UsesOrSequence
-- On VAR reduce production UsesDef -> UsesOrSequence
-- On USES reduce production UsesDef -> UsesOrSequence
-- On TYPE reduce production UsesDef -> UsesOrSequence
-- On SYNTAX reduce production UsesDef -> UsesOrSequence
-- On RPAREN reduce production UsesDef -> UsesOrSequence
-- On RESOURCE reduce production UsesDef -> UsesOrSequence
-- On REG reduce production UsesDef -> UsesOrSequence
-- On PORTS reduce production UsesDef -> UsesOrSequence
-- On OP reduce production UsesDef -> UsesOrSequence
-- On MODE reduce production UsesDef -> UsesOrSequence
-- On MEM reduce production UsesDef -> UsesOrSequence
-- On LET reduce production UsesDef -> UsesOrSequence
-- On INITIALA reduce production UsesDef -> UsesOrSequence
-- On IMAGE reduce production UsesDef -> UsesOrSequence
-- On ID reduce production UsesDef -> UsesOrSequence
-- On EXTEND reduce production UsesDef -> UsesOrSequence
-- On EXCEPTION reduce production UsesDef -> UsesOrSequence
-- On EOF reduce production UsesDef -> UsesOrSequence
-- On COMMA reduce production UsesDef -> UsesOrSequence
-- On CANON reduce production UsesDef -> UsesOrSequence
-- On ALIAS reduce production UsesDef -> UsesOrSequence
-- On ACTION reduce production UsesDef -> UsesOrSequence

State 283:
## Known stack suffix:
## UsesOrSequence PIPE
## LR(1) items:
UsesOrSequence -> UsesOrSequence PIPE . UsesIfAtom [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 225
-- On LBRACE shift to state 226
-- On IF shift to state 273
-- On ID shift to state 276
-- On UsesLocationList shift to state 279
-- On UsesLocation shift to state 271
-- On UsesIndirectAtom shift to state 284
-- On UsesIfAtom shift to state 285
-- On UsesCondAtom shift to state 286
-- On UsesAndAtom shift to state 287
## Reductions:

State 284:
## Known stack suffix:
## UsesIndirectAtom
## LR(1) items:
UsesIfAtom -> UsesIndirectAtom . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesIfAtom -> UsesIndirectAtom
-- On VAR reduce production UsesIfAtom -> UsesIndirectAtom
-- On USES reduce production UsesIfAtom -> UsesIndirectAtom
-- On TYPE reduce production UsesIfAtom -> UsesIndirectAtom
-- On SYNTAX reduce production UsesIfAtom -> UsesIndirectAtom
-- On RPAREN reduce production UsesIfAtom -> UsesIndirectAtom
-- On RESOURCE reduce production UsesIfAtom -> UsesIndirectAtom
-- On REG reduce production UsesIfAtom -> UsesIndirectAtom
-- On PORTS reduce production UsesIfAtom -> UsesIndirectAtom
-- On PIPE reduce production UsesIfAtom -> UsesIndirectAtom
-- On OP reduce production UsesIfAtom -> UsesIndirectAtom
-- On MODE reduce production UsesIfAtom -> UsesIndirectAtom
-- On MEM reduce production UsesIfAtom -> UsesIndirectAtom
-- On LET reduce production UsesIfAtom -> UsesIndirectAtom
-- On INITIALA reduce production UsesIfAtom -> UsesIndirectAtom
-- On IMAGE reduce production UsesIfAtom -> UsesIndirectAtom
-- On ID reduce production UsesIfAtom -> UsesIndirectAtom
-- On EXTEND reduce production UsesIfAtom -> UsesIndirectAtom
-- On EXCEPTION reduce production UsesIfAtom -> UsesIndirectAtom
-- On EOF reduce production UsesIfAtom -> UsesIndirectAtom
-- On ENDIF reduce production UsesIfAtom -> UsesIndirectAtom
-- On ELSE reduce production UsesIfAtom -> UsesIndirectAtom
-- On COMMA reduce production UsesIfAtom -> UsesIndirectAtom
-- On CANON reduce production UsesIfAtom -> UsesIndirectAtom
-- On ALIAS reduce production UsesIfAtom -> UsesIndirectAtom
-- On ACTION reduce production UsesIfAtom -> UsesIndirectAtom

State 285:
## Known stack suffix:
## UsesOrSequence PIPE UsesIfAtom
## LR(1) items:
UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On VAR reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On USES reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On TYPE reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On SYNTAX reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On RPAREN reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On RESOURCE reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On REG reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On PORTS reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On PIPE reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On OP reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On MODE reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On MEM reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On LET reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On INITIALA reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On IMAGE reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On ID reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On EXTEND reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On EXCEPTION reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On EOF reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On COMMA reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On CANON reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On ALIAS reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom
-- On ACTION reduce production UsesOrSequence -> UsesOrSequence PIPE UsesIfAtom

State 286:
## Known stack suffix:
## UsesCondAtom
## LR(1) items:
UsesIndirectAtom -> UsesCondAtom . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesIndirectAtom -> UsesCondAtom
-- On VAR reduce production UsesIndirectAtom -> UsesCondAtom
-- On USES reduce production UsesIndirectAtom -> UsesCondAtom
-- On TYPE reduce production UsesIndirectAtom -> UsesCondAtom
-- On SYNTAX reduce production UsesIndirectAtom -> UsesCondAtom
-- On RPAREN reduce production UsesIndirectAtom -> UsesCondAtom
-- On RESOURCE reduce production UsesIndirectAtom -> UsesCondAtom
-- On REG reduce production UsesIndirectAtom -> UsesCondAtom
-- On PORTS reduce production UsesIndirectAtom -> UsesCondAtom
-- On PIPE reduce production UsesIndirectAtom -> UsesCondAtom
-- On OP reduce production UsesIndirectAtom -> UsesCondAtom
-- On MODE reduce production UsesIndirectAtom -> UsesCondAtom
-- On MEM reduce production UsesIndirectAtom -> UsesCondAtom
-- On LET reduce production UsesIndirectAtom -> UsesCondAtom
-- On INITIALA reduce production UsesIndirectAtom -> UsesCondAtom
-- On IMAGE reduce production UsesIndirectAtom -> UsesCondAtom
-- On ID reduce production UsesIndirectAtom -> UsesCondAtom
-- On EXTEND reduce production UsesIndirectAtom -> UsesCondAtom
-- On EXCEPTION reduce production UsesIndirectAtom -> UsesCondAtom
-- On EOF reduce production UsesIndirectAtom -> UsesCondAtom
-- On ENDIF reduce production UsesIndirectAtom -> UsesCondAtom
-- On ELSE reduce production UsesIndirectAtom -> UsesCondAtom
-- On COMMA reduce production UsesIndirectAtom -> UsesCondAtom
-- On CANON reduce production UsesIndirectAtom -> UsesCondAtom
-- On ALIAS reduce production UsesIndirectAtom -> UsesCondAtom
-- On ACTION reduce production UsesIndirectAtom -> UsesCondAtom

State 287:
## Known stack suffix:
## UsesAndAtom
## LR(1) items:
UsesCondAtom -> UsesAndAtom . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesCondAtom -> UsesAndAtom
-- On VAR reduce production UsesCondAtom -> UsesAndAtom
-- On USES reduce production UsesCondAtom -> UsesAndAtom
-- On TYPE reduce production UsesCondAtom -> UsesAndAtom
-- On SYNTAX reduce production UsesCondAtom -> UsesAndAtom
-- On RPAREN reduce production UsesCondAtom -> UsesAndAtom
-- On RESOURCE reduce production UsesCondAtom -> UsesAndAtom
-- On REG reduce production UsesCondAtom -> UsesAndAtom
-- On PORTS reduce production UsesCondAtom -> UsesAndAtom
-- On PIPE reduce production UsesCondAtom -> UsesAndAtom
-- On OP reduce production UsesCondAtom -> UsesAndAtom
-- On MODE reduce production UsesCondAtom -> UsesAndAtom
-- On MEM reduce production UsesCondAtom -> UsesAndAtom
-- On LET reduce production UsesCondAtom -> UsesAndAtom
-- On INITIALA reduce production UsesCondAtom -> UsesAndAtom
-- On IMAGE reduce production UsesCondAtom -> UsesAndAtom
-- On ID reduce production UsesCondAtom -> UsesAndAtom
-- On EXTEND reduce production UsesCondAtom -> UsesAndAtom
-- On EXCEPTION reduce production UsesCondAtom -> UsesAndAtom
-- On EOF reduce production UsesCondAtom -> UsesAndAtom
-- On ENDIF reduce production UsesCondAtom -> UsesAndAtom
-- On ELSE reduce production UsesCondAtom -> UsesAndAtom
-- On COMMA reduce production UsesCondAtom -> UsesAndAtom
-- On CANON reduce production UsesCondAtom -> UsesAndAtom
-- On ALIAS reduce production UsesCondAtom -> UsesAndAtom
-- On ACTION reduce production UsesCondAtom -> UsesAndAtom

State 288:
## Known stack suffix:
## UsesIfAtom
## LR(1) items:
UsesOrSequence -> UsesIfAtom . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesOrSequence -> UsesIfAtom
-- On VAR reduce production UsesOrSequence -> UsesIfAtom
-- On USES reduce production UsesOrSequence -> UsesIfAtom
-- On TYPE reduce production UsesOrSequence -> UsesIfAtom
-- On SYNTAX reduce production UsesOrSequence -> UsesIfAtom
-- On RPAREN reduce production UsesOrSequence -> UsesIfAtom
-- On RESOURCE reduce production UsesOrSequence -> UsesIfAtom
-- On REG reduce production UsesOrSequence -> UsesIfAtom
-- On PORTS reduce production UsesOrSequence -> UsesIfAtom
-- On PIPE reduce production UsesOrSequence -> UsesIfAtom
-- On OP reduce production UsesOrSequence -> UsesIfAtom
-- On MODE reduce production UsesOrSequence -> UsesIfAtom
-- On MEM reduce production UsesOrSequence -> UsesIfAtom
-- On LET reduce production UsesOrSequence -> UsesIfAtom
-- On INITIALA reduce production UsesOrSequence -> UsesIfAtom
-- On IMAGE reduce production UsesOrSequence -> UsesIfAtom
-- On ID reduce production UsesOrSequence -> UsesIfAtom
-- On EXTEND reduce production UsesOrSequence -> UsesIfAtom
-- On EXCEPTION reduce production UsesOrSequence -> UsesIfAtom
-- On EOF reduce production UsesOrSequence -> UsesIfAtom
-- On COMMA reduce production UsesOrSequence -> UsesIfAtom
-- On CANON reduce production UsesOrSequence -> UsesIfAtom
-- On ALIAS reduce production UsesOrSequence -> UsesIfAtom
-- On ACTION reduce production UsesOrSequence -> UsesIfAtom

State 289:
## Known stack suffix:
## UsesLocationList AND LPAREN UsesDef
## LR(1) items:
UsesDef -> UsesDef . COMMA UsesOrSequence [ RPAREN COMMA ]
UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef . RPAREN [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On RPAREN shift to state 290
-- On COMMA shift to state 291
## Reductions:

State 290:
## Known stack suffix:
## UsesLocationList AND LPAREN UsesDef RPAREN
## LR(1) items:
UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On VAR reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On USES reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On TYPE reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On SYNTAX reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On RPAREN reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On RESOURCE reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On REG reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On PORTS reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On PIPE reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On OP reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On MODE reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On MEM reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On LET reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On INITIALA reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On IMAGE reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On ID reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On EXTEND reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On EXCEPTION reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On EOF reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On ENDIF reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On ELSE reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On COMMA reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On CANON reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On ALIAS reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN
-- On ACTION reduce production UsesIndirectAtom -> UsesLocationList AND LPAREN UsesDef RPAREN

State 291:
## Known stack suffix:
## UsesDef COMMA
## LR(1) items:
UsesDef -> UsesDef COMMA . UsesOrSequence [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION ]
## Transitions:
-- On LPAREN shift to state 225
-- On LBRACE shift to state 226
-- On IF shift to state 273
-- On ID shift to state 276
-- On UsesOrSequence shift to state 292
-- On UsesLocationList shift to state 279
-- On UsesLocation shift to state 271
-- On UsesIndirectAtom shift to state 284
-- On UsesIfAtom shift to state 288
-- On UsesCondAtom shift to state 286
-- On UsesAndAtom shift to state 287
## Reductions:

State 292:
## Known stack suffix:
## UsesDef COMMA UsesOrSequence
## LR(1) items:
UsesDef -> UsesDef COMMA UsesOrSequence . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION ]
UsesOrSequence -> UsesOrSequence . PIPE UsesIfAtom [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ACTION ]
## Transitions:
-- On PIPE shift to state 283
## Reductions:
-- On VOLATILE reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On VAR reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On USES reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On TYPE reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On SYNTAX reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On RPAREN reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On RESOURCE reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On REG reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On PORTS reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On OP reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On MODE reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On MEM reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On LET reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On INITIALA reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On IMAGE reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On ID reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On EXTEND reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On EXCEPTION reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On EOF reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On COMMA reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On CANON reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On ALIAS reduce production UsesDef -> UsesDef COMMA UsesOrSequence
-- On ACTION reduce production UsesDef -> UsesDef COMMA UsesOrSequence

State 293:
## Known stack suffix:
## UsesLocationList AND ID
## LR(1) items:
UsesIndirectAtom -> UsesLocationList AND ID . DOT USES [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On DOT shift to state 294
## Reductions:

State 294:
## Known stack suffix:
## UsesLocationList AND ID DOT
## LR(1) items:
UsesIndirectAtom -> UsesLocationList AND ID DOT . USES [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On USES shift to state 295
## Reductions:

State 295:
## Known stack suffix:
## UsesLocationList AND ID DOT USES
## LR(1) items:
UsesIndirectAtom -> UsesLocationList AND ID DOT USES . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On VAR reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On USES reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On TYPE reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On SYNTAX reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On RPAREN reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On RESOURCE reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On REG reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On PORTS reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On PIPE reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On OP reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On MODE reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On MEM reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On LET reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On INITIALA reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On IMAGE reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On ID reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On EXTEND reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On EXCEPTION reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On EOF reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On ENDIF reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On ELSE reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On COMMA reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On CANON reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On ALIAS reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES
-- On ACTION reduce production UsesIndirectAtom -> UsesLocationList AND ID DOT USES

State 296:
## Known stack suffix:
## IF Expr THEN UsesIfAtom
## LR(1) items:
UsesIfAtom -> IF Expr THEN UsesIfAtom . OptionalElseAtom ENDIF [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On ELSE shift to state 297
-- On OptionalElseAtom shift to state 299
## Reductions:
-- On ENDIF reduce production OptionalElseAtom ->

State 297:
## Known stack suffix:
## ELSE
## LR(1) items:
OptionalElseAtom -> ELSE . UsesIfAtom [ ENDIF ]
## Transitions:
-- On LPAREN shift to state 225
-- On LBRACE shift to state 226
-- On IF shift to state 273
-- On ID shift to state 276
-- On UsesLocationList shift to state 279
-- On UsesLocation shift to state 271
-- On UsesIndirectAtom shift to state 284
-- On UsesIfAtom shift to state 298
-- On UsesCondAtom shift to state 286
-- On UsesAndAtom shift to state 287
## Reductions:

State 298:
## Known stack suffix:
## ELSE UsesIfAtom
## LR(1) items:
OptionalElseAtom -> ELSE UsesIfAtom . [ ENDIF ]
## Transitions:
## Reductions:
-- On ENDIF reduce production OptionalElseAtom -> ELSE UsesIfAtom

State 299:
## Known stack suffix:
## IF Expr THEN UsesIfAtom OptionalElseAtom
## LR(1) items:
UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom . ENDIF [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On ENDIF shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
## LR(1) items:
UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On VAR reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On USES reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On TYPE reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On SYNTAX reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On RPAREN reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On RESOURCE reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On REG reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On PORTS reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On PIPE reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On OP reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On MODE reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On MEM reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On LET reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On INITIALA reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On IMAGE reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On ID reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On EXTEND reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On EXCEPTION reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On EOF reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On ENDIF reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On ELSE reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On COMMA reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On CANON reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On ALIAS reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF
-- On ACTION reduce production UsesIfAtom -> IF Expr THEN UsesIfAtom OptionalElseAtom ENDIF

State 301:
## Known stack suffix:
## LPAREN UsesDef
## LR(1) items:
UsesDef -> UsesDef . COMMA UsesOrSequence [ RPAREN COMMA ]
UsesIndirectAtom -> LPAREN UsesDef . RPAREN [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
-- On RPAREN shift to state 302
-- On COMMA shift to state 291
## Reductions:

State 302:
## Known stack suffix:
## LPAREN UsesDef RPAREN
## LR(1) items:
UsesIndirectAtom -> LPAREN UsesDef RPAREN . [ VOLATILE VAR USES TYPE SYNTAX RPAREN RESOURCE REG PORTS PIPE OP MODE MEM LET INITIALA IMAGE ID EXTEND EXCEPTION EOF ENDIF ELSE COMMA CANON ALIAS ACTION ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On VAR reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On USES reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On TYPE reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On SYNTAX reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On RPAREN reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On RESOURCE reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On REG reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On PORTS reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On PIPE reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On OP reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On MODE reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On MEM reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On LET reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On INITIALA reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On IMAGE reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On ID reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On EXTEND reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On EXCEPTION reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On EOF reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On ENDIF reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On ELSE reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On COMMA reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On CANON reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On ALIAS reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN
-- On ACTION reduce production UsesIndirectAtom -> LPAREN UsesDef RPAREN

State 303:
## Known stack suffix:
## USES EQ UsesDef
## LR(1) items:
MemAttrDef -> USES EQ UsesDef . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
UsesDef -> UsesDef . COMMA UsesOrSequence [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF COMMA CANON ALIAS ]
## Transitions:
-- On COMMA shift to state 291
## Reductions:
-- On VOLATILE reduce production MemAttrDef -> USES EQ UsesDef
-- On VAR reduce production MemAttrDef -> USES EQ UsesDef
-- On USES reduce production MemAttrDef -> USES EQ UsesDef
-- On TYPE reduce production MemAttrDef -> USES EQ UsesDef
-- On RESOURCE reduce production MemAttrDef -> USES EQ UsesDef
-- On REG reduce production MemAttrDef -> USES EQ UsesDef
-- On PORTS reduce production MemAttrDef -> USES EQ UsesDef
-- On OP reduce production MemAttrDef -> USES EQ UsesDef
-- On MODE reduce production MemAttrDef -> USES EQ UsesDef
-- On MEM reduce production MemAttrDef -> USES EQ UsesDef
-- On LET reduce production MemAttrDef -> USES EQ UsesDef
-- On INITIALA reduce production MemAttrDef -> USES EQ UsesDef
-- On ID reduce production MemAttrDef -> USES EQ UsesDef
-- On EXTEND reduce production MemAttrDef -> USES EQ UsesDef
-- On EXCEPTION reduce production MemAttrDef -> USES EQ UsesDef
-- On EOF reduce production MemAttrDef -> USES EQ UsesDef
-- On CANON reduce production MemAttrDef -> USES EQ UsesDef
-- On ALIAS reduce production MemAttrDef -> USES EQ UsesDef

State 304:
## Known stack suffix:
## PORTS
## LR(1) items:
MemAttrDef -> PORTS . EQ CARD_CONST COMMA CARD_CONST [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On EQ shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## PORTS EQ
## LR(1) items:
MemAttrDef -> PORTS EQ . CARD_CONST COMMA CARD_CONST [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On CARD_CONST shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## PORTS EQ CARD_CONST
## LR(1) items:
MemAttrDef -> PORTS EQ CARD_CONST . COMMA CARD_CONST [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On COMMA shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## PORTS EQ CARD_CONST COMMA
## LR(1) items:
MemAttrDef -> PORTS EQ CARD_CONST COMMA . CARD_CONST [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On CARD_CONST shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## PORTS EQ CARD_CONST COMMA CARD_CONST
## LR(1) items:
MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On VAR reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On USES reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On TYPE reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On RESOURCE reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On REG reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On PORTS reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On OP reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On MODE reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On MEM reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On LET reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On INITIALA reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On ID reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On EXTEND reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On EXCEPTION reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On EOF reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On CANON reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST
-- On ALIAS reduce production MemAttrDef -> PORTS EQ CARD_CONST COMMA CARD_CONST

State 309:
## Known stack suffix:
## INITIALA
## LR(1) items:
MemAttrDef -> INITIALA . EQ LetExpr [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On EQ shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## INITIALA EQ
## LR(1) items:
MemAttrDef -> INITIALA EQ . LetExpr [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 311
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 311:
## Known stack suffix:
## INITIALA EQ LetExpr
## LR(1) items:
MemAttrDef -> INITIALA EQ LetExpr . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On VAR reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On USES reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On TYPE reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On RESOURCE reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On REG reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On PORTS reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On OP reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On MODE reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On MEM reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On LET reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On INITIALA reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On ID reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On EXTEND reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On EXCEPTION reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On EOF reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On CANON reduce production MemAttrDef -> INITIALA EQ LetExpr
-- On ALIAS reduce production MemAttrDef -> INITIALA EQ LetExpr

State 312:
## Known stack suffix:
## ID
## LR(1) items:
MemAttrDef -> ID . EQ Expr [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
MemAttrDef -> ID . EQ LBRACE Sequence RBRACE [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On EQ shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## ID EQ
## LR(1) items:
MemAttrDef -> ID EQ . Expr [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
MemAttrDef -> ID EQ . LBRACE Sequence RBRACE [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On LBRACE shift to state 314
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 383
-- On Constant shift to state 76
## Reductions:

State 314:
## Known stack suffix:
## ID EQ LBRACE
## LR(1) items:
MemAttrDef -> ID EQ LBRACE . Sequence RBRACE [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On SWITCH shift to state 315
-- On STRING_CONST shift to state 323
-- On IF shift to state 327
-- On ID shift to state 330
-- On ERROR shift to state 347
-- On ACTION shift to state 351
-- On StatementList shift to state 352
-- On Statement shift to state 362
-- On Sequence shift to state 381
-- On Location shift to state 355
-- On ConditionalStatement shift to state 361
## Reductions:
-- On SEMI reduce production Statement ->
-- On RBRACE reduce production Sequence ->

State 315:
## Known stack suffix:
## SWITCH
## LR(1) items:
ConditionalStatement -> SWITCH . LPAREN Expr RPAREN LBRACE CaseBody RBRACE [ SEMI ]
## Transitions:
-- On LPAREN shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## SWITCH LPAREN
## LR(1) items:
ConditionalStatement -> SWITCH LPAREN . Expr RPAREN LBRACE CaseBody RBRACE [ SEMI ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 317
-- On Constant shift to state 76
## Reductions:

State 317:
## Known stack suffix:
## SWITCH LPAREN Expr
## LR(1) items:
ConditionalStatement -> SWITCH LPAREN Expr . RPAREN LBRACE CaseBody RBRACE [ SEMI ]
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH RPAREN ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On RPAREN shift to state 318
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 318:
## Known stack suffix:
## SWITCH LPAREN Expr RPAREN
## LR(1) items:
ConditionalStatement -> SWITCH LPAREN Expr RPAREN . LBRACE CaseBody RBRACE [ SEMI ]
## Transitions:
-- On LBRACE shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## SWITCH LPAREN Expr RPAREN LBRACE
## LR(1) items:
ConditionalStatement -> SWITCH LPAREN Expr RPAREN LBRACE . CaseBody RBRACE [ SEMI ]
## Transitions:
-- On CASE shift to state 320
-- On OptCaseList shift to state 369
-- On CaseStat shift to state 375
-- On CaseList shift to state 378
-- On CaseBody shift to state 379
## Reductions:
-- On DEFAULT reduce production OptCaseList ->

State 320:
## Known stack suffix:
## CASE
## LR(1) items:
CaseStat -> CASE . Expr COLON Sequence [ RBRACE DEFAULT CASE ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 321
-- On Constant shift to state 76
## Reductions:

State 321:
## Known stack suffix:
## CASE Expr
## LR(1) items:
CaseStat -> CASE Expr . COLON Sequence [ RBRACE DEFAULT CASE ]
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON COLON CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On COLON shift to state 322
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 322:
## Known stack suffix:
## CASE Expr COLON
## LR(1) items:
CaseStat -> CASE Expr COLON . Sequence [ RBRACE DEFAULT CASE ]
## Transitions:
-- On SWITCH shift to state 315
-- On STRING_CONST shift to state 323
-- On IF shift to state 327
-- On ID shift to state 330
-- On ERROR shift to state 347
-- On ACTION shift to state 351
-- On StatementList shift to state 352
-- On Statement shift to state 362
-- On Sequence shift to state 368
-- On Location shift to state 355
-- On ConditionalStatement shift to state 361
## Reductions:
-- On SEMI reduce production Statement ->
-- On RBRACE reduce production Sequence ->
-- On DEFAULT reduce production Sequence ->
-- On CASE reduce production Sequence ->

State 323:
## Known stack suffix:
## STRING_CONST
## LR(1) items:
Statement -> STRING_CONST . LPAREN ArgList RPAREN [ SEMI ]
## Transitions:
-- On LPAREN shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## STRING_CONST LPAREN
## LR(1) items:
Statement -> STRING_CONST LPAREN . ArgList RPAREN [ SEMI ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 152
-- On Constant shift to state 76
-- On ArgList shift to state 325
## Reductions:
-- On RPAREN reduce production ArgList ->
-- On COMMA reduce production ArgList ->

State 325:
## Known stack suffix:
## STRING_CONST LPAREN ArgList
## LR(1) items:
ArgList -> ArgList . COMMA Expr [ RPAREN COMMA ]
Statement -> STRING_CONST LPAREN ArgList . RPAREN [ SEMI ]
## Transitions:
-- On RPAREN shift to state 326
-- On COMMA shift to state 155
## Reductions:

State 326:
## Known stack suffix:
## STRING_CONST LPAREN ArgList RPAREN
## LR(1) items:
Statement -> STRING_CONST LPAREN ArgList RPAREN . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production Statement -> STRING_CONST LPAREN ArgList RPAREN

State 327:
## Known stack suffix:
## IF
## LR(1) items:
ConditionalStatement -> IF . Expr THEN Sequence OptionalElse ENDIF [ SEMI ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 328
-- On Constant shift to state 76
## Reductions:

State 328:
## Known stack suffix:
## IF Expr
## LR(1) items:
ConditionalStatement -> IF Expr . THEN Sequence OptionalElse ENDIF [ SEMI ]
Expr -> Expr . DOUBLE_COLON Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ THEN STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
## Transitions:
-- On THEN shift to state 329
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 329:
## Known stack suffix:
## IF Expr THEN
## LR(1) items:
ConditionalStatement -> IF Expr THEN . Sequence OptionalElse ENDIF [ SEMI ]
## Transitions:
-- On SWITCH shift to state 315
-- On STRING_CONST shift to state 323
-- On IF shift to state 327
-- On ID shift to state 330
-- On ERROR shift to state 347
-- On ACTION shift to state 351
-- On StatementList shift to state 352
-- On Statement shift to state 362
-- On Sequence shift to state 363
-- On Location shift to state 355
-- On ConditionalStatement shift to state 361
## Reductions:
-- On SEMI reduce production Statement ->
-- On ENDIF reduce production Sequence ->
-- On ELSE reduce production Sequence ->

State 330:
## Known stack suffix:
## ID
## LR(1) items:
Location -> ID . [ EQ DOUBLE_COLON ]
Location -> ID . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
Location -> ID . LBRACK Expr RBRACK [ EQ DOUBLE_COLON ]
Location -> ID . LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
Statement -> ID . [ SEMI ]
Statement -> ID . DOT ACTION [ SEMI ]
Statement -> ID . DOT ID [ SEMI ]
## Transitions:
-- On LBRACK shift to state 331
-- On DOT shift to state 339
-- On BIT_LEFT shift to state 342
## Reductions:
-- On SEMI reduce production Statement -> ID
-- On EQ reduce production Location -> ID
-- On DOUBLE_COLON reduce production Location -> ID

State 331:
## Known stack suffix:
## ID LBRACK
## LR(1) items:
Location -> ID LBRACK . Expr RBRACK [ EQ DOUBLE_COLON ]
Location -> ID LBRACK . Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 332
-- On Constant shift to state 76
## Reductions:

State 332:
## Known stack suffix:
## ID LBRACK Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Location -> ID LBRACK Expr . RBRACK [ EQ DOUBLE_COLON ]
Location -> ID LBRACK Expr . RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On RBRACK shift to state 333
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 333:
## Known stack suffix:
## ID LBRACK Expr RBRACK
## LR(1) items:
Location -> ID LBRACK Expr RBRACK . [ EQ DOUBLE_COLON ]
Location -> ID LBRACK Expr RBRACK . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On BIT_LEFT shift to state 334
## Reductions:
-- On EQ reduce production Location -> ID LBRACK Expr RBRACK
-- On DOUBLE_COLON reduce production Location -> ID LBRACK Expr RBRACK

State 334:
## Known stack suffix:
## ID LBRACK Expr RBRACK BIT_LEFT
## LR(1) items:
Location -> ID LBRACK Expr RBRACK BIT_LEFT . Bit_Expr DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 335
## Reductions:

State 335:
## Known stack suffix:
## ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Location -> ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr . DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On DOUBLE_STAR shift to state 52
-- On DOUBLE_DOT shift to state 336
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 336:
## Known stack suffix:
## ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT
## LR(1) items:
Location -> ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT . Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 337
## Reductions:

State 337:
## Known stack suffix:
## ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Location -> ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr . GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On GT shift to state 338
-- On DOUBLE_STAR shift to state 52
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 338:
## Known stack suffix:
## ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
## LR(1) items:
Location -> ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT . [ EQ DOUBLE_COLON ]
## Transitions:
## Reductions:
-- On EQ reduce production Location -> ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On DOUBLE_COLON reduce production Location -> ID LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT

State 339:
## Known stack suffix:
## ID DOT
## LR(1) items:
Statement -> ID DOT . ACTION [ SEMI ]
Statement -> ID DOT . ID [ SEMI ]
## Transitions:
-- On ID shift to state 340
-- On ACTION shift to state 341
## Reductions:

State 340:
## Known stack suffix:
## ID DOT ID
## LR(1) items:
Statement -> ID DOT ID . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production Statement -> ID DOT ID

State 341:
## Known stack suffix:
## ID DOT ACTION
## LR(1) items:
Statement -> ID DOT ACTION . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production Statement -> ID DOT ACTION

State 342:
## Known stack suffix:
## ID BIT_LEFT
## LR(1) items:
Location -> ID BIT_LEFT . Bit_Expr DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## ID BIT_LEFT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Location -> ID BIT_LEFT Bit_Expr . DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On DOUBLE_STAR shift to state 52
-- On DOUBLE_DOT shift to state 344
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 344:
## Known stack suffix:
## ID BIT_LEFT Bit_Expr DOUBLE_DOT
## LR(1) items:
Location -> ID BIT_LEFT Bit_Expr DOUBLE_DOT . Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## ID BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Location -> ID BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr . GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On GT shift to state 346
-- On DOUBLE_STAR shift to state 52
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 346:
## Known stack suffix:
## ID BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
## LR(1) items:
Location -> ID BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT . [ EQ DOUBLE_COLON ]
## Transitions:
## Reductions:
-- On EQ reduce production Location -> ID BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On DOUBLE_COLON reduce production Location -> ID BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT

State 347:
## Known stack suffix:
## ERROR
## LR(1) items:
Statement -> ERROR . LPAREN STRING_CONST RPAREN [ SEMI ]
## Transitions:
-- On LPAREN shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## ERROR LPAREN
## LR(1) items:
Statement -> ERROR LPAREN . STRING_CONST RPAREN [ SEMI ]
## Transitions:
-- On STRING_CONST shift to state 349
## Reductions:

State 349:
## Known stack suffix:
## ERROR LPAREN STRING_CONST
## LR(1) items:
Statement -> ERROR LPAREN STRING_CONST . RPAREN [ SEMI ]
## Transitions:
-- On RPAREN shift to state 350
## Reductions:

State 350:
## Known stack suffix:
## ERROR LPAREN STRING_CONST RPAREN
## LR(1) items:
Statement -> ERROR LPAREN STRING_CONST RPAREN . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production Statement -> ERROR LPAREN STRING_CONST RPAREN

State 351:
## Known stack suffix:
## ACTION
## LR(1) items:
Statement -> ACTION . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production Statement -> ACTION

State 352:
## Known stack suffix:
## StatementList
## LR(1) items:
Sequence -> StatementList . SEMI [ RBRACE ENDIF ELSE DEFAULT CASE ]
StatementList -> StatementList . SEMI Statement [ SEMI ]
## Transitions:
-- On SEMI shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## StatementList SEMI
## LR(1) items:
Sequence -> StatementList SEMI . [ RBRACE ENDIF ELSE DEFAULT CASE ]
StatementList -> StatementList SEMI . Statement [ SEMI ]
## Transitions:
-- On SWITCH shift to state 315
-- On STRING_CONST shift to state 323
-- On IF shift to state 327
-- On ID shift to state 330
-- On ERROR shift to state 347
-- On ACTION shift to state 351
-- On Statement shift to state 354
-- On Location shift to state 355
-- On ConditionalStatement shift to state 361
## Reductions:
-- On SEMI reduce production Statement ->
-- On RBRACE reduce production Sequence -> StatementList SEMI
-- On ENDIF reduce production Sequence -> StatementList SEMI
-- On ELSE reduce production Sequence -> StatementList SEMI
-- On DEFAULT reduce production Sequence -> StatementList SEMI
-- On CASE reduce production Sequence -> StatementList SEMI

State 354:
## Known stack suffix:
## StatementList SEMI Statement
## LR(1) items:
StatementList -> StatementList SEMI Statement . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production StatementList -> StatementList SEMI Statement

State 355:
## Known stack suffix:
## Location
## LR(1) items:
Location -> Location . DOUBLE_COLON Location [ EQ DOUBLE_COLON ]
Statement -> Location . EQ Expr [ SEMI ]
## Transitions:
-- On EQ shift to state 356
-- On DOUBLE_COLON shift to state 358
## Reductions:

State 356:
## Known stack suffix:
## Location EQ
## LR(1) items:
Statement -> Location EQ . Expr [ SEMI ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 357
-- On Constant shift to state 76
## Reductions:

State 357:
## Known stack suffix:
## Location EQ Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH SEMI ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Statement -> Location EQ Expr . [ SEMI ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On SEMI reduce production Statement -> Location EQ Expr

State 358:
## Known stack suffix:
## Location DOUBLE_COLON
## LR(1) items:
Location -> Location DOUBLE_COLON . Location [ EQ DOUBLE_COLON ]
## Transitions:
-- On ID shift to state 359
-- On Location shift to state 360
## Reductions:

State 359:
## Known stack suffix:
## ID
## LR(1) items:
Location -> ID . [ EQ DOUBLE_COLON ]
Location -> ID . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
Location -> ID . LBRACK Expr RBRACK [ EQ DOUBLE_COLON ]
Location -> ID . LBRACK Expr RBRACK BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ EQ DOUBLE_COLON ]
## Transitions:
-- On LBRACK shift to state 331
-- On BIT_LEFT shift to state 342
## Reductions:
-- On EQ reduce production Location -> ID
-- On DOUBLE_COLON reduce production Location -> ID

State 360:
## Known stack suffix:
## Location DOUBLE_COLON Location
## LR(1) items:
Location -> Location . DOUBLE_COLON Location [ EQ DOUBLE_COLON ]
Location -> Location DOUBLE_COLON Location . [ EQ DOUBLE_COLON ]
## Transitions:
## Reductions:
-- On EQ reduce production Location -> Location DOUBLE_COLON Location
-- On DOUBLE_COLON reduce production Location -> Location DOUBLE_COLON Location

State 361:
## Known stack suffix:
## ConditionalStatement
## LR(1) items:
Statement -> ConditionalStatement . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production Statement -> ConditionalStatement

State 362:
## Known stack suffix:
## Statement
## LR(1) items:
StatementList -> Statement . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production StatementList -> Statement

State 363:
## Known stack suffix:
## IF Expr THEN Sequence
## LR(1) items:
ConditionalStatement -> IF Expr THEN Sequence . OptionalElse ENDIF [ SEMI ]
## Transitions:
-- On ELSE shift to state 364
-- On OptionalElse shift to state 366
## Reductions:
-- On ENDIF reduce production OptionalElse ->

State 364:
## Known stack suffix:
## ELSE
## LR(1) items:
OptionalElse -> ELSE . Sequence [ ENDIF ]
## Transitions:
-- On SWITCH shift to state 315
-- On STRING_CONST shift to state 323
-- On IF shift to state 327
-- On ID shift to state 330
-- On ERROR shift to state 347
-- On ACTION shift to state 351
-- On StatementList shift to state 352
-- On Statement shift to state 362
-- On Sequence shift to state 365
-- On Location shift to state 355
-- On ConditionalStatement shift to state 361
## Reductions:
-- On SEMI reduce production Statement ->
-- On ENDIF reduce production Sequence ->

State 365:
## Known stack suffix:
## ELSE Sequence
## LR(1) items:
OptionalElse -> ELSE Sequence . [ ENDIF ]
## Transitions:
## Reductions:
-- On ENDIF reduce production OptionalElse -> ELSE Sequence

State 366:
## Known stack suffix:
## IF Expr THEN Sequence OptionalElse
## LR(1) items:
ConditionalStatement -> IF Expr THEN Sequence OptionalElse . ENDIF [ SEMI ]
## Transitions:
-- On ENDIF shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## IF Expr THEN Sequence OptionalElse ENDIF
## LR(1) items:
ConditionalStatement -> IF Expr THEN Sequence OptionalElse ENDIF . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production ConditionalStatement -> IF Expr THEN Sequence OptionalElse ENDIF

State 368:
## Known stack suffix:
## CASE Expr COLON Sequence
## LR(1) items:
CaseStat -> CASE Expr COLON Sequence . [ RBRACE DEFAULT CASE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production CaseStat -> CASE Expr COLON Sequence
-- On DEFAULT reduce production CaseStat -> CASE Expr COLON Sequence
-- On CASE reduce production CaseStat -> CASE Expr COLON Sequence

State 369:
## Known stack suffix:
## OptCaseList
## LR(1) items:
CaseBody -> OptCaseList . Default OptCaseList [ RBRACE ]
## Transitions:
-- On DEFAULT shift to state 370
-- On Default shift to state 373
## Reductions:

State 370:
## Known stack suffix:
## DEFAULT
## LR(1) items:
Default -> DEFAULT . COLON Sequence [ RBRACE CASE ]
## Transitions:
-- On COLON shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## DEFAULT COLON
## LR(1) items:
Default -> DEFAULT COLON . Sequence [ RBRACE CASE ]
## Transitions:
-- On SWITCH shift to state 315
-- On STRING_CONST shift to state 323
-- On IF shift to state 327
-- On ID shift to state 330
-- On ERROR shift to state 347
-- On ACTION shift to state 351
-- On StatementList shift to state 352
-- On Statement shift to state 362
-- On Sequence shift to state 372
-- On Location shift to state 355
-- On ConditionalStatement shift to state 361
## Reductions:
-- On SEMI reduce production Statement ->
-- On RBRACE reduce production Sequence ->
-- On CASE reduce production Sequence ->

State 372:
## Known stack suffix:
## DEFAULT COLON Sequence
## LR(1) items:
Default -> DEFAULT COLON Sequence . [ RBRACE CASE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production Default -> DEFAULT COLON Sequence
-- On CASE reduce production Default -> DEFAULT COLON Sequence

State 373:
## Known stack suffix:
## OptCaseList Default
## LR(1) items:
CaseBody -> OptCaseList Default . OptCaseList [ RBRACE ]
## Transitions:
-- On CASE shift to state 320
-- On OptCaseList shift to state 374
-- On CaseStat shift to state 375
-- On CaseList shift to state 376
## Reductions:
-- On RBRACE reduce production OptCaseList ->

State 374:
## Known stack suffix:
## OptCaseList Default OptCaseList
## LR(1) items:
CaseBody -> OptCaseList Default OptCaseList . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production CaseBody -> OptCaseList Default OptCaseList

State 375:
## Known stack suffix:
## CaseStat
## LR(1) items:
CaseList -> CaseStat . [ RBRACE DEFAULT CASE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production CaseList -> CaseStat
-- On DEFAULT reduce production CaseList -> CaseStat
-- On CASE reduce production CaseList -> CaseStat

State 376:
## Known stack suffix:
## CaseList
## LR(1) items:
CaseList -> CaseList . CaseStat [ RBRACE CASE ]
OptCaseList -> CaseList . [ RBRACE ]
## Transitions:
-- On CASE shift to state 320
-- On CaseStat shift to state 377
## Reductions:
-- On RBRACE reduce production OptCaseList -> CaseList

State 377:
## Known stack suffix:
## CaseList CaseStat
## LR(1) items:
CaseList -> CaseList CaseStat . [ RBRACE DEFAULT CASE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production CaseList -> CaseList CaseStat
-- On DEFAULT reduce production CaseList -> CaseList CaseStat
-- On CASE reduce production CaseList -> CaseList CaseStat

State 378:
## Known stack suffix:
## CaseList
## LR(1) items:
CaseBody -> CaseList . [ RBRACE ]
CaseList -> CaseList . CaseStat [ RBRACE DEFAULT CASE ]
OptCaseList -> CaseList . [ DEFAULT ]
## Transitions:
-- On CASE shift to state 320
-- On CaseStat shift to state 377
## Reductions:
-- On RBRACE reduce production CaseBody -> CaseList
-- On DEFAULT reduce production OptCaseList -> CaseList

State 379:
## Known stack suffix:
## SWITCH LPAREN Expr RPAREN LBRACE CaseBody
## LR(1) items:
ConditionalStatement -> SWITCH LPAREN Expr RPAREN LBRACE CaseBody . RBRACE [ SEMI ]
## Transitions:
-- On RBRACE shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## SWITCH LPAREN Expr RPAREN LBRACE CaseBody RBRACE
## LR(1) items:
ConditionalStatement -> SWITCH LPAREN Expr RPAREN LBRACE CaseBody RBRACE . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production ConditionalStatement -> SWITCH LPAREN Expr RPAREN LBRACE CaseBody RBRACE

State 381:
## Known stack suffix:
## ID EQ LBRACE Sequence
## LR(1) items:
MemAttrDef -> ID EQ LBRACE Sequence . RBRACE [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On RBRACE shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## ID EQ LBRACE Sequence RBRACE
## LR(1) items:
MemAttrDef -> ID EQ LBRACE Sequence RBRACE . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On VAR reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On USES reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On TYPE reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On RESOURCE reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On REG reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On PORTS reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On OP reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On MODE reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On MEM reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On LET reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On INITIALA reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On ID reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On EXTEND reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On EXCEPTION reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On EOF reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On CANON reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE
-- On ALIAS reduce production MemAttrDef -> ID EQ LBRACE Sequence RBRACE

State 383:
## Known stack suffix:
## ID EQ Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . PLUS Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . MINUS Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . STAR Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . SLASH Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . PERCENT Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . DOUBLE_STAR Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . LEFT_SHIFT Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . RIGHT_SHIFT Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . ROTATE_LEFT Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . ROTATE_RIGHT Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . LT Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . GT Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . LEQ Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . GEQ Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . EQU Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . NEQ Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . AMPERS Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . CIRC Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . PIPE Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . AND Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
Expr -> Expr . OR Expr [ VOLATILE VAR USES TYPE STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PORTS PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT INITIALA ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ALIAS ]
MemAttrDef -> ID EQ Expr . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On VOLATILE reduce production MemAttrDef -> ID EQ Expr
-- On VAR reduce production MemAttrDef -> ID EQ Expr
-- On USES reduce production MemAttrDef -> ID EQ Expr
-- On TYPE reduce production MemAttrDef -> ID EQ Expr
-- On RESOURCE reduce production MemAttrDef -> ID EQ Expr
-- On REG reduce production MemAttrDef -> ID EQ Expr
-- On PORTS reduce production MemAttrDef -> ID EQ Expr
-- On OP reduce production MemAttrDef -> ID EQ Expr
-- On MODE reduce production MemAttrDef -> ID EQ Expr
-- On MEM reduce production MemAttrDef -> ID EQ Expr
-- On LET reduce production MemAttrDef -> ID EQ Expr
-- On INITIALA reduce production MemAttrDef -> ID EQ Expr
-- On ID reduce production MemAttrDef -> ID EQ Expr
-- On EXTEND reduce production MemAttrDef -> ID EQ Expr
-- On EXCEPTION reduce production MemAttrDef -> ID EQ Expr
-- On EOF reduce production MemAttrDef -> ID EQ Expr
-- On CANON reduce production MemAttrDef -> ID EQ Expr
-- On ALIAS reduce production MemAttrDef -> ID EQ Expr

State 384:
## Known stack suffix:
## ALIAS
## LR(1) items:
MemAttrDef -> ALIAS . EQ MemLocation [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On EQ shift to state 385
## Reductions:

State 385:
## Known stack suffix:
## ALIAS EQ
## LR(1) items:
MemAttrDef -> ALIAS EQ . MemLocation [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On ID shift to state 386
-- On MemLocation shift to state 390
-- On MemLocBase shift to state 391
## Reductions:

State 386:
## Known stack suffix:
## ID
## LR(1) items:
MemLocBase -> ID . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON BIT_LEFT ALIAS ]
MemLocBase -> ID . LBRACK Expr RBRACK [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON BIT_LEFT ALIAS ]
## Transitions:
-- On LBRACK shift to state 387
## Reductions:
-- On VOLATILE reduce production MemLocBase -> ID
-- On VAR reduce production MemLocBase -> ID
-- On USES reduce production MemLocBase -> ID
-- On TYPE reduce production MemLocBase -> ID
-- On RESOURCE reduce production MemLocBase -> ID
-- On REG reduce production MemLocBase -> ID
-- On PORTS reduce production MemLocBase -> ID
-- On OP reduce production MemLocBase -> ID
-- On MODE reduce production MemLocBase -> ID
-- On MEM reduce production MemLocBase -> ID
-- On LET reduce production MemLocBase -> ID
-- On INITIALA reduce production MemLocBase -> ID
-- On ID reduce production MemLocBase -> ID
-- On EXTEND reduce production MemLocBase -> ID
-- On EXCEPTION reduce production MemLocBase -> ID
-- On EOF reduce production MemLocBase -> ID
-- On CANON reduce production MemLocBase -> ID
-- On BIT_LEFT reduce production MemLocBase -> ID
-- On ALIAS reduce production MemLocBase -> ID

State 387:
## Known stack suffix:
## ID LBRACK
## LR(1) items:
MemLocBase -> ID LBRACK . Expr RBRACK [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON BIT_LEFT ALIAS ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 388
-- On Constant shift to state 76
## Reductions:

State 388:
## Known stack suffix:
## ID LBRACK Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PLUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . MINUS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . SLASH Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PERCENT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . DOUBLE_STAR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEFT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . RIGHT_SHIFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_LEFT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . ROTATE_RIGHT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GT Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . LEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . GEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . EQU Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . NEQ Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AMPERS Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . CIRC Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . PIPE Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . AND Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
Expr -> Expr . OR Expr [ STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RBRACK PLUS PIPE PERCENT OR NEQ MINUS LT LEQ LEFT_SHIFT GT GEQ EQU DOUBLE_STAR DOUBLE_COLON CIRC BIT_LEFT AND AMPERS ]
MemLocBase -> ID LBRACK Expr . RBRACK [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON BIT_LEFT ALIAS ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On RBRACK shift to state 389
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:

State 389:
## Known stack suffix:
## ID LBRACK Expr RBRACK
## LR(1) items:
MemLocBase -> ID LBRACK Expr RBRACK . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON BIT_LEFT ALIAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On VAR reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On USES reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On TYPE reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On RESOURCE reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On REG reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On PORTS reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On OP reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On MODE reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On MEM reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On LET reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On INITIALA reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On ID reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On EXTEND reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On EXCEPTION reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On EOF reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On CANON reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On BIT_LEFT reduce production MemLocBase -> ID LBRACK Expr RBRACK
-- On ALIAS reduce production MemLocBase -> ID LBRACK Expr RBRACK

State 390:
## Known stack suffix:
## ALIAS EQ MemLocation
## LR(1) items:
MemAttrDef -> ALIAS EQ MemLocation . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On VAR reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On USES reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On TYPE reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On RESOURCE reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On REG reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On PORTS reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On OP reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On MODE reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On MEM reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On LET reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On INITIALA reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On ID reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On EXTEND reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On EXCEPTION reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On EOF reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On CANON reduce production MemAttrDef -> ALIAS EQ MemLocation
-- On ALIAS reduce production MemAttrDef -> ALIAS EQ MemLocation

State 391:
## Known stack suffix:
## MemLocBase
## LR(1) items:
MemLocation -> MemLocBase . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
MemLocation -> MemLocBase . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On BIT_LEFT shift to state 392
## Reductions:
-- On VOLATILE reduce production MemLocation -> MemLocBase
-- On VAR reduce production MemLocation -> MemLocBase
-- On USES reduce production MemLocation -> MemLocBase
-- On TYPE reduce production MemLocation -> MemLocBase
-- On RESOURCE reduce production MemLocation -> MemLocBase
-- On REG reduce production MemLocation -> MemLocBase
-- On PORTS reduce production MemLocation -> MemLocBase
-- On OP reduce production MemLocation -> MemLocBase
-- On MODE reduce production MemLocation -> MemLocBase
-- On MEM reduce production MemLocation -> MemLocBase
-- On LET reduce production MemLocation -> MemLocBase
-- On INITIALA reduce production MemLocation -> MemLocBase
-- On ID reduce production MemLocation -> MemLocBase
-- On EXTEND reduce production MemLocation -> MemLocBase
-- On EXCEPTION reduce production MemLocation -> MemLocBase
-- On EOF reduce production MemLocation -> MemLocBase
-- On CANON reduce production MemLocation -> MemLocBase
-- On ALIAS reduce production MemLocation -> MemLocBase

State 392:
## Known stack suffix:
## MemLocBase BIT_LEFT
## LR(1) items:
MemLocation -> MemLocBase BIT_LEFT . Bit_Expr DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## MemLocBase BIT_LEFT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS DOUBLE_STAR DOUBLE_DOT CIRC AMPERS ]
MemLocation -> MemLocBase BIT_LEFT Bit_Expr . DOUBLE_DOT Bit_Expr GT [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On DOUBLE_STAR shift to state 52
-- On DOUBLE_DOT shift to state 394
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 394:
## Known stack suffix:
## MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT
## LR(1) items:
MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT . Bit_Expr GT [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On TILD shift to state 41
-- On STRING_CONST shift to state 42
-- On PLUS shift to state 43
-- On MINUS shift to state 44
-- On LPAREN shift to state 45
-- On ID shift to state 46
-- On FIXED_CONST shift to state 47
-- On CARD_CONST shift to state 48
-- On Bit_Expr shift to state 395
## Reductions:

State 395:
## Known stack suffix:
## MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr
## LR(1) items:
Bit_Expr -> Bit_Expr . PLUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . MINUS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . SLASH Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PERCENT Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . DOUBLE_STAR Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . AMPERS Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . PIPE Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
Bit_Expr -> Bit_Expr . CIRC Bit_Expr [ STAR SLASH PLUS PIPE PERCENT MINUS GT DOUBLE_STAR CIRC AMPERS ]
MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr . GT [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH shift to state 54
-- On PLUS shift to state 57
-- On PIPE shift to state 61
-- On PERCENT shift to state 59
-- On MINUS shift to state 63
-- On GT shift to state 396
-- On DOUBLE_STAR shift to state 52
-- On CIRC shift to state 65
-- On AMPERS shift to state 67
## Reductions:

State 396:
## Known stack suffix:
## MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
## LR(1) items:
MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On VAR reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On USES reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On TYPE reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On RESOURCE reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On REG reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On PORTS reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On OP reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On MODE reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On MEM reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On LET reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On INITIALA reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ID reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EXTEND reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EXCEPTION reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On EOF reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On CANON reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT
-- On ALIAS reduce production MemLocation -> MemLocBase BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT

State 397:
## Known stack suffix:
## REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
## LR(1) items:
RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On TYPE reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On RESOURCE reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On REG reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On OP reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On MODE reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On MEM reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On LET reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On EXTEND reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On EXCEPTION reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On EOF reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList
-- On CANON reduce production RegisterSpec -> REG LocatedID LBRACK RegPart RBRACK OptionalMemAttrDefList

State 398:
## Known stack suffix:
## MemAttrDefList
## LR(1) items:
MemAttrDefList -> MemAttrDefList . MemAttrDef [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
OptionalMemAttrDefList -> MemAttrDefList . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On VOLATILE shift to state 220
-- On USES shift to state 223
-- On PORTS shift to state 304
-- On INITIALA shift to state 309
-- On ID shift to state 312
-- On ALIAS shift to state 384
-- On MemAttrDef shift to state 399
## Reductions:
-- On VAR reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On TYPE reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On RESOURCE reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On REG reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On OP reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On MODE reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On MEM reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On LET reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On EXTEND reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On EXCEPTION reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On EOF reduce production OptionalMemAttrDefList -> MemAttrDefList
-- On CANON reduce production OptionalMemAttrDefList -> MemAttrDefList

State 399:
## Known stack suffix:
## MemAttrDefList MemAttrDef
## LR(1) items:
MemAttrDefList -> MemAttrDefList MemAttrDef . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On VAR reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On USES reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On TYPE reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On RESOURCE reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On REG reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On PORTS reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On OP reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On MODE reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On MEM reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On LET reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On INITIALA reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On ID reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On EXTEND reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On EXCEPTION reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On EOF reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On CANON reduce production MemAttrDefList -> MemAttrDefList MemAttrDef
-- On ALIAS reduce production MemAttrDefList -> MemAttrDefList MemAttrDef

State 400:
## Known stack suffix:
## MemAttrDef
## LR(1) items:
MemAttrDefList -> MemAttrDef . [ VOLATILE VAR USES TYPE RESOURCE REG PORTS OP MODE MEM LET INITIALA ID EXTEND EXCEPTION EOF CANON ALIAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production MemAttrDefList -> MemAttrDef
-- On VAR reduce production MemAttrDefList -> MemAttrDef
-- On USES reduce production MemAttrDefList -> MemAttrDef
-- On TYPE reduce production MemAttrDefList -> MemAttrDef
-- On RESOURCE reduce production MemAttrDefList -> MemAttrDef
-- On REG reduce production MemAttrDefList -> MemAttrDef
-- On PORTS reduce production MemAttrDefList -> MemAttrDef
-- On OP reduce production MemAttrDefList -> MemAttrDef
-- On MODE reduce production MemAttrDefList -> MemAttrDef
-- On MEM reduce production MemAttrDefList -> MemAttrDef
-- On LET reduce production MemAttrDefList -> MemAttrDef
-- On INITIALA reduce production MemAttrDefList -> MemAttrDef
-- On ID reduce production MemAttrDefList -> MemAttrDef
-- On EXTEND reduce production MemAttrDefList -> MemAttrDef
-- On EXCEPTION reduce production MemAttrDefList -> MemAttrDef
-- On EOF reduce production MemAttrDefList -> MemAttrDef
-- On CANON reduce production MemAttrDefList -> MemAttrDef
-- On ALIAS reduce production MemAttrDefList -> MemAttrDef

State 401:
## Known stack suffix:
## OP
## LR(1) items:
OpSpec -> OP . LocatedID LPAREN ParamList RPAREN AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
OpSpec -> OP . LocatedID EQ Identifier_Or_List [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 2
-- On LocatedID shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## OP LocatedID
## LR(1) items:
OpSpec -> OP LocatedID . LPAREN ParamList RPAREN AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
OpSpec -> OP LocatedID . EQ Identifier_Or_List [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On LPAREN shift to state 403
-- On EQ shift to state 439
## Reductions:

State 403:
## Known stack suffix:
## OP LocatedID LPAREN
## LR(1) items:
OpSpec -> OP LocatedID LPAREN . ParamList RPAREN AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 404
-- On ParamListPart shift to state 409
-- On ParamList shift to state 410
## Reductions:
-- On RPAREN reduce production ParamList ->
-- On COMMA reduce production ParamList ->

State 404:
## Known stack suffix:
## ID
## LR(1) items:
ParamListPart -> ID . COLON ParaType [ RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 405
## Reductions:

State 405:
## Known stack suffix:
## ID COLON
## LR(1) items:
ParamListPart -> ID COLON . ParaType [ RPAREN COMMA ]
## Transitions:
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On ID shift to state 406
-- On FLOAT shift to state 122
-- On FIX shift to state 128
-- On ENUM shift to state 134
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On TypeExpr shift to state 407
-- On ParaType shift to state 408
## Reductions:

State 406:
## Known stack suffix:
## ID
## LR(1) items:
ParaType -> ID . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production ParaType -> ID
-- On COMMA reduce production ParaType -> ID

State 407:
## Known stack suffix:
## TypeExpr
## LR(1) items:
ParaType -> TypeExpr . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production ParaType -> TypeExpr
-- On COMMA reduce production ParaType -> TypeExpr

State 408:
## Known stack suffix:
## ID COLON ParaType
## LR(1) items:
ParamListPart -> ID COLON ParaType . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production ParamListPart -> ID COLON ParaType
-- On COMMA reduce production ParamListPart -> ID COLON ParaType

State 409:
## Known stack suffix:
## ParamListPart
## LR(1) items:
ParamList -> ParamListPart . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production ParamList -> ParamListPart
-- On COMMA reduce production ParamList -> ParamListPart

State 410:
## Known stack suffix:
## OP LocatedID LPAREN ParamList
## LR(1) items:
OpSpec -> OP LocatedID LPAREN ParamList . RPAREN AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
ParamList -> ParamList . COMMA ParamListPart [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 411
-- On COMMA shift to state 437
## Reductions:

State 411:
## Known stack suffix:
## OP LocatedID LPAREN ParamList RPAREN
## LR(1) items:
OpSpec -> OP LocatedID LPAREN ParamList RPAREN . AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On USES shift to state 412
-- On SYNTAX shift to state 415
-- On IMAGE shift to state 419
-- On ID shift to state 422
-- On ACTION shift to state 428
-- On NOAttrDefList shift to state 433
-- On AttrDefList shift to state 435
-- On AttrDef shift to state 436
## Reductions:
-- On VAR reduce production AttrDefList ->
-- On TYPE reduce production AttrDefList ->
-- On RESOURCE reduce production AttrDefList ->
-- On REG reduce production AttrDefList ->
-- On OP reduce production AttrDefList ->
-- On MODE reduce production AttrDefList ->
-- On MEM reduce production AttrDefList ->
-- On LET reduce production AttrDefList ->
-- On EXTEND reduce production AttrDefList ->
-- On EXCEPTION reduce production AttrDefList ->
-- On EOF reduce production AttrDefList ->
-- On CANON reduce production AttrDefList ->

State 412:
## Known stack suffix:
## USES
## LR(1) items:
AttrDef -> USES . EQ UsesDef [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On EQ shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## USES EQ
## LR(1) items:
AttrDef -> USES EQ . UsesDef [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On LPAREN shift to state 225
-- On LBRACE shift to state 226
-- On IF shift to state 273
-- On ID shift to state 276
-- On UsesOrSequence shift to state 282
-- On UsesLocationList shift to state 279
-- On UsesLocation shift to state 271
-- On UsesIndirectAtom shift to state 284
-- On UsesIfAtom shift to state 288
-- On UsesDef shift to state 414
-- On UsesCondAtom shift to state 286
-- On UsesAndAtom shift to state 287
## Reductions:

State 414:
## Known stack suffix:
## USES EQ UsesDef
## LR(1) items:
AttrDef -> USES EQ UsesDef . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
UsesDef -> UsesDef . COMMA UsesOrSequence [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ACTION ]
## Transitions:
-- On COMMA shift to state 291
## Reductions:
-- On VAR reduce production AttrDef -> USES EQ UsesDef
-- On USES reduce production AttrDef -> USES EQ UsesDef
-- On TYPE reduce production AttrDef -> USES EQ UsesDef
-- On SYNTAX reduce production AttrDef -> USES EQ UsesDef
-- On RESOURCE reduce production AttrDef -> USES EQ UsesDef
-- On REG reduce production AttrDef -> USES EQ UsesDef
-- On OP reduce production AttrDef -> USES EQ UsesDef
-- On MODE reduce production AttrDef -> USES EQ UsesDef
-- On MEM reduce production AttrDef -> USES EQ UsesDef
-- On LET reduce production AttrDef -> USES EQ UsesDef
-- On IMAGE reduce production AttrDef -> USES EQ UsesDef
-- On ID reduce production AttrDef -> USES EQ UsesDef
-- On EXTEND reduce production AttrDef -> USES EQ UsesDef
-- On EXCEPTION reduce production AttrDef -> USES EQ UsesDef
-- On EOF reduce production AttrDef -> USES EQ UsesDef
-- On CANON reduce production AttrDef -> USES EQ UsesDef
-- On ACTION reduce production AttrDef -> USES EQ UsesDef

State 415:
## Known stack suffix:
## SYNTAX
## LR(1) items:
AttrDef -> SYNTAX . EQ AttrExpr [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On EQ shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## SYNTAX EQ
## LR(1) items:
AttrDef -> SYNTAX EQ . AttrExpr [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 417
-- On Constant shift to state 76
-- On AttrExpr shift to state 418
## Reductions:

State 417:
## Known stack suffix:
## Expr
## LR(1) items:
AttrExpr -> Expr . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
Expr -> Expr . DOUBLE_COLON Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . PLUS Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . MINUS Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . STAR Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . SLASH Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . PERCENT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . LT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . GT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . LEQ Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . GEQ Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . EQU Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . NEQ Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . AMPERS Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . CIRC Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . PIPE Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . AND Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . OR Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On VAR reduce production AttrExpr -> Expr
-- On USES reduce production AttrExpr -> Expr
-- On TYPE reduce production AttrExpr -> Expr
-- On SYNTAX reduce production AttrExpr -> Expr
-- On RESOURCE reduce production AttrExpr -> Expr
-- On REG reduce production AttrExpr -> Expr
-- On OP reduce production AttrExpr -> Expr
-- On MODE reduce production AttrExpr -> Expr
-- On MEM reduce production AttrExpr -> Expr
-- On LET reduce production AttrExpr -> Expr
-- On IMAGE reduce production AttrExpr -> Expr
-- On ID reduce production AttrExpr -> Expr
-- On EXTEND reduce production AttrExpr -> Expr
-- On EXCEPTION reduce production AttrExpr -> Expr
-- On EOF reduce production AttrExpr -> Expr
-- On CANON reduce production AttrExpr -> Expr
-- On ACTION reduce production AttrExpr -> Expr

State 418:
## Known stack suffix:
## SYNTAX EQ AttrExpr
## LR(1) items:
AttrDef -> SYNTAX EQ AttrExpr . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
## Reductions:
-- On VAR reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On USES reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On TYPE reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On SYNTAX reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On RESOURCE reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On REG reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On OP reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On MODE reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On MEM reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On LET reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On IMAGE reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On ID reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On EXTEND reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On EXCEPTION reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On EOF reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On CANON reduce production AttrDef -> SYNTAX EQ AttrExpr
-- On ACTION reduce production AttrDef -> SYNTAX EQ AttrExpr

State 419:
## Known stack suffix:
## IMAGE
## LR(1) items:
AttrDef -> IMAGE . EQ AttrExpr [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On EQ shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## IMAGE EQ
## LR(1) items:
AttrDef -> IMAGE EQ . AttrExpr [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 417
-- On Constant shift to state 76
-- On AttrExpr shift to state 421
## Reductions:

State 421:
## Known stack suffix:
## IMAGE EQ AttrExpr
## LR(1) items:
AttrDef -> IMAGE EQ AttrExpr . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
## Reductions:
-- On VAR reduce production AttrDef -> IMAGE EQ AttrExpr
-- On USES reduce production AttrDef -> IMAGE EQ AttrExpr
-- On TYPE reduce production AttrDef -> IMAGE EQ AttrExpr
-- On SYNTAX reduce production AttrDef -> IMAGE EQ AttrExpr
-- On RESOURCE reduce production AttrDef -> IMAGE EQ AttrExpr
-- On REG reduce production AttrDef -> IMAGE EQ AttrExpr
-- On OP reduce production AttrDef -> IMAGE EQ AttrExpr
-- On MODE reduce production AttrDef -> IMAGE EQ AttrExpr
-- On MEM reduce production AttrDef -> IMAGE EQ AttrExpr
-- On LET reduce production AttrDef -> IMAGE EQ AttrExpr
-- On IMAGE reduce production AttrDef -> IMAGE EQ AttrExpr
-- On ID reduce production AttrDef -> IMAGE EQ AttrExpr
-- On EXTEND reduce production AttrDef -> IMAGE EQ AttrExpr
-- On EXCEPTION reduce production AttrDef -> IMAGE EQ AttrExpr
-- On EOF reduce production AttrDef -> IMAGE EQ AttrExpr
-- On CANON reduce production AttrDef -> IMAGE EQ AttrExpr
-- On ACTION reduce production AttrDef -> IMAGE EQ AttrExpr

State 422:
## Known stack suffix:
## ID
## LR(1) items:
AttrDef -> ID . EQ Expr [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
AttrDef -> ID . EQ LBRACE Sequence RBRACE [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On EQ shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## ID EQ
## LR(1) items:
AttrDef -> ID EQ . Expr [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
AttrDef -> ID EQ . LBRACE Sequence RBRACE [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On LBRACE shift to state 424
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 427
-- On Constant shift to state 76
## Reductions:

State 424:
## Known stack suffix:
## ID EQ LBRACE
## LR(1) items:
AttrDef -> ID EQ LBRACE . Sequence RBRACE [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On SWITCH shift to state 315
-- On STRING_CONST shift to state 323
-- On IF shift to state 327
-- On ID shift to state 330
-- On ERROR shift to state 347
-- On ACTION shift to state 351
-- On StatementList shift to state 352
-- On Statement shift to state 362
-- On Sequence shift to state 425
-- On Location shift to state 355
-- On ConditionalStatement shift to state 361
## Reductions:
-- On SEMI reduce production Statement ->
-- On RBRACE reduce production Sequence ->

State 425:
## Known stack suffix:
## ID EQ LBRACE Sequence
## LR(1) items:
AttrDef -> ID EQ LBRACE Sequence . RBRACE [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On RBRACE shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## ID EQ LBRACE Sequence RBRACE
## LR(1) items:
AttrDef -> ID EQ LBRACE Sequence RBRACE . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
## Reductions:
-- On VAR reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On USES reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On TYPE reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On SYNTAX reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On RESOURCE reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On REG reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On OP reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On MODE reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On MEM reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On LET reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On IMAGE reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On ID reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On EXTEND reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On EXCEPTION reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On EOF reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On CANON reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE
-- On ACTION reduce production AttrDef -> ID EQ LBRACE Sequence RBRACE

State 427:
## Known stack suffix:
## ID EQ Expr
## LR(1) items:
AttrDef -> ID EQ Expr . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
Expr -> Expr . DOUBLE_COLON Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . PLUS Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . MINUS Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . STAR Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . SLASH Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . PERCENT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . LT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . GT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . LEQ Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . GEQ Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . EQU Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . NEQ Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . AMPERS Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . CIRC Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . PIPE Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . AND Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . OR Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On VAR reduce production AttrDef -> ID EQ Expr
-- On USES reduce production AttrDef -> ID EQ Expr
-- On TYPE reduce production AttrDef -> ID EQ Expr
-- On SYNTAX reduce production AttrDef -> ID EQ Expr
-- On RESOURCE reduce production AttrDef -> ID EQ Expr
-- On REG reduce production AttrDef -> ID EQ Expr
-- On OP reduce production AttrDef -> ID EQ Expr
-- On MODE reduce production AttrDef -> ID EQ Expr
-- On MEM reduce production AttrDef -> ID EQ Expr
-- On LET reduce production AttrDef -> ID EQ Expr
-- On IMAGE reduce production AttrDef -> ID EQ Expr
-- On ID reduce production AttrDef -> ID EQ Expr
-- On EXTEND reduce production AttrDef -> ID EQ Expr
-- On EXCEPTION reduce production AttrDef -> ID EQ Expr
-- On EOF reduce production AttrDef -> ID EQ Expr
-- On CANON reduce production AttrDef -> ID EQ Expr
-- On ACTION reduce production AttrDef -> ID EQ Expr

State 428:
## Known stack suffix:
## ACTION
## LR(1) items:
AttrDef -> ACTION . EQ LBRACE Sequence RBRACE [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On EQ shift to state 429
## Reductions:

State 429:
## Known stack suffix:
## ACTION EQ
## LR(1) items:
AttrDef -> ACTION EQ . LBRACE Sequence RBRACE [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On LBRACE shift to state 430
## Reductions:

State 430:
## Known stack suffix:
## ACTION EQ LBRACE
## LR(1) items:
AttrDef -> ACTION EQ LBRACE . Sequence RBRACE [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On SWITCH shift to state 315
-- On STRING_CONST shift to state 323
-- On IF shift to state 327
-- On ID shift to state 330
-- On ERROR shift to state 347
-- On ACTION shift to state 351
-- On StatementList shift to state 352
-- On Statement shift to state 362
-- On Sequence shift to state 431
-- On Location shift to state 355
-- On ConditionalStatement shift to state 361
## Reductions:
-- On SEMI reduce production Statement ->
-- On RBRACE reduce production Sequence ->

State 431:
## Known stack suffix:
## ACTION EQ LBRACE Sequence
## LR(1) items:
AttrDef -> ACTION EQ LBRACE Sequence . RBRACE [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On RBRACE shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## ACTION EQ LBRACE Sequence RBRACE
## LR(1) items:
AttrDef -> ACTION EQ LBRACE Sequence RBRACE . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
## Reductions:
-- On VAR reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On USES reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On TYPE reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On SYNTAX reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On RESOURCE reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On REG reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On OP reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On MODE reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On MEM reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On LET reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On IMAGE reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On ID reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On EXTEND reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On EXCEPTION reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On EOF reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On CANON reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE
-- On ACTION reduce production AttrDef -> ACTION EQ LBRACE Sequence RBRACE

State 433:
## Known stack suffix:
## NOAttrDefList
## LR(1) items:
AttrDefList -> NOAttrDefList . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
NOAttrDefList -> NOAttrDefList . AttrDef [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On USES shift to state 412
-- On SYNTAX shift to state 415
-- On IMAGE shift to state 419
-- On ID shift to state 422
-- On ACTION shift to state 428
-- On AttrDef shift to state 434
## Reductions:
-- On VAR reduce production AttrDefList -> NOAttrDefList
-- On TYPE reduce production AttrDefList -> NOAttrDefList
-- On RESOURCE reduce production AttrDefList -> NOAttrDefList
-- On REG reduce production AttrDefList -> NOAttrDefList
-- On OP reduce production AttrDefList -> NOAttrDefList
-- On MODE reduce production AttrDefList -> NOAttrDefList
-- On MEM reduce production AttrDefList -> NOAttrDefList
-- On LET reduce production AttrDefList -> NOAttrDefList
-- On EXTEND reduce production AttrDefList -> NOAttrDefList
-- On EXCEPTION reduce production AttrDefList -> NOAttrDefList
-- On EOF reduce production AttrDefList -> NOAttrDefList
-- On CANON reduce production AttrDefList -> NOAttrDefList

State 434:
## Known stack suffix:
## NOAttrDefList AttrDef
## LR(1) items:
NOAttrDefList -> NOAttrDefList AttrDef . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
## Reductions:
-- On VAR reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On USES reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On TYPE reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On SYNTAX reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On RESOURCE reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On REG reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On OP reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On MODE reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On MEM reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On LET reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On IMAGE reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On ID reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On EXTEND reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On EXCEPTION reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On EOF reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On CANON reduce production NOAttrDefList -> NOAttrDefList AttrDef
-- On ACTION reduce production NOAttrDefList -> NOAttrDefList AttrDef

State 435:
## Known stack suffix:
## OP LocatedID LPAREN ParamList RPAREN AttrDefList
## LR(1) items:
OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On TYPE reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On RESOURCE reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On REG reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On OP reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On MODE reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On MEM reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On LET reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On EXTEND reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On EXCEPTION reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On EOF reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList
-- On CANON reduce production OpSpec -> OP LocatedID LPAREN ParamList RPAREN AttrDefList

State 436:
## Known stack suffix:
## AttrDef
## LR(1) items:
NOAttrDefList -> AttrDef . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
## Reductions:
-- On VAR reduce production NOAttrDefList -> AttrDef
-- On USES reduce production NOAttrDefList -> AttrDef
-- On TYPE reduce production NOAttrDefList -> AttrDef
-- On SYNTAX reduce production NOAttrDefList -> AttrDef
-- On RESOURCE reduce production NOAttrDefList -> AttrDef
-- On REG reduce production NOAttrDefList -> AttrDef
-- On OP reduce production NOAttrDefList -> AttrDef
-- On MODE reduce production NOAttrDefList -> AttrDef
-- On MEM reduce production NOAttrDefList -> AttrDef
-- On LET reduce production NOAttrDefList -> AttrDef
-- On IMAGE reduce production NOAttrDefList -> AttrDef
-- On ID reduce production NOAttrDefList -> AttrDef
-- On EXTEND reduce production NOAttrDefList -> AttrDef
-- On EXCEPTION reduce production NOAttrDefList -> AttrDef
-- On EOF reduce production NOAttrDefList -> AttrDef
-- On CANON reduce production NOAttrDefList -> AttrDef
-- On ACTION reduce production NOAttrDefList -> AttrDef

State 437:
## Known stack suffix:
## ParamList COMMA
## LR(1) items:
ParamList -> ParamList COMMA . ParamListPart [ RPAREN COMMA ]
## Transitions:
-- On ID shift to state 404
-- On ParamListPart shift to state 438
## Reductions:

State 438:
## Known stack suffix:
## ParamList COMMA ParamListPart
## LR(1) items:
ParamList -> ParamList COMMA ParamListPart . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production ParamList -> ParamList COMMA ParamListPart
-- On COMMA reduce production ParamList -> ParamList COMMA ParamListPart

State 439:
## Known stack suffix:
## OP LocatedID EQ
## LR(1) items:
OpSpec -> OP LocatedID EQ . Identifier_Or_List [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 440
-- On Identifier_Or_List shift to state 441
## Reductions:

State 440:
## Known stack suffix:
## ID
## LR(1) items:
Identifier_Or_List -> ID . [ VAR TYPE RESOURCE REG PIPE OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production Identifier_Or_List -> ID
-- On TYPE reduce production Identifier_Or_List -> ID
-- On RESOURCE reduce production Identifier_Or_List -> ID
-- On REG reduce production Identifier_Or_List -> ID
-- On PIPE reduce production Identifier_Or_List -> ID
-- On OP reduce production Identifier_Or_List -> ID
-- On MODE reduce production Identifier_Or_List -> ID
-- On MEM reduce production Identifier_Or_List -> ID
-- On LET reduce production Identifier_Or_List -> ID
-- On EXTEND reduce production Identifier_Or_List -> ID
-- On EXCEPTION reduce production Identifier_Or_List -> ID
-- On EOF reduce production Identifier_Or_List -> ID
-- On CANON reduce production Identifier_Or_List -> ID

State 441:
## Known stack suffix:
## OP LocatedID EQ Identifier_Or_List
## LR(1) items:
Identifier_Or_List -> Identifier_Or_List . PIPE ID [ VAR TYPE RESOURCE REG PIPE OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
OpSpec -> OP LocatedID EQ Identifier_Or_List . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On PIPE shift to state 442
## Reductions:
-- On VAR reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On TYPE reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On RESOURCE reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On REG reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On OP reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On MODE reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On MEM reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On LET reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On EXTEND reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On EXCEPTION reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On EOF reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List
-- On CANON reduce production OpSpec -> OP LocatedID EQ Identifier_Or_List

State 442:
## Known stack suffix:
## Identifier_Or_List PIPE
## LR(1) items:
Identifier_Or_List -> Identifier_Or_List PIPE . ID [ VAR TYPE RESOURCE REG PIPE OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## Identifier_Or_List PIPE ID
## LR(1) items:
Identifier_Or_List -> Identifier_Or_List PIPE ID . [ VAR TYPE RESOURCE REG PIPE OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On TYPE reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On RESOURCE reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On REG reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On PIPE reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On OP reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On MODE reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On MEM reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On LET reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On EXTEND reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On EXCEPTION reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On EOF reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID
-- On CANON reduce production Identifier_Or_List -> Identifier_Or_List PIPE ID

State 444:
## Known stack suffix:
## MODE
## LR(1) items:
ModeSpec -> MODE . LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
ModeSpec -> MODE . LocatedID EQ Identifier_Or_List [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 2
-- On LocatedID shift to state 445
## Reductions:

State 445:
## Known stack suffix:
## MODE LocatedID
## LR(1) items:
ModeSpec -> MODE LocatedID . LPAREN ParamList RPAREN OptionalModeExpr AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
ModeSpec -> MODE LocatedID . EQ Identifier_Or_List [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On LPAREN shift to state 446
-- On EQ shift to state 453
## Reductions:

State 446:
## Known stack suffix:
## MODE LocatedID LPAREN
## LR(1) items:
ModeSpec -> MODE LocatedID LPAREN . ParamList RPAREN OptionalModeExpr AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 404
-- On ParamListPart shift to state 409
-- On ParamList shift to state 447
## Reductions:
-- On RPAREN reduce production ParamList ->
-- On COMMA reduce production ParamList ->

State 447:
## Known stack suffix:
## MODE LocatedID LPAREN ParamList
## LR(1) items:
ModeSpec -> MODE LocatedID LPAREN ParamList . RPAREN OptionalModeExpr AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
ParamList -> ParamList . COMMA ParamListPart [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 448
-- On COMMA shift to state 437
## Reductions:

State 448:
## Known stack suffix:
## MODE LocatedID LPAREN ParamList RPAREN
## LR(1) items:
ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN . OptionalModeExpr AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On EQ shift to state 449
-- On OptionalModeExpr shift to state 451
## Reductions:
-- On VAR reduce production OptionalModeExpr ->
-- On USES reduce production OptionalModeExpr ->
-- On TYPE reduce production OptionalModeExpr ->
-- On SYNTAX reduce production OptionalModeExpr ->
-- On RESOURCE reduce production OptionalModeExpr ->
-- On REG reduce production OptionalModeExpr ->
-- On OP reduce production OptionalModeExpr ->
-- On MODE reduce production OptionalModeExpr ->
-- On MEM reduce production OptionalModeExpr ->
-- On LET reduce production OptionalModeExpr ->
-- On IMAGE reduce production OptionalModeExpr ->
-- On ID reduce production OptionalModeExpr ->
-- On EXTEND reduce production OptionalModeExpr ->
-- On EXCEPTION reduce production OptionalModeExpr ->
-- On EOF reduce production OptionalModeExpr ->
-- On CANON reduce production OptionalModeExpr ->
-- On ACTION reduce production OptionalModeExpr ->

State 449:
## Known stack suffix:
## EQ
## LR(1) items:
OptionalModeExpr -> EQ . Expr [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On Expr shift to state 450
-- On Constant shift to state 76
## Reductions:

State 450:
## Known stack suffix:
## EQ Expr
## LR(1) items:
Expr -> Expr . DOUBLE_COLON Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . BIT_LEFT Bit_Expr DOUBLE_DOT Bit_Expr GT [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . PLUS Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . MINUS Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . STAR Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . SLASH Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . PERCENT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . DOUBLE_STAR Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . LEFT_SHIFT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . RIGHT_SHIFT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . ROTATE_LEFT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . ROTATE_RIGHT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . LT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . GT Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . LEQ Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . GEQ Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . EQU Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . NEQ Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . AMPERS Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . CIRC Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . PIPE Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . AND Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
Expr -> Expr . OR Expr [ VAR USES TYPE SYNTAX STAR SLASH ROTATE_RIGHT ROTATE_LEFT RIGHT_SHIFT RESOURCE REG PLUS PIPE PERCENT OR OP NEQ MODE MINUS MEM LT LET LEQ LEFT_SHIFT IMAGE ID GT GEQ EXTEND EXCEPTION EQU EOF DOUBLE_STAR DOUBLE_COLON CIRC CANON BIT_LEFT AND AMPERS ACTION ]
OptionalModeExpr -> EQ Expr . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On STAR shift to state 36
-- On SLASH shift to state 77
-- On ROTATE_RIGHT shift to state 79
-- On ROTATE_LEFT shift to state 87
-- On RIGHT_SHIFT shift to state 89
-- On PLUS shift to state 81
-- On PIPE shift to state 91
-- On PERCENT shift to state 83
-- On OR shift to state 111
-- On NEQ shift to state 93
-- On MINUS shift to state 85
-- On LT shift to state 95
-- On LEQ shift to state 99
-- On LEFT_SHIFT shift to state 97
-- On GT shift to state 101
-- On GEQ shift to state 103
-- On EQU shift to state 105
-- On DOUBLE_STAR shift to state 38
-- On DOUBLE_COLON shift to state 115
-- On CIRC shift to state 107
-- On BIT_LEFT shift to state 40
-- On AND shift to state 113
-- On AMPERS shift to state 109
## Reductions:
-- On VAR reduce production OptionalModeExpr -> EQ Expr
-- On USES reduce production OptionalModeExpr -> EQ Expr
-- On TYPE reduce production OptionalModeExpr -> EQ Expr
-- On SYNTAX reduce production OptionalModeExpr -> EQ Expr
-- On RESOURCE reduce production OptionalModeExpr -> EQ Expr
-- On REG reduce production OptionalModeExpr -> EQ Expr
-- On OP reduce production OptionalModeExpr -> EQ Expr
-- On MODE reduce production OptionalModeExpr -> EQ Expr
-- On MEM reduce production OptionalModeExpr -> EQ Expr
-- On LET reduce production OptionalModeExpr -> EQ Expr
-- On IMAGE reduce production OptionalModeExpr -> EQ Expr
-- On ID reduce production OptionalModeExpr -> EQ Expr
-- On EXTEND reduce production OptionalModeExpr -> EQ Expr
-- On EXCEPTION reduce production OptionalModeExpr -> EQ Expr
-- On EOF reduce production OptionalModeExpr -> EQ Expr
-- On CANON reduce production OptionalModeExpr -> EQ Expr
-- On ACTION reduce production OptionalModeExpr -> EQ Expr

State 451:
## Known stack suffix:
## MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr
## LR(1) items:
ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr . AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On USES shift to state 412
-- On SYNTAX shift to state 415
-- On IMAGE shift to state 419
-- On ID shift to state 422
-- On ACTION shift to state 428
-- On NOAttrDefList shift to state 433
-- On AttrDefList shift to state 452
-- On AttrDef shift to state 436
## Reductions:
-- On VAR reduce production AttrDefList ->
-- On TYPE reduce production AttrDefList ->
-- On RESOURCE reduce production AttrDefList ->
-- On REG reduce production AttrDefList ->
-- On OP reduce production AttrDefList ->
-- On MODE reduce production AttrDefList ->
-- On MEM reduce production AttrDefList ->
-- On LET reduce production AttrDefList ->
-- On EXTEND reduce production AttrDefList ->
-- On EXCEPTION reduce production AttrDefList ->
-- On EOF reduce production AttrDefList ->
-- On CANON reduce production AttrDefList ->

State 452:
## Known stack suffix:
## MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
## LR(1) items:
ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On TYPE reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On RESOURCE reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On REG reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On OP reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On MODE reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On MEM reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On LET reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On EXTEND reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On EXCEPTION reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On EOF reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList
-- On CANON reduce production ModeSpec -> MODE LocatedID LPAREN ParamList RPAREN OptionalModeExpr AttrDefList

State 453:
## Known stack suffix:
## MODE LocatedID EQ
## LR(1) items:
ModeSpec -> MODE LocatedID EQ . Identifier_Or_List [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 440
-- On Identifier_Or_List shift to state 454
## Reductions:

State 454:
## Known stack suffix:
## MODE LocatedID EQ Identifier_Or_List
## LR(1) items:
Identifier_Or_List -> Identifier_Or_List . PIPE ID [ VAR TYPE RESOURCE REG PIPE OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
ModeSpec -> MODE LocatedID EQ Identifier_Or_List . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On PIPE shift to state 442
## Reductions:
-- On VAR reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On TYPE reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On RESOURCE reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On REG reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On OP reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On MODE reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On MEM reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On LET reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On EXTEND reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On EXCEPTION reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On EOF reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List
-- On CANON reduce production ModeSpec -> MODE LocatedID EQ Identifier_Or_List

State 455:
## Known stack suffix:
## MEM
## LR(1) items:
MemorySpec -> MEM . LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 2
-- On LocatedID shift to state 456
## Reductions:

State 456:
## Known stack suffix:
## MEM LocatedID
## LR(1) items:
MemorySpec -> MEM LocatedID . LBRACK MemPart RBRACK OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On LBRACK shift to state 457
## Reductions:

State 457:
## Known stack suffix:
## MEM LocatedID LBRACK
## LR(1) items:
MemorySpec -> MEM LocatedID LBRACK . MemPart RBRACK OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On MemPart shift to state 458
-- On LetExpr shift to state 461
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 458:
## Known stack suffix:
## MEM LocatedID LBRACK MemPart
## LR(1) items:
MemorySpec -> MEM LocatedID LBRACK MemPart . RBRACK OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On RBRACK shift to state 459
## Reductions:

State 459:
## Known stack suffix:
## MEM LocatedID LBRACK MemPart RBRACK
## LR(1) items:
MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK . OptionalMemAttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On VOLATILE shift to state 220
-- On USES shift to state 223
-- On PORTS shift to state 304
-- On INITIALA shift to state 309
-- On ID shift to state 312
-- On ALIAS shift to state 384
-- On OptionalMemAttrDefList shift to state 460
-- On MemAttrDefList shift to state 398
-- On MemAttrDef shift to state 400
## Reductions:
-- On VAR reduce production OptionalMemAttrDefList ->
-- On TYPE reduce production OptionalMemAttrDefList ->
-- On RESOURCE reduce production OptionalMemAttrDefList ->
-- On REG reduce production OptionalMemAttrDefList ->
-- On OP reduce production OptionalMemAttrDefList ->
-- On MODE reduce production OptionalMemAttrDefList ->
-- On MEM reduce production OptionalMemAttrDefList ->
-- On LET reduce production OptionalMemAttrDefList ->
-- On EXTEND reduce production OptionalMemAttrDefList ->
-- On EXCEPTION reduce production OptionalMemAttrDefList ->
-- On EOF reduce production OptionalMemAttrDefList ->
-- On CANON reduce production OptionalMemAttrDefList ->

State 460:
## Known stack suffix:
## MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
## LR(1) items:
MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On TYPE reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On RESOURCE reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On REG reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On OP reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On MODE reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On MEM reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On LET reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On EXTEND reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On EXCEPTION reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On EOF reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList
-- On CANON reduce production MemorySpec -> MEM LocatedID LBRACK MemPart RBRACK OptionalMemAttrDefList

State 461:
## Known stack suffix:
## LetExpr
## LR(1) items:
MemPart -> LetExpr . COMMA Type [ RBRACK ]
MemPart -> LetExpr . [ RBRACK ]
## Transitions:
-- On COMMA shift to state 462
## Reductions:
-- On RBRACK reduce production MemPart -> LetExpr

State 462:
## Known stack suffix:
## LetExpr COMMA
## LR(1) items:
MemPart -> LetExpr COMMA . Type [ RBRACK ]
## Transitions:
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On ID shift to state 121
-- On FLOAT shift to state 122
-- On FIX shift to state 128
-- On ENUM shift to state 134
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On TypeExpr shift to state 146
-- On Type shift to state 463
## Reductions:

State 463:
## Known stack suffix:
## LetExpr COMMA Type
## LR(1) items:
MemPart -> LetExpr COMMA Type . [ RBRACK ]
## Transitions:
## Reductions:
-- On RBRACK reduce production MemPart -> LetExpr COMMA Type

State 464:
## Known stack suffix:
## LET
## LR(1) items:
LetDef -> LET . LocatedID EQ LetExpr [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 2
-- On LocatedID shift to state 465
## Reductions:

State 465:
## Known stack suffix:
## LET LocatedID
## LR(1) items:
LetDef -> LET LocatedID . EQ LetExpr [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On EQ shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## LET LocatedID EQ
## LR(1) items:
LetDef -> LET LocatedID EQ . LetExpr [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On TILD shift to state 5
-- On SWITCH shift to state 6
-- On STRING_CONST shift to state 8
-- On PLUS shift to state 10
-- On MINUS shift to state 11
-- On LPAREN shift to state 12
-- On IF shift to state 13
-- On ID shift to state 14
-- On FORMAT shift to state 16
-- On FIXED_CONST shift to state 20
-- On EXCLAM shift to state 21
-- On COERCE shift to state 22
-- On CARD_CONST_64 shift to state 25
-- On CARD_CONST shift to state 26
-- On BIN_CONST_64 shift to state 27
-- On BIN_CONST shift to state 28
-- On AROBAS shift to state 29
-- On LetExpr shift to state 467
-- On Expr shift to state 35
-- On Constant shift to state 76
## Reductions:

State 467:
## Known stack suffix:
## LET LocatedID EQ LetExpr
## LR(1) items:
LetDef -> LET LocatedID EQ LetExpr . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production LetDef -> LET LocatedID EQ LetExpr
-- On TYPE reduce production LetDef -> LET LocatedID EQ LetExpr
-- On RESOURCE reduce production LetDef -> LET LocatedID EQ LetExpr
-- On REG reduce production LetDef -> LET LocatedID EQ LetExpr
-- On OP reduce production LetDef -> LET LocatedID EQ LetExpr
-- On MODE reduce production LetDef -> LET LocatedID EQ LetExpr
-- On MEM reduce production LetDef -> LET LocatedID EQ LetExpr
-- On LET reduce production LetDef -> LET LocatedID EQ LetExpr
-- On EXTEND reduce production LetDef -> LET LocatedID EQ LetExpr
-- On EXCEPTION reduce production LetDef -> LET LocatedID EQ LetExpr
-- On EOF reduce production LetDef -> LET LocatedID EQ LetExpr
-- On CANON reduce production LetDef -> LET LocatedID EQ LetExpr

State 468:
## Known stack suffix:
## EXTEND
## LR(1) items:
ExtendHeader -> EXTEND . ExtendIDList [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
## Transitions:
-- On ID shift to state 469
-- On ExtendIDList shift to state 470
## Reductions:

State 469:
## Known stack suffix:
## ID
## LR(1) items:
ExtendIDList -> ID . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ACTION ]
## Transitions:
## Reductions:
-- On VAR reduce production ExtendIDList -> ID
-- On USES reduce production ExtendIDList -> ID
-- On TYPE reduce production ExtendIDList -> ID
-- On SYNTAX reduce production ExtendIDList -> ID
-- On RESOURCE reduce production ExtendIDList -> ID
-- On REG reduce production ExtendIDList -> ID
-- On OP reduce production ExtendIDList -> ID
-- On MODE reduce production ExtendIDList -> ID
-- On MEM reduce production ExtendIDList -> ID
-- On LET reduce production ExtendIDList -> ID
-- On IMAGE reduce production ExtendIDList -> ID
-- On ID reduce production ExtendIDList -> ID
-- On EXTEND reduce production ExtendIDList -> ID
-- On EXCEPTION reduce production ExtendIDList -> ID
-- On EOF reduce production ExtendIDList -> ID
-- On COMMA reduce production ExtendIDList -> ID
-- On CANON reduce production ExtendIDList -> ID
-- On ACTION reduce production ExtendIDList -> ID

State 470:
## Known stack suffix:
## EXTEND ExtendIDList
## LR(1) items:
ExtendHeader -> EXTEND ExtendIDList . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF CANON ACTION ]
ExtendIDList -> ExtendIDList . COMMA ID [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ACTION ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On VAR reduce production ExtendHeader -> EXTEND ExtendIDList
-- On USES reduce production ExtendHeader -> EXTEND ExtendIDList
-- On TYPE reduce production ExtendHeader -> EXTEND ExtendIDList
-- On SYNTAX reduce production ExtendHeader -> EXTEND ExtendIDList
-- On RESOURCE reduce production ExtendHeader -> EXTEND ExtendIDList
-- On REG reduce production ExtendHeader -> EXTEND ExtendIDList
-- On OP reduce production ExtendHeader -> EXTEND ExtendIDList
-- On MODE reduce production ExtendHeader -> EXTEND ExtendIDList
-- On MEM reduce production ExtendHeader -> EXTEND ExtendIDList
-- On LET reduce production ExtendHeader -> EXTEND ExtendIDList
-- On IMAGE reduce production ExtendHeader -> EXTEND ExtendIDList
-- On ID reduce production ExtendHeader -> EXTEND ExtendIDList
-- On EXTEND reduce production ExtendHeader -> EXTEND ExtendIDList
-- On EXCEPTION reduce production ExtendHeader -> EXTEND ExtendIDList
-- On EOF reduce production ExtendHeader -> EXTEND ExtendIDList
-- On CANON reduce production ExtendHeader -> EXTEND ExtendIDList
-- On ACTION reduce production ExtendHeader -> EXTEND ExtendIDList

State 471:
## Known stack suffix:
## ExtendIDList COMMA
## LR(1) items:
ExtendIDList -> ExtendIDList COMMA . ID [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ACTION ]
## Transitions:
-- On ID shift to state 472
## Reductions:

State 472:
## Known stack suffix:
## ExtendIDList COMMA ID
## LR(1) items:
ExtendIDList -> ExtendIDList COMMA ID . [ VAR USES TYPE SYNTAX RESOURCE REG OP MODE MEM LET IMAGE ID EXTEND EXCEPTION EOF COMMA CANON ACTION ]
## Transitions:
## Reductions:
-- On VAR reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On USES reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On TYPE reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On SYNTAX reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On RESOURCE reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On REG reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On OP reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On MODE reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On MEM reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On LET reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On IMAGE reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On ID reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On EXTEND reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On EXCEPTION reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On EOF reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On COMMA reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On CANON reduce production ExtendIDList -> ExtendIDList COMMA ID
-- On ACTION reduce production ExtendIDList -> ExtendIDList COMMA ID

State 473:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
ExceptionSpec -> EXCEPTION . IdentifierList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On ID shift to state 136
-- On IdentifierList shift to state 474
## Reductions:

State 474:
## Known stack suffix:
## EXCEPTION IdentifierList
## LR(1) items:
ExceptionSpec -> EXCEPTION IdentifierList . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
IdentifierList -> IdentifierList . COMMA ID [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF COMMA CANON ]
## Transitions:
-- On COMMA shift to state 139
## Reductions:
-- On VAR reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On TYPE reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On RESOURCE reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On REG reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On OP reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On MODE reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On MEM reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On LET reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On EXTEND reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On EXCEPTION reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On EOF reduce production ExceptionSpec -> EXCEPTION IdentifierList
-- On CANON reduce production ExceptionSpec -> EXCEPTION IdentifierList

State 475:
## Known stack suffix:
## CANON
## LR(1) items:
CanonSpec -> CANON . STRING_CONST LPAREN TypeList RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON . Type STRING_CONST LPAREN TypeList RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON . STRING_CONST LPAREN RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON . Type STRING_CONST LPAREN RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON . Type STRING_CONST [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On STRING_CONST shift to state 476
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On ID shift to state 121
-- On FLOAT shift to state 122
-- On FIX shift to state 128
-- On ENUM shift to state 134
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On TypeExpr shift to state 146
-- On Type shift to state 484
## Reductions:

State 476:
## Known stack suffix:
## CANON STRING_CONST
## LR(1) items:
CanonSpec -> CANON STRING_CONST . LPAREN TypeList RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON STRING_CONST . LPAREN RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On LPAREN shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## CANON STRING_CONST LPAREN
## LR(1) items:
CanonSpec -> CANON STRING_CONST LPAREN . TypeList RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON STRING_CONST LPAREN . RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On RPAREN shift to state 478
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On ID shift to state 121
-- On FLOAT shift to state 122
-- On FIX shift to state 128
-- On ENUM shift to state 134
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On TypeList shift to state 479
-- On TypeExpr shift to state 146
-- On Type shift to state 483
## Reductions:

State 478:
## Known stack suffix:
## CANON STRING_CONST LPAREN RPAREN
## LR(1) items:
CanonSpec -> CANON STRING_CONST LPAREN RPAREN . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On TYPE reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On RESOURCE reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On REG reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On OP reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On MODE reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On MEM reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On LET reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On EXTEND reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On EXCEPTION reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On EOF reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN
-- On CANON reduce production CanonSpec -> CANON STRING_CONST LPAREN RPAREN

State 479:
## Known stack suffix:
## CANON STRING_CONST LPAREN TypeList
## LR(1) items:
CanonSpec -> CANON STRING_CONST LPAREN TypeList . RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
TypeList -> TypeList . COMMA Type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 480
-- On COMMA shift to state 481
## Reductions:

State 480:
## Known stack suffix:
## CANON STRING_CONST LPAREN TypeList RPAREN
## LR(1) items:
CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On TYPE reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On RESOURCE reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On REG reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On OP reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On MODE reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On MEM reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On LET reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On EXTEND reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On EXCEPTION reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On EOF reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN
-- On CANON reduce production CanonSpec -> CANON STRING_CONST LPAREN TypeList RPAREN

State 481:
## Known stack suffix:
## TypeList COMMA
## LR(1) items:
TypeList -> TypeList COMMA . Type [ RPAREN COMMA ]
## Transitions:
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On ID shift to state 121
-- On FLOAT shift to state 122
-- On FIX shift to state 128
-- On ENUM shift to state 134
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On TypeExpr shift to state 146
-- On Type shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## TypeList COMMA Type
## LR(1) items:
TypeList -> TypeList COMMA Type . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production TypeList -> TypeList COMMA Type
-- On COMMA reduce production TypeList -> TypeList COMMA Type

State 483:
## Known stack suffix:
## Type
## LR(1) items:
TypeList -> Type . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production TypeList -> Type
-- On COMMA reduce production TypeList -> Type

State 484:
## Known stack suffix:
## CANON Type
## LR(1) items:
CanonSpec -> CANON Type . STRING_CONST LPAREN TypeList RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON Type . STRING_CONST LPAREN RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON Type . STRING_CONST [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On STRING_CONST shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## CANON Type STRING_CONST
## LR(1) items:
CanonSpec -> CANON Type STRING_CONST . LPAREN TypeList RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON Type STRING_CONST . LPAREN RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON Type STRING_CONST . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On LPAREN shift to state 486
## Reductions:
-- On VAR reduce production CanonSpec -> CANON Type STRING_CONST
-- On TYPE reduce production CanonSpec -> CANON Type STRING_CONST
-- On RESOURCE reduce production CanonSpec -> CANON Type STRING_CONST
-- On REG reduce production CanonSpec -> CANON Type STRING_CONST
-- On OP reduce production CanonSpec -> CANON Type STRING_CONST
-- On MODE reduce production CanonSpec -> CANON Type STRING_CONST
-- On MEM reduce production CanonSpec -> CANON Type STRING_CONST
-- On LET reduce production CanonSpec -> CANON Type STRING_CONST
-- On EXTEND reduce production CanonSpec -> CANON Type STRING_CONST
-- On EXCEPTION reduce production CanonSpec -> CANON Type STRING_CONST
-- On EOF reduce production CanonSpec -> CANON Type STRING_CONST
-- On CANON reduce production CanonSpec -> CANON Type STRING_CONST

State 486:
## Known stack suffix:
## CANON Type STRING_CONST LPAREN
## LR(1) items:
CanonSpec -> CANON Type STRING_CONST LPAREN . TypeList RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
CanonSpec -> CANON Type STRING_CONST LPAREN . RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On RPAREN shift to state 487
-- On LBRACK shift to state 24
-- On INT shift to state 117
-- On ID shift to state 121
-- On FLOAT shift to state 122
-- On FIX shift to state 128
-- On ENUM shift to state 134
-- On CARD shift to state 141
-- On BOOL shift to state 145
-- On TypeList shift to state 488
-- On TypeExpr shift to state 146
-- On Type shift to state 483
## Reductions:

State 487:
## Known stack suffix:
## CANON Type STRING_CONST LPAREN RPAREN
## LR(1) items:
CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On TYPE reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On RESOURCE reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On REG reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On OP reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On MODE reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On MEM reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On LET reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On EXTEND reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On EXCEPTION reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On EOF reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN
-- On CANON reduce production CanonSpec -> CANON Type STRING_CONST LPAREN RPAREN

State 488:
## Known stack suffix:
## CANON Type STRING_CONST LPAREN TypeList
## LR(1) items:
CanonSpec -> CANON Type STRING_CONST LPAREN TypeList . RPAREN [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
TypeList -> TypeList . COMMA Type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 489
-- On COMMA shift to state 481
## Reductions:

State 489:
## Known stack suffix:
## CANON Type STRING_CONST LPAREN TypeList RPAREN
## LR(1) items:
CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On TYPE reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On RESOURCE reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On REG reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On OP reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On MODE reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On MEM reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On LET reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On EXTEND reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On EXCEPTION reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On EOF reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN
-- On CANON reduce production CanonSpec -> CANON Type STRING_CONST LPAREN TypeList RPAREN

State 490:
## Known stack suffix:
## top
## LR(1) items:
top' -> top . [ # ]
## Transitions:
## Reductions:
-- On # accept top

State 491:
## Known stack suffix:
## specs
## LR(1) items:
specs -> specs . MachineSpec [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
top -> specs . EOF [ # ]
## Transitions:
-- On VAR shift to state 1
-- On TYPE shift to state 202
-- On RESOURCE shift to state 206
-- On REG shift to state 215
-- On OP shift to state 401
-- On MODE shift to state 444
-- On MEM shift to state 455
-- On LET shift to state 464
-- On EXTEND shift to state 468
-- On EXCEPTION shift to state 473
-- On EOF shift to state 492
-- On CANON shift to state 475
-- On VarSpec shift to state 493
-- On TypeSpec shift to state 494
-- On ResourceSpec shift to state 495
-- On RegisterSpec shift to state 496
-- On OpSpec shift to state 497
-- On ModeSpec shift to state 498
-- On MemorySpec shift to state 499
-- On MachineSpec shift to state 500
-- On LetDef shift to state 501
-- On ExtendSpec shift to state 502
-- On ExtendHeader shift to state 503
-- On ExceptionSpec shift to state 505
-- On CanonSpec shift to state 506
## Reductions:

State 492:
## Known stack suffix:
## specs EOF
## LR(1) items:
top -> specs EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production top -> specs EOF

State 493:
## Known stack suffix:
## VarSpec
## LR(1) items:
MachineSpec -> VarSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> VarSpec
-- On TYPE reduce production MachineSpec -> VarSpec
-- On RESOURCE reduce production MachineSpec -> VarSpec
-- On REG reduce production MachineSpec -> VarSpec
-- On OP reduce production MachineSpec -> VarSpec
-- On MODE reduce production MachineSpec -> VarSpec
-- On MEM reduce production MachineSpec -> VarSpec
-- On LET reduce production MachineSpec -> VarSpec
-- On EXTEND reduce production MachineSpec -> VarSpec
-- On EXCEPTION reduce production MachineSpec -> VarSpec
-- On EOF reduce production MachineSpec -> VarSpec
-- On CANON reduce production MachineSpec -> VarSpec

State 494:
## Known stack suffix:
## TypeSpec
## LR(1) items:
MachineSpec -> TypeSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> TypeSpec
-- On TYPE reduce production MachineSpec -> TypeSpec
-- On RESOURCE reduce production MachineSpec -> TypeSpec
-- On REG reduce production MachineSpec -> TypeSpec
-- On OP reduce production MachineSpec -> TypeSpec
-- On MODE reduce production MachineSpec -> TypeSpec
-- On MEM reduce production MachineSpec -> TypeSpec
-- On LET reduce production MachineSpec -> TypeSpec
-- On EXTEND reduce production MachineSpec -> TypeSpec
-- On EXCEPTION reduce production MachineSpec -> TypeSpec
-- On EOF reduce production MachineSpec -> TypeSpec
-- On CANON reduce production MachineSpec -> TypeSpec

State 495:
## Known stack suffix:
## ResourceSpec
## LR(1) items:
MachineSpec -> ResourceSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> ResourceSpec
-- On TYPE reduce production MachineSpec -> ResourceSpec
-- On RESOURCE reduce production MachineSpec -> ResourceSpec
-- On REG reduce production MachineSpec -> ResourceSpec
-- On OP reduce production MachineSpec -> ResourceSpec
-- On MODE reduce production MachineSpec -> ResourceSpec
-- On MEM reduce production MachineSpec -> ResourceSpec
-- On LET reduce production MachineSpec -> ResourceSpec
-- On EXTEND reduce production MachineSpec -> ResourceSpec
-- On EXCEPTION reduce production MachineSpec -> ResourceSpec
-- On EOF reduce production MachineSpec -> ResourceSpec
-- On CANON reduce production MachineSpec -> ResourceSpec

State 496:
## Known stack suffix:
## RegisterSpec
## LR(1) items:
MachineSpec -> RegisterSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> RegisterSpec
-- On TYPE reduce production MachineSpec -> RegisterSpec
-- On RESOURCE reduce production MachineSpec -> RegisterSpec
-- On REG reduce production MachineSpec -> RegisterSpec
-- On OP reduce production MachineSpec -> RegisterSpec
-- On MODE reduce production MachineSpec -> RegisterSpec
-- On MEM reduce production MachineSpec -> RegisterSpec
-- On LET reduce production MachineSpec -> RegisterSpec
-- On EXTEND reduce production MachineSpec -> RegisterSpec
-- On EXCEPTION reduce production MachineSpec -> RegisterSpec
-- On EOF reduce production MachineSpec -> RegisterSpec
-- On CANON reduce production MachineSpec -> RegisterSpec

State 497:
## Known stack suffix:
## OpSpec
## LR(1) items:
MachineSpec -> OpSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> OpSpec
-- On TYPE reduce production MachineSpec -> OpSpec
-- On RESOURCE reduce production MachineSpec -> OpSpec
-- On REG reduce production MachineSpec -> OpSpec
-- On OP reduce production MachineSpec -> OpSpec
-- On MODE reduce production MachineSpec -> OpSpec
-- On MEM reduce production MachineSpec -> OpSpec
-- On LET reduce production MachineSpec -> OpSpec
-- On EXTEND reduce production MachineSpec -> OpSpec
-- On EXCEPTION reduce production MachineSpec -> OpSpec
-- On EOF reduce production MachineSpec -> OpSpec
-- On CANON reduce production MachineSpec -> OpSpec

State 498:
## Known stack suffix:
## ModeSpec
## LR(1) items:
MachineSpec -> ModeSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> ModeSpec
-- On TYPE reduce production MachineSpec -> ModeSpec
-- On RESOURCE reduce production MachineSpec -> ModeSpec
-- On REG reduce production MachineSpec -> ModeSpec
-- On OP reduce production MachineSpec -> ModeSpec
-- On MODE reduce production MachineSpec -> ModeSpec
-- On MEM reduce production MachineSpec -> ModeSpec
-- On LET reduce production MachineSpec -> ModeSpec
-- On EXTEND reduce production MachineSpec -> ModeSpec
-- On EXCEPTION reduce production MachineSpec -> ModeSpec
-- On EOF reduce production MachineSpec -> ModeSpec
-- On CANON reduce production MachineSpec -> ModeSpec

State 499:
## Known stack suffix:
## MemorySpec
## LR(1) items:
MachineSpec -> MemorySpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> MemorySpec
-- On TYPE reduce production MachineSpec -> MemorySpec
-- On RESOURCE reduce production MachineSpec -> MemorySpec
-- On REG reduce production MachineSpec -> MemorySpec
-- On OP reduce production MachineSpec -> MemorySpec
-- On MODE reduce production MachineSpec -> MemorySpec
-- On MEM reduce production MachineSpec -> MemorySpec
-- On LET reduce production MachineSpec -> MemorySpec
-- On EXTEND reduce production MachineSpec -> MemorySpec
-- On EXCEPTION reduce production MachineSpec -> MemorySpec
-- On EOF reduce production MachineSpec -> MemorySpec
-- On CANON reduce production MachineSpec -> MemorySpec

State 500:
## Known stack suffix:
## specs MachineSpec
## LR(1) items:
specs -> specs MachineSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production specs -> specs MachineSpec
-- On TYPE reduce production specs -> specs MachineSpec
-- On RESOURCE reduce production specs -> specs MachineSpec
-- On REG reduce production specs -> specs MachineSpec
-- On OP reduce production specs -> specs MachineSpec
-- On MODE reduce production specs -> specs MachineSpec
-- On MEM reduce production specs -> specs MachineSpec
-- On LET reduce production specs -> specs MachineSpec
-- On EXTEND reduce production specs -> specs MachineSpec
-- On EXCEPTION reduce production specs -> specs MachineSpec
-- On EOF reduce production specs -> specs MachineSpec
-- On CANON reduce production specs -> specs MachineSpec

State 501:
## Known stack suffix:
## LetDef
## LR(1) items:
MachineSpec -> LetDef . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> LetDef
-- On TYPE reduce production MachineSpec -> LetDef
-- On RESOURCE reduce production MachineSpec -> LetDef
-- On REG reduce production MachineSpec -> LetDef
-- On OP reduce production MachineSpec -> LetDef
-- On MODE reduce production MachineSpec -> LetDef
-- On MEM reduce production MachineSpec -> LetDef
-- On LET reduce production MachineSpec -> LetDef
-- On EXTEND reduce production MachineSpec -> LetDef
-- On EXCEPTION reduce production MachineSpec -> LetDef
-- On EOF reduce production MachineSpec -> LetDef
-- On CANON reduce production MachineSpec -> LetDef

State 502:
## Known stack suffix:
## ExtendSpec
## LR(1) items:
MachineSpec -> ExtendSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> ExtendSpec
-- On TYPE reduce production MachineSpec -> ExtendSpec
-- On RESOURCE reduce production MachineSpec -> ExtendSpec
-- On REG reduce production MachineSpec -> ExtendSpec
-- On OP reduce production MachineSpec -> ExtendSpec
-- On MODE reduce production MachineSpec -> ExtendSpec
-- On MEM reduce production MachineSpec -> ExtendSpec
-- On LET reduce production MachineSpec -> ExtendSpec
-- On EXTEND reduce production MachineSpec -> ExtendSpec
-- On EXCEPTION reduce production MachineSpec -> ExtendSpec
-- On EOF reduce production MachineSpec -> ExtendSpec
-- On CANON reduce production MachineSpec -> ExtendSpec

State 503:
## Known stack suffix:
## ExtendHeader
## LR(1) items:
ExtendSpec -> ExtendHeader . AttrDefList [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
-- On USES shift to state 412
-- On SYNTAX shift to state 415
-- On IMAGE shift to state 419
-- On ID shift to state 422
-- On ACTION shift to state 428
-- On NOAttrDefList shift to state 433
-- On AttrDefList shift to state 504
-- On AttrDef shift to state 436
## Reductions:
-- On VAR reduce production AttrDefList ->
-- On TYPE reduce production AttrDefList ->
-- On RESOURCE reduce production AttrDefList ->
-- On REG reduce production AttrDefList ->
-- On OP reduce production AttrDefList ->
-- On MODE reduce production AttrDefList ->
-- On MEM reduce production AttrDefList ->
-- On LET reduce production AttrDefList ->
-- On EXTEND reduce production AttrDefList ->
-- On EXCEPTION reduce production AttrDefList ->
-- On EOF reduce production AttrDefList ->
-- On CANON reduce production AttrDefList ->

State 504:
## Known stack suffix:
## ExtendHeader AttrDefList
## LR(1) items:
ExtendSpec -> ExtendHeader AttrDefList . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On TYPE reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On RESOURCE reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On REG reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On OP reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On MODE reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On MEM reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On LET reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On EXTEND reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On EXCEPTION reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On EOF reduce production ExtendSpec -> ExtendHeader AttrDefList
-- On CANON reduce production ExtendSpec -> ExtendHeader AttrDefList

State 505:
## Known stack suffix:
## ExceptionSpec
## LR(1) items:
MachineSpec -> ExceptionSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> ExceptionSpec
-- On TYPE reduce production MachineSpec -> ExceptionSpec
-- On RESOURCE reduce production MachineSpec -> ExceptionSpec
-- On REG reduce production MachineSpec -> ExceptionSpec
-- On OP reduce production MachineSpec -> ExceptionSpec
-- On MODE reduce production MachineSpec -> ExceptionSpec
-- On MEM reduce production MachineSpec -> ExceptionSpec
-- On LET reduce production MachineSpec -> ExceptionSpec
-- On EXTEND reduce production MachineSpec -> ExceptionSpec
-- On EXCEPTION reduce production MachineSpec -> ExceptionSpec
-- On EOF reduce production MachineSpec -> ExceptionSpec
-- On CANON reduce production MachineSpec -> ExceptionSpec

State 506:
## Known stack suffix:
## CanonSpec
## LR(1) items:
MachineSpec -> CanonSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production MachineSpec -> CanonSpec
-- On TYPE reduce production MachineSpec -> CanonSpec
-- On RESOURCE reduce production MachineSpec -> CanonSpec
-- On REG reduce production MachineSpec -> CanonSpec
-- On OP reduce production MachineSpec -> CanonSpec
-- On MODE reduce production MachineSpec -> CanonSpec
-- On MEM reduce production MachineSpec -> CanonSpec
-- On LET reduce production MachineSpec -> CanonSpec
-- On EXTEND reduce production MachineSpec -> CanonSpec
-- On EXCEPTION reduce production MachineSpec -> CanonSpec
-- On EOF reduce production MachineSpec -> CanonSpec
-- On CANON reduce production MachineSpec -> CanonSpec

State 507:
## Known stack suffix:
## MachineSpec
## LR(1) items:
specs -> MachineSpec . [ VAR TYPE RESOURCE REG OP MODE MEM LET EXTEND EXCEPTION EOF CANON ]
## Transitions:
## Reductions:
-- On VAR reduce production specs -> MachineSpec
-- On TYPE reduce production specs -> MachineSpec
-- On RESOURCE reduce production specs -> MachineSpec
-- On REG reduce production specs -> MachineSpec
-- On OP reduce production specs -> MachineSpec
-- On MODE reduce production specs -> MachineSpec
-- On MEM reduce production specs -> MachineSpec
-- On LET reduce production specs -> MachineSpec
-- On EXTEND reduce production specs -> MachineSpec
-- On EXCEPTION reduce production specs -> MachineSpec
-- On EOF reduce production specs -> MachineSpec
-- On CANON reduce production specs -> MachineSpec

