File "simnml.mly", line 128, characters 9-13:
Warning: the token ATTR is unused.
File "simnml.mly", line 119, characters 9-21:
Warning: the token BINARY_CONST is unused.
File "simnml.mly", line 124, characters 19-28:
Warning: the token BIT_RIGHT is unused.
File "simnml.mly", line 81, characters 10-16:
Warning: the token DOLLAR is unused.
File "simnml.mly", line 120, characters 9-18:
Warning: the token HEX_CONST is unused.
File "simnml.mly", line 110, characters 10-14:
Warning: the token LIST is unused.
File "simnml.mly", line 90, characters 10-15:
Warning: the token MACRO is unused.
File "simnml.mly", line 111, characters 10-13:
Warning: the token NOP is unused.
File "simnml.mly", line 108, characters 10-13:
Warning: the token NOT is unused.
%{
let eline e = Irg.ELINE (!(Lexer.file), !(Lexer.line), e)
let line s = Irg.LINE (!(Lexer.file), !(Lexer.line), s)


(** Get information to extend the symbol x.
	@param x				Name of the symbol to extend (must an AND-op or an AND-mode).
	@return					(specification of the symbol, list of parameters, list of attributes)
	@raise Irg.IrgError		If the symbol is not extensible. *)
let get_spec_extend x =
	let sym = Irg.get_symbol x in
	match sym with
	| Irg.AND_MODE (_, pars, _, attrs)
	| Irg.AND_OP (_, pars, attrs) ->
		(sym, pars, attrs)
	| Irg.UNDEF ->
		raise (Irg.IrgError (Printf.sprintf "symbol %s does not exists" x))
	| _ ->
		raise (Irg.IrgError (Printf.sprintf "can not extend %s" x))


(** Intersect parameter declaration.
	@param pars1		First list of parameters.
	@param pars2		Second list of parameters.
	@return				Intersection of lists. *)
let intersect_params pars1 pars2 : (string * Irg.typ) list =
	List.fold_left
		(fun res par -> if List.mem par pars1 then par::res else res)
		[]
		pars2


(** Intersect two list of attributes to provide a common context for
	extending a list of symbols.
	@param attrs1		First list of symbols.
	@param attrs2		Second list of symbols.
	@return				Intersection of both lists. *)
let intersect_attrs attrs1 attrs2 =
	let equal attr1 attr2 =
		match (attr1, attr2) with
		| (Irg.ATTR_EXPR (n1, _), Irg.ATTR_EXPR (n2, _))
		| (Irg.ATTR_LOC (n1, _), Irg.ATTR_LOC (n2, _))
		| (Irg.ATTR_STAT (n1, _), Irg.ATTR_STAT (n2, _)) when n1 = n2 -> true
		| _ -> false in
	let member_of attr attrs = List.exists (fun item -> equal attr item) attrs in
	List.fold_left (fun res attr -> if member_of attr attrs2 then attr::res else res) [] attrs1

%}
%start top
%token ACTION
%token ALIAS
%token AMPERS
%token AND
%token AROBAS
%token ATTR
%token BINARY_CONST
%token <Int32.t * int> BIN_CONST
%token <Int64.t * int> BIN_CONST_64
%token BIT_LEFT
%token BIT_RIGHT
%token BOOL
%token CANON
%token CARD
%token <Int32.t> CARD_CONST
%token <Int64.t> CARD_CONST_64
%token CASE
%token CIRC
%token COERCE
%token COLON
%token COMMA
%token DEFAULT
%token DOLLAR
%token DOT
%token DOUBLE_COLON
%token DOUBLE_DOT
%token DOUBLE_STAR
%token ELSE
%token ENDIF
%token ENUM
%token EOF
%token EQ
%token EQU
%token ERROR
%token <int> EXCEPTION
%token EXCLAM
%token EXTEND
%token FIX
%token <float> FIXED_CONST
%token FLOAT
%token FORMAT
%token GEQ
%token GT
%token HEX_CONST
%token <string> ID
%token IF
%token IMAGE
%token INITIALA
%token INT
%token LBRACE
%token LBRACK
%token LEFT_SHIFT
%token LEQ
%token <int> LET
%token LIST
%token LPAREN
%token LT
%token MACRO
%token <int> MEM
%token MINUS
%token <int> MODE
%token NEQ
%token NOP
%token NOT
%token <int> OP
%token OR
%token PERCENT
%token PIPE
%token PLUS
%token PORTS
%token RBRACE
%token RBRACK
%token <int> REG
%token <int> RESOURCE
%token RIGHT_SHIFT
%token ROTATE_LEFT
%token ROTATE_RIGHT
%token RPAREN
%token SEMI
%token SHARP
%token SLASH
%token STAR
%token <string> STRING_CONST
%token SWITCH
%token SYNTAX
%token THEN
%token TILD
%token <int> TYPE
%token USES
%token <int> VAR
%token VOLATILE
%right EQ
%left DOUBLE_COLON
%left OR
%left AND
%right EXCLAM
%left PIPE
%left CIRC
%left AMPERS
%left EQU NEQ
%left GEQ GT LEQ LT
%left LEFT_SHIFT RIGHT_SHIFT ROTATE_LEFT ROTATE_RIGHT
%left MINUS PLUS
%left PERCENT SLASH STAR
%right DOUBLE_STAR
%right TILD
%left BIT_LEFT BIT_RIGHT DOUBLE_DOT
%type <unit> top
%%

top:
  _1 = specs _2 = EOF
    {            ( (*print_string "Start Symbol reduced, end of recognition\n########################\n"*) )}

LocatedID:
  _1 = ID
    {    ( Irg.add_pos _1 !Lexer.file !Lexer.line; _1 )}

specs:
  _1 = MachineSpec
    {               (   )}
| _1 = specs _2 = MachineSpec
    {                     (   )}

MachineSpec:
  _1 = LetDef
    {             ( Irg.add_symbol (fst _1) (snd _1) )}
| _1 = TypeSpec
    {               ( Sem.add_spec (fst _1) (snd _1) )}
| _1 = MemorySpec
    {                ( Sem.add_spec (fst _1) (snd _1) )}
| _1 = RegisterSpec
    {                 ( Sem.add_spec (fst _1) (snd _1) )}
| _1 = VarSpec
    {              ( Sem.add_spec (fst _1) (snd _1) )}
| _1 = ModeSpec
    {              ( Sem.add_spec (fst _1) (snd _1); )}
| _1 = OpSpec
    {             ( Sem.add_spec (fst _1) (snd _1); )}
| _1 = ResourceSpec
    {                 ( )}
| _1 = ExceptionSpec
    {                  ( )}
| _1 = ExtendSpec
    {              ( )}
| _1 = CanonSpec
    {             ( Irg.add_symbol (fst _1) (snd _1); Irg.add_canon (fst _1) (snd _1) )}

LetDef:
  _1 = LET _2 = LocatedID _3 = EQ _4 = LetExpr
    {                          (  Irg.add_pos (_2) !(Lexer.file) _1;(_2, Irg.LET (_2, Sem.eval_const _4)) )}

ResourceSpec:
  _1 = RESOURCE _2 = ResourceList
    {                       ( List.iter (fun e->Irg.add_pos e !(Lexer.file) _1) _2)}

ResourceList:
  _1 = Resource
    {            ( [_1] )}
| _1 = ResourceList _2 = COMMA _3 = Resource
    {                              ( _3::_1 )}

Resource:
  _1 = LocatedID
    {                 ( Irg.add_symbol _1 (Irg.RES _1); _1 )}
| _1 = LocatedID _2 = LBRACK _3 = CARD_CONST _4 = RBRACK
    {                                     ( Irg.add_symbol _1 (Irg.RES _1); _1 )}

CanonSpec:
  _1 = CANON _2 = STRING_CONST _3 = LPAREN _4 = TypeList _5 = RPAREN
    { (
		(_2, Irg.CANON_DEF(_2, Irg.CANON_FUNC, Irg.NO_TYPE, _4))
	)}
| _1 = CANON _2 = Type _3 = STRING_CONST _4 = LPAREN _5 = TypeList _6 = RPAREN
    { (
		(_3, Irg.CANON_DEF(_3, Irg.CANON_FUNC, _2, _5))
	)}
| _1 = CANON _2 = STRING_CONST _3 = LPAREN _4 = RPAREN
    { (
		(_2, Irg.CANON_DEF(_2, Irg.CANON_FUNC, Irg.NO_TYPE, []))
	)}
| _1 = CANON _2 = Type _3 = STRING_CONST _4 = LPAREN _5 = RPAREN
    { (
		(_3, Irg.CANON_DEF(_3, Irg.CANON_FUNC, _2, []))
	)}
| _1 = CANON _2 = Type _3 = STRING_CONST
    { (
		(_3, Irg.CANON_DEF(_3, Irg.CANON_CNST, _2, []))
	)}

TypeList:
  _1 = Type
    {        ( [_1] )}
| _1 = TypeList _2 = COMMA _3 = Type
    {                       ( _3::_1 )}

ExceptionSpec:
  _1 = EXCEPTION _2 = IdentifierList
    {                          ( List.iter (fun id -> (Irg.add_pos id !(Lexer.file) _1;(Irg.add_symbol id (Irg.EXN id)))) _2 )}

IdentifierList:
  _1 = ID
    {       ( [_1] )}
| _1 = IdentifierList _2 = COMMA _3 = ID
    {                           ( _3::_1 )}

TypeSpec:
  _1 = TYPE _2 = LocatedID _3 = EQ _4 = TypeExpr
    {                            (
					Irg.add_pos _2 !(Lexer.file) _1;
					Irg.complete_incomplete_enum_poss _2;	(* needed for enums *)
					(_2, Irg.TYPE (_2, _4))
				)}

TypeExpr:
  _1 = BOOL
    {  ( Irg.BOOL )}
| _1 = INT _2 = LPAREN _3 = LetExpr _4 = RPAREN
    {  ( Irg.INT (Sem.to_int (Sem.eval_const _3)) )}
| _1 = CARD _2 = LPAREN _3 = LetExpr _4 = RPAREN
    {  ( Irg.CARD (Sem.to_int (Sem.eval_const _3)) )}
| _1 = FIX _2 = LPAREN _3 = LetExpr _4 = COMMA _5 = LetExpr _6 = RPAREN
    {  ( Irg.FIX (
			Sem.to_int (Sem.eval_const _3),
			Sem.to_int (Sem.eval_const _5)) )}
| _1 = FLOAT _2 = LPAREN _3 = LetExpr _4 = COMMA _5 = LetExpr _6 = RPAREN
    {  ( Irg.FLOAT (
			Sem.to_int (Sem.eval_const _3),
			Sem.to_int (Sem.eval_const _5)) )}
| _1 = LBRACK _2 = LetExpr _3 = DOUBLE_DOT _4 = LetExpr _5 = RBRACK
    {  (
		let v1=Sem.to_int32 (Sem.eval_const _2)
		and v2=Sem.to_int32 (Sem.eval_const _4)
		in
		if ((Int32.compare v1 v2)<=0)
			then Irg.RANGE (v1,v2)
			else
				let dsp=fun _->(
					 Printf.printf "Value of the first operand : %d\n Value of the second operand : %d" (Int32.to_int v1) (Int32.to_int v2)
					)
				in
				raise (Sem.SemErrorWithFun ("In a range type declaration, the first operand must be lesser than the second", dsp))
		 )}
| _1 = ENUM _2 = LPAREN _3 = IdentifierList _4 = RPAREN
    {  (
			(*let i = List.fold_right (fun id i -> Irg.add_symbol id
				(Irg.ENUM_POSS (id," ",(Int32.of_int i),false) ); i + 1)
				$3 0 in
			Irg.CARD (int_of_float (ceil ((log (float i)) /. (log 2.))))*)

			let rec temp l i= match l with
				[]->()
				|e::l-> Irg.add_symbol e (Irg.ENUM_POSS (e," ",(Int32.of_int i),false)); temp l (i+1)
			in
			temp _3 0;
			Irg.ENUM _3
		)}

LetExpr:
  _1 = Expr
    {       ( _1 )}

MemorySpec:
  _1 = MEM _2 = LocatedID _3 = LBRACK _4 = MemPart _5 = RBRACK _6 = OptionalMemAttrDefList
    {  (
			Irg.add_pos _2 !(Lexer.file) _1;
			_2, Irg.MEM (_2, fst _4, snd _4, _6)
		)}

RegisterSpec:
  _1 = REG _2 = LocatedID _3 = LBRACK _4 = RegPart _5 = RBRACK _6 = OptionalMemAttrDefList
    {  (
			Irg.add_pos _2 !(Lexer.file) _1;
			_2, Irg.REG (_2, fst _4, snd _4, _6) )}

VarSpec:
  _1 = VAR _2 = LocatedID _3 = LBRACK _4 = RegPart _5 = RBRACK
    {  (
			Irg.add_pos _2 !(Lexer.file) _1;
			_2, Irg.VAR (_2, fst _4, snd _4) )}

MemPart:
  _1 = LetExpr _2 = COMMA _3 = Type
    {                      ( Sem.to_int (Sem.eval_const _1), _3 )}
| _1 = LetExpr
    {            ( Sem.to_int (Sem.eval_const _1), Irg.INT 8 )}

RegPart:
  _1 = LetExpr _2 = COMMA _3 = Type
    {                      ( Sem.to_int (Sem.eval_const _1), _3 )}
| _1 = Type
    {         ( 1, _1 )}

Type:
  _1 = TypeExpr
    {           ( _1 )}
| _1 = ID
    {       ( Sem.type_from_id _1 )}

OptionalMemAttrDefList:
  
    {              ( [] )}
| _1 = MemAttrDefList
    {                  ( _1 )}

MemAttrDefList:
  _1 = MemAttrDef
    {              ( [_1] )}
| _1 = MemAttrDefList _2 = MemAttrDef
    {                            ( _2::_1 )}

MemAttrDef:
  _1 = VOLATILE _2 = EQ _3 = LetExpr
    {  ( Irg.ATTR_EXPR ("volatile", Irg.CONST (Irg.NO_TYPE, (Sem.eval_const _3))) )}
| _1 = INITIALA _2 = EQ _3 = LetExpr
    {  ( Irg.ATTR_EXPR ("init", Irg.CONST (Irg.NO_TYPE, Sem.eval_const _3)) )}
| _1 = PORTS _2 = EQ _3 = CARD_CONST _4 = COMMA _5 = CARD_CONST
    {  ( Irg.ATTR_USES )}
| _1 = USES _2 = EQ _3 = UsesDef
    {  ( Irg.ATTR_USES )}
| _1 = ALIAS _2 = EQ _3 = MemLocation
    {  ( Irg.ATTR_LOC ("alias", _3) )}
| _1 = ID _2 = EQ _3 = Expr
    {  ( Irg.ATTR_EXPR (_1, _3) )}
| _1 = ID _2 = EQ _3 = LBRACE _4 = Sequence _5 = RBRACE
    {  ( Irg.ATTR_STAT (_1, _4) )}

MemLocation:
  _1 = MemLocBase
    {  ( Irg.LOC_REF (Sem.get_loc_ref_type (fst _1), fst _1, snd _1, Irg.NONE, Irg.NONE) )}
| _1 = MemLocBase _2 = BIT_LEFT _3 = Bit_Expr _4 = DOUBLE_DOT _5 = Bit_Expr _6 = GT
    {  (
		Irg.LOC_REF (Sem.get_loc_ref_type (fst _1), fst _1, snd _1, _3, _5) )}

MemLocBase:
  _1 = ID
    {  ( (_1, Irg.NONE) )}
| _1 = ID _2 = LBRACK _3 = Expr _4 = RBRACK
    {  ( (_1, _3) )}

ModeSpec:
  _1 = MODE _2 = LocatedID _3 = LPAREN _4 = ParamList _5 = RPAREN _6 = OptionalModeExpr _7 = AttrDefList
    {  (
			Sem.check_image _2 _4;
			Irg.add_pos _2 !(Lexer.file) _1;
			Irg.param_unstack _4;
			Irg.attr_unstack _7;
			(_2, Irg.AND_MODE (_2, _4, _6, _7))
		)}
| _1 = MODE _2 = LocatedID _3 = EQ _4 = Identifier_Or_List
    {  (
			Irg.add_pos _2 !(Lexer.file) _1;
			_2, Irg.OR_MODE (_2, _4)
		)}

OptionalModeExpr:
  
    {             ( Irg.NONE )}
| _1 = EQ _2 = Expr
    {           ( _2 )}

OpSpec:
  _1 = OP _2 = LocatedID _3 = LPAREN _4 = ParamList _5 = RPAREN _6 = AttrDefList
    {  (
			Sem.check_image _2 _4;
			Irg.param_unstack _4;
			Irg.attr_unstack _6;
			(_2, Irg.AND_OP (_2, _4, _6))
		)}
| _1 = OP _2 = LocatedID _3 = EQ _4 = Identifier_Or_List
    {  ( _2, Irg.OR_OP (_2, _4) )}

ExtendSpec:
  _1 = ExtendHeader _2 = AttrDefList
    {  (
			let (syms, pars, cattrs) = _1 in
			let extend_spec s =
				match s with
				| Irg.AND_MODE (id, pars, expr, attrs) ->
					Irg.rm_symbol id;
					Irg.add_symbol id (Irg.AND_MODE (id, pars, expr, attrs @ _2))
				| Irg.AND_OP (id, pars, attrs) ->
					Irg.rm_symbol id;
					Irg.add_symbol id (Irg.AND_OP (id, pars, attrs @ _2));
				| _ -> () in
			Irg.param_unstack pars;
			Irg.attr_unstack _2;
			Irg.attr_unstack cattrs;
			List.iter extend_spec syms
		)}

ExtendHeader:
  _1 = EXTEND _2 = ExtendIDList
    {                     ( let (_, pars, attrs) = _2 in Irg.attr_stack attrs; Irg.param_stack pars; _2 )}

ExtendIDList:
  _1 = ID
    {  ( let (sym, pars, attrs) = get_spec_extend _1 in ([sym], pars, attrs) )}
| _1 = ExtendIDList _2 = COMMA _3 = ID
    {  (
			let (sym, spars, sattrs) = get_spec_extend _3 in
			let (syms, pars, attrs) = _1 in
			(sym::syms, intersect_params pars spars, intersect_attrs sattrs attrs)
		)}

Identifier_Or_List:
  _1 = ID
    {           ( [_1] )}
| _1 = Identifier_Or_List _2 = PIPE _3 = ID
    {                                ( _3::_1 )}

ParamList:
  
    {                  ( [] )}
| _1 = ParamListPart
    {                    ( Irg.add_param _1; [_1] )}
| _1 = ParamList _2 = COMMA _3 = ParamListPart
    {                                ( Irg.add_param _3; _3::_1 )}

ParamListPart:
  _1 = ID _2 = COLON _3 = ParaType
    {                       ( Sem.check_param_exists _1; (_1, _3) )}

ParaType:
  _1 = TypeExpr
    {          ( Irg.TYPE_EXPR _1 )}
| _1 = ID
    {      ( Irg.TYPE_ID _1 )}

AttrDefList:
  
    {               ( [] )}
| _1 = NOAttrDefList
    {                  ( _1 )}

NOAttrDefList:
  _1 = AttrDef
    {              ( Irg.add_attr _1; [_1] )}
| _1 = NOAttrDefList _2 = AttrDef
    {                        ( Irg.add_attr _2; _2::_1 )}

AttrDef:
  _1 = ID _2 = EQ _3 = Expr
    {  ( Irg.ATTR_EXPR (_1, _3) )}
| _1 = ID _2 = EQ _3 = LBRACE _4 = Sequence _5 = RBRACE
    {  ( Irg.ATTR_STAT (_1, _4) )}
| _1 = SYNTAX _2 = EQ _3 = AttrExpr
    {  ( Irg.ATTR_EXPR  ("syntax", (Sem.change_string_dependences "syntax" _3)) )}
| _1 = IMAGE _2 = EQ _3 = AttrExpr
    {  ( Irg.ATTR_EXPR  ("image", (Sem.change_string_dependences "image" _3)) )}
| _1 = ACTION _2 = EQ _3 = LBRACE _4 = Sequence _5 = RBRACE
    {  ( Irg.ATTR_STAT ("action", _4) )}
| _1 = USES _2 = EQ _3 = UsesDef
    {  ( Irg.ATTR_USES )}

AttrExpr:
  _1 = Expr
    {  ( eline _1 )}

Sequence:
  
    {             ( Irg.NOP )}
| _1 = StatementList _2 = SEMI
    {                     ( _1 )}

StatementList:
  _1 = Statement
    {           ( line _1 )}
| _1 = StatementList _2 = SEMI _3 = Statement
    {                               ( line(Irg.SEQ (_1, line _3)) )}

Statement:
  
    {  ( Irg.NOP )}
| _1 = ACTION
    {  ( Irg.EVAL "action" )}
| _1 = ID
    {  ( Irg.EVAL _1 )}
| _1 = ID _2 = DOT _3 = ACTION
    {  ( Irg.EVALIND (_1, "action")  )}
| _1 = ID _2 = DOT _3 = ID
    {  ( Irg.EVALIND (_1, _3) )}
| _1 = Location _2 = EQ _3 = Expr
    {  (
			if Sem.is_setspe _1
			then Irg.SETSPE (_1,_3)
			else Sem.make_set _1 _3
		)}
| _1 = ConditionalStatement
    {  ( _1 )}
| _1 = STRING_CONST _2 = LPAREN _3 = ArgList _4 = RPAREN
    {  ( Sem.build_canonical_stat _1 (List.rev _3) )}
| _1 = ERROR _2 = LPAREN _3 = STRING_CONST _4 = RPAREN
    {  ( Irg.ERROR _3 )}

ArgList:
  
    {             ( [] )}
| _1 = Expr
    {       ( [_1] )}
| _1 = ArgList _2 = COMMA _3 = Expr
    {                      ( _3::_1 )}

Opt_Bit_Optr:
  
    {  ( None )}
| _1 = BIT_LEFT _2 = Bit_Expr _3 = DOUBLE_DOT _4 = Bit_Expr _5 = GT
    {  ( None )}

Location:
  _1 = ID
    {  ( if (Sem.is_location _1) || (Sem.is_loc_spe _1) || (Sem.is_loc_mode _1)
			then	Irg.LOC_REF (Sem.get_loc_ref_type _1, _1, Irg.NONE, Irg.NONE, Irg.NONE)
			else
				let dsp=fun _->(
					print_string "Type : ";
					Irg.print_spec (Irg.get_symbol _1)
					)
				in
				raise (Sem.SemErrorWithFun ((Printf.sprintf "%s is not a valid location" _1),dsp))
		)}
| _1 = ID _2 = BIT_LEFT _3 = Bit_Expr _4 = DOUBLE_DOT _5 = Bit_Expr _6 = GT
    {  (
			if (Sem.is_location _1) || (Sem.is_loc_spe _1)	 || (Sem.is_loc_mode _1)
			then
				Irg.LOC_REF (Sem.get_loc_ref_type _1, _1, Irg.NONE, _3, _5)
			else
				let dsp = fun _->(
						print_string "Type : ";
						Irg.print_spec (Irg.get_symbol _1)
						)
				in
				raise (Sem.SemErrorWithFun ((Printf.sprintf "%s is not a valid location" _1),dsp))
		)}
| _1 = ID _2 = LBRACK _3 = Expr _4 = RBRACK
    {  (
			if (Sem.is_location _1) || (Sem.is_loc_spe _1) (* || (Sem.is_loc_mode $1) *)
			then
				Irg.LOC_REF (Sem.get_loc_ref_type _1, _1, _3, Irg.NONE, Irg.NONE)
			else
				let dsp = fun _->(
						print_string "Type : ";
						Irg.print_spec (Irg.get_symbol _1)
						)
				in
				raise (Sem.SemErrorWithFun ((Printf.sprintf "%s is not a valid location" _1),dsp))
		)}
| _1 = ID _2 = LBRACK _3 = Expr _4 = RBRACK _5 = BIT_LEFT _6 = Bit_Expr _7 = DOUBLE_DOT _8 = Bit_Expr _9 = GT
    {  (
			if (Sem.is_location _1) || (Sem.is_loc_spe _1) (* || (Sem.is_loc_mode $1) *)
			then
				Irg.LOC_REF (Sem.get_loc_ref_type _1, _1, _3, _6, _8)
			else
				let dsp = fun _->(
						print_string "Type : ";
						Irg.print_spec (Irg.get_symbol _1)
						)
				in
				raise (Sem.SemErrorWithFun ((Printf.sprintf "%s is not a valid location" _1),dsp))
		)}
| _1 = Location _2 = DOUBLE_COLON _3 = Location
    {  (
			let length =
				(Sem.get_type_length (Sem.get_loc_type _1)) +
				(Sem.get_type_length (Sem.get_loc_type _3)) in
			Irg.LOC_CONCAT (Irg.CARD length, _1, _3)
		)}

ConditionalStatement:
  _1 = IF _2 = Expr _3 = THEN _4 = Sequence _5 = OptionalElse _6 = ENDIF
    {  ( Irg.IF_STAT (_2, _4, _5) )}
| _1 = SWITCH _2 = LPAREN _3 = Expr _4 = RPAREN _5 = LBRACE _6 = CaseBody _7 = RBRACE
    {  (Irg.SWITCH_STAT (_3, fst _6, snd _6))}

OptionalElse:
  
    {             ( Irg.NOP )}
| _1 = ELSE _2 = Sequence
    {                ( _2 )}

CaseBody:
  _1 = CaseList
    {          ( (_1,Irg.NOP) )}
| _1 = OptCaseList _2 = Default _3 = OptCaseList
    {                                  ( (_1@_3,_2) )}

OptCaseList:
  
    {             ( [] )}
| _1 = CaseList
    {           ( _1 )}

CaseList:
  _1 = CaseStat
    {             ( [_1]	)}
| _1 = CaseList _2 = CaseStat
    {                     ( _2::_1 )}

CaseStat:
  _1 = CASE _2 = Expr _3 = COLON _4 = Sequence
    {                          ( (_2,_4) )}

Default:
  _1 = DEFAULT _2 = COLON _3 = Sequence
    {                        (_3)}

Expr:
  _1 = COERCE _2 = LPAREN _3 = Type _4 = COMMA _5 = Expr _6 = RPAREN
    {  (
			if not (_3 = Irg.STRING)
				then
					if not ((Sem.get_type_expr _5)=Irg.STRING)
						then
							eline (Irg.COERCE (_3,_5))
						else
							raise (Sem.SemError "unable to coerce a string into another expression type")
				else
					raise (Sem.SemError "unable to an expression coerce into a string")
		)}
| _1 = FORMAT _2 = LPAREN _3 = STRING_CONST _4 = COMMA _5 = ArgList _6 = RPAREN
    {  ( eline (Sem.build_format _3 _5) )}
| _1 = STRING_CONST _2 = LPAREN _3 = ArgList _4 = RPAREN
    {  ( Sem.test_canonical _1; eline (Sem.build_canonical_expr _1 (List.rev _3)) )}
| _1 = ID _2 = DOT _3 = SYNTAX
    {  (	if Irg.is_defined _1
			then eline (Irg.FIELDOF (Irg.STRING, _1,"syntax"))
			else raise (Sem.SemError (Printf.sprintf "the keyword %s is undefined\n" _1)) )}
| _1 = ID _2 = DOT _3 = IMAGE
    {  (	if Irg.is_defined _1
			then eline (Irg.FIELDOF (Irg.STRING, _1,"image"))
			else raise (Sem.SemError (Printf.sprintf "the keyword %s is undefined\n" _1)) )}
| _1 = ID _2 = DOT _3 = ID
    {  (
		if Irg.is_defined _1
			then
				match (Irg.get_symbol _1) with
					(* we should get a previously stacked param *)
					Irg.PARAM(_, t) ->
					(match t with
						Irg.TYPE_ID(name) ->
						(try
							let sp = Irg.get_symbol name in
							let params =
								match sp with
									Irg.AND_MODE(_, p_l, _, _) -> p_l
									| Irg.AND_OP(_, p_l, _) -> p_l
									| _ -> raise (Sem.SemError (Printf.sprintf " %s can not have a %s attribute\n" _1 _3))
							in
							(match Iter.get_attr sp _3 with
								Iter.EXPR(e) ->
									(try
										(* stack sp params, get type & unstack'em (should be recursive ?) *)
										Irg.param_stack params;
										let tt = Sem.get_type_expr e in
										Irg.param_unstack params;
										eline (Irg.FIELDOF (tt, _1, _3))
									with
										Sem.SemError _
										| Irg.Symbol_not_found _ ->
										Irg.param_unstack params;
										eline (Irg.FIELDOF (Irg.UNKNOW_TYPE, _1, _3)))
								| _ ->
									raise (Sem.SemError (Printf.sprintf " %s doesn't have an expression attribute named %s\n" _1 _3)))
						with Not_found ->
							raise (Sem.SemError (Printf.sprintf " %s doesn't have a %s attribute\n" _1 _3))
							| _ -> eline (Irg.FIELDOF (Irg.UNKNOW_TYPE, _1, _3))
						)
						| _ -> raise (Sem.SemError (Printf.sprintf " %s can not have a %s attribute\n" _1 _3))
					)
					| _ -> raise (Sem.SemError (Printf.sprintf " %s can not have a %s attribute\n" _1 _3))
				(*end*)
			else
				raise (Sem.SemError (Printf.sprintf "the keyword %s is undefined\n" _1))
		)}
| _1 = Expr _2 = DOUBLE_COLON _3 = Expr
    {  (
			eline (Sem.get_binop _1 _3 Irg.CONCAT)
		)}
| _1 = ID
    {  (
			Sem.test_data _1 false;
			let v = Sem.get_data_expr_attr _1 in
			if v != Irg.NONE then eline (v) else eline (Irg.REF _1)
		)}
| _1 = ID _2 = LBRACK _3 = Expr _4 = RBRACK
    {  (
		if Irg.is_defined _1 then
			if (Sem.is_location _1) || (Sem.is_loc_spe _1)  || (Sem.is_loc_mode _1)
				then
					eline (Irg.ITEMOF ((Sem.get_type_ident _1), _1, _3))
				else
					let dsp = fun _->(
							print_string "Type : ";
							Irg.print_spec (Irg.get_symbol _1)
							)
					in
					raise (Sem.SemErrorWithFun ((Printf.sprintf "%s is not a valid location" _1),dsp))
		else raise (Sem.SemError (Printf.sprintf "the keyword %s is undefined\n" _1))
		)}
| _1 = Expr _2 = BIT_LEFT _3 = Bit_Expr _4 = DOUBLE_DOT _5 = Bit_Expr _6 = GT
    {  (
			(* generic bitfield expr *)
			(* !!DEBUG!! *)
			(* for the moment.. *)
			try
				let v1 = Int32.to_int (Sem.to_int32 (Sem.eval_const _3)) in
				let v2 = Int32.to_int(Sem.to_int32 (Sem.eval_const _5)) in
				let v1, v2 = if v1 <= v2 then v1, v2 else v2, v1 in
				(* !!TODO!! check type (only scalar allowed) and length if possible *)
				eline (Irg.BITFIELD (Irg.CARD (v2 - v1 + 1), _1, _3, _5))
			with Sem.SemError _ ->
				eline (Irg.BITFIELD (Sem.get_type_expr _1, _1, _3, _5))
		)}
| _1 = Expr _2 = PLUS _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.ADD
		)}
| _1 = Expr _2 = MINUS _3 = Expr
    {  (
 			Sem.get_binop _1 _3 Irg.SUB
		)}
| _1 = Expr _2 = STAR _3 = Expr
    {  (
			eline (Sem.get_binop _1 _3 Irg.MUL)
		 )}
| _1 = Expr _2 = SLASH _3 = Expr
    {  (
			eline (Sem.get_binop _1 _3 Irg.DIV)
		 )}
| _1 = Expr _2 = PERCENT _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.MOD
		 )}
| _1 = Expr _2 = DOUBLE_STAR _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.EXP
		 )}
| _1 = Expr _2 = LEFT_SHIFT _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.LSHIFT
		 )}
| _1 = Expr _2 = RIGHT_SHIFT _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.RSHIFT
		)}
| _1 = Expr _2 = ROTATE_LEFT _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.LROTATE
		 )}
| _1 = Expr _2 = ROTATE_RIGHT _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.RROTATE
		 )}
| _1 = Expr _2 = LT _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.LT
		)}
| _1 = Expr _2 = GT _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.GT
		 )}
| _1 = Expr _2 = LEQ _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.LE
		)}
| _1 = Expr _2 = GEQ _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.GE
		 )}
| _1 = Expr _2 = EQU _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.EQ
		)}
| _1 = Expr _2 = NEQ _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.NE
		)}
| _1 = Expr _2 = AMPERS _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.BIN_AND
		)}
| _1 = Expr _2 = CIRC _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.BIN_XOR
		)}
| _1 = Expr _2 = PIPE _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.BIN_OR
		)}
| _1 = EXCLAM _2 = Expr
    {  (
			Sem.get_unop _2  Irg.NOT
		)}
| _1 = TILD _2 = Expr
    {  (
			Sem.get_unop _2  Irg.BIN_NOT
		)}
| _1 = PLUS _2 = Expr %prec TILD
    {  ( _2 )}
| _1 = MINUS _2 = Expr %prec TILD
    {                         (
			Sem.get_unop _2  Irg.NEG
		)}
| _1 = Expr _2 = AND _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.AND
		)}
| _1 = Expr _2 = OR _3 = Expr
    {  (
			Sem.get_binop _1 _3 Irg.OR
		)}
| _1 = LPAREN _2 = Expr _3 = RPAREN
    {  ( _2 )}
| _1 = IF _2 = Expr _3 = THEN _4 = Expr _5 = ELSE _6 = Expr _7 = ENDIF
    {  ( eline (Irg.IF_EXPR (Sem.check_if_expr _4 _6, _2, _4, _6)) )}
| _1 = SWITCH _2 = LPAREN _3 = Expr _4 = RPAREN _5 = LBRACE _6 = CaseExprBody _7 = RBRACE
    {  ( eline (Irg.SWITCH_EXPR (Sem.check_switch_expr _3 (fst _6) (snd _6),_3, fst _6, snd _6)) )}
| _1 = AROBAS _2 = STRING_CONST
    {  ( eline (Irg.EINLINE _2) )}
| _1 = Constant
    {  ( eline (Irg.CONST (fst _1, snd _1)) )}

Constant:
  _1 = FIXED_CONST
    {  ( (Irg.FLOAT(23, 9), Irg.FIXED_CONST  _1) )}
| _1 = CARD_CONST
    {  ( (Irg.CARD 32, Irg.CARD_CONST _1) )}
| _1 = CARD_CONST_64
    {  ( (Irg.CARD 64, Irg.CARD_CONST_64 _1) )}
| _1 = STRING_CONST
    {  (
			if  (Irg.is_defined_canon _1) then
				(Sem.test_canonical _1;
				let e = Irg.get_canon _1 in
					(e.Irg.type_res, Irg.STRING_CONST(_1, true, e.Irg.type_res)))
			else
				(Irg.STRING, Irg.STRING_CONST(_1, false, Irg.NO_TYPE))
		)}
| _1 = BIN_CONST
    {  ( (Irg.CARD (snd _1), Irg.CARD_CONST (fst _1)) )}
| _1 = BIN_CONST_64
    {  ( (Irg.CARD (snd _1), Irg.CARD_CONST_64 (fst _1)) )}

Bit_Expr:
  _1 = ID
    {  (Sem.test_data _1 false; let v = Sem.get_data_expr_attr _1 in if v != Irg.NONE then eline (v) else eline (Irg.REF _1)  )}
| _1 = MINUS _2 = Bit_Expr
    {  ( eline (Sem.get_unop _2 Irg.NEG) )}
| _1 = PLUS _2 = Bit_Expr
    {  ( _2 )}
| _1 = TILD _2 = Bit_Expr
    {  ( eline (Sem.get_unop _2 Irg.BIN_NOT) )}
| _1 = Bit_Expr _2 = PLUS _3 = Bit_Expr
    {  ( eline (Sem.get_binop _1 _3 Irg.ADD) )}
| _1 = Bit_Expr _2 = MINUS _3 = Bit_Expr
    {  ( eline (Sem.get_binop _1 _3 Irg.SUB) )}
| _1 = Bit_Expr _2 = STAR _3 = Bit_Expr
    {  ( eline(Sem.get_binop _1 _3 Irg.MUL) )}
| _1 = Bit_Expr _2 = SLASH _3 = Bit_Expr
    {  ( eline(Sem.get_binop _1 _3 Irg.DIV) )}
| _1 = Bit_Expr _2 = PERCENT _3 = Bit_Expr
    {  ( eline(Sem.get_binop _1 _3 Irg.MOD) )}
| _1 = Bit_Expr _2 = DOUBLE_STAR _3 = Bit_Expr
    {  ( eline(Sem.get_binop _1 _3 Irg.EXP) )}
| _1 = Bit_Expr _2 = AMPERS _3 = Bit_Expr
    {  ( eline(Sem.get_binop _1 _3 Irg.BIN_AND) )}
| _1 = Bit_Expr _2 = PIPE _3 = Bit_Expr
    {  ( eline(Sem.get_binop _1 _3 Irg.BIN_OR) )}
| _1 = Bit_Expr _2 = CIRC _3 = Bit_Expr
    {  ( eline(Sem.get_binop _1 _3 Irg.BIN_XOR) )}
| _1 = LPAREN _2 = Bit_Expr _3 = RPAREN
    {  ( _2 )}
| _1 = FIXED_CONST
    {  ( eline (Irg.CONST (Irg.FIX(8,24),Irg.FIXED_CONST _1)) )}
| _1 = CARD_CONST
    {  ( eline (Irg.CONST (Irg.CARD 32,Irg.CARD_CONST _1)) )}
| _1 = STRING_CONST
    {  (
			if  (Irg.is_defined_canon _1) then
				(Sem.test_canonical _1;
				let e = Irg.get_canon _1 in
					eline (Irg.CONST (e.Irg.type_res, Irg.STRING_CONST(_1, true, e.Irg.type_res))))
			else
				eline (Irg.CONST (Irg.STRING, Irg.STRING_CONST(_1, false, Irg.NO_TYPE)))
		)}

CaseExprBody:
  _1 = CaseExprList
    {              ( (_1,Irg.NONE) )}
| _1 = OptCaseExprList _2 = ExprDefault _3 = OptCaseExprList
    {                                              ( (_1@_3,_2) )}

OptCaseExprList:
  
    {            ( [] )}
| _1 = CaseExprList
    {               ( _1 )}

CaseExprList:
  _1 = CaseExprStat
    {              ( [_1] )}
| _1 = CaseExprList _2 = CaseExprStat
    {                              ( _2::_1 )}

CaseExprStat:
  _1 = CASE _2 = Expr _3 = COLON _4 = Expr
    {                      ( (_2,_4) )}

ExprDefault:
  _1 = DEFAULT _2 = COLON _3 = Expr
    {                    ( _3 )}

UsesDef:
  _1 = UsesOrSequence
    {                ( )}
| _1 = UsesDef _2 = COMMA _3 = UsesOrSequence
    {                               ( )}

UsesOrSequence:
  _1 = UsesIfAtom
    {               ( )}
| _1 = UsesOrSequence _2 = PIPE _3 = UsesIfAtom
    {                                 ( )}

UsesIfAtom:
  _1 = UsesIndirectAtom
    {                  ( )}
| _1 = IF _2 = Expr _3 = THEN _4 = UsesIfAtom _5 = OptionalElseAtom _6 = ENDIF
    {                                                 ( )}

OptionalElseAtom:
  
    {             ( )}
| _1 = ELSE _2 = UsesIfAtom
    {                  ( )}

UsesIndirectAtom:
  _1 = UsesCondAtom
    {              ( )}
| _1 = ID _2 = DOT _3 = USES
    {                ( )}
| _1 = LPAREN _2 = UsesDef _3 = RPAREN
    {                        ( )}
| _1 = UsesLocationList _2 = AND _3 = ID _4 = DOT _5 = USES
    {                                      ( )}
| _1 = UsesLocationList _2 = AND _3 = LPAREN _4 = UsesDef _5 = RPAREN
    {                                                ( )}

UsesCondAtom:
  _1 = UsesAndAtom
    {             ( )}
| _1 = LBRACE _2 = Expr _3 = RBRACE _4 = UsesAndAtom
    {                                 ( )}

UsesAndAtom:
  _1 = UsesLocationList _2 = UsesActionList
    {                                   ( )}

UsesActionList:
  
    {              ( )}
| _1 = ActionTimeList _2 = OptionalAction
    {                                ( )}
| _1 = TimeActionList _2 = OptionalTime
    {                               ( )}

ActionTimeList:
  _1 = SHARP _2 = LBRACE _3 = Expr _4 = RBRACE
    {                          ( )}
| _1 = ActionTimeList _2 = COLON _3 = UsesActionAttr _4 = SHARP _5 = LBRACE _6 = Expr _7 = RBRACE
    {                                                                ( )}

TimeActionList:
  _1 = COLON _2 = UsesActionAttr
    {                      ( )}
| _1 = TimeActionList _2 = SHARP _3 = LBRACE _4 = Expr _5 = RBRACE _6 = COLON _7 = UsesActionAttr
    {                                                                ( )}

OptionalAction:
  
    {             ( )}
| _1 = COLON _2 = UsesActionAttr
    {                       ( )}

OptionalTime:
  
    {             ( )}
| _1 = SHARP _2 = LBRACE _3 = Expr _4 = RBRACE
    {                           ( )}

UsesActionAttr:
  _1 = ID
    {      ( )}
| _1 = ACTION
    {            ( )}

UsesLocationList:
  _1 = UsesLocation
    {              ( )}
| _1 = UsesLocationList _2 = AMPERS _3 = UsesLocation
    {                                         ( )}

UsesLocation:
  _1 = ID _2 = Opt_Bit_Optr
    {                 ( )}
| _1 = ID _2 = LBRACK _3 = Expr _4 = RBRACK _5 = Opt_SecDim _6 = Opt_Bit_Optr
    {                                                ( )}

Opt_SecDim:
  
    {              ( )}
| _1 = LBRACK _2 = RBRACK
    {                ( )}

%%
