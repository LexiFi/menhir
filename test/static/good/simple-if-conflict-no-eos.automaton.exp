State 0:
phrase' -> . phrase [ # ]
-- On TRUE shift to state 1
-- On IF shift to state 2
-- On FALSE shift to state 3
-- On phrase shift to state 9
-- On expression shift to state 10

State 1:
expression -> TRUE . [ THEN EOF ELSE ]
-- On THEN reduce production expression -> TRUE
-- On EOF reduce production expression -> TRUE
-- On ELSE reduce production expression -> TRUE

State 2:
expression -> IF . expression THEN expression [ THEN EOF ELSE ]
expression -> IF . expression THEN expression ELSE expression [ THEN EOF ELSE ]
-- On TRUE shift to state 1
-- On IF shift to state 2
-- On FALSE shift to state 3
-- On expression shift to state 4

State 3:
expression -> FALSE . [ THEN EOF ELSE ]
-- On THEN reduce production expression -> FALSE
-- On EOF reduce production expression -> FALSE
-- On ELSE reduce production expression -> FALSE

State 4:
expression -> IF expression . THEN expression [ THEN EOF ELSE ]
expression -> IF expression . THEN expression ELSE expression [ THEN EOF ELSE ]
-- On THEN shift to state 5

State 5:
expression -> IF expression THEN . expression [ THEN EOF ELSE ]
expression -> IF expression THEN . expression ELSE expression [ THEN EOF ELSE ]
-- On TRUE shift to state 1
-- On IF shift to state 2
-- On FALSE shift to state 3
-- On expression shift to state 6

State 6:
expression -> IF expression THEN expression . [ THEN EOF ELSE ]
expression -> IF expression THEN expression . ELSE expression [ THEN EOF ELSE ]
-- On ELSE shift to state 7
-- On THEN reduce production expression -> IF expression THEN expression
-- On EOF reduce production expression -> IF expression THEN expression
-- On ELSE reduce production expression -> IF expression THEN expression
** Conflict on ELSE

State 7:
expression -> IF expression THEN expression ELSE . expression [ THEN EOF ELSE ]
-- On TRUE shift to state 1
-- On IF shift to state 2
-- On FALSE shift to state 3
-- On expression shift to state 8

State 8:
expression -> IF expression THEN expression ELSE expression . [ THEN EOF ELSE ]
-- On THEN reduce production expression -> IF expression THEN expression ELSE expression
-- On EOF reduce production expression -> IF expression THEN expression ELSE expression
-- On ELSE reduce production expression -> IF expression THEN expression ELSE expression

State 9:
phrase' -> phrase . [ # ]
-- On # accept phrase

State 10:
phrase -> expression . EOF [ # ]
-- On EOF shift to state 11

State 11:
phrase -> expression EOF . [ # ]
-- On # reduce production phrase -> expression EOF

