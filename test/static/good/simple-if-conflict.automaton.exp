State 0:
expression' -> . expression [ # ]
-- On TRUE shift to state 1
-- On IF shift to state 2
-- On FALSE shift to state 3
-- On expression shift to state 9

State 1:
expression -> TRUE . [ THEN ELSE # ]
-- On THEN reduce production expression -> TRUE
-- On ELSE reduce production expression -> TRUE
-- On # reduce production expression -> TRUE
** End-of-stream conflict on THEN ELSE
**   There is a tension between
**   (1) reducing production expression -> TRUE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 2:
expression -> IF . expression THEN expression [ THEN ELSE # ]
expression -> IF . expression THEN expression ELSE expression [ THEN ELSE # ]
-- On TRUE shift to state 1
-- On IF shift to state 2
-- On FALSE shift to state 3
-- On expression shift to state 4

State 3:
expression -> FALSE . [ THEN ELSE # ]
-- On THEN reduce production expression -> FALSE
-- On ELSE reduce production expression -> FALSE
-- On # reduce production expression -> FALSE
** End-of-stream conflict on THEN ELSE
**   There is a tension between
**   (1) reducing production expression -> FALSE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 4:
expression -> IF expression . THEN expression [ THEN ELSE # ]
expression -> IF expression . THEN expression ELSE expression [ THEN ELSE # ]
-- On THEN shift to state 5

State 5:
expression -> IF expression THEN . expression [ THEN ELSE # ]
expression -> IF expression THEN . expression ELSE expression [ THEN ELSE # ]
-- On TRUE shift to state 1
-- On IF shift to state 2
-- On FALSE shift to state 3
-- On expression shift to state 6

State 6:
expression -> IF expression THEN expression . [ THEN ELSE # ]
expression -> IF expression THEN expression . ELSE expression [ THEN ELSE # ]
-- On ELSE shift to state 7
-- On THEN reduce production expression -> IF expression THEN expression
-- On ELSE reduce production expression -> IF expression THEN expression
-- On # reduce production expression -> IF expression THEN expression
** Conflict on ELSE
** End-of-stream conflict on THEN ELSE
**   There is a tension between
**   (1) reducing production expression -> IF expression THEN expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 7:
expression -> IF expression THEN expression ELSE . expression [ THEN ELSE # ]
-- On TRUE shift to state 1
-- On IF shift to state 2
-- On FALSE shift to state 3
-- On expression shift to state 8

State 8:
expression -> IF expression THEN expression ELSE expression . [ THEN ELSE # ]
-- On THEN reduce production expression -> IF expression THEN expression ELSE expression
-- On ELSE reduce production expression -> IF expression THEN expression ELSE expression
-- On # reduce production expression -> IF expression THEN expression ELSE expression
** End-of-stream conflict on THEN ELSE
**   There is a tension between
**   (1) reducing production expression -> IF expression THEN expression ELSE expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 9:
expression' -> expression . [ # ]
-- On # accept expression

