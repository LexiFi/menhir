File "<standard.mly>", line 226, characters 8-21:
Warning: symbol nonempty_list(tyvar) is unreachable from any of the start symbol(s).
File "smtlib-utils.mly", line 182, characters 0-8:
Warning: symbol par_term is unreachable from any of the start symbol(s).
%{
  module A = Ast

  let consts =
    let tbl = Hashtbl.create 32 in
    let mkc c name ~loc = function
      | [] -> c
      | _ ->
        A.parse_errorf ~loc "wrong arity for constant %s" name
    and mkf1 f name ~loc = function
      | [t] -> f t
      | _ ->
        A.parse_errorf ~loc "wrong arity for unary function %s" name
    and mkl f _name ~loc:_ args =
      f args
    and arith_op op _name ~loc:_ args =
      A.arith op args
    in
    List.iter (fun (s,f) -> Hashtbl.add tbl s f) [
      ("true", mkc A.true_);
      ("false", mkc A.false_);
      ("or", mkl A.or_);
      ("and", mkl A.and_);
      ("not", mkf1 A.not_);
      ("+", arith_op A.Add);
      ("-", arith_op A.Minus);
      ("*", arith_op A.Mult);
      ("/", arith_op A.Div);
      ("<=", arith_op A.Leq);
      ("<", arith_op A.Lt);
      (">=", arith_op A.Geq);
      (">", arith_op A.Gt);
    ];
    tbl

  let apply_const ~loc name args =
    try
      let f = Hashtbl.find consts name in
      f name ~loc args
    with Not_found ->
      if args=[] then A.const name else A.app name args
%}
%start parse
%start parse_list
%start parse_term
%start parse_ty
%token ARROW
%token AS
%token ASSERT
%token AT
%token BANG
%token CHECK_SAT
%token CHECK_SAT_ASSUMING
%token DATA
%token DECLARE_CONST
%token DECLARE_FUN
%token DECLARE_SORT
%token DEFINE_FUN
%token DEFINE_FUNS_REC
%token DEFINE_FUN_REC
%token DISTINCT
%token EOI
%token EQ
%token EXISTS
%token FORALL
%token FUN
%token GET_VALUE
%token <string> IDENT
%token IF
%token IS
%token LEFT_PAREN
%token LET
%token MATCH
%token PAR
%token <string> QUOTED
%token RIGHT_PAREN
%token WILDCARD
%type <Ast.statement> parse
%type <Ast.statement list> parse_list
%type <Ast.term> parse_term
%type <Ast.ty> parse_ty
%%

list_anystr_:
  
    {    ( [] )} [@name nil_anystr]
| x = anystr xs = list_anystr_
    {    ( x :: xs )} [@name cons_anystr]

list_cstor_arg_:
  
    {    ( [] )} [@name nil_cstor_arg]
| x = cstor_arg xs = list_cstor_arg_
    {    ( x :: xs )} [@name cons_cstor_arg]

list_prop_lit_:
  
    {    ( [] )} [@name nil_prop_lit]
| x = prop_lit xs = list_prop_lit_
    {    ( x :: xs )} [@name cons_prop_lit]

list_stmt_:
  
    {    ( [] )} [@name nil_stmt]
| x = stmt xs = list_stmt_
    {    ( x :: xs )} [@name cons_stmt]

list_ty_:
  
    {    ( [] )} [@name nil_ty]
| x = ty xs = list_ty_
    {    ( x :: xs )} [@name cons_ty]

list_typed_var_:
  
    {    ( [] )} [@name nil_typed_var]
| x = typed_var xs = list_typed_var_
    {    ( x :: xs )} [@name cons_typed_var]

list_tyvar_:
  
    {    ( [] )} [@name nil_tyvar]
| x = tyvar xs = list_tyvar_
    {    ( x :: xs )} [@name cons_tyvar]

nonempty_list_attr_:
  x = attr
    {    ( [ x ] )} [@name one_attr]
| x = attr xs = nonempty_list_attr_
    {    ( x :: xs )} [@name more_attr]

nonempty_list_binding_:
  x = binding
    {    ( [ x ] )} [@name one_binding]
| x = binding xs = nonempty_list_binding_
    {    ( x :: xs )} [@name more_binding]

nonempty_list_case_:
  x = case
    {    ( [ x ] )} [@name one_case]
| x = case xs = nonempty_list_case_
    {    ( x :: xs )} [@name more_case]

nonempty_list_cstor_:
  x = cstor
    {    ( [ x ] )} [@name one_cstor]
| x = cstor xs = nonempty_list_cstor_
    {    ( x :: xs )} [@name more_cstor]

nonempty_list_cstors_:
  x = cstors
    {    ( [ x ] )} [@name one_cstors]
| x = cstors xs = nonempty_list_cstors_
    {    ( x :: xs )} [@name more_cstors]

nonempty_list_funs_rec_decl_:
  x = funs_rec_decl
    {    ( [ x ] )} [@name one_funs_rec_decl]
| x = funs_rec_decl xs = nonempty_list_funs_rec_decl_
    {    ( x :: xs )} [@name more_funs_rec_decl]

nonempty_list_term_:
  x = term
    {    ( [ x ] )} [@name one_term]
| x = term xs = nonempty_list_term_
    {    ( x :: xs )} [@name more_term]

nonempty_list_ty_:
  x = ty
    {    ( [ x ] )} [@name one_ty]
| x = ty xs = nonempty_list_ty_
    {    ( x :: xs )} [@name more_ty]

nonempty_list_ty_decl_paren_:
  x = ty_decl_paren
    {    ( [ x ] )} [@name one_ty_decl_paren]
| x = ty_decl_paren xs = nonempty_list_ty_decl_paren_
    {    ( x :: xs )} [@name more_ty_decl_paren]

nonempty_list_typed_var_:
  x = typed_var
    {    ( [ x ] )} [@name one_typed_var]
| x = typed_var xs = nonempty_list_typed_var_
    {    ( x :: xs )} [@name more_typed_var]

nonempty_list_var_:
  x = var
    {    ( [ x ] )} [@name one_var]
| x = var xs = nonempty_list_var_
    {    ( x :: xs )} [@name more_var]

parse_list:
  l = list_stmt_ _2 = EOI
    {                        (l)}

parse:
  t = stmt _2 = EOI
    {                  ( t )}

parse_term:
  t = term _2 = EOI
    {                       ( t )}

parse_ty:
  t = ty _2 = EOI
    {                   ( t )}

cstor_arg:
  _1 = LEFT_PAREN name = IDENT ty = ty _4 = RIGHT_PAREN
    {                                            ( name, ty )}

cstor_dec:
  _1 = LEFT_PAREN c = IDENT l = list_cstor_arg_ _4 = RIGHT_PAREN
    {                                                ( c, l )}

cstor:
  dec = cstor_dec
    {                  ( let c,l = dec in A.mk_cstor ~vars:[] c l )}
| _1 = LEFT_PAREN _2 = PAR _3 = LEFT_PAREN vars = nonempty_list_var_ _5 = RIGHT_PAREN dec = cstor_dec _7 = RIGHT_PAREN
    {    ( let c,l = dec in A.mk_cstor ~vars c l )}

cstors:
  _1 = LEFT_PAREN l = nonempty_list_cstor_ _3 = RIGHT_PAREN
    {                                    ( l )}

ty_decl_paren:
  _1 = LEFT_PAREN s = IDENT n = IDENT _3 = RIGHT_PAREN
    {let ty =
  let _endpos = _endpos_n_ in
  let _startpos = _startpos_s_ in
                       (
      let loc = Loc.mk_pos _startpos _endpos in
      try
        let n = int_of_string n in
        s, n
      with Failure _ ->
        A.parse_errorf ~loc "expected arity to be an integer, not `%s`" n
  )
in
                                      ( ty )}

fun_def_mono:
  f = IDENT _2 = LEFT_PAREN args = list_typed_var_ _4 = RIGHT_PAREN ret = ty
    {    ( f, args, ret )}

fun_decl_mono:
  f = IDENT _2 = LEFT_PAREN args = list_ty_ _4 = RIGHT_PAREN ret = ty
    {    ( f, args, ret )}

fun_decl:
  tup = fun_decl_mono
    {                      ( let f, args, ret = tup in [], f, args, ret )}
| _1 = LEFT_PAREN _2 = PAR _3 = LEFT_PAREN tyvars = list_tyvar_ _5 = RIGHT_PAREN _6 = LEFT_PAREN tup = fun_decl_mono _8 = RIGHT_PAREN _9 = RIGHT_PAREN
    {    ( let f, args, ret = tup in tyvars, f, args, ret )}

fun_rec:
  tup = fun_def_mono body = term
    {    (
      let f, args, ret = tup in
      A.mk_fun_rec ~ty_vars:[] f args ret body
    )}
| _1 = LEFT_PAREN _2 = PAR _3 = LEFT_PAREN l = list_tyvar_ _5 = RIGHT_PAREN _6 = LEFT_PAREN tup = fun_def_mono body = term _9 = RIGHT_PAREN _10 = RIGHT_PAREN
    {    (
      let f, args, ret = tup in
      A.mk_fun_rec ~ty_vars:l f args ret body
    )}

funs_rec_decl:
  _1 = LEFT_PAREN tup = fun_def_mono _3 = RIGHT_PAREN
    {    (
      let f, args, ret = tup in
      A.mk_fun_decl ~ty_vars:[] f args ret
    )}
| _1 = LEFT_PAREN _2 = PAR _3 = LEFT_PAREN l = list_tyvar_ _5 = RIGHT_PAREN _6 = LEFT_PAREN tup = fun_def_mono _8 = RIGHT_PAREN _9 = RIGHT_PAREN
    {    (
      let f, args, ret = tup in
      A.mk_fun_decl ~ty_vars:l f args ret
    )}

anystr:
  s = IDENT
    {            (s)}
| s = QUOTED
    {             (s)}

prop_lit:
  s = var
    {          ( s, true )}
| _1 = LEFT_PAREN not_ = IDENT s = var _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
                                            (
    if not_ = "not" then s, false
    else
      let loc = Loc.mk_pos _startpos _endpos in
      A.parse_errorf ~loc "expected `not`, not `%s`" not_
    )}

stmt:
  _1 = LEFT_PAREN _2 = ASSERT t = term _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.assert_ ~loc t
    )}
| _1 = LEFT_PAREN _2 = DECLARE_SORT s = IDENT n = IDENT _4 = RIGHT_PAREN
    {let td =
  let _endpos = _endpos_n_ in
  let _startpos = _startpos_s_ in
                       (
      let loc = Loc.mk_pos _startpos _endpos in
      try
        let n = int_of_string n in
        s, n
      with Failure _ ->
        A.parse_errorf ~loc "expected arity to be an integer, not `%s`" n
  )
in
let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      let s, n = td in
      A.decl_sort ~loc s ~arity:n
    )}
| _1 = LEFT_PAREN _2 = DATA _3 = LEFT_PAREN tys = nonempty_list_ty_decl_paren_ _5 = RIGHT_PAREN _6 = LEFT_PAREN l = nonempty_list_cstors_ _8 = RIGHT_PAREN _9 = RIGHT_PAREN
    {let _endpos = _endpos__9_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.data_zip ~loc tys l
    )}
| _1 = LEFT_PAREN _2 = DECLARE_FUN tup = fun_decl _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      let tyvars, f, args, ret = tup in
      A.decl_fun ~loc ~tyvars f args ret
    )}
| _1 = LEFT_PAREN _2 = DECLARE_CONST f = IDENT ty = ty _5 = RIGHT_PAREN
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.decl_fun ~loc ~tyvars:[] f [] ty
    )}
| _1 = LEFT_PAREN _2 = DEFINE_FUN f = fun_rec _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.fun_def ~loc f
    )}
| _1 = LEFT_PAREN _2 = DEFINE_FUN_REC f = fun_rec _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.fun_rec ~loc f
    )}
| _1 = LEFT_PAREN _2 = DEFINE_FUNS_REC _3 = LEFT_PAREN decls = nonempty_list_funs_rec_decl_ _5 = RIGHT_PAREN _6 = LEFT_PAREN bodies = nonempty_list_term_ _8 = RIGHT_PAREN _9 = RIGHT_PAREN
    {let _endpos = _endpos__9_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.funs_rec ~loc decls bodies
    )}
| _1 = LEFT_PAREN _2 = CHECK_SAT _3 = RIGHT_PAREN
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.check_sat ~loc ()
    )}
| _1 = LEFT_PAREN _2 = CHECK_SAT_ASSUMING _3 = LEFT_PAREN l = list_prop_lit_ _5 = RIGHT_PAREN _6 = RIGHT_PAREN
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.check_sat_assuming ~loc l
    )}
| _1 = LEFT_PAREN _2 = GET_VALUE l = nonempty_list_term_ _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.get_value ~loc l
    )}
| _1 = LEFT_PAREN s = IDENT args = list_anystr_ _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      match s, args with
      | "exit", [] -> A.exit ~loc ()
      | "set-logic", [l] -> A.set_logic ~loc l
      | "set-info", [a;b] -> A.set_info ~loc a b
      | "set-option", l -> A.set_option ~loc l
      | "get-option", [a] -> A.get_option ~loc a
      | "get-info", [a] -> A.get_info ~loc a
      | "get-assertions", [] -> A.get_assertions ~loc ()
      | "get-assignment", [] -> A.get_assignment ~loc ()
      | "get-proof", [] -> A.get_proof ~loc ()
      | "get-model", [] -> A.get_model ~loc ()
      | "get-unsat-core", [] -> A.get_unsat_core ~loc ()
      | "get-unsat-assumptions", [] -> A.get_unsat_assumptions ~loc ()
      | "reset", [] -> A.reset ~loc ()
      | "reset-assertions", [] -> A.reset_assertions ~loc ()
      | "push", [x] ->
        (try A.push ~loc (int_of_string x) with _ ->
         A.parse_errorf ~loc "expected an integer argument for push, not %s" x)
      | "pop", [x] ->
        (try A.pop ~loc (int_of_string x) with _ ->
         A.parse_errorf ~loc "expected an integer argument for pop, not %s" x)
      | _ ->
        A.parse_errorf ~loc "expected statement"
    )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.parse_errorf ~loc "expected statement"
    )}

var:
  _1 = WILDCARD
    {             ( "_" )}
| s = IDENT
    {            ( s )}

tyvar:
  s = IDENT
    {            ( s )}

ty:
  s = IDENT
    {            (
    begin match s with
      | "Bool" -> A.ty_bool
      | "Real" -> A.ty_real
      | _ -> A.ty_const s
    end
    )}
| _1 = LEFT_PAREN s = IDENT args = nonempty_list_ty_ _4 = RIGHT_PAREN
    {    ( A.ty_app s args )}
| _1 = LEFT_PAREN _2 = ARROW tup = ty_arrow_args _4 = RIGHT_PAREN
    {    (
      let args, ret = tup in
      A.ty_arrow_l args ret )}

ty_arrow_args:
  a = ty ret = ty
    {                ( [a], ret )}
| a = ty tup = ty_arrow_args
    {                           ( a :: fst tup, snd tup )}

typed_var:
  _1 = LEFT_PAREN s = var ty = ty _4 = RIGHT_PAREN
    {                                       ( s, ty )}

case:
  _1 = LEFT_PAREN c = IDENT rhs = term _4 = RIGHT_PAREN
    {    ( A.Match_case (c, [], rhs) )}
| _1 = LEFT_PAREN _2 = LEFT_PAREN c = IDENT vars = nonempty_list_var_ _5 = RIGHT_PAREN rhs = term _7 = RIGHT_PAREN
    {    ( A.Match_case (c, vars, rhs) )}
| _1 = LEFT_PAREN _2 = WILDCARD rhs = term _4 = RIGHT_PAREN
    {    ( A.Match_default rhs )}

binding:
  _1 = LEFT_PAREN v = var t = term _4 = RIGHT_PAREN
    {                                        ( v, t )}

term:
  s = QUOTED
    {             ( A.const s )}
| s = IDENT
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
            (
    let loc = Loc.mk_pos _startpos _endpos in
    apply_const ~loc s []
    )}
| t = composite_term
    {                     ( t )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    (
      let loc = Loc.mk_pos _startpos _endpos in
      A.parse_errorf ~loc "expected term"
    )}

attr:
  a = IDENT b = anystr
    {                     ( a,b )}

composite_term:
  _1 = LEFT_PAREN t = term _3 = RIGHT_PAREN
    {                                  ( t )}
| _1 = LEFT_PAREN _2 = IF a = term b = term c = term _6 = RIGHT_PAREN
    {                                                   ( A.if_ a b c )}
| _1 = LEFT_PAREN _2 = DISTINCT l = nonempty_list_term_ _4 = RIGHT_PAREN
    {                                            ( A.distinct l )}
| _1 = LEFT_PAREN _2 = EQ a = term b = term _5 = RIGHT_PAREN
    {                                            ( A.eq a b )}
| _1 = LEFT_PAREN _2 = ARROW a = term b = term _5 = RIGHT_PAREN
    {                                               ( A.imply a b )}
| _1 = LEFT_PAREN f = IDENT args = nonempty_list_term_ _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
                                              (
    let loc = Loc.mk_pos _startpos _endpos in
    apply_const ~loc f args )}
| _1 = LEFT_PAREN f = composite_term args = nonempty_list_term_ _4 = RIGHT_PAREN
    {                                                       ( A.ho_app_l f args )}
| _1 = LEFT_PAREN _2 = AT f = term arg = term _5 = RIGHT_PAREN
    {                                              ( A.ho_app f arg )}
| _1 = LEFT_PAREN _2 = BANG t = term attrs = nonempty_list_attr_ _5 = RIGHT_PAREN
    {                                                   ( A.attr t attrs )}
| _1 = LEFT_PAREN _2 = MATCH lhs = term _4 = LEFT_PAREN l = nonempty_list_case_ _6 = RIGHT_PAREN _7 = RIGHT_PAREN
    {    ( A.match_ lhs l )}
| _1 = LEFT_PAREN _2 = FUN _3 = LEFT_PAREN vars = nonempty_list_typed_var_ _5 = RIGHT_PAREN body = term _7 = RIGHT_PAREN
    {    ( A.fun_l vars body )}
| _1 = LEFT_PAREN _2 = LEFT_PAREN _3 = WILDCARD _4 = IS c = IDENT _6 = RIGHT_PAREN t = term _8 = RIGHT_PAREN
    {    ( A.is_a c t )}
| _1 = LEFT_PAREN _2 = LET _3 = LEFT_PAREN l = nonempty_list_binding_ _5 = RIGHT_PAREN r = term _7 = RIGHT_PAREN
    {    ( A.let_ l r )}
| _1 = LEFT_PAREN _2 = AS t = term ty = ty _5 = RIGHT_PAREN
    {    ( A.cast t ~ty )}
| _1 = LEFT_PAREN _2 = FORALL _3 = LEFT_PAREN vars = nonempty_list_typed_var_ _5 = RIGHT_PAREN f = term _7 = RIGHT_PAREN
    {    ( A.forall vars f )}
| _1 = LEFT_PAREN _2 = EXISTS _3 = LEFT_PAREN vars = nonempty_list_typed_var_ _5 = RIGHT_PAREN f = term _7 = RIGHT_PAREN
    {    ( A.exists vars f )}

%%


