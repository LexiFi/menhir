State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On A shift to state 1
-- On main shift to state 4
-- On liste(A) shift to state 5
## Reductions:
-- On B reduce production liste(A) ->

State 1:
## Known stack suffix:
## A
## LR(1) items:
liste(A) -> A . A liste(A) [ B ]
## Transitions:
-- On A shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## A A
## LR(1) items:
liste(A) -> A A . liste(A) [ B ]
## Transitions:
-- On A shift to state 1
-- On liste(A) shift to state 3
## Reductions:
-- On B reduce production liste(A) ->

State 3:
## Known stack suffix:
## A A liste(A)
## LR(1) items:
liste(A) -> A A liste(A) . [ B ]
## Transitions:
## Reductions:
-- On B reduce production liste(A) -> A A liste(A)

State 4:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

State 5:
## Known stack suffix:
## liste(A)
## LR(1) items:
main -> liste(A) . B EOF [ # ]
## Transitions:
-- On B shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## liste(A) B
## LR(1) items:
main -> liste(A) B . EOF [ # ]
## Transitions:
-- On EOF shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## liste(A) B EOF
## LR(1) items:
main -> liste(A) B EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> liste(A) B EOF

