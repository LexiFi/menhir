
** Conflict (shift/reduce) in state 632.
** Token involved: LPAREN
** This state is reached from input after reading:

insert_cmd IDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
(?)

** In state 632, looking ahead at LPAREN, reducing production
** option(sequence(IDENT)) ->
** is permitted because of the following sub-derivation:

insert_cmd IDENT option(sequence(IDENT)) maybe_parenth(select_stmt) option(on_duplicate) // lookahead token appears because maybe_parenth(select_stmt) can begin with LPAREN
                 . 

** In state 632, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

insert_cmd IDENT option(sequence(IDENT)) VALUES option(commas(sequence(expr))) option(on_duplicate) 
                 . LPAREN separated_nonempty_list(COMMA,IDENT) RPAREN 

** Conflict (shift/reduce) in state 606.
** Token involved: SET
** This state is reached from input after reading:

update_cmd IDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
(?)

** In state 606, looking ahead at SET, reducing production
** source1 -> IDENT
** is permitted because of the following sub-derivation:

update_cmd separated_nonempty_list(COMMA,source) SET separated_nonempty_list(COMMA,set_column) option(where) // lookahead token appears
           source // lookahead token is inherited
           source1 maybe_as // lookahead token is inherited because maybe_as can vanish
           IDENT . 

** In state 606, looking ahead at SET, shifting is permitted
** because of the following sub-derivation:

update_cmd IDENT . SET separated_nonempty_list(COMMA,set_column) option(where) loption(order) loption(limit) 

** Conflict (shift/reduce) in state 443.
** Token involved: COLLATE
** This state is reached from input after reading:

CREATE TABLE IDENT LPAREN IDENT option(NATIONAL) text option(VARYING) option(charset)

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
CREATE TABLE IDENT table_definition 
                   LPAREN separated_nonempty_list(COMMA,column_def1) table_def_done 
                          column_def1 
                          column_def 
                          (?)

** In state 443, looking ahead at COLLATE, shifting is permitted
** because of the following sub-derivation:

IDENT option(sql_type) list(column_def_extra) 
      sql_type 
      sql_type_flavor 
      option(NATIONAL) text option(VARYING) option(charset) option(collate) 
                                                            collate 
                                                            . COLLATE IDENT 

** In state 443, looking ahead at COLLATE, reducing production
** option(collate) ->
** is permitted because of the following sub-derivation:

IDENT option(sql_type) list(column_def_extra) // lookahead token appears because list(column_def_extra) can begin with COLLATE
      sql_type // lookahead token is inherited
      sql_type_flavor // lookahead token is inherited
      option(NATIONAL) text option(VARYING) option(charset) option(collate) // lookahead token is inherited
                                                            . 

** Conflict (shift/reduce) in state 435.
** Token involved: LPAREN
** This state is reached from input after reading:

CREATE TABLE IDENT LPAREN IDENT option(NATIONAL) T_TEXT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
CREATE TABLE IDENT table_definition 
                   LPAREN separated_nonempty_list(COMMA,column_def1) table_def_done 
                          column_def1 
                          column_def 
                          IDENT option(sql_type) list(column_def_extra) 
                                sql_type 
                                (?)

** In state 435, looking ahead at LPAREN, reducing production
** text -> T_TEXT
** is permitted because of the following sub-derivation:

sql_type_flavor LPAREN INTEGER RPAREN option(UNSIGNED) // lookahead token appears
option(NATIONAL) text option(VARYING) option(charset) option(collate) // lookahead token is inherited because option(VARYING) option(charset) option(collate) can vanish
                 T_TEXT . 

** In state 435, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

sql_type_flavor 
option(NATIONAL) text option(VARYING) option(charset) option(collate) 
                 T_TEXT . LPAREN INTEGER RPAREN 

** Conflict (shift/reduce) in state 390.
** Token involved: COLLATE
** This state is reached from input after reading:

CREATE TABLE IDENT LPAREN IDENT ENUM LPAREN separated_nonempty_list(COMMA,TEXT) RPAREN option(charset)

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
CREATE TABLE IDENT table_definition 
                   LPAREN separated_nonempty_list(COMMA,column_def1) table_def_done 
                          column_def1 
                          column_def 
                          (?)

** In state 390, looking ahead at COLLATE, shifting is permitted
** because of the following sub-derivation:

IDENT option(sql_type) list(column_def_extra) 
      sql_type 
      sql_type_flavor 
      ENUM LPAREN separated_nonempty_list(COMMA,TEXT) RPAREN option(charset) option(collate) 
                                                                             collate 
                                                                             . COLLATE IDENT 

** In state 390, looking ahead at COLLATE, reducing production
** option(collate) ->
** is permitted because of the following sub-derivation:

IDENT option(sql_type) list(column_def_extra) // lookahead token appears because list(column_def_extra) can begin with COLLATE
      sql_type // lookahead token is inherited
      sql_type_flavor // lookahead token is inherited
      ENUM LPAREN separated_nonempty_list(COMMA,TEXT) RPAREN option(charset) option(collate) // lookahead token is inherited
                                                                             . 

** Conflict (shift/reduce) in state 300.
** Tokens involved: NOT LIKE_OP LIKE IS IN BETWEEN
** The following explanations concentrate on token NOT.
** This state is reached from input after reading:

SELECT option(select_type) MINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 300, looking ahead at NOT, reducing production
** expr -> MINUS expr
** is permitted because of the following sub-derivation:

expr mnot(like) expr option(escape) // lookahead token appears because mnot(like) can begin with NOT
MINUS expr . 

** In state 300, looking ahead at NOT, shifting is permitted
** because of the following sub-derivation:

MINUS expr 
      expr mnot(BETWEEN) expr AND expr 
           . NOT BETWEEN 

** Conflict (shift/reduce) in state 263.
** Token involved: ON
** This state is reached from input after reading:

insert_cmd IDENT option(sequence(IDENT)) SELECT option(select_type) separated_nonempty_list(COMMA,column1) FROM source qualified_join source

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
(?)

** In state 263, looking ahead at ON, shifting is permitted
** because of the following sub-derivation:

insert_cmd IDENT option(sequence(IDENT)) maybe_parenth(select_stmt) option(on_duplicate) 
                                         select_stmt 
                                         select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
                                         SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                                                                                                           from 
                                                                                                           FROM table_list 
                                                                                                                source list(join_source) 
                                                                                                                       join_source list(join_source) 
                                                                                                                       qualified_join source join_cond 
                                                                                                                                             . ON expr 

** In state 263, looking ahead at ON, reducing production
** join_cond ->
** is permitted because of the following sub-derivation:

insert_cmd IDENT option(sequence(IDENT)) maybe_parenth(select_stmt) option(on_duplicate) // lookahead token appears because option(on_duplicate) can begin with ON
                                         select_stmt // lookahead token is inherited
                                         select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) // lookahead token is inherited because list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) can vanish
                                         SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) // lookahead token is inherited because option(where) loption(group) option(having) can vanish
                                                                                                           from // lookahead token is inherited
                                                                                                           FROM table_list // lookahead token is inherited
                                                                                                                source list(join_source) // lookahead token is inherited
                                                                                                                       join_source list(join_source) // lookahead token is inherited because list(join_source) can vanish
                                                                                                                       qualified_join source join_cond // lookahead token is inherited
                                                                                                                                             . 

** Conflict (shift/reduce) in state 183.
** Tokens involved: PLUS OR NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NOT_DISTINCT_OP NOT MINUS LIKE_OP LIKE IS IN EQUAL CONCAT_OP BETWEEN ASTERISK AND
** The following explanations concentrate on token PLUS.
** This state is reached from input after reading:

SELECT option(select_type) unary_op expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 183, looking ahead at PLUS, reducing production
** expr -> unary_op expr
** is permitted because of the following sub-derivation:

expr numeric_bin_op expr // lookahead token appears because numeric_bin_op can begin with PLUS
unary_op expr . 

** In state 183, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

unary_op expr 
         expr numeric_bin_op expr 
              . PLUS 

** Conflict (shift/reduce) in state 129.
** Tokens involved: NOT LIKE_OP LIKE IS IN BETWEEN
** The following explanations concentrate on token NOT.
** This state is reached from input after reading:

SELECT option(select_type) expr boolean_bin_op expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 129, looking ahead at NOT, reducing production
** expr -> expr boolean_bin_op expr
** is permitted because of the following sub-derivation:

expr mnot(like) expr option(escape) // lookahead token appears because mnot(like) can begin with NOT
expr boolean_bin_op expr . 

** In state 129, looking ahead at NOT, shifting is permitted
** because of the following sub-derivation:

expr boolean_bin_op expr 
                    expr mnot(BETWEEN) expr AND expr 
                         . NOT BETWEEN 

** Conflict (shift/reduce) in state 127.
** Tokens involved: NOT LIKE_OP LIKE IS IN BETWEEN
** The following explanations concentrate on token NOT.
** This state is reached from input after reading:

SELECT option(select_type) expr comparison_op option(anyall) expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 127, looking ahead at NOT, reducing production
** expr -> expr comparison_op option(anyall) expr
** is permitted because of the following sub-derivation:

expr mnot(like) expr option(escape) // lookahead token appears because mnot(like) can begin with NOT
expr comparison_op option(anyall) expr . 

** In state 127, looking ahead at NOT, shifting is permitted
** because of the following sub-derivation:

expr comparison_op option(anyall) expr 
                                  expr mnot(BETWEEN) expr AND expr 
                                       . NOT BETWEEN 

** Conflict (shift/reduce) in state 120.
** Tokens involved: NOT LIKE_OP LIKE IS IN BETWEEN
** The following explanations concentrate on token NOT.
** This state is reached from input after reading:

SELECT option(select_type) expr mnot(BETWEEN) expr AND expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 120, looking ahead at NOT, reducing production
** expr -> expr mnot(BETWEEN) expr AND expr
** is permitted because of the following sub-derivation:

expr mnot(like) expr option(escape) // lookahead token appears because mnot(like) can begin with NOT
expr mnot(BETWEEN) expr AND expr . 

** In state 120, looking ahead at NOT, shifting is permitted
** because of the following sub-derivation:

expr mnot(BETWEEN) expr AND expr 
                            expr mnot(BETWEEN) expr AND expr 
                                 . NOT BETWEEN 

** Conflict (shift/reduce) in state 119.
** Tokens involved: VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
** The following explanations concentrate on token VALUES.
** This state is reached from input after reading:

SELECT option(select_type) expr mnot(BETWEEN) expr AND

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 119, looking ahead at VALUES, reducing production
** boolean_bin_op -> AND
** is permitted because of the following sub-derivation:

expr mnot(BETWEEN) expr AND expr 
                   expr boolean_bin_op expr // lookahead token appears because expr can begin with VALUES
                        AND . 

** In state 119, looking ahead at VALUES, shifting is permitted
** because of the following sub-derivation:

expr mnot(BETWEEN) expr AND expr 
                            . VALUES LPAREN IDENT RPAREN 

** Conflict (shift/reduce) in state 104.
** Tokens involved: PLUS OR NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NOT_DISTINCT_OP NOT MINUS LIKE_OP LIKE IS IN EQUAL CONCAT_OP BETWEEN ASTERISK AND
** The following explanations concentrate on token PLUS.
** This state is reached from input after reading:

SELECT option(select_type) expr mnot(like) expr ESCAPE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 104, looking ahead at PLUS, reducing production
** escape -> ESCAPE expr
** is permitted because of the following sub-derivation:

expr numeric_bin_op expr // lookahead token appears because numeric_bin_op can begin with PLUS
expr mnot(like) expr option(escape) // lookahead token is inherited
                     escape // lookahead token is inherited
                     ESCAPE expr . 

** In state 104, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

expr mnot(like) expr option(escape) 
                     escape 
                     ESCAPE expr 
                            expr numeric_bin_op expr 
                                 . PLUS 

** Conflict (shift/reduce) in state 102.
** Tokens involved: PLUS OR NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NOT_DISTINCT_OP NOT MINUS LIKE_OP LIKE IS IN ESCAPE EQUAL CONCAT_OP BETWEEN ASTERISK AND
** The following explanations concentrate on token PLUS.
** This state is reached from input after reading:

SELECT option(select_type) expr mnot(like) expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 102, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

expr mnot(like) expr option(escape) 
                expr numeric_bin_op expr 
                     . PLUS 

** In state 102, looking ahead at PLUS, reducing production
** option(escape) ->
** is permitted because of the following sub-derivation:

expr numeric_bin_op expr // lookahead token appears because numeric_bin_op can begin with PLUS
expr mnot(like) expr option(escape) // lookahead token is inherited
                     . 

** Conflict (shift/reduce) in state 99.
** Tokens involved: NOT LIKE_OP LIKE IS IN BETWEEN
** The following explanations concentrate on token NOT.
** This state is reached from input after reading:

SELECT option(select_type) expr numeric_bin_op expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 99, looking ahead at NOT, reducing production
** expr -> expr numeric_bin_op expr
** is permitted because of the following sub-derivation:

expr mnot(like) expr option(escape) // lookahead token appears because mnot(like) can begin with NOT
expr numeric_bin_op expr . 

** In state 99, looking ahead at NOT, shifting is permitted
** because of the following sub-derivation:

expr numeric_bin_op expr 
                    expr mnot(BETWEEN) expr AND expr 
                         . NOT BETWEEN 

** Conflict (shift/reduce) in state 96.
** Tokens involved: NOT LIKE_OP LIKE IS IN BETWEEN
** The following explanations concentrate on token NOT.
** This state is reached from input after reading:

SELECT option(select_type) expr CONCAT_OP expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 96, looking ahead at NOT, reducing production
** expr -> expr CONCAT_OP expr
** is permitted because of the following sub-derivation:

expr mnot(like) expr option(escape) // lookahead token appears because mnot(like) can begin with NOT
expr CONCAT_OP expr . 

** In state 96, looking ahead at NOT, shifting is permitted
** because of the following sub-derivation:

expr CONCAT_OP expr 
               expr mnot(BETWEEN) expr AND expr 
                    . NOT BETWEEN 

** Conflict (shift/reduce) in state 91.
** Tokens involved: PLUS OR NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NOT_DISTINCT_OP NOT MINUS LIKE_OP LIKE IS IN EQUAL CONCAT_OP BETWEEN ASTERISK AND
** The following explanations concentrate on token PLUS.
** This state is reached from input after reading:

SELECT option(select_type) expr IS option(NOT) option(distinct_from) expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 91, looking ahead at PLUS, reducing production
** expr -> expr IS option(NOT) option(distinct_from) expr
** is permitted because of the following sub-derivation:

expr numeric_bin_op expr // lookahead token appears because numeric_bin_op can begin with PLUS
expr IS option(NOT) option(distinct_from) expr . 

** In state 91, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

expr IS option(NOT) option(distinct_from) expr 
                                          expr numeric_bin_op expr 
                                               . PLUS 

** Conflict (shift/reduce) in state 86.
** Token involved: NULL
** This state is reached from input after reading:

SELECT option(select_type) expr IS option(NOT)

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 86, looking ahead at NULL, shifting is permitted
** because of the following sub-derivation:

expr IS option(NOT) . NULL 

** In state 86, looking ahead at NULL, reducing production
** option(distinct_from) ->
** is permitted because of the following sub-derivation:

expr IS option(NOT) option(distinct_from) expr // lookahead token appears because expr can begin with NULL
                    . 

** Conflict (shift/reduce) in state 84.
** Token involved: NOT
** This state is reached from input after reading:

SELECT option(select_type) expr IS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 84, looking ahead at NOT, reducing production
** option(NOT) ->
** is permitted because of the following sub-derivation:

expr IS option(NOT) option(distinct_from) expr // lookahead token appears because option(distinct_from) can vanish and expr can begin with NOT
        . 

** In state 84, looking ahead at NOT, shifting is permitted
** because of the following sub-derivation:

expr IS option(NOT) NULL 
        . NOT 

** Conflict (shift/reduce) in state 22.
** Token involved: EXISTS
** This state is reached from input after reading:

SELECT option(select_type) NOT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

input 
statement EOF 
select_stmt 
select_core list(preceded(compound_op,select_core)) loption(order) option(limit_t) option(select_row_locking) 
SELECT option(select_type) separated_nonempty_list(COMMA,column1) option(from) option(where) loption(group) option(having) 
                           column1 
                           expr maybe_as 
                           (?)

** In state 22, looking ahead at EXISTS, shifting is permitted
** because of the following sub-derivation:

mnot(EXISTS) LPAREN select_stmt RPAREN 
NOT . EXISTS 

** In state 22, looking ahead at EXISTS, reducing production
** unary_op -> NOT
** is permitted because of the following sub-derivation:

unary_op expr // lookahead token appears because expr can begin with EXISTS
NOT . 
