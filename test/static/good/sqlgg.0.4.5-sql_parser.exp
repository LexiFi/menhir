Grammar has 170 nonterminal symbols, among which 1 start symbols.
Grammar has 169 terminal symbols.
Grammar has 427 productions.
nullable(with_lock) = false
nullable(where) = false
nullable(update_or_share_of) = false
nullable(update_cmd) = false
nullable(unary_op) = false
nullable(text) = false
nullable(temporary) = false
nullable(table_name) = false
nullable(table_list) = false
nullable(table_definition) = false
nullable(table_def_done1) = true
nullable(table_def_done) = false
nullable(table_constraint_1) = false
nullable(statement) = false
nullable(sql_type_flavor) = false
nullable(sql_type) = false
nullable(source1) = false
nullable(source) = false
nullable(some_key) = false
nullable(single_literal_value) = false
nullable(set_column) = false
nullable(separated_nonempty_list(COMMA,terminated(expr,option(order_type)))) = false
nullable(separated_nonempty_list(COMMA,source)) = false
nullable(separated_nonempty_list(COMMA,set_column)) = false
nullable(separated_nonempty_list(COMMA,sequence(expr))) = false
nullable(separated_nonempty_list(COMMA,proc_parameter)) = false
nullable(separated_nonempty_list(COMMA,index_column)) = false
nullable(separated_nonempty_list(COMMA,func_parameter)) = false
nullable(separated_nonempty_list(COMMA,expr)) = false
nullable(separated_nonempty_list(COMMA,column_def1)) = false
nullable(separated_nonempty_list(COMMA,column1)) = false
nullable(separated_nonempty_list(COMMA,alter_action)) = false
nullable(separated_nonempty_list(COMMA,TEXT)) = false
nullable(separated_nonempty_list(COMMA,IDENT)) = false
nullable(select_type) = false
nullable(select_stmt) = false
nullable(select_row_locking) = false
nullable(select_core) = false
nullable(routine_extra) = false
nullable(routine_body) = false
nullable(reference_action_clause) = false
nullable(reference_action) = false
nullable(qualified_join) = false
nullable(proc_parameter) = false
nullable(parameter_mode) = false
nullable(parameter_default_) = false
nullable(parameter_default) = false
nullable(order_type) = false
nullable(order) = false
nullable(or_replace) = false
nullable(option(with_lock)) = true
nullable(option(where)) = true
nullable(option(update_or_share_of)) = true
nullable(option(sql_type)) = true
nullable(option(sequence(IDENT))) = true
nullable(option(select_type)) = true
nullable(option(select_row_locking)) = true
nullable(option(routine_extra)) = true
nullable(option(preceded(ELSE,expr))) = true
nullable(option(parameter_mode)) = true
nullable(option(parameter_default)) = true
nullable(option(pair(CONSTRAINT,IDENT))) = true
nullable(option(order_type)) = true
nullable(option(or_replace)) = true
nullable(option(on_duplicate)) = true
nullable(option(limit_t)) = true
nullable(option(index_prefix)) = true
nullable(option(if_not_exists)) = true
nullable(option(if_exists)) = true
nullable(option(having)) = true
nullable(option(from)) = true
nullable(option(expr)) = true
nullable(option(escape)) = true
nullable(option(either(GLOBAL,LOCAL))) = true
nullable(option(drop_behavior)) = true
nullable(option(distinct_from)) = true
nullable(option(commas(set_column))) = true
nullable(option(commas(sequence(expr)))) = true
nullable(option(collate)) = true
nullable(option(charset)) = true
nullable(option(anyall)) = true
nullable(option(ZEROFILL)) = true
nullable(option(VARYING)) = true
nullable(option(UNSIGNED)) = true
nullable(option(UNIQUE)) = true
nullable(option(PRIMARY)) = true
nullable(option(PRECISION)) = true
nullable(option(OR)) = true
nullable(option(NOWAIT)) = true
nullable(option(NOT)) = true
nullable(option(NATIONAL)) = true
nullable(option(KEY)) = true
nullable(option(JOIN_TYPE2)) = true
nullable(option(JOIN_TYPE1)) = true
nullable(option(INTEGER)) = true
nullable(option(IDENT)) = true
nullable(option(DISTINCT)) = true
nullable(option(DELAYED)) = true
nullable(option(COLUMN)) = true
nullable(option(AS)) = true
nullable(option(ALL)) = true
nullable(on_duplicate) = false
nullable(on_conflict) = false
nullable(numeric_bin_op) = false
nullable(nonempty_list(statement)) = false
nullable(nonempty_list(for_update_or_share)) = false
nullable(nonempty_list(case_branch)) = false
nullable(mnot(like)) = false
nullable(mnot(IN)) = false
nullable(mnot(EXISTS)) = false
nullable(mnot(BETWEEN)) = false
nullable(maybe_parenth(select_stmt)) = false
nullable(maybe_parenth(column_def)) = false
nullable(maybe_parenth(IDENT)) = false
nullable(maybe_join_type) = true
nullable(maybe_as) = true
nullable(loption(order)) = true
nullable(loption(limit)) = true
nullable(loption(group)) = true
nullable(literal_value) = false
nullable(list(reference_action_clause)) = true
nullable(list(preceded(compound_op,select_core))) = true
nullable(list(join_source)) = true
nullable(list(column_def_extra)) = true
nullable(list(IGNORED)) = true
nullable(limit_t) = false
nullable(limit) = false
nullable(like) = false
nullable(key_arg) = false
nullable(join_source) = false
nullable(join_cond) = true
nullable(interval_unit) = false
nullable(int_or_param) = false
nullable(insert_cmd) = false
nullable(input) = false
nullable(index_type) = false
nullable(index_prefix) = false
nullable(index_column) = false
nullable(if_not_exists) = false
nullable(if_exists) = false
nullable(having) = false
nullable(group) = false
nullable(func_params) = true
nullable(func_parameter) = false
nullable(from) = false
nullable(for_update_or_share) = false
nullable(expr_list) = false
nullable(expr) = false
nullable(escape) = false
nullable(drop_behavior) = false
nullable(distinct_from) = false
nullable(default_value) = false
nullable(datetime_value) = false
nullable(conflict_algo) = false
nullable(compound_stmt) = false
nullable(compound_op) = false
nullable(comparison_op) = false
nullable(column_def_extra) = false
nullable(column_def1) = false
nullable(column_def) = false
nullable(column1) = false
nullable(collate) = false
nullable(charset) = false
nullable(case_branch) = false
nullable(boolean_bin_op) = false
nullable(binary) = false
nullable(attr_name) = false
nullable(anyall) = false
nullable(alter_pos) = true
nullable(alter_action) = false
first(with_lock) = WITH
first(where) = WHERE
first(update_or_share_of) = OF
first(update_cmd) = UPDATE
first(unary_op) = TILDE NOT EXCL
first(text) = T_TEXT CHARACTER
first(temporary) = TEMPORARY LOCAL GLOBAL
first(table_name) = IDENT
first(table_list) = LPAREN IDENT
first(table_definition) = LPAREN LIKE
first(table_def_done1) = 
first(table_def_done) = RPAREN
first(table_constraint_1) = UNIQUE PRIMARY KEY FULLTEXT FOREIGN CHECK
first(statement) = UPDATE SET SELECT REPLACE INSERT DROP DELETE CREATE ALTER
first(sql_type_flavor) = YEAR T_UUID T_TEXT T_INTEGER T_FLOAT T_DATETIME T_BOOLEAN T_BLOB TIMESTAMP TIME NATIONAL ENUM DATE CHARACTER BINARY
first(sql_type) = YEAR T_UUID T_TEXT T_INTEGER T_FLOAT T_DATETIME T_BOOLEAN T_BLOB TIMESTAMP TIME NATIONAL ENUM DATE CHARACTER BINARY
first(source1) = LPAREN IDENT
first(source) = LPAREN IDENT
first(some_key) = UNIQUE PRIMARY KEY FULLTEXT
first(single_literal_value) = TRUE TIMESTAMP TIME TEXT NULL MINUS INTEGER FLOAT FALSE DATE BLOB
first(set_column) = IDENT
first(separated_nonempty_list(COMMA,terminated(expr,option(order_type)))) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
first(separated_nonempty_list(COMMA,source)) = LPAREN IDENT
first(separated_nonempty_list(COMMA,set_column)) = IDENT
first(separated_nonempty_list(COMMA,sequence(expr))) = LPAREN
first(separated_nonempty_list(COMMA,proc_parameter)) = OUT INOUT IN IDENT
first(separated_nonempty_list(COMMA,index_column)) = IDENT
first(separated_nonempty_list(COMMA,func_parameter)) = IDENT
first(separated_nonempty_list(COMMA,expr)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
first(separated_nonempty_list(COMMA,column_def1)) = UNIQUE PRIMARY KEY INDEX IDENT FULLTEXT FOREIGN CONSTRAINT CHECK
first(separated_nonempty_list(COMMA,column1)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB ASTERISK
first(separated_nonempty_list(COMMA,alter_action)) = SET MODIFY DROP CHANGE ADD
first(separated_nonempty_list(COMMA,TEXT)) = TEXT
first(separated_nonempty_list(COMMA,IDENT)) = IDENT
first(select_type) = DISTINCT ALL
first(select_stmt) = SELECT
first(select_row_locking) = LOCK FOR
first(select_core) = SELECT
first(routine_extra) = LANGUAGE COMMENT
first(routine_body) = TEXT BEGIN
first(reference_action_clause) = ON
first(reference_action) = SET RESTRICT NO CASCADE
first(qualified_join) = JOIN_TYPE2 JOIN_TYPE1 JOIN COMMA
first(proc_parameter) = OUT INOUT IN IDENT
first(parameter_mode) = OUT INOUT IN
first(parameter_default_) = EQUAL DEFAULT
first(parameter_default) = EQUAL DEFAULT
first(order_type) = DESC ASC
first(order) = ORDER
first(or_replace) = OR
first(option(with_lock)) = WITH
first(option(where)) = WHERE
first(option(update_or_share_of)) = OF
first(option(sql_type)) = YEAR T_UUID T_TEXT T_INTEGER T_FLOAT T_DATETIME T_BOOLEAN T_BLOB TIMESTAMP TIME NATIONAL ENUM DATE CHARACTER BINARY
first(option(sequence(IDENT))) = LPAREN
first(option(select_type)) = DISTINCT ALL
first(option(select_row_locking)) = LOCK FOR
first(option(routine_extra)) = LANGUAGE COMMENT
first(option(preceded(ELSE,expr))) = ELSE
first(option(parameter_mode)) = OUT INOUT IN
first(option(parameter_default)) = EQUAL DEFAULT
first(option(pair(CONSTRAINT,IDENT))) = CONSTRAINT
first(option(order_type)) = DESC ASC
first(option(or_replace)) = OR
first(option(on_duplicate)) = ON
first(option(limit_t)) = LIMIT
first(option(index_prefix)) = LPAREN
first(option(if_not_exists)) = IF
first(option(if_exists)) = IF
first(option(having)) = HAVING
first(option(from)) = FROM
first(option(expr)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
first(option(escape)) = ESCAPE
first(option(either(GLOBAL,LOCAL))) = LOCAL GLOBAL
first(option(drop_behavior)) = RESTRICT CASCADE
first(option(distinct_from)) = DISTINCT
first(option(commas(set_column))) = IDENT
first(option(commas(sequence(expr)))) = LPAREN
first(option(collate)) = COLLATE
first(option(charset)) = UNICODE CHARSET CHARACTER ASCII
first(option(anyall)) = SOME ANY ALL
first(option(ZEROFILL)) = ZEROFILL
first(option(VARYING)) = VARYING
first(option(UNSIGNED)) = UNSIGNED
first(option(UNIQUE)) = UNIQUE
first(option(PRIMARY)) = PRIMARY
first(option(PRECISION)) = PRECISION
first(option(OR)) = OR
first(option(NOWAIT)) = NOWAIT
first(option(NOT)) = NOT
first(option(NATIONAL)) = NATIONAL
first(option(KEY)) = KEY
first(option(JOIN_TYPE2)) = JOIN_TYPE2
first(option(JOIN_TYPE1)) = JOIN_TYPE1
first(option(INTEGER)) = INTEGER
first(option(IDENT)) = IDENT
first(option(DISTINCT)) = DISTINCT
first(option(DELAYED)) = DELAYED
first(option(COLUMN)) = COLUMN
first(option(AS)) = AS
first(option(ALL)) = ALL
first(on_duplicate) = ON
first(on_conflict) = ON
first(numeric_bin_op) = PLUS NUM_DIV_OP NUM_BIT_OP MINUS ASTERISK
first(nonempty_list(statement)) = UPDATE SET SELECT REPLACE INSERT DROP DELETE CREATE ALTER
first(nonempty_list(for_update_or_share)) = FOR
first(nonempty_list(case_branch)) = WHEN
first(mnot(like)) = NOT LIKE_OP LIKE
first(mnot(IN)) = NOT IN
first(mnot(EXISTS)) = NOT EXISTS
first(mnot(BETWEEN)) = NOT BETWEEN
first(maybe_parenth(select_stmt)) = SELECT LPAREN
first(maybe_parenth(column_def)) = LPAREN IDENT
first(maybe_parenth(IDENT)) = LPAREN IDENT
first(maybe_join_type) = JOIN_TYPE2 JOIN_TYPE1
first(maybe_as) = IDENT AS
first(loption(order)) = ORDER
first(loption(limit)) = LIMIT
first(loption(group)) = GROUP
first(literal_value) = TRUE TIMESTAMP TIME TEXT NULL INTEGER FLOAT FALSE DATE BLOB
first(list(reference_action_clause)) = ON
first(list(preceded(compound_op,select_core))) = UNION INTERSECT EXCEPT
first(list(join_source)) = NATURAL JOIN_TYPE2 JOIN_TYPE1 JOIN CROSS COMMA
first(list(column_def_extra)) = UNIQUE PRIMARY ON NULL NOT DEFAULT COLLATE CHECK AUTOINCREMENT
first(list(IGNORED)) = IGNORED
first(limit_t) = LIMIT
first(limit) = LIMIT
first(like) = LIKE_OP LIKE
first(key_arg) = LPAREN
first(join_source) = NATURAL JOIN_TYPE2 JOIN_TYPE1 JOIN CROSS COMMA
first(join_cond) = USING ON
first(interval_unit) = YEAR_MONTH YEAR WEEK SECOND_MICROSECOND SECOND QUARTER MONTH MINUTE_SECOND MINUTE_MICROSECOND MINUTE MICROSECOND HOUR_SECOND HOUR_MINUTE HOUR_MICROSECOND HOUR DAY_SECOND DAY_MINUTE DAY_MICROSECOND DAY_HOUR DAY
first(int_or_param) = PARAM INTEGER
first(insert_cmd) = REPLACE INSERT
first(input) = UPDATE SET SELECT REPLACE INSERT DROP DELETE CREATE ALTER
first(index_type) = PRIMARY INDEX FULLTEXT
first(index_prefix) = LPAREN
first(index_column) = IDENT
first(if_not_exists) = IF
first(if_exists) = IF
first(having) = HAVING
first(group) = GROUP
first(func_params) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DISTINCT DATETIME_FUNC DATE CASE BLOB ASTERISK
first(func_parameter) = IDENT
first(from) = FROM
first(for_update_or_share) = FOR
first(expr_list) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
first(expr) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
first(escape) = ESCAPE
first(drop_behavior) = RESTRICT CASCADE
first(distinct_from) = DISTINCT
first(default_value) = TRUE TIMESTAMP TIME TEXT NULL MINUS INTEGER FLOAT FALSE DATETIME_FUNC DATE BLOB
first(datetime_value) = DATETIME_FUNC
first(conflict_algo) = REPLACE CONFLICT_ALGO
first(compound_stmt) = BEGIN
first(compound_op) = UNION INTERSECT EXCEPT
first(comparison_op) = NUM_EQ_OP NUM_CMP_OP NOT_DISTINCT_OP EQUAL
first(column_def_extra) = UNIQUE PRIMARY ON NULL NOT DEFAULT COLLATE CHECK AUTOINCREMENT
first(column_def1) = UNIQUE PRIMARY KEY INDEX IDENT FULLTEXT FOREIGN CONSTRAINT CHECK
first(column_def) = IDENT
first(column1) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB ASTERISK
first(collate) = COLLATE
first(charset) = UNICODE CHARSET CHARACTER ASCII
first(case_branch) = WHEN
first(boolean_bin_op) = OR AND
first(binary) = T_BLOB BINARY
first(attr_name) = IDENT
first(anyall) = SOME ANY ALL
first(alter_pos) = FIRST AFTER
first(alter_action) = SET MODIFY DROP CHANGE ADD
minimal(with_lock) = (* 2 *) WITH LOCK
minimal(where) = (* 2 *) WHERE IDENT
minimal(update_or_share_of) = (* 2 *) OF IDENT
minimal(update_cmd) = (* 1 *) UPDATE
minimal(unary_op) = (* 1 *) EXCL
minimal(text) = (* 1 *) T_TEXT
minimal(temporary) = (* 1 *) TEMPORARY
minimal(table_name) = (* 1 *) IDENT
minimal(table_list) = (* 1 *) IDENT
minimal(table_definition) = (* 2 *) LIKE IDENT
minimal(table_def_done1) = (* 0 *)
minimal(table_def_done) = (* 1 *) RPAREN
minimal(table_constraint_1) = (* 4 *) UNIQUE LPAREN VALUE RPAREN
minimal(statement) = (* 2 *) SELECT ASTERISK
minimal(sql_type_flavor) = (* 1 *) T_INTEGER
minimal(sql_type) = (* 1 *) T_INTEGER
minimal(source1) = (* 1 *) IDENT
minimal(source) = (* 1 *) IDENT
minimal(some_key) = (* 1 *) UNIQUE
minimal(single_literal_value) = (* 1 *) TEXT
minimal(set_column) = (* 3 *) IDENT EQUAL IDENT
minimal(separated_nonempty_list(COMMA,terminated(expr,option(order_type)))) = (* 1 *) IDENT
minimal(separated_nonempty_list(COMMA,source)) = (* 1 *) IDENT
minimal(separated_nonempty_list(COMMA,set_column)) = (* 3 *) IDENT EQUAL IDENT
minimal(separated_nonempty_list(COMMA,sequence(expr))) = (* 3 *) LPAREN IDENT RPAREN
minimal(separated_nonempty_list(COMMA,proc_parameter)) = (* 2 *) IDENT T_INTEGER
minimal(separated_nonempty_list(COMMA,index_column)) = (* 1 *) IDENT
minimal(separated_nonempty_list(COMMA,func_parameter)) = (* 2 *) IDENT T_INTEGER
minimal(separated_nonempty_list(COMMA,expr)) = (* 1 *) IDENT
minimal(separated_nonempty_list(COMMA,column_def1)) = (* 1 *) IDENT
minimal(separated_nonempty_list(COMMA,column1)) = (* 1 *) ASTERISK
minimal(separated_nonempty_list(COMMA,alter_action)) = (* 2 *) ADD IDENT
minimal(separated_nonempty_list(COMMA,TEXT)) = (* 1 *) TEXT
minimal(separated_nonempty_list(COMMA,IDENT)) = (* 1 *) IDENT
minimal(select_type) = (* 1 *) DISTINCT
minimal(select_stmt) = (* 2 *) SELECT ASTERISK
minimal(select_row_locking) = (* 2 *) FOR UPDATE
minimal(select_core) = (* 2 *) SELECT ASTERISK
minimal(routine_extra) = (* 2 *) LANGUAGE IDENT
minimal(routine_body) = (* 1 *) TEXT
minimal(reference_action_clause) = (* 3 *) ON DELETE RESTRICT
minimal(reference_action) = (* 1 *) RESTRICT
minimal(qualified_join) = (* 1 *) COMMA
minimal(proc_parameter) = (* 2 *) IDENT T_INTEGER
minimal(parameter_mode) = (* 1 *) IN
minimal(parameter_default_) = (* 1 *) DEFAULT
minimal(parameter_default) = (* 2 *) DEFAULT IDENT
minimal(order_type) = (* 1 *) DESC
minimal(order) = (* 3 *) ORDER BY IDENT
minimal(or_replace) = (* 2 *) OR REPLACE
minimal(option(with_lock)) = (* 0 *)
minimal(option(where)) = (* 0 *)
minimal(option(update_or_share_of)) = (* 0 *)
minimal(option(sql_type)) = (* 0 *)
minimal(option(sequence(IDENT))) = (* 0 *)
minimal(option(select_type)) = (* 0 *)
minimal(option(select_row_locking)) = (* 0 *)
minimal(option(routine_extra)) = (* 0 *)
minimal(option(preceded(ELSE,expr))) = (* 0 *)
minimal(option(parameter_mode)) = (* 0 *)
minimal(option(parameter_default)) = (* 0 *)
minimal(option(pair(CONSTRAINT,IDENT))) = (* 0 *)
minimal(option(order_type)) = (* 0 *)
minimal(option(or_replace)) = (* 0 *)
minimal(option(on_duplicate)) = (* 0 *)
minimal(option(limit_t)) = (* 0 *)
minimal(option(index_prefix)) = (* 0 *)
minimal(option(if_not_exists)) = (* 0 *)
minimal(option(if_exists)) = (* 0 *)
minimal(option(having)) = (* 0 *)
minimal(option(from)) = (* 0 *)
minimal(option(expr)) = (* 0 *)
minimal(option(escape)) = (* 0 *)
minimal(option(either(GLOBAL,LOCAL))) = (* 0 *)
minimal(option(drop_behavior)) = (* 0 *)
minimal(option(distinct_from)) = (* 0 *)
minimal(option(commas(set_column))) = (* 0 *)
minimal(option(commas(sequence(expr)))) = (* 0 *)
minimal(option(collate)) = (* 0 *)
minimal(option(charset)) = (* 0 *)
minimal(option(anyall)) = (* 0 *)
minimal(option(ZEROFILL)) = (* 0 *)
minimal(option(VARYING)) = (* 0 *)
minimal(option(UNSIGNED)) = (* 0 *)
minimal(option(UNIQUE)) = (* 0 *)
minimal(option(PRIMARY)) = (* 0 *)
minimal(option(PRECISION)) = (* 0 *)
minimal(option(OR)) = (* 0 *)
minimal(option(NOWAIT)) = (* 0 *)
minimal(option(NOT)) = (* 0 *)
minimal(option(NATIONAL)) = (* 0 *)
minimal(option(KEY)) = (* 0 *)
minimal(option(JOIN_TYPE2)) = (* 0 *)
minimal(option(JOIN_TYPE1)) = (* 0 *)
minimal(option(INTEGER)) = (* 0 *)
minimal(option(IDENT)) = (* 0 *)
minimal(option(DISTINCT)) = (* 0 *)
minimal(option(DELAYED)) = (* 0 *)
minimal(option(COLUMN)) = (* 0 *)
minimal(option(AS)) = (* 0 *)
minimal(option(ALL)) = (* 0 *)
minimal(on_duplicate) = (* 7 *) ON DUPLICATE KEY UPDATE IDENT EQUAL IDENT
minimal(on_conflict) = (* 3 *) ON CONFLICT CONFLICT_ALGO
minimal(numeric_bin_op) = (* 1 *) PLUS
minimal(nonempty_list(statement)) = (* 2 *) SELECT ASTERISK
minimal(nonempty_list(for_update_or_share)) = (* 2 *) FOR UPDATE
minimal(nonempty_list(case_branch)) = (* 4 *) WHEN IDENT THEN IDENT
minimal(mnot(like)) = (* 1 *) LIKE
minimal(mnot(IN)) = (* 1 *) IN
minimal(mnot(EXISTS)) = (* 1 *) EXISTS
minimal(mnot(BETWEEN)) = (* 1 *) BETWEEN
minimal(maybe_parenth(select_stmt)) = (* 2 *) SELECT ASTERISK
minimal(maybe_parenth(column_def)) = (* 1 *) IDENT
minimal(maybe_parenth(IDENT)) = (* 1 *) IDENT
minimal(maybe_join_type) = (* 0 *)
minimal(maybe_as) = (* 0 *)
minimal(loption(order)) = (* 0 *)
minimal(loption(limit)) = (* 0 *)
minimal(loption(group)) = (* 0 *)
minimal(literal_value) = (* 1 *) TEXT
minimal(list(reference_action_clause)) = (* 0 *)
minimal(list(preceded(compound_op,select_core))) = (* 0 *)
minimal(list(join_source)) = (* 0 *)
minimal(list(column_def_extra)) = (* 0 *)
minimal(list(IGNORED)) = (* 0 *)
minimal(limit_t) = (* 2 *) LIMIT INTEGER
minimal(limit) = (* 2 *) LIMIT INTEGER
minimal(like) = (* 1 *) LIKE
minimal(key_arg) = (* 3 *) LPAREN VALUE RPAREN
minimal(join_source) = (* 2 *) COMMA IDENT
minimal(join_cond) = (* 0 *)
minimal(interval_unit) = (* 1 *) MICROSECOND
minimal(int_or_param) = (* 1 *) INTEGER
minimal(insert_cmd) = (* 2 *) INSERT INTO
minimal(input) = (* 3 *) SELECT ASTERISK EOF
minimal(index_type) = (* 1 *) INDEX
minimal(index_prefix) = (* 3 *) LPAREN INTEGER RPAREN
minimal(index_column) = (* 1 *) IDENT
minimal(if_not_exists) = (* 3 *) IF NOT EXISTS
minimal(if_exists) = (* 2 *) IF EXISTS
minimal(having) = (* 2 *) HAVING IDENT
minimal(group) = (* 3 *) GROUP BY IDENT
minimal(func_params) = (* 0 *)
minimal(func_parameter) = (* 2 *) IDENT T_INTEGER
minimal(from) = (* 2 *) FROM IDENT
minimal(for_update_or_share) = (* 2 *) FOR UPDATE
minimal(expr_list) = (* 1 *) IDENT
minimal(expr) = (* 1 *) IDENT
minimal(escape) = (* 2 *) ESCAPE IDENT
minimal(drop_behavior) = (* 1 *) CASCADE
minimal(distinct_from) = (* 2 *) DISTINCT FROM
minimal(default_value) = (* 1 *) TEXT
minimal(datetime_value) = (* 1 *) DATETIME_FUNC
minimal(conflict_algo) = (* 1 *) CONFLICT_ALGO
minimal(compound_stmt) = (* 4 *) BEGIN SELECT ASTERISK END
minimal(compound_op) = (* 1 *) UNION
minimal(comparison_op) = (* 1 *) EQUAL
minimal(column_def_extra) = (* 1 *) NULL
minimal(column_def1) = (* 1 *) IDENT
minimal(column_def) = (* 1 *) IDENT
minimal(column1) = (* 1 *) ASTERISK
minimal(collate) = (* 2 *) COLLATE IDENT
minimal(charset) = (* 1 *) ASCII
minimal(case_branch) = (* 4 *) WHEN IDENT THEN IDENT
minimal(boolean_bin_op) = (* 1 *) AND
minimal(binary) = (* 1 *) T_BLOB
minimal(attr_name) = (* 1 *) IDENT
minimal(anyall) = (* 1 *) ANY
minimal(alter_pos) = (* 0 *)
minimal(alter_action) = (* 2 *) ADD IDENT
follow(with_lock) = UPDATE SET SELECT RPAREN REPLACE ON INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(where) = UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(update_or_share_of) = WITH UPDATE SET SELECT RPAREN REPLACE ON NOWAIT INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(update_cmd) = LPAREN IDENT
follow(unary_op) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(text) = VARYING UPDATE UNIQUE UNICODE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK CHARSET CHARACTER BEGIN AUTOINCREMENT ASCII AS ALTER AFTER
follow(temporary) = TABLE
follow(table_name) = SET ON MODIFY LPAREN DROP CHANGE ADD
follow(table_list) = WHERE UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(table_definition) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(table_def_done1) = RPAREN
follow(table_def_done) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(table_constraint_1) = RPAREN COMMA
follow(statement) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(sql_type_flavor) = UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT AS ALTER AFTER
follow(sql_type) = UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT AS ALTER AFTER
follow(source1) = WHERE USING UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON NATURAL LOCK LIMIT JOIN_TYPE2 JOIN_TYPE1 JOIN INTERSECT INSERT IDENT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CROSS CREATE COMMA AS ALTER
follow(source) = WHERE USING UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON NATURAL LOCK LIMIT JOIN_TYPE2 JOIN_TYPE1 JOIN INTERSECT INSERT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CROSS CREATE COMMA ALTER
follow(some_key) = LPAREN IDENT
follow(single_literal_value) = UPDATE UNIQUE SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT INSERT FIRST EOF END DROP DELETE DEFAULT CREATE COMMA COLLATE CHECK AUTOINCREMENT ALTER AFTER
follow(set_column) = WHERE UPDATE SET SELECT REPLACE ORDER ON LIMIT INSERT EOF END DROP DELETE CREATE COMMA ALTER
follow(separated_nonempty_list(COMMA,terminated(expr,option(order_type)))) = UPDATE SET SELECT RPAREN REPLACE ON LOCK LIMIT INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(separated_nonempty_list(COMMA,source)) = SET
follow(separated_nonempty_list(COMMA,set_column)) = WHERE UPDATE SET SELECT REPLACE ORDER ON LIMIT INSERT EOF END DROP DELETE CREATE ALTER
follow(separated_nonempty_list(COMMA,sequence(expr))) = UPDATE SET SELECT REPLACE ON INSERT EOF END DROP DELETE CREATE ALTER
follow(separated_nonempty_list(COMMA,proc_parameter)) = RPAREN
follow(separated_nonempty_list(COMMA,index_column)) = RPAREN
follow(separated_nonempty_list(COMMA,func_parameter)) = RPAREN
follow(separated_nonempty_list(COMMA,expr)) = UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(separated_nonempty_list(COMMA,column_def1)) = RPAREN
follow(separated_nonempty_list(COMMA,column1)) = WHERE UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING GROUP FROM FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(separated_nonempty_list(COMMA,alter_action)) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(separated_nonempty_list(COMMA,TEXT)) = RPAREN
follow(separated_nonempty_list(COMMA,IDENT)) = WITH UPDATE SET SELECT RPAREN REPLACE ON NOWAIT INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(select_type) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB ASTERISK
follow(select_stmt) = UPDATE SET SELECT RPAREN REPLACE ON INSERT EOF END DROP DELETE CREATE ALTER
follow(select_row_locking) = UPDATE SET SELECT RPAREN REPLACE ON INSERT EOF END DROP DELETE CREATE ALTER
follow(select_core) = UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(routine_extra) = UPDATE TEXT SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE BEGIN AS ALTER
follow(routine_body) = UPDATE SET SELECT REPLACE LANGUAGE INSERT EOF END DROP DELETE CREATE COMMENT ALTER
follow(reference_action_clause) = RPAREN ON COMMA
follow(reference_action) = RPAREN ON COMMA
follow(qualified_join) = LPAREN IDENT
follow(proc_parameter) = RPAREN COMMA
follow(parameter_mode) = IDENT
follow(parameter_default_) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(parameter_default) = RPAREN COMMA
follow(order_type) = UPDATE SET SELECT RPAREN REPLACE ON LOCK LIMIT INSERT FOR EOF END DROP DELETE CREATE COMMA ALTER
follow(order) = UPDATE SET SELECT RPAREN REPLACE ON LOCK LIMIT INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(or_replace) = PROCEDURE FUNCTION
follow(option(with_lock)) = UPDATE SET SELECT RPAREN REPLACE ON INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(option(where)) = UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(option(update_or_share_of)) = WITH UPDATE SET SELECT RPAREN REPLACE ON NOWAIT INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(option(sql_type)) = UPDATE UNIQUE SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT INSERT FIRST EOF END DROP DELETE DEFAULT CREATE COMMA COLLATE CHECK AUTOINCREMENT ALTER AFTER
follow(option(sequence(IDENT))) = VALUES SELECT RPAREN ON LPAREN COMMA
follow(option(select_type)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB ASTERISK
follow(option(select_row_locking)) = UPDATE SET SELECT RPAREN REPLACE ON INSERT EOF END DROP DELETE CREATE ALTER
follow(option(routine_extra)) = UPDATE TEXT SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE BEGIN AS ALTER
follow(option(preceded(ELSE,expr))) = END
follow(option(parameter_mode)) = IDENT
follow(option(parameter_default)) = RPAREN COMMA
follow(option(pair(CONSTRAINT,IDENT))) = UNIQUE PRIMARY KEY FULLTEXT FOREIGN CHECK
follow(option(order_type)) = UPDATE SET SELECT RPAREN REPLACE ON LOCK LIMIT INSERT FOR EOF END DROP DELETE CREATE COMMA ALTER
follow(option(or_replace)) = PROCEDURE FUNCTION
follow(option(on_duplicate)) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(option(limit_t)) = UPDATE SET SELECT RPAREN REPLACE ON LOCK INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(option(index_prefix)) = RPAREN DESC COMMA COLLATE ASC
follow(option(if_not_exists)) = IDENT
follow(option(if_exists)) = IDENT
follow(option(having)) = UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(option(from)) = WHERE UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(option(expr)) = WHEN
follow(option(escape)) = YEAR_MONTH YEAR WHERE WHEN WEEK UPDATE UNION THEN SET SELECT SECOND_MICROSECOND SECOND RPAREN REPLACE QUARTER PLUS ORDER OR ON NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NOT_DISTINCT_OP NOT NATURAL MONTH MINUTE_SECOND MINUTE_MICROSECOND MINUTE MINUS MICROSECOND LOCK LIMIT LIKE_OP LIKE JOIN_TYPE2 JOIN_TYPE1 JOIN IS INTERSECT INSERT IN IDENT HOUR_SECOND HOUR_MINUTE HOUR_MICROSECOND HOUR HAVING GROUP FROM FOR EXCEPT ESCAPE EQUAL EOF END ELSE DROP DESC DELETE DAY_SECOND DAY_MINUTE DAY_MICROSECOND DAY_HOUR DAY CROSS CREATE CONCAT_OP COMMA BETWEEN ASTERISK ASC AS AND ALTER
follow(option(either(GLOBAL,LOCAL))) = TEMPORARY
follow(option(drop_behavior)) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE COMMA ALTER
follow(option(distinct_from)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(option(commas(set_column))) = UPDATE SET SELECT REPLACE ON INSERT EOF END DROP DELETE CREATE ALTER
follow(option(commas(sequence(expr)))) = UPDATE SET SELECT REPLACE ON INSERT EOF END DROP DELETE CREATE ALTER
follow(option(collate)) = UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DESC DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT ASC AS ALTER AFTER
follow(option(charset)) = UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT AS ALTER AFTER
follow(option(anyall)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(option(ZEROFILL)) = UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT AS ALTER AFTER
follow(option(VARYING)) = UPDATE UNIQUE UNICODE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK CHARSET CHARACTER BEGIN AUTOINCREMENT ASCII AS ALTER AFTER
follow(option(UNSIGNED)) = ZEROFILL UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT AS ALTER AFTER
follow(option(UNIQUE)) = INDEX
follow(option(PRIMARY)) = KEY
follow(option(PRECISION)) = UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT AS ALTER AFTER
follow(option(OR)) = REPLACE CONFLICT_ALGO
follow(option(NOWAIT)) = WITH UPDATE SET SELECT RPAREN REPLACE ON INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(option(NOT)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DISTINCT DATETIME_FUNC DATE CASE BLOB
follow(option(NATIONAL)) = T_TEXT CHARACTER
follow(option(KEY)) = LPAREN IDENT
follow(option(JOIN_TYPE2)) = JOIN
follow(option(JOIN_TYPE1)) = JOIN_TYPE2 JOIN
follow(option(INTEGER)) = RPAREN
follow(option(IDENT)) = LPAREN
follow(option(DISTINCT)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(option(DELAYED)) = REPLACE OR CONFLICT_ALGO
follow(option(COLUMN)) = LPAREN IDENT
follow(option(AS)) = YEAR T_UUID T_TEXT T_INTEGER T_FLOAT T_DATETIME T_BOOLEAN T_BLOB TIMESTAMP TIME TEXT NATIONAL IDENT ENUM DATE CHARACTER BINARY BEGIN
follow(option(ALL)) = SELECT
follow(on_duplicate) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(on_conflict) = UPDATE UNIQUE SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT INSERT FIRST EOF END DROP DELETE DEFAULT CREATE COMMA COLLATE CHECK AUTOINCREMENT ALTER AFTER
follow(numeric_bin_op) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(nonempty_list(statement)) = END
follow(nonempty_list(for_update_or_share)) = UPDATE SET SELECT RPAREN REPLACE ON INSERT EOF END DROP DELETE CREATE ALTER
follow(nonempty_list(case_branch)) = END ELSE
follow(mnot(like)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(mnot(IN)) = LPAREN
follow(mnot(EXISTS)) = LPAREN
follow(mnot(BETWEEN)) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(maybe_parenth(select_stmt)) = UPDATE SET SELECT REPLACE ON INSERT EOF END DROP DELETE CREATE ALTER
follow(maybe_parenth(column_def)) = UPDATE SET SELECT REPLACE INSERT FIRST EOF END DROP DELETE CREATE COMMA ALTER AFTER
follow(maybe_parenth(IDENT)) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(maybe_join_type) = JOIN
follow(maybe_as) = WHERE USING UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON NATURAL LOCK LIMIT JOIN_TYPE2 JOIN_TYPE1 JOIN INTERSECT INSERT HAVING GROUP FROM FOR EXCEPT EOF END DROP DELETE CROSS CREATE COMMA ALTER
follow(loption(order)) = UPDATE SET SELECT RPAREN REPLACE ON LOCK LIMIT INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(loption(limit)) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(loption(group)) = UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(literal_value) = YEAR_MONTH YEAR WHERE WHEN WEEK UPDATE UNIQUE UNION THEN SET SELECT SECOND_MICROSECOND SECOND RPAREN REPLACE QUARTER PRIMARY PLUS ORDER OR ON NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NULL NOT_DISTINCT_OP NOT NATURAL MONTH MINUTE_SECOND MINUTE_MICROSECOND MINUTE MINUS MICROSECOND LOCK LIMIT LIKE_OP LIKE JOIN_TYPE2 JOIN_TYPE1 JOIN IS INTERSECT INSERT IN IDENT HOUR_SECOND HOUR_MINUTE HOUR_MICROSECOND HOUR HAVING GROUP FROM FOR FIRST EXCEPT ESCAPE EQUAL EOF END ELSE DROP DESC DELETE DEFAULT DAY_SECOND DAY_MINUTE DAY_MICROSECOND DAY_HOUR DAY CROSS CREATE CONCAT_OP COMMA COLLATE CHECK BETWEEN AUTOINCREMENT ASTERISK ASC AS AND ALTER AFTER
follow(list(reference_action_clause)) = RPAREN COMMA
follow(list(preceded(compound_op,select_core))) = UPDATE SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(list(join_source)) = WHERE UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(list(column_def_extra)) = UPDATE SET SELECT RPAREN REPLACE INSERT FIRST EOF END DROP DELETE CREATE COMMA ALTER AFTER
follow(list(IGNORED)) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(limit_t) = UPDATE SET SELECT RPAREN REPLACE ON LOCK INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(limit) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE ALTER
follow(like) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(key_arg) = RPAREN COMMA
follow(join_source) = WHERE UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON NATURAL LOCK LIMIT JOIN_TYPE2 JOIN_TYPE1 JOIN INTERSECT INSERT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CROSS CREATE COMMA ALTER
follow(join_cond) = WHERE UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON NATURAL LOCK LIMIT JOIN_TYPE2 JOIN_TYPE1 JOIN INTERSECT INSERT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CROSS CREATE COMMA ALTER
follow(interval_unit) = YEAR_MONTH YEAR WHERE WHEN WEEK UPDATE UNION THEN SET SELECT SECOND_MICROSECOND SECOND RPAREN REPLACE QUARTER PLUS ORDER OR ON NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NOT_DISTINCT_OP NOT NATURAL MONTH MINUTE_SECOND MINUTE_MICROSECOND MINUTE MINUS MICROSECOND LOCK LIMIT LIKE_OP LIKE JOIN_TYPE2 JOIN_TYPE1 JOIN IS INTERSECT INSERT IN IDENT HOUR_SECOND HOUR_MINUTE HOUR_MICROSECOND HOUR HAVING GROUP FROM FOR EXCEPT ESCAPE EQUAL EOF END ELSE DROP DESC DELETE DAY_SECOND DAY_MINUTE DAY_MICROSECOND DAY_HOUR DAY CROSS CREATE CONCAT_OP COMMA BETWEEN ASTERISK ASC AS AND ALTER
follow(int_or_param) = UPDATE SET SELECT RPAREN REPLACE ON OFFSET LOCK INSERT FOR EOF END DROP DELETE CREATE COMMA ALTER
follow(insert_cmd) = IDENT
follow(input) = #
follow(index_type) = LPAREN IDENT
follow(index_prefix) = RPAREN DESC COMMA COLLATE ASC
follow(index_column) = RPAREN COMMA
follow(if_not_exists) = IDENT
follow(if_exists) = IDENT
follow(having) = UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(group) = UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(func_params) = RPAREN
follow(func_parameter) = RPAREN COMMA
follow(from) = WHERE UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING GROUP FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(for_update_or_share) = UPDATE SET SELECT RPAREN REPLACE ON INSERT FOR EOF END DROP DELETE CREATE ALTER
follow(expr_list) = UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING FOR EXCEPT EOF END DROP DELETE CREATE ALTER
follow(expr) = YEAR_MONTH YEAR WHERE WHEN WEEK UPDATE UNION THEN SET SELECT SECOND_MICROSECOND SECOND RPAREN REPLACE QUARTER PLUS ORDER OR ON NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NOT_DISTINCT_OP NOT NATURAL MONTH MINUTE_SECOND MINUTE_MICROSECOND MINUTE MINUS MICROSECOND LOCK LIMIT LIKE_OP LIKE JOIN_TYPE2 JOIN_TYPE1 JOIN IS INTERSECT INSERT IN IDENT HOUR_SECOND HOUR_MINUTE HOUR_MICROSECOND HOUR HAVING GROUP FROM FOR EXCEPT ESCAPE EQUAL EOF END ELSE DROP DESC DELETE DAY_SECOND DAY_MINUTE DAY_MICROSECOND DAY_HOUR DAY CROSS CREATE CONCAT_OP COMMA BETWEEN ASTERISK ASC AS AND ALTER
follow(escape) = YEAR_MONTH YEAR WHERE WHEN WEEK UPDATE UNION THEN SET SELECT SECOND_MICROSECOND SECOND RPAREN REPLACE QUARTER PLUS ORDER OR ON NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NOT_DISTINCT_OP NOT NATURAL MONTH MINUTE_SECOND MINUTE_MICROSECOND MINUTE MINUS MICROSECOND LOCK LIMIT LIKE_OP LIKE JOIN_TYPE2 JOIN_TYPE1 JOIN IS INTERSECT INSERT IN IDENT HOUR_SECOND HOUR_MINUTE HOUR_MICROSECOND HOUR HAVING GROUP FROM FOR EXCEPT ESCAPE EQUAL EOF END ELSE DROP DESC DELETE DAY_SECOND DAY_MINUTE DAY_MICROSECOND DAY_HOUR DAY CROSS CREATE CONCAT_OP COMMA BETWEEN ASTERISK ASC AS AND ALTER
follow(drop_behavior) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE COMMA ALTER
follow(distinct_from) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(default_value) = UPDATE UNIQUE SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT INSERT FIRST EOF END DROP DELETE DEFAULT CREATE COMMA COLLATE CHECK AUTOINCREMENT ALTER AFTER
follow(datetime_value) = YEAR_MONTH YEAR WHERE WHEN WEEK UPDATE UNIQUE UNION THEN SET SELECT SECOND_MICROSECOND SECOND RPAREN REPLACE QUARTER PRIMARY PLUS ORDER OR ON NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NULL NOT_DISTINCT_OP NOT NATURAL MONTH MINUTE_SECOND MINUTE_MICROSECOND MINUTE MINUS MICROSECOND LOCK LIMIT LIKE_OP LIKE JOIN_TYPE2 JOIN_TYPE1 JOIN IS INTERSECT INSERT IN IDENT HOUR_SECOND HOUR_MINUTE HOUR_MICROSECOND HOUR HAVING GROUP FROM FOR FIRST EXCEPT ESCAPE EQUAL EOF END ELSE DROP DESC DELETE DEFAULT DAY_SECOND DAY_MINUTE DAY_MICROSECOND DAY_HOUR DAY CROSS CREATE CONCAT_OP COMMA COLLATE CHECK BETWEEN AUTOINCREMENT ASTERISK ASC AS AND ALTER AFTER
follow(conflict_algo) = UPDATE UNIQUE SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN INTO INSERT IDENT FIRST EOF END DROP DELETE DEFAULT CREATE COMMA COLLATE CHECK AUTOINCREMENT ALTER AFTER
follow(compound_stmt) = UPDATE SET SELECT REPLACE LANGUAGE INSERT EOF END DROP DELETE CREATE COMMENT ALTER
follow(compound_op) = SELECT
follow(comparison_op) = VALUES TRUE TIMESTAMP TIME TILDE TEXT SOME PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB ANY ALL
follow(column_def_extra) = UPDATE UNIQUE SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT INSERT FIRST EOF END DROP DELETE DEFAULT CREATE COMMA COLLATE CHECK AUTOINCREMENT ALTER AFTER
follow(column_def1) = RPAREN COMMA
follow(column_def) = UPDATE SET SELECT RPAREN REPLACE INSERT FIRST EOF END DROP DELETE CREATE COMMA ALTER AFTER
follow(column1) = WHERE UPDATE UNION SET SELECT RPAREN REPLACE ORDER ON LOCK LIMIT INTERSECT INSERT HAVING GROUP FROM FOR EXCEPT EOF END DROP DELETE CREATE COMMA ALTER
follow(collate) = UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DESC DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT ASC AS ALTER AFTER
follow(charset) = UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT AS ALTER AFTER
follow(case_branch) = WHEN END ELSE
follow(boolean_bin_op) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(binary) = UPDATE UNIQUE TEXT SET SELECT RPAREN REPLACE PRIMARY ON NULL NOT LPAREN LANGUAGE INSERT FIRST EQUAL EOF END DROP DELETE DEFAULT CREATE COMMENT COMMA COLLATE CHECK BEGIN AUTOINCREMENT AS ALTER AFTER
follow(attr_name) = YEAR_MONTH YEAR WHERE WHEN WEEK UPDATE UNION THEN SET SELECT SECOND_MICROSECOND SECOND RPAREN REPLACE QUARTER PLUS ORDER OR ON NUM_EQ_OP NUM_DIV_OP NUM_CMP_OP NUM_BIT_OP NOT_DISTINCT_OP NOT NATURAL MONTH MINUTE_SECOND MINUTE_MICROSECOND MINUTE MINUS MICROSECOND LOCK LIMIT LIKE_OP LIKE JOIN_TYPE2 JOIN_TYPE1 JOIN IS INTERSECT INSERT IN IDENT HOUR_SECOND HOUR_MINUTE HOUR_MICROSECOND HOUR HAVING GROUP FROM FOR EXCEPT ESCAPE EQUAL EOF END ELSE DROP DESC DELETE DAY_SECOND DAY_MINUTE DAY_MICROSECOND DAY_HOUR DAY CROSS CREATE CONCAT_OP COMMA BETWEEN ASTERISK ASC AS AND ALTER
follow(anyall) = VALUES TRUE TIMESTAMP TIME TILDE TEXT PARAM NULL NOT MINUS LPAREN INTERVAL INTEGER IF IDENT FLOAT FALSE EXISTS EXCL DATETIME_FUNC DATE CASE BLOB
follow(alter_pos) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE COMMA ALTER
follow(alter_action) = UPDATE SET SELECT REPLACE INSERT EOF END DROP DELETE CREATE COMMA ALTER
Built an LR(0) automaton with 704 states.
The grammar is not SLR(1) -- 22 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 704 states.
73 shift/reduce conflicts were silently solved.
Warning: 20 states have shift/reduce conflicts.
Warning: 140 shift/reduce conflicts were arbitrarily resolved.
320 out of 704 states have a default reduction.
201 out of 704 states are represented.
0 out of 342 symbols keep track of their start position.
0 out of 342 symbols keep track of their end position.
277 out of 428 productions exploit shiftreduce optimization.
0 out of 704 states can peek at an error.
2012 functions before inlining, 312 functions after inlining.
