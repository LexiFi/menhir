%{
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2017                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
%}
%{

open Parsing_helper
open Ptree
open Piptree
exception Syntax

%}
%start all
%token AMONG
%token AS
%token ASSIGN
%token BAR
%token BARRIER
%token BEFORE
%token CANTEXT
%token CELL
%token CHOICE
%token CLAUSES
%token COLON
%token COMMA
%token DATA
%token DIFF
%token DOT
%token ELIMTRUE
%token ELSE
%token EOF
%token EQUAL
%token EQUATION
%token EQUIV
%token EQUIVEQ
%token EVENT
%token FAIL
%token FREE
%token FUN
%token <Piptree.ident> IDENT
%token IF
%token IN
%token <int> INT
%token LBRACKET
%token LET
%token LOCK
%token LPAREN
%token NEW
%token NONINTERF
%token NOT
%token NOUNIF
%token OTHERWISE
%token OUT
%token PARAM
%token PHASE
%token PREDICATE
%token PRIVATE
%token PROCESS
%token PUTBEGIN
%token QUERY
%token RBRACKET
%token READ
%token RED
%token REDUCTION
%token REPL
%token RPAREN
%token SEMI
%token SLASH
%token STAR
%token <Piptree.ident> STRING
%token SUCHTHAT
%token THEN
%token UNLOCK
%token WEAKSECRET
%token WEDGE
%token WHERE
%right BAR
%right WEDGE
%nonassoc REPL
%type <Piptree.decl list * Piptree.process> all
%%

lib:
  _1 = privateopt _2 = FUN _3 = IDENT _4 = SLASH _5 = INT _6 = DOT _7 = lib
    { ( (FunDecl(_3, _5, _1)) :: _7 )}
| _1 = DATA _2 = IDENT _3 = SLASH _4 = INT _5 = DOT _6 = lib
    { ( (DataFunDecl(_2, _4)) :: _6 )}
| _1 = EQUATION _2 = eqlist _3 = DOT _4 = lib
    { ( (Equation(_2)) :: _4 )}
| _1 = privateopt _2 = REDUCTION _3 = term _4 = EQUAL _5 = term _6 = SEMI _7 = reduc _8 = lib
    { ( (Reduc((_3,_5)::_7, _1)) :: _8 )}
| _1 = privateopt _2 = REDUCTION _3 = reducmayfailseq _4 = DOT _5 = lib
    { ( (ReducFail(_3,_1)) :: _5 )}
| _1 = PREDICATE _2 = IDENT _3 = SLASH _4 = INT _5 = neidentseq _6 = DOT _7 = lib
    {        ( (PredDecl(_2, _4, _5)) :: _7 )}
| _1 = PREDICATE _2 = IDENT _3 = SLASH _4 = INT _5 = DOT _6 = lib
    {        ( (PredDecl(_2, _4, [])) :: _6 )}
| _1 = LET _2 = IDENT _3 = EQUAL _4 = process _5 = DOT _6 = lib
    { ( (PDef(_2,_4)) :: _6 )}
| _1 = NOUNIF _2 = gfactformat _3 = optint _4 = foptbindingseq _5 = DOT _6 = lib
    {        ( (NoUnif (_2,_3,_4)) :: _6 )}
| _1 = PARAM _2 = IDENT _3 = EQUAL _4 = IDENT _5 = DOT _6 = lib
    {        ( (Param(_2,S _4)) :: _6 )}
| _1 = PARAM _2 = IDENT _3 = EQUAL _4 = STRING _5 = DOT _6 = lib
    {        ( (Param(_2,S _4)) :: _6 )}
| _1 = PARAM _2 = IDENT _3 = EQUAL _4 = INT _5 = DOT _6 = lib
    {        ( (Param(_2,I _4)) :: _6 )}
| _1 = QUERY _2 = queryseq _3 = DOT _4 = lib
    {        ( (Query(_2)) :: _4 )}
| _1 = NONINTERF _2 = niseq _3 = DOT _4 = lib
    {        ( (Noninterf(_2)) :: _4 )}
| _1 = WEAKSECRET _2 = IDENT _3 = DOT _4 = lib
    {        ( (Weaksecret(_2)) :: _4 )}
| _1 = NOT _2 = gterm _3 = optphase _4 = optbindingseq _5 = DOT _6 = lib
    { ( (Not(((PGSimpleFact(("attacker",dummy_ext), [_2]),dummy_ext),_3),_4)) :: _6 )}
| _1 = NOT _2 = event _3 = optbindingseq _4 = DOT _5 = lib
    { ( (Not(_2,_3)) :: _5 )}
| _1 = ELIMTRUE _2 = fact _3 = DOT _4 = lib
    {        ( (Elimtrue (_2, [])) :: _4 )}
| _1 = ELIMTRUE _2 = fact _3 = WHERE _4 = varmayfail _5 = CANTEXT _6 = FAIL _7 = DOT _8 = lib
    {        ( (Elimtrue (_2, _4)) :: _8 )}
| _1 = privateopt _2 = FREE _3 = neidentseq _4 = DOT _5 = lib
    {        ( (Free(_3,_1)) :: _5 )}
| _1 = CLAUSES _2 = clauses _3 = lib
    {        ( (Clauses(_2)) :: _3 )}
| _1 = CELL _2 = neidentseq _3 = optinit _4 = DOT _5 = lib
    {        ( (List.map (fun x -> Cell(x, _3)) _2) @ _5 )}
| 
    {        ( [] )}

optinit:
  
    {        ( None )}
| _1 = ASSIGN _2 = term
    {        ( Some _2 )}

all:
  _1 = lib _2 = PROCESS _3 = process _4 = EOF
    { ( _1, _3 )}

privateopt:
  _1 = PRIVATE
    { ( true )}
| 
    { ( false )}

reduc:
  _1 = term _2 = EQUAL _3 = term _4 = SEMI _5 = reduc
    { ( (_1,_3) :: _5 )}
| _1 = term _2 = EQUAL _3 = term _4 = DOT
    { ( [(_1,_3)] )}

varmayfail:
  _1 = IDENT _2 = COMMA _3 = varmayfail
    {        ( _1::_3 )}
| _1 = IDENT
    {        ( [_1] )}

reducmayfail:
  _1 = term _2 = EQUAL _3 = term _4 = WHERE _5 = varmayfail _6 = CANTEXT _7 = FAIL
    {        ( (_1,_3,_5) )}
| _1 = term _2 = EQUAL _3 = term
    {        ( (_1,_3,[]) )}

reducmayfailseq:
  _1 = reducmayfail _2 = OTHERWISE _3 = reducmayfailseq
    { ( _1::_3 )}
| _1 = reducmayfail
    { ( [_1] )}

eqlist:
  _1 = term _2 = EQUAL _3 = term
    {        ( [(_1, _3)] )}
| _1 = term _2 = EQUAL _3 = term _4 = SEMI _5 = eqlist
    { ( (_1, _3) :: _5 )}

term:
  _1 = FAIL
    { ( PFail, parse_extent () )}
| _1 = IDENT _2 = LPAREN _3 = termseq _4 = RPAREN
    { ( PFunApp (_1, _3), parse_extent() )}
| _1 = CHOICE _2 = LBRACKET _3 = term _4 = COMMA _5 = term _6 = RBRACKET
    {        ( Param.has_choice := true; 
	  PFunApp(("choice specident", parse_extent()), [_3; _5]), parse_extent() )}
| _1 = IDENT
    { ( PIdent (_1), parse_extent() )}
| _1 = LPAREN _2 = termseq _3 = RPAREN
    { ( PTuple (_2), parse_extent() )}

netermseq:
  _1 = term _2 = COMMA _3 = netermseq
    { ( _1 :: _3 )}
| _1 = term
    { ( [_1] )}

termseq:
  _1 = netermseq
    {        ( _1 )}
| 
    {        ( [] )}

neidentseq:
  _1 = IDENT _2 = COMMA _3 = neidentseq
    {    ( _1 :: _3 )}
| _1 = IDENT
    {    ( [_1] )}

ni:
  _1 = IDENT _2 = AMONG _3 = LPAREN _4 = netermseq _5 = RPAREN
    {    ( (_1, Some _4) )}
| _1 = IDENT
    {    ( (_1, None) )}

niseq:
  _1 = ni _2 = COMMA _3 = niseq
    {    ( _1 :: _3 )}
| _1 = ni
    {    ( [_1] )}

gterm:
  _1 = IDENT _2 = LPAREN _3 = gtermseq _4 = RPAREN
    { ( PGFunApp (_1, _3), parse_extent() )}
| _1 = IDENT
    { ( PGIdent (_1), parse_extent() )}
| _1 = LPAREN _2 = gtermseq _3 = RPAREN
    { ( PGTuple (_2), parse_extent() )}
| _1 = IDENT _2 = LBRACKET _3 = bindingseq _4 = RBRACKET
    {        ( PGName (_1, _3), parse_extent() )}

negtermseq:
  _1 = gterm _2 = COMMA _3 = negtermseq
    { ( _1 :: _3 )}
| _1 = gterm
    { ( [_1] )}

gtermseq:
  _1 = negtermseq
    {        ( _1 )}
| 
    {        ( [] )}

nesbindingseq:
  _1 = REPL _2 = INT _3 = EQUAL _4 = gterm _5 = SEMI _6 = nesbindingseq
    {        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )}
| _1 = REPL _2 = INT _3 = EQUAL _4 = gterm
    {        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )}
| _1 = IDENT _2 = EQUAL _3 = gterm _4 = SEMI _5 = nesbindingseq
    {        ( (_1, _3) :: _5 )}
| _1 = IDENT _2 = EQUAL _3 = gterm
    {        ( [(_1, _3)] )}

bindingseq:
  _1 = nesbindingseq
    {        ( _1 )}
| 
    {        ( [] )}

nebindingseq:
  _1 = IDENT _2 = EQUAL _3 = gterm _4 = SEMI _5 = nebindingseq
    {        ( (_1, _3) :: _5 )}
| _1 = IDENT _2 = EQUAL _3 = gterm
    {        ( [(_1, _3)] )}

optbindingseq:
  _1 = SEMI _2 = nebindingseq
    {        ( _2 )}
| 
    {        ( [] )}

gfact:
  _1 = IDENT _2 = COLON _3 = gtermseq
    { ( PGSimpleFact(_1,_3), parse_extent() )}
| _1 = gterm _2 = DIFF _3 = gterm
    {        ( PGNeq(_1,_3), parse_extent() )}
| _1 = gterm _2 = EQUAL _3 = gterm
    {        ( PGEqual(_1, _3), parse_extent() )}

event:
  _1 = gfact _2 = optphase
    {    ( (_1,_2) )}

queryseq:
  _1 = query _2 = SEMI _3 = queryseq
    {    ( _1 :: _3 )}
| _1 = query
    {    ( [_1] )}

query:
  _1 = event
    {    ( PRealQuery(PBefore(_1, PFalse)) )}
| _1 = realquery
    {    ( PRealQuery(_1) )}
| _1 = PUTBEGIN _2 = IDENT _3 = COLON _4 = neidentseq
    {    ( PPutBegin(_2, _4) )}
| _1 = LET _2 = IDENT _3 = EQUAL _4 = gterm
    {    ( PBinding(_2,_4) )}

realquery:
  _1 = event _2 = BEFORE _3 = hyp
    {    ( PBefore(_1, _3) )}

hyp:
  _1 = hyp _2 = BAR _3 = hyp
    {    ( POr(_1, _3) )}
| _1 = hyp _2 = WEDGE _3 = hyp
    {    ( PAnd(_1, _3) )}
| _1 = LPAREN _2 = hyp _3 = RPAREN
    {    ( _2 )}
| _1 = event
    {    ( PQEvent(_1) )}
| _1 = LPAREN _2 = realquery _3 = RPAREN
    {    ( PNestedQuery(_2) )}

gformat:
  _1 = IDENT _2 = LPAREN _3 = gformatseq _4 = RPAREN
    { ( PFGFunApp (_1, _3), parse_extent() )}
| _1 = IDENT
    { ( PFGIdent (_1), parse_extent() )}
| _1 = LPAREN _2 = gformatseq _3 = RPAREN
    { ( PFGTuple (_2), parse_extent() )}
| _1 = IDENT _2 = LBRACKET _3 = fbindingseq _4 = RBRACKET
    {        ( PFGName (_1, _3), parse_extent() )}
| _1 = STAR _2 = IDENT
    {        ( PFGAny (_2), parse_extent() )}

negformatseq:
  _1 = gformat _2 = COMMA _3 = negformatseq
    { ( _1 :: _3 )}
| _1 = gformat
    { ( [_1] )}

gformatseq:
  _1 = negformatseq
    {        ( _1 )}
| 
    {        ( [] )}

fnesbindingseq:
  _1 = REPL _2 = INT _3 = EQUAL _4 = gformat _5 = SEMI _6 = fnesbindingseq
    {        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )}
| _1 = REPL _2 = INT _3 = EQUAL _4 = gformat
    {        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )}
| _1 = IDENT _2 = EQUAL _3 = gformat _4 = SEMI _5 = fnesbindingseq
    {        ( (_1, _3) :: _5 )}
| _1 = IDENT _2 = EQUAL _3 = gformat
    {        ( [(_1, _3)] )}

fbindingseq:
  _1 = fnesbindingseq
    {        ( _1 )}
| 
    {        ( [] )}

fnebindingseq:
  _1 = IDENT _2 = EQUAL _3 = gformat _4 = SEMI _5 = fnebindingseq
    {        ( (_1, _3) :: _5 )}
| _1 = IDENT _2 = EQUAL _3 = gformat
    {        ( [(_1, _3)] )}

foptbindingseq:
  _1 = SEMI _2 = fnebindingseq
    {        ( _2 )}
| 
    {        ( [] )}

gfactformat:
  _1 = IDENT _2 = COLON _3 = gformatseq _4 = optphase
    {    ( (_1,_3,_4) )}

optphase:
  _1 = PHASE _2 = INT
    {    ( _2 )}
| 
    {    ( -1 )}

optint:
  _1 = SLASH _2 = INT
    {    ( _2 )}
| 
    {    ( -1 )}

fact:
  _1 = IDENT _2 = COLON _3 = termseq
    { ( PSimpleFact(_1,_3), parse_extent() )}
| _1 = term _2 = DIFF _3 = term
    {        ( PSNeq(_1,_3), parse_extent() )}
| _1 = term _2 = EQUAL _3 = term
    {        ( PSEqual(_1, _3), parse_extent() )}

factand:
  _1 = fact _2 = WEDGE _3 = factand
    { ( _1 :: _3 )}
| _1 = fact
    { ( [_1] )}

clause:
  _1 = factand _2 = RED _3 = fact
    {        ( PClause(_1,_3) )}
| _1 = fact
    {        ( PClause([],_1) )}
| _1 = factand _2 = EQUIV _3 = fact
    {        ( PEquiv(_1,_3,true) )}
| _1 = factand _2 = EQUIVEQ _3 = fact
    {        ( PEquiv(_1,_3,false) )}

clausemayfail:
  _1 = clause _2 = WHERE _3 = varmayfail _4 = CANTEXT _5 = FAIL
    {        ( (_1,_3) )}
| _1 = clause
    {        ( (_1,[]) )}

clauses:
  _1 = clausemayfail _2 = SEMI _3 = clauses
    { ( _1 :: _3 )}
| _1 = clausemayfail _2 = DOT
    { ( [_1] )}

process:
  _1 = LPAREN _2 = process _3 = RPAREN
    { ( _2 )}
| _1 = IDENT
    { ( PLetDef _1 )}
| _1 = REPL _2 = process %prec REPL
    { ( PRepl _2 )}
| _1 = INT
    { ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )}
| _1 = NEW _2 = IDENT _3 = optprocess
    { ( PRestr(_2, _3) )}
| _1 = IF _2 = fact _3 = THEN _4 = process _5 = ELSE _6 = process
    { ( PTest(_2,_4,_6) )}
| _1 = IF _2 = fact _3 = THEN _4 = process
    { ( PTest(_2,_4,PNil) )}
| _1 = IN _2 = LPAREN _3 = term _4 = COMMA _5 = pattern _6 = RPAREN _7 = optprocess
    { ( PInput(_3,_5,_7) )}
| _1 = OUT _2 = LPAREN _3 = term _4 = COMMA _5 = term _6 = RPAREN _7 = optprocess
    { ( POutput(_3,_5,_7) )}
| _1 = LET _2 = pattern _3 = EQUAL _4 = term _5 = IN _6 = process
    { ( PLet(_2,_4,_6,PNil) )}
| _1 = LET _2 = pattern _3 = EQUAL _4 = term _5 = IN _6 = process _7 = ELSE _8 = process
    { ( PLet(_2,_4,_6,_8) )}
| _1 = LET _2 = neidentseq _3 = SUCHTHAT _4 = fact _5 = IN _6 = process
    {        ( PLetFilter(_2,_4,_6,PNil) )}
| _1 = LET _2 = neidentseq _3 = SUCHTHAT _4 = fact _5 = IN _6 = process _7 = ELSE _8 = process
    {        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_8) )}
| _1 = process _2 = BAR _3 = process
    { ( PPar(_1,_3) )}
| _1 = EVENT _2 = IDENT _3 = LPAREN _4 = termseq _5 = RPAREN _6 = optprocess
    {        ( PEvent(_2, _4, _6) )}
| _1 = PHASE _2 = INT _3 = optprocess
    {        ( if (_2) <= 0 then
	    input_error "Phases should be positive integers in processes" (parse_extent());
          PPhase(_2, _3) )}
| _1 = BARRIER _2 = INT _3 = optprocess
    {        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, None, _3) )}
| _1 = BARRIER _2 = INT _3 = LBRACKET _4 = IDENT _5 = RBRACKET _6 = optprocess
    {        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, Some _4, _6) )}
| _1 = LOCK _2 = LPAREN _3 = neidentseq _4 = RPAREN _5 = optprocess
    {        ( PLock(_3, _5) )}
| _1 = UNLOCK _2 = LPAREN _3 = neidentseq _4 = RPAREN _5 = optprocess
    {        ( PUnlock(_3, _5) )}
| _1 = READ _2 = neidentseq _3 = AS _4 = patternseq _5 = optprocess
    {        ( PReadAs((List.combine _2 _4), _5) )}
| _1 = neidentseq _2 = ASSIGN _3 = netermseq _4 = optprocess
    {        ( PAssign((List.combine _1 _3), _4) )}

optprocess:
  _1 = SEMI _2 = process
    {        ( _2 )}
| 
    {        ( PNil )}

pattern:
  _1 = IDENT
    {    ( PPatVar(_1) )}
| _1 = LPAREN _2 = patternseq _3 = RPAREN
    {    ( PPatTuple(_2) )}
| _1 = IDENT _2 = LPAREN _3 = patternseq _4 = RPAREN
    {    ( PPatFunApp(_1,_3) )}
| _1 = EQUAL _2 = term
    {    ( PPatEqual(_2) )}

patternseq:
  _1 = pattern _2 = COMMA _3 = patternseq
    {    ( _1 :: _3 )}
| _1 = pattern
    {    ( [_1] )}

%%
