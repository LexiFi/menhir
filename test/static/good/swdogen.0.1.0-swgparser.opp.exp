File "swdogen.0.1.0-swgparser.mly", line 41, characters 21-30:
Warning: the token T_AT_DESC is unused.
File "swdogen.0.1.0-swgparser.mly", line 22, characters 66-74:
Warning: the token T_DQUOTE is unused.
File "swdogen.0.1.0-swgparser.mly", line 22, characters 75-82:
Warning: the token T_QUOTE is unused.
%{
open Ast 

let makeTokenData () =
  let pos = symbol_start_pos ()
  in
      (TokenData(pos.Lexing.pos_fname, pos.Lexing.pos_lnum, (pos.Lexing.pos_cnum - pos.Lexing.pos_bol)))
%}
%start single_swg_source_file
%token EOF
%token T_ARRAY
%token T_ASG
%token T_AT
%token T_AT_API
%token T_AT_AUTH_APIKEY
%token T_AT_AUTH_OAUTH2
%token T_AT_BASEPATH
%token T_AT_CONSUMES
%token T_AT_DESC
%token T_AT_METHOD
%token T_AT_MODEL
%token T_AT_NOTES
%token T_AT_OAUTH_IMPLICIT
%token T_AT_OAUTH_REQUEST
%token T_AT_OAUTH_TOKEN
%token T_AT_OPERATION
%token T_AT_PARAM
%token T_AT_PRODUCES
%token T_AT_PROPERTY
%token T_AT_RESOURCE
%token T_AT_RESPONSE
%token T_AT_RETURN
%token T_AT_SUMMARY
%token T_BOOLEAN
%token T_BYTE
%token T_COLON
%token T_COMMA
%token T_DATE
%token T_DATETIME
%token T_DOUBLE
%token T_DQUOTE
%token T_FLOAT
%token <float> T_FLOAT_LITERAL
%token <string> T_IDENTIFIER
%token T_INT
%token <int> T_INT_LITERAL
%token T_LBRACE
%token T_LONG
%token T_LPAREN
%token T_METHOD_DELETE
%token T_METHOD_GET
%token T_METHOD_HEAD
%token T_METHOD_POST
%token T_METHOD_PUT
%token <string> T_MIME
%token T_MINUS
%token T_OPTION
%token T_PARAM_BODY
%token T_PARAM_FORM
%token T_PARAM_HEADER
%token T_PARAM_PATH
%token T_PARAM_QUERY
%token T_QMARK
%token T_QUOTE
%token T_RBRACE
%token T_RPAREN
%token <string> T_SCOPES
%token T_SET
%token T_STRING
%token <string> T_STRING_LITERAL
%token <string> T_URL
%token T_VBAR
%token T_VOID
%type <Ast.sourceFile> single_swg_source_file
%%

constant_literal:
  _1 = num_literal
    {                     ( NumLiteral (_1) )}
| _1 = T_STRING_LITERAL
    {                     ( String (makeTokenData(), _1) )}

desc:
  _1 = T_STRING_LITERAL
    {                     ( Desc (makeTokenData(), _1) )}

url:
  _1 = T_URL
    {                     ( URL (makeTokenData(), _1) )}

mime:
  _1 = T_MIME
    {                     ( MIME (makeTokenData(), _1) )}

identifier:
  _1 = T_IDENTIFIER
    {                     ( Identifier (makeTokenData(), _1) )}
| _1 = T_SCOPES
    {                     ( Identifier (makeTokenData(), _1) )}

num_literal:
  _1 = T_INT_LITERAL
    {                     ( Int   (makeTokenData(), _1) )}
| _1 = T_FLOAT_LITERAL
    {                     ( Float (makeTokenData(), _1) )}

rangable_type:
  _1 = T_INT
    {                     ( T_INT    (makeTokenData()) )}
| _1 = T_LONG
    {                     ( T_LONG   (makeTokenData()) )}
| _1 = T_FLOAT
    {                     ( T_FLOAT  (makeTokenData()) )}
| _1 = T_DOUBLE
    {                     ( T_DOUBLE (makeTokenData()) )}

primitive_type:
  _1 = rangable_type
    {                     ( RangableType (_1) )}
| _1 = T_STRING
    {                     ( T_STRING     (makeTokenData()) )}
| _1 = T_BYTE
    {                     ( T_BYTE       (makeTokenData()) )}
| _1 = T_BOOLEAN
    {                     ( T_BOOLEAN    (makeTokenData()) )}
| _1 = T_DATE
    {                     ( T_DATE       (makeTokenData()) )}
| _1 = T_DATETIME
    {                     ( T_DATETIME   (makeTokenData()) )}
| _1 = T_VOID
    {                     ( T_VOID       (makeTokenData()) )}

range_type:
  _1 = rangable_type _2 = T_LBRACE _3 = num_literal _4 = T_MINUS _5 = num_literal _6 = T_RBRACE
    {                                                                  ( RangeType (makeTokenData(), _1, _3, _5) )}

enum_type_list_postfix:
  
    {                                                                 ( [] )}
| _1 = T_VBAR _2 = constant_literal _3 = enum_type_list_postfix
    {                                                                 ( _2::_3 )}

enum_type_list:
  _1 = constant_literal _2 = enum_type_list_postfix
    {                                                                 ( _1::_2 )}

enum_type:
  _1 = primitive_type _2 = T_LPAREN _3 = enum_type_list _4 = T_RPAREN
    {                                                                 ( EnumType (makeTokenData(), _1, _3) )}

compound_type:
  _1 = range_type
    {                                                                 ( _1 )}
| _1 = enum_type
    {                                                                 ( _1 )}

argument:
  _1 = T_QMARK _2 = identifier _3 = T_ASG _4 = swg_type
    {                                                                 ( VarDef (makeTokenData(), _2, _4, Optional) )}
| _1 = identifier _2 = T_ASG _3 = swg_type
    {                                                                 ( VarDef (makeTokenData(), _1, _3, Required) )}

argument_list_postfix:
  
    {                                                                 ( [] )}
| _1 = T_COMMA _2 = argument _3 = argument_list_postfix
    {                                                                 ( _2::_3 )}

argument_list:
  _1 = argument _2 = argument_list_postfix
    {                                                                 ( _1::_2 )}

model_ref:
  _1 = identifier _2 = T_LPAREN _3 = T_RPAREN
    {                                                                 ( (makeTokenData(), _1, []) )}
| _1 = identifier _2 = T_LPAREN _3 = argument_list _4 = T_RPAREN
    {                                                                 ( (makeTokenData(), _1, _3) )}
| _1 = identifier
    {                                                                 ( (makeTokenData(), _1, []) )}

model_type:
  _1 = model_ref
    {                                                                 ( ModelRef (_1) )}

array_type:
  _1 = T_ARRAY _2 = T_LBRACE _3 = swg_type _4 = T_RBRACE
    {                                                                 ( SWGArray (makeTokenData(), _3) )}
| _1 = T_SET _2 = T_LBRACE _3 = swg_type _4 = T_RBRACE
    {                                                                 ( SWGSet   (makeTokenData(), _3) )}

swg_type:
  _1 = model_type
    {                                                                 ( ModelType     (_1) )}
| _1 = compound_type
    {                                                                 ( CompoundType  (_1) )}
| _1 = primitive_type
    {                                                                 ( PrimitiveType (_1) )}
| _1 = array_type
    {                                                                 ( ArrayType     (_1) )}

var_def:
  _1 = identifier _2 = T_COLON _3 = swg_type _4 = T_OPTION
    {                                                                 ( VarDef (makeTokenData(), _1, _3, Optional) )}
| _1 = identifier _2 = T_COLON _3 = swg_type
    {                                                                 ( VarDef (makeTokenData(), _1, _3, Required) )}

param_type:
  _1 = T_PARAM_FORM
    {                                                                 ( FORM   (makeTokenData()) )}
| _1 = T_PARAM_HEADER
    {                                                                 ( HEADER (makeTokenData()) )}
| _1 = T_PARAM_QUERY
    {                                                                 ( QUERY  (makeTokenData()) )}
| _1 = T_PARAM_BODY
    {                                                                 ( BODY   (makeTokenData()) )}
| _1 = T_PARAM_PATH
    {                                                                 ( PATH   (makeTokenData()) )}

http_method:
  _1 = T_METHOD_GET
    {                                                                 ( GET    (makeTokenData()) )}
| _1 = T_METHOD_POST
    {                                                                 ( POST   (makeTokenData()) )}
| _1 = T_METHOD_PUT
    {                                                                 ( PUT    (makeTokenData()) )}
| _1 = T_METHOD_DELETE
    {                                                                 ( DELETE (makeTokenData()) )}
| _1 = T_METHOD_HEAD
    {                                                                 ( HEAD   (makeTokenData()) )}

staus_code:
  _1 = T_INT_LITERAL
    {                                                                 ( StatusCode (makeTokenData(), _1) )}

mime_def:
  _1 = T_AT_PRODUCES _2 = mime
    {                                                                 ( Produces (makeTokenData(), _2) )}
| _1 = T_AT_CONSUMES _2 = mime
    {                                                                 ( Consumes (makeTokenData(), _2) )}

mime_def_list:
  
    {                                                                 ( [] )}
| _1 = mime_def _2 = mime_def_list
    {                                                                 ( _1 :: _2 )}

oauth_token_endpoint:
  _1 = T_AT_OAUTH_TOKEN _2 = identifier _3 = url
    {                                                                 ( OAuth2TokenEndPoint (makeTokenData(), _2, _3) )}

oauth_request_endpoint:
  _1 = T_AT_OAUTH_REQUEST _2 = identifier _3 = T_COLON _4 = identifier _5 = T_AT _6 = url
    {                                                                 ( OAuth2RequestEndPoint (makeTokenData(), _2, _4, _6) )}

oauth_authcode:
  _1 = oauth_request_endpoint _2 = oauth_token_endpoint
    {                                                                 ( OAuth2AuthCode (_1, _2) )}

oauth_implicit:
  _1 = T_AT_OAUTH_IMPLICIT _2 = identifier _3 = url
    {                                                                 ( OAuth2Implicit (makeTokenData(), _2, _3) )}

oauth_type:
  _1 = oauth_implicit
    {                                                                 ( _1 )}
| _1 = oauth_authcode
    {                                                                 ( _1 )}

oauth_scope_tail:
  
    {                                                                 ( [] )}
| _1 = T_COMMA _2 = identifier _3 = oauth_scope_tail
    {                                                                 ( _2 :: _3 )}

oauth_scope:
  _1 = identifier _2 = oauth_scope_tail
    {                                                                 ( OAuthScope (_1 :: _2) )}

authorization:
  _1 = T_AT_AUTH_APIKEY _2 = param_type _3 = identifier
    {                                                                 ( AuthApiKey (makeTokenData(), _2, _3) )}
| _1 = T_AT_AUTH_OAUTH2 _2 = T_SCOPES _3 = T_COLON _4 = oauth_scope _5 = oauth_type
    {                                                                 ( OAuth2 (makeTokenData(), _4, _5) )}

operation_property:
  _1 = T_AT_METHOD _2 = http_method
    {                                                                 ( Method      (makeTokenData(), _2) )}
| _1 = T_AT_RETURN _2 = swg_type
    {                                                                 ( Return      (makeTokenData(), _2) )}
| _1 = T_AT_SUMMARY _2 = desc
    {                                                                 ( Summary     (makeTokenData(), _2) )}
| _1 = T_AT_NOTES _2 = desc
    {                                                                 ( Notes       (makeTokenData(), _2) )}
| _1 = T_AT_RESPONSE _2 = staus_code _3 = desc
    {                                                                 ( ResponseMsg (makeTokenData(), _2, None, _3) )}
| _1 = T_AT_RESPONSE _2 = staus_code _3 = model_ref _4 = desc
    {                                                                 ( ResponseMsg (makeTokenData(), _2, (Some _3), _4) )}
| _1 = T_AT_PARAM _2 = var_def _3 = param_type _4 = desc
    {                                                                 ( ParamDef    (makeTokenData(), _2, _3, _4) )}
| _1 = mime_def
    {                                                                 ( LocalMIME   (_1) )}
| _1 = authorization
    {                                                                 ( LocalAuth   (_1) )}

operation_property_list:
  
    {                                                                 ( [] )}
| _1 = operation_property _2 = operation_property_list
    {                                                                 ( _1::_2 )}

operation_def:
  _1 = T_AT_OPERATION _2 = identifier _3 = operation_property_list
    {                                                                 ( (OperationDef (makeTokenData(), _2, _3)) )}

operation_def_list:
  
    {                                                                 ( [] )}
| _1 = operation_def _2 = operation_def_list
    {                                                                 ( _1::_2 )}

api_def:
  _1 = T_AT_API _2 = url _3 = operation_def_list
    {                                                                 ( (APIDef (makeTokenData(), _2, _3)) )}

api_def_list:
  
    {                                                                 ( [] )}
| _1 = api_def _2 = api_def_list
    {                                                                 ( _1::_2 )}

property_def_list:
  
    {                                                                 ( [] )}
| _1 = T_AT_PROPERTY _2 = var_def _3 = desc _4 = property_def_list
    {                                                                 ( (PropertyDef (makeTokenData(), _2, _3))::_4 )}

model_def:
  _1 = T_AT_MODEL _2 = identifier _3 = property_def_list
    {                                                                 ( (makeTokenData(), _2, _3) )}

tail_model_def_list:
  
    {                                                                 ( [] )}
| _1 = model_def _2 = tail_model_def_list
    {                                                                 ( _1::_2 )}

model_def_list:
  _1 = model_def _2 = tail_model_def_list
    {                                                                 ( _1::_2 )}

basePath:
  _1 = T_AT_BASEPATH _2 = url
    {                                                                 ( (BasePath (makeTokenData(), _2)) )}

resource_properties:
  _1 = basePath _2 = mime_def_list
    {                                                                 ( (ResourceProps(_1, None, _2)) )}
| _1 = basePath _2 = authorization _3 = mime_def_list
    {                                                                 ( (ResourceProps(_1, Some _2, _3)) )}

resource_def:
  _1 = T_AT_RESOURCE _2 = url _3 = desc _4 = resource_properties _5 = api_def_list
    {                                                                 ( (ResourceDef (makeTokenData(), _2, _3, _4, _5)) )}

tail_resource_def_list:
  
    {                                                                 ( [] )}
| _1 = resource_def _2 = tail_resource_def_list
    {                                                                 ( _1::_2 )}

resource_def_list:
  _1 = resource_def _2 = tail_resource_def_list
    {                                                                 ( _1::_2 )}

swg_doc_item_list:
  
    {                                                                 ( [] )}
| _1 = resource_def_list _2 = swg_doc_item_list
    {                                                                 ( (ResourceDefs (_1)) :: _2 )}
| _1 = model_def_list _2 = swg_doc_item_list
    {                                                                 ( (ModelDefs    (_1)) :: _2 )}

single_swg_source_file:
  _1 = swg_doc_item_list _2 = EOF
    {                                                                 ( SWGSourceFile(_1) )}
| _1 = EOF
    {                                                                 ( EmptyFile )}

%%
