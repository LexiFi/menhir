%start main
%token A
%token B
%token C
%type <unit> main
%%

option_foo_:
  
    {    ( None )}
| x = foo
    {    ( Some x )}

main:
  _1 = A _2 = B _3 = hop _4 = sugar
    {let _symbolstartpos = _startpos__1_ in
let _symbolstartofs = _symbolstartpos.Lexing.pos_cnum in
                    ( _symbolstartpos, _symbolstartofs )}

hop:
  _1 = nothing _2 = bar _3 = A _4 = B
    {let _symbolstartpos = _startpos__2_ in
                     ( _symbolstartpos )}

bar:
  _1 = option_foo_ _2 = B
    {let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
  _startpos__1_
else
  _startpos__2_ in
            ( _symbolstartpos )}

foo:
  _1 = C _2 = nothing
    {               ()}

nothing:
  
    {let _endpos = _endpos__0_ in
let _symbolstartpos = _endpos in
         ( _symbolstartpos )}

sugar:
  c = C
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
let _symbolstartpos = _startpos_c_ in
let _loc_c_ = (_startpos_c_, _endpos_c_) in
let _loc = (_startpos, _endpos) in
let _sloc = (_symbolstartpos, _endpos) in
             ( _loc, _loc_c_, _sloc )}

%%
